
MotorController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d7c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005f08  08005f08  00015f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f50  08005f50  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005f50  08005f50  00015f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f58  08005f58  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f58  08005f58  00015f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f5c  08005f5c  00015f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005f60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000010  08005f70  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08005f70  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016153  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000293c  00000000  00000000  00036193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  00038ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001280  00000000  00000000  00039e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000227c5  00000000  00000000  0003b0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f38  00000000  00000000  0005d88d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbb4d  00000000  00000000  000717c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014d312  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005348  00000000  00000000  0014d368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08005ef0 	.word	0x08005ef0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	08005ef0 	.word	0x08005ef0

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96e 	b.w	80004c0 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468c      	mov	ip, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	f040 8083 	bne.w	8000312 <__udivmoddi4+0x116>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d947      	bls.n	80002a2 <__udivmoddi4+0xa6>
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	b142      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000218:	f1c2 0020 	rsb	r0, r2, #32
 800021c:	fa24 f000 	lsr.w	r0, r4, r0
 8000220:	4091      	lsls	r1, r2
 8000222:	4097      	lsls	r7, r2
 8000224:	ea40 0c01 	orr.w	ip, r0, r1
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbbc f6f8 	udiv	r6, ip, r8
 8000234:	fa1f fe87 	uxth.w	lr, r7
 8000238:	fb08 c116 	mls	r1, r8, r6, ip
 800023c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000240:	fb06 f10e 	mul.w	r1, r6, lr
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 8119 	bcs.w	8000484 <__udivmoddi4+0x288>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8116 	bls.w	8000484 <__udivmoddi4+0x288>
 8000258:	3e02      	subs	r6, #2
 800025a:	443b      	add	r3, r7
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000270:	45a6      	cmp	lr, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	193c      	adds	r4, r7, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8105 	bcs.w	8000488 <__udivmoddi4+0x28c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8102 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000284:	3802      	subs	r0, #2
 8000286:	443c      	add	r4, r7
 8000288:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028c:	eba4 040e 	sub.w	r4, r4, lr
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	b902      	cbnz	r2, 80002a6 <__udivmoddi4+0xaa>
 80002a4:	deff      	udf	#255	; 0xff
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d150      	bne.n	8000350 <__udivmoddi4+0x154>
 80002ae:	1bcb      	subs	r3, r1, r7
 80002b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b4:	fa1f f887 	uxth.w	r8, r7
 80002b8:	2601      	movs	r6, #1
 80002ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80002be:	0c21      	lsrs	r1, r4, #16
 80002c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c8:	fb08 f30c 	mul.w	r3, r8, ip
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0xe4>
 80002d0:	1879      	adds	r1, r7, r1
 80002d2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0xe2>
 80002d8:	428b      	cmp	r3, r1
 80002da:	f200 80e9 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 80002de:	4684      	mov	ip, r0
 80002e0:	1ac9      	subs	r1, r1, r3
 80002e2:	b2a3      	uxth	r3, r4
 80002e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f0:	fb08 f800 	mul.w	r8, r8, r0
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0x10c>
 80002f8:	193c      	adds	r4, r7, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x10a>
 8000300:	45a0      	cmp	r8, r4
 8000302:	f200 80d9 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 8000306:	4618      	mov	r0, r3
 8000308:	eba4 0408 	sub.w	r4, r4, r8
 800030c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000310:	e7bf      	b.n	8000292 <__udivmoddi4+0x96>
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0x12e>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80b1 	beq.w	800047e <__udivmoddi4+0x282>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x1cc>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0x140>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80b8 	bhi.w	80004ac <__udivmoddi4+0x2b0>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0103 	sbc.w	r1, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	468c      	mov	ip, r1
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0a8      	beq.n	800029c <__udivmoddi4+0xa0>
 800034a:	e9c5 4c00 	strd	r4, ip, [r5]
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0xa0>
 8000350:	f1c2 0320 	rsb	r3, r2, #32
 8000354:	fa20 f603 	lsr.w	r6, r0, r3
 8000358:	4097      	lsls	r7, r2
 800035a:	fa01 f002 	lsl.w	r0, r1, r2
 800035e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000362:	40d9      	lsrs	r1, r3
 8000364:	4330      	orrs	r0, r6
 8000366:	0c03      	lsrs	r3, r0, #16
 8000368:	fbb1 f6fe 	udiv	r6, r1, lr
 800036c:	fa1f f887 	uxth.w	r8, r7
 8000370:	fb0e 1116 	mls	r1, lr, r6, r1
 8000374:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000378:	fb06 f108 	mul.w	r1, r6, r8
 800037c:	4299      	cmp	r1, r3
 800037e:	fa04 f402 	lsl.w	r4, r4, r2
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x19c>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f106 3cff 	add.w	ip, r6, #4294967295
 800038a:	f080 808d 	bcs.w	80004a8 <__udivmoddi4+0x2ac>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 808a 	bls.w	80004a8 <__udivmoddi4+0x2ac>
 8000394:	3e02      	subs	r6, #2
 8000396:	443b      	add	r3, r7
 8000398:	1a5b      	subs	r3, r3, r1
 800039a:	b281      	uxth	r1, r0
 800039c:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a8:	fb00 f308 	mul.w	r3, r0, r8
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d907      	bls.n	80003c0 <__udivmoddi4+0x1c4>
 80003b0:	1879      	adds	r1, r7, r1
 80003b2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b6:	d273      	bcs.n	80004a0 <__udivmoddi4+0x2a4>
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d971      	bls.n	80004a0 <__udivmoddi4+0x2a4>
 80003bc:	3802      	subs	r0, #2
 80003be:	4439      	add	r1, r7
 80003c0:	1acb      	subs	r3, r1, r3
 80003c2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c6:	e778      	b.n	80002ba <__udivmoddi4+0xbe>
 80003c8:	f1c6 0c20 	rsb	ip, r6, #32
 80003cc:	fa03 f406 	lsl.w	r4, r3, r6
 80003d0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d4:	431c      	orrs	r4, r3
 80003d6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e6:	431f      	orrs	r7, r3
 80003e8:	0c3b      	lsrs	r3, r7, #16
 80003ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ee:	fa1f f884 	uxth.w	r8, r4
 80003f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fa:	fb09 fa08 	mul.w	sl, r9, r8
 80003fe:	458a      	cmp	sl, r1
 8000400:	fa02 f206 	lsl.w	r2, r2, r6
 8000404:	fa00 f306 	lsl.w	r3, r0, r6
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x220>
 800040a:	1861      	adds	r1, r4, r1
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	d248      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000412:	458a      	cmp	sl, r1
 8000414:	d946      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 8000416:	f1a9 0902 	sub.w	r9, r9, #2
 800041a:	4421      	add	r1, r4
 800041c:	eba1 010a 	sub.w	r1, r1, sl
 8000420:	b2bf      	uxth	r7, r7
 8000422:	fbb1 f0fe 	udiv	r0, r1, lr
 8000426:	fb0e 1110 	mls	r1, lr, r0, r1
 800042a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042e:	fb00 f808 	mul.w	r8, r0, r8
 8000432:	45b8      	cmp	r8, r7
 8000434:	d907      	bls.n	8000446 <__udivmoddi4+0x24a>
 8000436:	19e7      	adds	r7, r4, r7
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d22e      	bcs.n	800049c <__udivmoddi4+0x2a0>
 800043e:	45b8      	cmp	r8, r7
 8000440:	d92c      	bls.n	800049c <__udivmoddi4+0x2a0>
 8000442:	3802      	subs	r0, #2
 8000444:	4427      	add	r7, r4
 8000446:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044a:	eba7 0708 	sub.w	r7, r7, r8
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	454f      	cmp	r7, r9
 8000454:	46c6      	mov	lr, r8
 8000456:	4649      	mov	r1, r9
 8000458:	d31a      	bcc.n	8000490 <__udivmoddi4+0x294>
 800045a:	d017      	beq.n	800048c <__udivmoddi4+0x290>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x27a>
 800045e:	ebb3 020e 	subs.w	r2, r3, lr
 8000462:	eb67 0701 	sbc.w	r7, r7, r1
 8000466:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046a:	40f2      	lsrs	r2, r6
 800046c:	ea4c 0202 	orr.w	r2, ip, r2
 8000470:	40f7      	lsrs	r7, r6
 8000472:	e9c5 2700 	strd	r2, r7, [r5]
 8000476:	2600      	movs	r6, #0
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	462e      	mov	r6, r5
 8000480:	4628      	mov	r0, r5
 8000482:	e70b      	b.n	800029c <__udivmoddi4+0xa0>
 8000484:	4606      	mov	r6, r0
 8000486:	e6e9      	b.n	800025c <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fd      	b.n	8000288 <__udivmoddi4+0x8c>
 800048c:	4543      	cmp	r3, r8
 800048e:	d2e5      	bcs.n	800045c <__udivmoddi4+0x260>
 8000490:	ebb8 0e02 	subs.w	lr, r8, r2
 8000494:	eb69 0104 	sbc.w	r1, r9, r4
 8000498:	3801      	subs	r0, #1
 800049a:	e7df      	b.n	800045c <__udivmoddi4+0x260>
 800049c:	4608      	mov	r0, r1
 800049e:	e7d2      	b.n	8000446 <__udivmoddi4+0x24a>
 80004a0:	4660      	mov	r0, ip
 80004a2:	e78d      	b.n	80003c0 <__udivmoddi4+0x1c4>
 80004a4:	4681      	mov	r9, r0
 80004a6:	e7b9      	b.n	800041c <__udivmoddi4+0x220>
 80004a8:	4666      	mov	r6, ip
 80004aa:	e775      	b.n	8000398 <__udivmoddi4+0x19c>
 80004ac:	4630      	mov	r0, r6
 80004ae:	e74a      	b.n	8000346 <__udivmoddi4+0x14a>
 80004b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b4:	4439      	add	r1, r7
 80004b6:	e713      	b.n	80002e0 <__udivmoddi4+0xe4>
 80004b8:	3802      	subs	r0, #2
 80004ba:	443c      	add	r4, r7
 80004bc:	e724      	b.n	8000308 <__udivmoddi4+0x10c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <motor_init>:

TIM_HandleTypeDef *htim;
uint32_t right_channel = 0;
uint32_t left_channel = 0;

void motor_init(TIM_HandleTypeDef *htimer, uint32_t r_channel, uint32_t l_channel) {
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	607a      	str	r2, [r7, #4]
	htim = htimer;
 80004d0:	4a07      	ldr	r2, [pc, #28]	; (80004f0 <motor_init+0x2c>)
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	6013      	str	r3, [r2, #0]
	right_channel = r_channel;
 80004d6:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <motor_init+0x30>)
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	6013      	str	r3, [r2, #0]
	left_channel = l_channel;
 80004dc:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <motor_init+0x34>)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	6013      	str	r3, [r2, #0]
}
 80004e2:	bf00      	nop
 80004e4:	3714      	adds	r7, #20
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	2000003c 	.word	0x2000003c
 80004f4:	2000002c 	.word	0x2000002c
 80004f8:	20000030 	.word	0x20000030

080004fc <motor_setPWM>:

void motor_setPWM(char wheel, float dutycycle) {
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	ed87 0a00 	vstr	s0, [r7]
 8000508:	71fb      	strb	r3, [r7, #7]
	if (dutycycle > 1.0f)
 800050a:	edd7 7a00 	vldr	s15, [r7]
 800050e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000512:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800051a:	dd02      	ble.n	8000522 <motor_setPWM+0x26>
		dutycycle = 1.0f;
 800051c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000520:	603b      	str	r3, [r7, #0]
	if (wheel == 'R') {
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	2b52      	cmp	r3, #82	; 0x52
 8000526:	d114      	bne.n	8000552 <motor_setPWM+0x56>
		htim->Instance->CCR1 = (uint32_t) ((htim->Instance->ARR) * dutycycle);
 8000528:	4b18      	ldr	r3, [pc, #96]	; (800058c <motor_setPWM+0x90>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000530:	ee07 3a90 	vmov	s15, r3
 8000534:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000538:	edd7 7a00 	vldr	s15, [r7]
 800053c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000540:	4b12      	ldr	r3, [pc, #72]	; (800058c <motor_setPWM+0x90>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800054a:	ee17 2a90 	vmov	r2, s15
 800054e:	635a      	str	r2, [r3, #52]	; 0x34
	} else if (wheel == 'L') {
		htim->Instance->CCR2 = (uint32_t) ((htim->Instance->ARR) * dutycycle);
	}
}
 8000550:	e016      	b.n	8000580 <motor_setPWM+0x84>
	} else if (wheel == 'L') {
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	2b4c      	cmp	r3, #76	; 0x4c
 8000556:	d113      	bne.n	8000580 <motor_setPWM+0x84>
		htim->Instance->CCR2 = (uint32_t) ((htim->Instance->ARR) * dutycycle);
 8000558:	4b0c      	ldr	r3, [pc, #48]	; (800058c <motor_setPWM+0x90>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000560:	ee07 3a90 	vmov	s15, r3
 8000564:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000568:	edd7 7a00 	vldr	s15, [r7]
 800056c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <motor_setPWM+0x90>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800057a:	ee17 2a90 	vmov	r2, s15
 800057e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	2000003c 	.word	0x2000003c

08000590 <motor_start>:

void motor_start(char wheel) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
	motor_setPWM(wheel, 0.0);
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80005dc <motor_start+0x4c>
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff ffab 	bl	80004fc <motor_setPWM>
	if (wheel == 'R') {
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	2b52      	cmp	r3, #82	; 0x52
 80005aa:	d108      	bne.n	80005be <motor_start+0x2e>
		HAL_TIM_PWM_Start(htim, right_channel);
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <motor_start+0x50>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a0c      	ldr	r2, [pc, #48]	; (80005e4 <motor_start+0x54>)
 80005b2:	6812      	ldr	r2, [r2, #0]
 80005b4:	4611      	mov	r1, r2
 80005b6:	4618      	mov	r0, r3
 80005b8:	f003 fd30 	bl	800401c <HAL_TIM_PWM_Start>
	} else if (wheel == 'L') {
		HAL_TIM_PWM_Start(htim, left_channel);
	}
}
 80005bc:	e00a      	b.n	80005d4 <motor_start+0x44>
	} else if (wheel == 'L') {
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	2b4c      	cmp	r3, #76	; 0x4c
 80005c2:	d107      	bne.n	80005d4 <motor_start+0x44>
		HAL_TIM_PWM_Start(htim, left_channel);
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <motor_start+0x50>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <motor_start+0x58>)
 80005ca:	6812      	ldr	r2, [r2, #0]
 80005cc:	4611      	mov	r1, r2
 80005ce:	4618      	mov	r0, r3
 80005d0:	f003 fd24 	bl	800401c <HAL_TIM_PWM_Start>
}
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	00000000 	.word	0x00000000
 80005e0:	2000003c 	.word	0x2000003c
 80005e4:	2000002c 	.word	0x2000002c
 80005e8:	20000030 	.word	0x20000030

080005ec <motor_setDirection>:
		HAL_GPIO_WritePin(DIR_L2_GPIO_Port, DIR_L2_Pin, GPIO_PIN_SET);
	}

}

void motor_setDirection(char wheel, uint8_t dir) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	460a      	mov	r2, r1
 80005f6:	71fb      	strb	r3, [r7, #7]
 80005f8:	4613      	mov	r3, r2
 80005fa:	71bb      	strb	r3, [r7, #6]
	if (wheel == 'R') {
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	2b52      	cmp	r3, #82	; 0x52
 8000600:	d11a      	bne.n	8000638 <motor_setDirection+0x4c>
		if (dir == 1) {
 8000602:	79bb      	ldrb	r3, [r7, #6]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d109      	bne.n	800061c <motor_setDirection+0x30>
			HAL_GPIO_WritePin(DIR_R1_GPIO_Port, DIR_R1_Pin, GPIO_PIN_SET);
 8000608:	2201      	movs	r2, #1
 800060a:	2140      	movs	r1, #64	; 0x40
 800060c:	481d      	ldr	r0, [pc, #116]	; (8000684 <motor_setDirection+0x98>)
 800060e:	f002 fa55 	bl	8002abc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIR_R2_GPIO_Port, DIR_R2_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2180      	movs	r1, #128	; 0x80
 8000616:	481b      	ldr	r0, [pc, #108]	; (8000684 <motor_setDirection+0x98>)
 8000618:	f002 fa50 	bl	8002abc <HAL_GPIO_WritePin>
		}
		if (dir == 0) {
 800061c:	79bb      	ldrb	r3, [r7, #6]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d12b      	bne.n	800067a <motor_setDirection+0x8e>
			HAL_GPIO_WritePin(DIR_R2_GPIO_Port, DIR_R2_Pin, GPIO_PIN_SET);
 8000622:	2201      	movs	r2, #1
 8000624:	2180      	movs	r1, #128	; 0x80
 8000626:	4817      	ldr	r0, [pc, #92]	; (8000684 <motor_setDirection+0x98>)
 8000628:	f002 fa48 	bl	8002abc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIR_R1_GPIO_Port, DIR_R1_Pin, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	2140      	movs	r1, #64	; 0x40
 8000630:	4814      	ldr	r0, [pc, #80]	; (8000684 <motor_setDirection+0x98>)
 8000632:	f002 fa43 	bl	8002abc <HAL_GPIO_WritePin>
		if (dir == 0) {
			HAL_GPIO_WritePin(DIR_L2_GPIO_Port, DIR_L2_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(DIR_L1_GPIO_Port, DIR_L1_Pin, GPIO_PIN_RESET);
		}
	}
}
 8000636:	e020      	b.n	800067a <motor_setDirection+0x8e>
	} else if (wheel == 'L') {
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	2b4c      	cmp	r3, #76	; 0x4c
 800063c:	d11d      	bne.n	800067a <motor_setDirection+0x8e>
		if (dir == 1) {
 800063e:	79bb      	ldrb	r3, [r7, #6]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d10b      	bne.n	800065c <motor_setDirection+0x70>
			HAL_GPIO_WritePin(DIR_L1_GPIO_Port, DIR_L1_Pin, GPIO_PIN_SET);
 8000644:	2201      	movs	r2, #1
 8000646:	2140      	movs	r1, #64	; 0x40
 8000648:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800064c:	f002 fa36 	bl	8002abc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIR_L2_GPIO_Port, DIR_L2_Pin, GPIO_PIN_RESET);
 8000650:	2200      	movs	r2, #0
 8000652:	2180      	movs	r1, #128	; 0x80
 8000654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000658:	f002 fa30 	bl	8002abc <HAL_GPIO_WritePin>
		if (dir == 0) {
 800065c:	79bb      	ldrb	r3, [r7, #6]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d10b      	bne.n	800067a <motor_setDirection+0x8e>
			HAL_GPIO_WritePin(DIR_L2_GPIO_Port, DIR_L2_Pin, GPIO_PIN_SET);
 8000662:	2201      	movs	r2, #1
 8000664:	2180      	movs	r1, #128	; 0x80
 8000666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066a:	f002 fa27 	bl	8002abc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIR_L1_GPIO_Port, DIR_L1_Pin, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	2140      	movs	r1, #64	; 0x40
 8000672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000676:	f002 fa21 	bl	8002abc <HAL_GPIO_WritePin>
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	48000400 	.word	0x48000400

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068c:	f000 fd43 	bl	8001116 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000690:	f000 f83a 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000694:	f000 fa6a 	bl	8000b6c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000698:	f000 f92e 	bl	80008f8 <MX_TIM1_Init>
  MX_TIM6_Init();
 800069c:	f000 f9c8 	bl	8000a30 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 80006a0:	f000 fa34 	bl	8000b0c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80006a4:	f000 f8b4 	bl	8000810 <MX_ADC1_Init>
  MX_TIM7_Init();
 80006a8:	f000 f9f8 	bl	8000a9c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim6);
 80006ac:	4810      	ldr	r0, [pc, #64]	; (80006f0 <main+0x68>)
 80006ae:	f003 fc09 	bl	8003ec4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 80006b2:	4810      	ldr	r0, [pc, #64]	; (80006f4 <main+0x6c>)
 80006b4:	f003 fc06 	bl	8003ec4 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart2, &message, 1);
 80006b8:	2201      	movs	r2, #1
 80006ba:	490f      	ldr	r1, [pc, #60]	; (80006f8 <main+0x70>)
 80006bc:	480f      	ldr	r0, [pc, #60]	; (80006fc <main+0x74>)
 80006be:	f004 fc3f 	bl	8004f40 <HAL_UART_Receive_IT>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80006c2:	217f      	movs	r1, #127	; 0x7f
 80006c4:	480e      	ldr	r0, [pc, #56]	; (8000700 <main+0x78>)
 80006c6:	f001 fe9f 	bl	8002408 <HAL_ADCEx_Calibration_Start>


	motor_init(&htim1, RIGHT_MOTOR_CHANNEL, LEFT_MOTOR_CHANNEL);
 80006ca:	2204      	movs	r2, #4
 80006cc:	2100      	movs	r1, #0
 80006ce:	480d      	ldr	r0, [pc, #52]	; (8000704 <main+0x7c>)
 80006d0:	f7ff fef8 	bl	80004c4 <motor_init>
	motor_start('R');
 80006d4:	2052      	movs	r0, #82	; 0x52
 80006d6:	f7ff ff5b 	bl	8000590 <motor_start>
	motor_setDirection('R', 0);
 80006da:	2100      	movs	r1, #0
 80006dc:	2052      	movs	r0, #82	; 0x52
 80006de:	f7ff ff85 	bl	80005ec <motor_setDirection>
	motor_setPWM('R', 0.5);
 80006e2:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80006e6:	2052      	movs	r0, #82	; 0x52
 80006e8:	f7ff ff08 	bl	80004fc <motor_setPWM>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80006ec:	e7fe      	b.n	80006ec <main+0x64>
 80006ee:	bf00      	nop
 80006f0:	200000a4 	.word	0x200000a4
 80006f4:	200001c0 	.word	0x200001c0
 80006f8:	20000034 	.word	0x20000034
 80006fc:	2000013c 	.word	0x2000013c
 8000700:	20000040 	.word	0x20000040
 8000704:	200000f0 	.word	0x200000f0

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b0ac      	sub	sp, #176	; 0xb0
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000712:	2244      	movs	r2, #68	; 0x44
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f005 fbe2 	bl	8005ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2254      	movs	r2, #84	; 0x54
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f005 fbd4 	bl	8005ee0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000738:	2310      	movs	r3, #16
 800073a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800073c:	2301      	movs	r3, #1
 800073e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000748:	2360      	movs	r3, #96	; 0x60
 800074a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074e:	2302      	movs	r3, #2
 8000750:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000754:	2301      	movs	r3, #1
 8000756:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 800075a:	2301      	movs	r3, #1
 800075c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000760:	2328      	movs	r3, #40	; 0x28
 8000762:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000766:	2307      	movs	r3, #7
 8000768:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800076c:	2302      	movs	r3, #2
 800076e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000772:	2302      	movs	r3, #2
 8000774:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000778:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800077c:	4618      	mov	r0, r3
 800077e:	f002 fa3d 	bl	8002bfc <HAL_RCC_OscConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000788:	f000 faa6 	bl	8000cd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078c:	230f      	movs	r3, #15
 800078e:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000790:	2303      	movs	r3, #3
 8000792:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007a4:	2104      	movs	r1, #4
 80007a6:	4618      	mov	r0, r3
 80007a8:	f002 fe48 	bl	800343c <HAL_RCC_ClockConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007b2:	f000 fa91 	bl	8000cd8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80007b6:	f244 0302 	movw	r3, #16386	; 0x4002
 80007ba:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007bc:	2300      	movs	r3, #0
 80007be:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80007c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80007c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80007c6:	2301      	movs	r3, #1
 80007c8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80007ca:	2301      	movs	r3, #1
 80007cc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80007ce:	2310      	movs	r3, #16
 80007d0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80007d2:	2307      	movs	r3, #7
 80007d4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80007d6:	2302      	movs	r3, #2
 80007d8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 80007da:	2308      	movs	r3, #8
 80007dc:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80007de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80007e2:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	4618      	mov	r0, r3
 80007e8:	f003 f82e 	bl	8003848 <HAL_RCCEx_PeriphCLKConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80007f2:	f000 fa71 	bl	8000cd8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007fa:	f002 f9a9 	bl	8002b50 <HAL_PWREx_ControlVoltageScaling>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x100>
  {
    Error_Handler();
 8000804:	f000 fa68 	bl	8000cd8 <Error_Handler>
  }
}
 8000808:	bf00      	nop
 800080a:	37b0      	adds	r7, #176	; 0xb0
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000816:	f107 0308 	add.w	r3, r7, #8
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]
 8000826:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000828:	4b2f      	ldr	r3, [pc, #188]	; (80008e8 <MX_ADC1_Init+0xd8>)
 800082a:	4a30      	ldr	r2, [pc, #192]	; (80008ec <MX_ADC1_Init+0xdc>)
 800082c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800082e:	4b2e      	ldr	r3, [pc, #184]	; (80008e8 <MX_ADC1_Init+0xd8>)
 8000830:	2200      	movs	r2, #0
 8000832:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000834:	4b2c      	ldr	r3, [pc, #176]	; (80008e8 <MX_ADC1_Init+0xd8>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800083a:	4b2b      	ldr	r3, [pc, #172]	; (80008e8 <MX_ADC1_Init+0xd8>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000840:	4b29      	ldr	r3, [pc, #164]	; (80008e8 <MX_ADC1_Init+0xd8>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000846:	4b28      	ldr	r3, [pc, #160]	; (80008e8 <MX_ADC1_Init+0xd8>)
 8000848:	2204      	movs	r2, #4
 800084a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800084c:	4b26      	ldr	r3, [pc, #152]	; (80008e8 <MX_ADC1_Init+0xd8>)
 800084e:	2200      	movs	r2, #0
 8000850:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000852:	4b25      	ldr	r3, [pc, #148]	; (80008e8 <MX_ADC1_Init+0xd8>)
 8000854:	2200      	movs	r2, #0
 8000856:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000858:	4b23      	ldr	r3, [pc, #140]	; (80008e8 <MX_ADC1_Init+0xd8>)
 800085a:	2201      	movs	r2, #1
 800085c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800085e:	4b22      	ldr	r3, [pc, #136]	; (80008e8 <MX_ADC1_Init+0xd8>)
 8000860:	2200      	movs	r2, #0
 8000862:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000866:	4b20      	ldr	r3, [pc, #128]	; (80008e8 <MX_ADC1_Init+0xd8>)
 8000868:	2200      	movs	r2, #0
 800086a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800086c:	4b1e      	ldr	r3, [pc, #120]	; (80008e8 <MX_ADC1_Init+0xd8>)
 800086e:	2200      	movs	r2, #0
 8000870:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000872:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <MX_ADC1_Init+0xd8>)
 8000874:	2200      	movs	r2, #0
 8000876:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800087a:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <MX_ADC1_Init+0xd8>)
 800087c:	2200      	movs	r2, #0
 800087e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000880:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <MX_ADC1_Init+0xd8>)
 8000882:	2200      	movs	r2, #0
 8000884:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000888:	4817      	ldr	r0, [pc, #92]	; (80008e8 <MX_ADC1_Init+0xd8>)
 800088a:	f000 fea7 	bl	80015dc <HAL_ADC_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000894:	f000 fa20 	bl	8000cd8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000898:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <MX_ADC1_Init+0xe0>)
 800089a:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800089c:	2306      	movs	r3, #6
 800089e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008a0:	2300      	movs	r3, #0
 80008a2:	613b      	str	r3, [r7, #16]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008a4:	237f      	movs	r3, #127	; 0x7f
 80008a6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008a8:	2304      	movs	r3, #4
 80008aa:	61bb      	str	r3, [r7, #24]
  sConfig.Offset = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b0:	f107 0308 	add.w	r3, r7, #8
 80008b4:	4619      	mov	r1, r3
 80008b6:	480c      	ldr	r0, [pc, #48]	; (80008e8 <MX_ADC1_Init+0xd8>)
 80008b8:	f001 f8d8 	bl	8001a6c <HAL_ADC_ConfigChannel>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80008c2:	f000 fa09 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  __HAL_RCC_ADC_CLK_ENABLE();
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <MX_ADC1_Init+0xe4>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <MX_ADC1_Init+0xe4>)
 80008cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <MX_ADC1_Init+0xe4>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END ADC1_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	3720      	adds	r7, #32
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000040 	.word	0x20000040
 80008ec:	50040000 	.word	0x50040000
 80008f0:	21800100 	.word	0x21800100
 80008f4:	40021000 	.word	0x40021000

080008f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b096      	sub	sp, #88	; 0x58
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800090a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]
 800091a:	615a      	str	r2, [r3, #20]
 800091c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	222c      	movs	r2, #44	; 0x2c
 8000922:	2100      	movs	r1, #0
 8000924:	4618      	mov	r0, r3
 8000926:	f005 fadb 	bl	8005ee0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800092a:	4b3f      	ldr	r3, [pc, #252]	; (8000a28 <MX_TIM1_Init+0x130>)
 800092c:	4a3f      	ldr	r2, [pc, #252]	; (8000a2c <MX_TIM1_Init+0x134>)
 800092e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000930:	4b3d      	ldr	r3, [pc, #244]	; (8000a28 <MX_TIM1_Init+0x130>)
 8000932:	2200      	movs	r2, #0
 8000934:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000936:	4b3c      	ldr	r3, [pc, #240]	; (8000a28 <MX_TIM1_Init+0x130>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800093c:	4b3a      	ldr	r3, [pc, #232]	; (8000a28 <MX_TIM1_Init+0x130>)
 800093e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000942:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000944:	4b38      	ldr	r3, [pc, #224]	; (8000a28 <MX_TIM1_Init+0x130>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800094a:	4b37      	ldr	r3, [pc, #220]	; (8000a28 <MX_TIM1_Init+0x130>)
 800094c:	2200      	movs	r2, #0
 800094e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000950:	4b35      	ldr	r3, [pc, #212]	; (8000a28 <MX_TIM1_Init+0x130>)
 8000952:	2280      	movs	r2, #128	; 0x80
 8000954:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000956:	4834      	ldr	r0, [pc, #208]	; (8000a28 <MX_TIM1_Init+0x130>)
 8000958:	f003 fb08 	bl	8003f6c <HAL_TIM_PWM_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000962:	f000 f9b9 	bl	8000cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000966:	2300      	movs	r3, #0
 8000968:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800096a:	2300      	movs	r3, #0
 800096c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096e:	2300      	movs	r3, #0
 8000970:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000972:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000976:	4619      	mov	r1, r3
 8000978:	482b      	ldr	r0, [pc, #172]	; (8000a28 <MX_TIM1_Init+0x130>)
 800097a:	f004 f997 	bl	8004cac <HAL_TIMEx_MasterConfigSynchronization>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000984:	f000 f9a8 	bl	8000cd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000988:	2360      	movs	r3, #96	; 0x60
 800098a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000990:	2300      	movs	r3, #0
 8000992:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000994:	2300      	movs	r3, #0
 8000996:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000998:	2300      	movs	r3, #0
 800099a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800099c:	2300      	movs	r3, #0
 800099e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009a0:	2300      	movs	r3, #0
 80009a2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009a8:	2200      	movs	r2, #0
 80009aa:	4619      	mov	r1, r3
 80009ac:	481e      	ldr	r0, [pc, #120]	; (8000a28 <MX_TIM1_Init+0x130>)
 80009ae:	f003 fd33 	bl	8004418 <HAL_TIM_PWM_ConfigChannel>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80009b8:	f000 f98e 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009c0:	2204      	movs	r2, #4
 80009c2:	4619      	mov	r1, r3
 80009c4:	4818      	ldr	r0, [pc, #96]	; (8000a28 <MX_TIM1_Init+0x130>)
 80009c6:	f003 fd27 	bl	8004418 <HAL_TIM_PWM_ConfigChannel>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80009d0:	f000 f982 	bl	8000cd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	4619      	mov	r1, r3
 8000a08:	4807      	ldr	r0, [pc, #28]	; (8000a28 <MX_TIM1_Init+0x130>)
 8000a0a:	f004 f9b5 	bl	8004d78 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8000a14:	f000 f960 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a18:	4803      	ldr	r0, [pc, #12]	; (8000a28 <MX_TIM1_Init+0x130>)
 8000a1a:	f000 fa27 	bl	8000e6c <HAL_TIM_MspPostInit>

}
 8000a1e:	bf00      	nop
 8000a20:	3758      	adds	r7, #88	; 0x58
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	200000f0 	.word	0x200000f0
 8000a2c:	40012c00 	.word	0x40012c00

08000a30 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_TIM6_Init+0x64>)
 8000a42:	4a15      	ldr	r2, [pc, #84]	; (8000a98 <MX_TIM6_Init+0x68>)
 8000a44:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8-1;
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_TIM6_Init+0x64>)
 8000a48:	2207      	movs	r2, #7
 8000a4a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_TIM6_Init+0x64>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50000-1;
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <MX_TIM6_Init+0x64>)
 8000a54:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000a58:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_TIM6_Init+0x64>)
 8000a5c:	2280      	movs	r2, #128	; 0x80
 8000a5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a60:	480c      	ldr	r0, [pc, #48]	; (8000a94 <MX_TIM6_Init+0x64>)
 8000a62:	f003 f9d7 	bl	8003e14 <HAL_TIM_Base_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000a6c:	f000 f934 	bl	8000cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a70:	2300      	movs	r3, #0
 8000a72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_TIM6_Init+0x64>)
 8000a7e:	f004 f915 	bl	8004cac <HAL_TIMEx_MasterConfigSynchronization>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000a88:	f000 f926 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200000a4 	.word	0x200000a4
 8000a98:	40001000 	.word	0x40001000

08000a9c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000aac:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <MX_TIM7_Init+0x68>)
 8000aae:	4a16      	ldr	r2, [pc, #88]	; (8000b08 <MX_TIM7_Init+0x6c>)
 8000ab0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 65535;
 8000ab2:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_TIM7_Init+0x68>)
 8000ab4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ab8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aba:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <MX_TIM7_Init+0x68>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 12207-1;
 8000ac0:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <MX_TIM7_Init+0x68>)
 8000ac2:	f642 72ae 	movw	r2, #12206	; 0x2fae
 8000ac6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_TIM7_Init+0x68>)
 8000aca:	2280      	movs	r2, #128	; 0x80
 8000acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000ace:	480d      	ldr	r0, [pc, #52]	; (8000b04 <MX_TIM7_Init+0x68>)
 8000ad0:	f003 f9a0 	bl	8003e14 <HAL_TIM_Base_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000ada:	f000 f8fd 	bl	8000cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4806      	ldr	r0, [pc, #24]	; (8000b04 <MX_TIM7_Init+0x68>)
 8000aec:	f004 f8de 	bl	8004cac <HAL_TIMEx_MasterConfigSynchronization>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8000af6:	f000 f8ef 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200001c0 	.word	0x200001c0
 8000b08:	40001400 	.word	0x40001400

08000b0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b12:	4a15      	ldr	r2, [pc, #84]	; (8000b68 <MX_USART2_UART_Init+0x5c>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b16:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <MX_USART2_UART_Init+0x58>)
 8000b50:	f004 f9a8 	bl	8004ea4 <HAL_UART_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b5a:	f000 f8bd 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	2000013c 	.word	0x2000013c
 8000b68:	40004400 	.word	0x40004400

08000b6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b72:	f107 030c 	add.w	r3, r7, #12
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
 8000b80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	4b3e      	ldr	r3, [pc, #248]	; (8000c7c <MX_GPIO_Init+0x110>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	4a3d      	ldr	r2, [pc, #244]	; (8000c7c <MX_GPIO_Init+0x110>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8e:	4b3b      	ldr	r3, [pc, #236]	; (8000c7c <MX_GPIO_Init+0x110>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	4b38      	ldr	r3, [pc, #224]	; (8000c7c <MX_GPIO_Init+0x110>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	4a37      	ldr	r2, [pc, #220]	; (8000c7c <MX_GPIO_Init+0x110>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba6:	4b35      	ldr	r3, [pc, #212]	; (8000c7c <MX_GPIO_Init+0x110>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_L1_Pin|DIR_L2_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	21c0      	movs	r1, #192	; 0xc0
 8000bb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bba:	f001 ff7f 	bl	8002abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_R1_Pin|DIR_R2_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	21c0      	movs	r1, #192	; 0xc0
 8000bc2:	482f      	ldr	r0, [pc, #188]	; (8000c80 <MX_GPIO_Init+0x114>)
 8000bc4:	f001 ff7a 	bl	8002abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Motor_Left_clock_Pin */
  GPIO_InitStruct.Pin = Motor_Left_clock_Pin;
 8000bc8:	2320      	movs	r3, #32
 8000bca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bcc:	4b2d      	ldr	r3, [pc, #180]	; (8000c84 <MX_GPIO_Init+0x118>)
 8000bce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Motor_Left_clock_GPIO_Port, &GPIO_InitStruct);
 8000bd4:	f107 030c 	add.w	r3, r7, #12
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bde:	f001 fe03 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_L1_Pin DIR_L2_Pin */
  GPIO_InitStruct.Pin = DIR_L1_Pin|DIR_L2_Pin;
 8000be2:	23c0      	movs	r3, #192	; 0xc0
 8000be4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be6:	2301      	movs	r3, #1
 8000be8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	f107 030c 	add.w	r3, r7, #12
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfc:	f001 fdf4 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : motor_Right_clock_Pin Motor_left_counterclock_Pin Motor_counterclock_right_Pin */
  GPIO_InitStruct.Pin = motor_Right_clock_Pin|Motor_left_counterclock_Pin|Motor_counterclock_right_Pin;
 8000c00:	2313      	movs	r3, #19
 8000c02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c04:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <MX_GPIO_Init+0x118>)
 8000c06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	4619      	mov	r1, r3
 8000c12:	481b      	ldr	r0, [pc, #108]	; (8000c80 <MX_GPIO_Init+0x114>)
 8000c14:	f001 fde8 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_R1_Pin DIR_R2_Pin */
  GPIO_InitStruct.Pin = DIR_R1_Pin|DIR_R2_Pin;
 8000c18:	23c0      	movs	r3, #192	; 0xc0
 8000c1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4814      	ldr	r0, [pc, #80]	; (8000c80 <MX_GPIO_Init+0x114>)
 8000c30:	f001 fdda 	bl	80027e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2100      	movs	r1, #0
 8000c38:	2006      	movs	r0, #6
 8000c3a:	f001 fd20 	bl	800267e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c3e:	2006      	movs	r0, #6
 8000c40:	f001 fd39 	bl	80026b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2100      	movs	r1, #0
 8000c48:	2007      	movs	r0, #7
 8000c4a:	f001 fd18 	bl	800267e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000c4e:	2007      	movs	r0, #7
 8000c50:	f001 fd31 	bl	80026b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2100      	movs	r1, #0
 8000c58:	200a      	movs	r0, #10
 8000c5a:	f001 fd10 	bl	800267e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000c5e:	200a      	movs	r0, #10
 8000c60:	f001 fd29 	bl	80026b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	2017      	movs	r0, #23
 8000c6a:	f001 fd08 	bl	800267e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c6e:	2017      	movs	r0, #23
 8000c70:	f001 fd21 	bl	80026b6 <HAL_NVIC_EnableIRQ>

}
 8000c74:	bf00      	nop
 8000c76:	3720      	adds	r7, #32
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	48000400 	.word	0x48000400
 8000c84:	10110000 	.word	0x10110000

08000c88 <UpdateBatteryVoltage>:
	// Calculate current error to use for next iteration
	lastErrorR = calculateError(refR, angularVelR);
	lastErrorL = calculateError(refL, angularVelL);
}

void UpdateBatteryVoltage() {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1); // Start ADC conversion
 8000c8e:	480f      	ldr	r0, [pc, #60]	; (8000ccc <UpdateBatteryVoltage+0x44>)
 8000c90:	f000 fdec 	bl	800186c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY); // Wait for conversion to complete
 8000c94:	f04f 31ff 	mov.w	r1, #4294967295
 8000c98:	480c      	ldr	r0, [pc, #48]	; (8000ccc <UpdateBatteryVoltage+0x44>)
 8000c9a:	f000 fe4a 	bl	8001932 <HAL_ADC_PollForConversion>
	uint32_t adc_val = HAL_ADC_GetValue(&hadc1); // Get the ADC value
 8000c9e:	480b      	ldr	r0, [pc, #44]	; (8000ccc <UpdateBatteryVoltage+0x44>)
 8000ca0:	f000 fed6 	bl	8001a50 <HAL_ADC_GetValue>
 8000ca4:	6078      	str	r0, [r7, #4]
	batteryVoltage = adc_val*voltageMeasScaling;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	ee07 3a90 	vmov	s15, r3
 8000cac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <UpdateBatteryVoltage+0x48>)
 8000cb2:	edd3 7a00 	vldr	s15, [r3]
 8000cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <UpdateBatteryVoltage+0x4c>)
 8000cbc:	edc3 7a00 	vstr	s15, [r3]
	uint8_t h = 2;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	70fb      	strb	r3, [r7, #3]
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000040 	.word	0x20000040
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	20000038 	.word	0x20000038

08000cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cdc:	b672      	cpsid	i
}
 8000cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ce0:	e7fe      	b.n	8000ce0 <Error_Handler+0x8>
	...

08000ce4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cea:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <HAL_MspInit+0x44>)
 8000cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cee:	4a0e      	ldr	r2, [pc, #56]	; (8000d28 <HAL_MspInit+0x44>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6613      	str	r3, [r2, #96]	; 0x60
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <HAL_MspInit+0x44>)
 8000cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <HAL_MspInit+0x44>)
 8000d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d06:	4a08      	ldr	r2, [pc, #32]	; (8000d28 <HAL_MspInit+0x44>)
 8000d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_MspInit+0x44>)
 8000d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	40021000 	.word	0x40021000

08000d2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	; 0x28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a15      	ldr	r2, [pc, #84]	; (8000da0 <HAL_ADC_MspInit+0x74>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d124      	bne.n	8000d98 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <HAL_ADC_MspInit+0x78>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d52:	4a14      	ldr	r2, [pc, #80]	; (8000da4 <HAL_ADC_MspInit+0x78>)
 8000d54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d5a:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HAL_ADC_MspInit+0x78>)
 8000d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <HAL_ADC_MspInit+0x78>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6a:	4a0e      	ldr	r2, [pc, #56]	; (8000da4 <HAL_ADC_MspInit+0x78>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d72:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <HAL_ADC_MspInit+0x78>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d7e:	2308      	movs	r3, #8
 8000d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d82:	230b      	movs	r3, #11
 8000d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d94:	f001 fd28 	bl	80027e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d98:	bf00      	nop
 8000d9a:	3728      	adds	r7, #40	; 0x28
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	50040000 	.word	0x50040000
 8000da4:	40021000 	.word	0x40021000

08000da8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <HAL_TIM_PWM_MspInit+0x38>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d10b      	bne.n	8000dd2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dbe:	4a09      	ldr	r2, [pc, #36]	; (8000de4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000dc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dc4:	6613      	str	r3, [r2, #96]	; 0x60
 8000dc6:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000dd2:	bf00      	nop
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	40012c00 	.word	0x40012c00
 8000de4:	40021000 	.word	0x40021000

08000de8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a1a      	ldr	r2, [pc, #104]	; (8000e60 <HAL_TIM_Base_MspInit+0x78>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d114      	bne.n	8000e24 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <HAL_TIM_Base_MspInit+0x7c>)
 8000dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfe:	4a19      	ldr	r2, [pc, #100]	; (8000e64 <HAL_TIM_Base_MspInit+0x7c>)
 8000e00:	f043 0310 	orr.w	r3, r3, #16
 8000e04:	6593      	str	r3, [r2, #88]	; 0x58
 8000e06:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <HAL_TIM_Base_MspInit+0x7c>)
 8000e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0a:	f003 0310 	and.w	r3, r3, #16
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	2036      	movs	r0, #54	; 0x36
 8000e18:	f001 fc31 	bl	800267e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e1c:	2036      	movs	r0, #54	; 0x36
 8000e1e:	f001 fc4a 	bl	80026b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000e22:	e018      	b.n	8000e56 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0f      	ldr	r2, [pc, #60]	; (8000e68 <HAL_TIM_Base_MspInit+0x80>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d113      	bne.n	8000e56 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000e2e:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <HAL_TIM_Base_MspInit+0x7c>)
 8000e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e32:	4a0c      	ldr	r2, [pc, #48]	; (8000e64 <HAL_TIM_Base_MspInit+0x7c>)
 8000e34:	f043 0320 	orr.w	r3, r3, #32
 8000e38:	6593      	str	r3, [r2, #88]	; 0x58
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <HAL_TIM_Base_MspInit+0x7c>)
 8000e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e3e:	f003 0320 	and.w	r3, r3, #32
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2037      	movs	r0, #55	; 0x37
 8000e4c:	f001 fc17 	bl	800267e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000e50:	2037      	movs	r0, #55	; 0x37
 8000e52:	f001 fc30 	bl	80026b6 <HAL_NVIC_EnableIRQ>
}
 8000e56:	bf00      	nop
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40001000 	.word	0x40001000
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40001400 	.word	0x40001400

08000e6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 030c 	add.w	r3, r7, #12
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a12      	ldr	r2, [pc, #72]	; (8000ed4 <HAL_TIM_MspPostInit+0x68>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d11d      	bne.n	8000eca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_TIM_MspPostInit+0x6c>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e92:	4a11      	ldr	r2, [pc, #68]	; (8000ed8 <HAL_TIM_MspPostInit+0x6c>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <HAL_TIM_MspPostInit+0x6c>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_R_Pin|PWM_L_Pin;
 8000ea6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eaa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec6:	f001 fc8f 	bl	80027e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000eca:	bf00      	nop
 8000ecc:	3720      	adds	r7, #32
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40012c00 	.word	0x40012c00
 8000ed8:	40021000 	.word	0x40021000

08000edc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	; 0x28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a24      	ldr	r2, [pc, #144]	; (8000f8c <HAL_UART_MspInit+0xb0>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d142      	bne.n	8000f84 <HAL_UART_MspInit+0xa8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000efe:	4b24      	ldr	r3, [pc, #144]	; (8000f90 <HAL_UART_MspInit+0xb4>)
 8000f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f02:	4a23      	ldr	r2, [pc, #140]	; (8000f90 <HAL_UART_MspInit+0xb4>)
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f08:	6593      	str	r3, [r2, #88]	; 0x58
 8000f0a:	4b21      	ldr	r3, [pc, #132]	; (8000f90 <HAL_UART_MspInit+0xb4>)
 8000f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	4b1e      	ldr	r3, [pc, #120]	; (8000f90 <HAL_UART_MspInit+0xb4>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	4a1d      	ldr	r2, [pc, #116]	; (8000f90 <HAL_UART_MspInit+0xb4>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f22:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <HAL_UART_MspInit+0xb4>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f2e:	2304      	movs	r3, #4
 8000f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f3e:	2307      	movs	r3, #7
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4c:	f001 fc4c 	bl	80027e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000f62:	2303      	movs	r3, #3
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f70:	f001 fc3a 	bl	80027e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2100      	movs	r1, #0
 8000f78:	2026      	movs	r0, #38	; 0x26
 8000f7a:	f001 fb80 	bl	800267e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f7e:	2026      	movs	r0, #38	; 0x26
 8000f80:	f001 fb99 	bl	80026b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f84:	bf00      	nop
 8000f86:	3728      	adds	r7, #40	; 0x28
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40004400 	.word	0x40004400
 8000f90:	40021000 	.word	0x40021000

08000f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <NMI_Handler+0x4>

08000f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <HardFault_Handler+0x4>

08000fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <MemManage_Handler+0x4>

08000fa6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <BusFault_Handler+0x4>

08000fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <UsageFault_Handler+0x4>

08000fb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe0:	f000 f8ee 	bl	80011c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000fec:	2001      	movs	r0, #1
 8000fee:	f001 fd7d 	bl	8002aec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000ffa:	2002      	movs	r0, #2
 8000ffc:	f001 fd76 	bl	8002aec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001008:	2010      	movs	r0, #16
 800100a:	f001 fd6f 	bl	8002aec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}

08001012 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001016:	2020      	movs	r0, #32
 8001018:	f001 fd68 	bl	8002aec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}

08001020 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <USART2_IRQHandler+0x10>)
 8001026:	f003 ffcf 	bl	8004fc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	2000013c 	.word	0x2000013c

08001034 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <TIM6_DAC_IRQHandler+0x10>)
 800103a:	f003 f8cd 	bl	80041d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200000a4 	.word	0x200000a4

08001048 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800104c:	4803      	ldr	r0, [pc, #12]	; (800105c <TIM7_IRQHandler+0x14>)
 800104e:	f003 f8c3 	bl	80041d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  UpdateBatteryVoltage();
 8001052:	f7ff fe19 	bl	8000c88 <UpdateBatteryVoltage>

  /* USER CODE END TIM7_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200001c0 	.word	0x200001c0

08001060 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001064:	4b15      	ldr	r3, [pc, #84]	; (80010bc <SystemInit+0x5c>)
 8001066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800106a:	4a14      	ldr	r2, [pc, #80]	; (80010bc <SystemInit+0x5c>)
 800106c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001070:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <SystemInit+0x60>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a11      	ldr	r2, [pc, #68]	; (80010c0 <SystemInit+0x60>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <SystemInit+0x60>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <SystemInit+0x60>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a0d      	ldr	r2, [pc, #52]	; (80010c0 <SystemInit+0x60>)
 800108c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001090:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001094:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <SystemInit+0x60>)
 8001098:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800109c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <SystemInit+0x60>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a07      	ldr	r2, [pc, #28]	; (80010c0 <SystemInit+0x60>)
 80010a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80010aa:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <SystemInit+0x60>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000ed00 	.word	0xe000ed00
 80010c0:	40021000 	.word	0x40021000

080010c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010c8:	f7ff ffca 	bl	8001060 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010ce:	e003      	b.n	80010d8 <LoopCopyDataInit>

080010d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010d0:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010d6:	3104      	adds	r1, #4

080010d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010d8:	480a      	ldr	r0, [pc, #40]	; (8001104 <LoopForever+0xa>)
	ldr	r3, =_edata
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <LoopForever+0xe>)
	adds	r2, r0, r1
 80010dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010e0:	d3f6      	bcc.n	80010d0 <CopyDataInit>
	ldr	r2, =_sbss
 80010e2:	4a0a      	ldr	r2, [pc, #40]	; (800110c <LoopForever+0x12>)
	b	LoopFillZerobss
 80010e4:	e002      	b.n	80010ec <LoopFillZerobss>

080010e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010e8:	f842 3b04 	str.w	r3, [r2], #4

080010ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <LoopForever+0x16>)
	cmp	r2, r3
 80010ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010f0:	d3f9      	bcc.n	80010e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010f2:	f004 fed1 	bl	8005e98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010f6:	f7ff fac7 	bl	8000688 <main>

080010fa <LoopForever>:

LoopForever:
    b LoopForever
 80010fa:	e7fe      	b.n	80010fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010fc:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001100:	08005f60 	.word	0x08005f60
	ldr	r0, =_sdata
 8001104:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001108:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 800110c:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001110:	20000210 	.word	0x20000210

08001114 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001114:	e7fe      	b.n	8001114 <ADC1_IRQHandler>

08001116 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800111c:	2300      	movs	r3, #0
 800111e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001120:	2003      	movs	r0, #3
 8001122:	f001 faa1 	bl	8002668 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001126:	2000      	movs	r0, #0
 8001128:	f000 f80e 	bl	8001148 <HAL_InitTick>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d002      	beq.n	8001138 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	71fb      	strb	r3, [r7, #7]
 8001136:	e001      	b.n	800113c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001138:	f7ff fdd4 	bl	8000ce4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800113c:	79fb      	ldrb	r3, [r7, #7]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001150:	2300      	movs	r3, #0
 8001152:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001154:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <HAL_InitTick+0x6c>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d023      	beq.n	80011a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800115c:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <HAL_InitTick+0x70>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <HAL_InitTick+0x6c>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	4619      	mov	r1, r3
 8001166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116a:	fbb3 f3f1 	udiv	r3, r3, r1
 800116e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001172:	4618      	mov	r0, r3
 8001174:	f001 faad 	bl	80026d2 <HAL_SYSTICK_Config>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d10f      	bne.n	800119e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b0f      	cmp	r3, #15
 8001182:	d809      	bhi.n	8001198 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001184:	2200      	movs	r2, #0
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	f04f 30ff 	mov.w	r0, #4294967295
 800118c:	f001 fa77 	bl	800267e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001190:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <HAL_InitTick+0x74>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e007      	b.n	80011a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	73fb      	strb	r3, [r7, #15]
 800119c:	e004      	b.n	80011a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	73fb      	strb	r3, [r7, #15]
 80011a2:	e001      	b.n	80011a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	2000000c 	.word	0x2000000c
 80011b8:	20000004 	.word	0x20000004
 80011bc:	20000008 	.word	0x20000008

080011c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_IncTick+0x20>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_IncTick+0x24>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <HAL_IncTick+0x24>)
 80011d2:	6013      	str	r3, [r2, #0]
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	2000000c 	.word	0x2000000c
 80011e4:	2000020c 	.word	0x2000020c

080011e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return uwTick;
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <HAL_GetTick+0x14>)
 80011ee:	681b      	ldr	r3, [r3, #0]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	2000020c 	.word	0x2000020c

08001200 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	431a      	orrs	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	609a      	str	r2, [r3, #8]
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
 800122e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	431a      	orrs	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	609a      	str	r2, [r3, #8]
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800125c:	4618      	mov	r0, r3
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001268:	b480      	push	{r7}
 800126a:	b087      	sub	sp, #28
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
 8001274:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	3360      	adds	r3, #96	; 0x60
 800127a:	461a      	mov	r2, r3
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <LL_ADC_SetOffset+0x44>)
 800128a:	4013      	ands	r3, r2
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	430a      	orrs	r2, r1
 8001296:	4313      	orrs	r3, r2
 8001298:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80012a0:	bf00      	nop
 80012a2:	371c      	adds	r7, #28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	03fff000 	.word	0x03fff000

080012b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3360      	adds	r3, #96	; 0x60
 80012be:	461a      	mov	r2, r3
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80012dc:	b480      	push	{r7}
 80012de:	b087      	sub	sp, #28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	3360      	adds	r3, #96	; 0x60
 80012ec:	461a      	mov	r2, r3
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	4413      	add	r3, r2
 80012f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	431a      	orrs	r2, r3
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001306:	bf00      	nop
 8001308:	371c      	adds	r7, #28
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001338:	b480      	push	{r7}
 800133a:	b087      	sub	sp, #28
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	3330      	adds	r3, #48	; 0x30
 8001348:	461a      	mov	r2, r3
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	0a1b      	lsrs	r3, r3, #8
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	f003 030c 	and.w	r3, r3, #12
 8001354:	4413      	add	r3, r2
 8001356:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	f003 031f 	and.w	r3, r3, #31
 8001362:	211f      	movs	r1, #31
 8001364:	fa01 f303 	lsl.w	r3, r1, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	401a      	ands	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	0e9b      	lsrs	r3, r3, #26
 8001370:	f003 011f 	and.w	r1, r3, #31
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	f003 031f 	and.w	r3, r3, #31
 800137a:	fa01 f303 	lsl.w	r3, r1, r3
 800137e:	431a      	orrs	r2, r3
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001384:	bf00      	nop
 8001386:	371c      	adds	r7, #28
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001390:	b480      	push	{r7}
 8001392:	b087      	sub	sp, #28
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3314      	adds	r3, #20
 80013a0:	461a      	mov	r2, r3
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	0e5b      	lsrs	r3, r3, #25
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	4413      	add	r3, r2
 80013ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	0d1b      	lsrs	r3, r3, #20
 80013b8:	f003 031f 	and.w	r3, r3, #31
 80013bc:	2107      	movs	r1, #7
 80013be:	fa01 f303 	lsl.w	r3, r1, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	401a      	ands	r2, r3
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	0d1b      	lsrs	r3, r3, #20
 80013ca:	f003 031f 	and.w	r3, r3, #31
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	fa01 f303 	lsl.w	r3, r1, r3
 80013d4:	431a      	orrs	r2, r3
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013da:	bf00      	nop
 80013dc:	371c      	adds	r7, #28
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
	...

080013e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001400:	43db      	mvns	r3, r3
 8001402:	401a      	ands	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f003 0318 	and.w	r3, r3, #24
 800140a:	4908      	ldr	r1, [pc, #32]	; (800142c <LL_ADC_SetChannelSingleDiff+0x44>)
 800140c:	40d9      	lsrs	r1, r3
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	400b      	ands	r3, r1
 8001412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001416:	431a      	orrs	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800141e:	bf00      	nop
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	0007ffff 	.word	0x0007ffff

08001430 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001440:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	6093      	str	r3, [r2, #8]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001468:	d101      	bne.n	800146e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800148c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001490:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80014b8:	d101      	bne.n	80014be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014ba:	2301      	movs	r3, #1
 80014bc:	e000      	b.n	80014c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014e0:	f043 0201 	orr.w	r2, r3, #1
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001504:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001508:	f043 0202 	orr.w	r2, r3, #2
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	2b01      	cmp	r3, #1
 800152e:	d101      	bne.n	8001534 <LL_ADC_IsEnabled+0x18>
 8001530:	2301      	movs	r3, #1
 8001532:	e000      	b.n	8001536 <LL_ADC_IsEnabled+0x1a>
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b02      	cmp	r3, #2
 8001554:	d101      	bne.n	800155a <LL_ADC_IsDisableOngoing+0x18>
 8001556:	2301      	movs	r3, #1
 8001558:	e000      	b.n	800155c <LL_ADC_IsDisableOngoing+0x1a>
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001578:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800157c:	f043 0204 	orr.w	r2, r3, #4
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	2b04      	cmp	r3, #4
 80015a2:	d101      	bne.n	80015a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80015a4:	2301      	movs	r3, #1
 80015a6:	e000      	b.n	80015aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 0308 	and.w	r3, r3, #8
 80015c6:	2b08      	cmp	r3, #8
 80015c8:	d101      	bne.n	80015ce <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015ca:	2301      	movs	r3, #1
 80015cc:	e000      	b.n	80015d0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e12c      	b.n	8001850 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001600:	2b00      	cmp	r3, #0
 8001602:	d109      	bne.n	8001618 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff fb91 	bl	8000d2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ff19 	bl	8001454 <LL_ADC_IsDeepPowerDownEnabled>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d004      	beq.n	8001632 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff feff 	bl	8001430 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff ff34 	bl	80014a4 <LL_ADC_IsInternalRegulatorEnabled>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d115      	bne.n	800166e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff ff18 	bl	800147c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800164c:	4b82      	ldr	r3, [pc, #520]	; (8001858 <HAL_ADC_Init+0x27c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	099b      	lsrs	r3, r3, #6
 8001652:	4a82      	ldr	r2, [pc, #520]	; (800185c <HAL_ADC_Init+0x280>)
 8001654:	fba2 2303 	umull	r2, r3, r2, r3
 8001658:	099b      	lsrs	r3, r3, #6
 800165a:	3301      	adds	r3, #1
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001660:	e002      	b.n	8001668 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	3b01      	subs	r3, #1
 8001666:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f9      	bne.n	8001662 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff ff16 	bl	80014a4 <LL_ADC_IsInternalRegulatorEnabled>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10d      	bne.n	800169a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001682:	f043 0210 	orr.w	r2, r3, #16
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168e:	f043 0201 	orr.w	r2, r3, #1
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff ff76 	bl	8001590 <LL_ADC_REG_IsConversionOngoing>
 80016a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016aa:	f003 0310 	and.w	r3, r3, #16
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f040 80c5 	bne.w	800183e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f040 80c1 	bne.w	800183e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016c4:	f043 0202 	orr.w	r2, r3, #2
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff23 	bl	800151c <LL_ADC_IsEnabled>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d10b      	bne.n	80016f4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016dc:	4860      	ldr	r0, [pc, #384]	; (8001860 <HAL_ADC_Init+0x284>)
 80016de:	f7ff ff1d 	bl	800151c <LL_ADC_IsEnabled>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d105      	bne.n	80016f4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	4619      	mov	r1, r3
 80016ee:	485d      	ldr	r0, [pc, #372]	; (8001864 <HAL_ADC_Init+0x288>)
 80016f0:	f7ff fd86 	bl	8001200 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	7e5b      	ldrb	r3, [r3, #25]
 80016f8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016fe:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001704:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800170a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001712:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001714:	4313      	orrs	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d106      	bne.n	8001730 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	3b01      	subs	r3, #1
 8001728:	045b      	lsls	r3, r3, #17
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4313      	orrs	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001734:	2b00      	cmp	r3, #0
 8001736:	d009      	beq.n	800174c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001744:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4313      	orrs	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	68da      	ldr	r2, [r3, #12]
 8001752:	4b45      	ldr	r3, [pc, #276]	; (8001868 <HAL_ADC_Init+0x28c>)
 8001754:	4013      	ands	r3, r2
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6812      	ldr	r2, [r2, #0]
 800175a:	69b9      	ldr	r1, [r7, #24]
 800175c:	430b      	orrs	r3, r1
 800175e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff13 	bl	8001590 <LL_ADC_REG_IsConversionOngoing>
 800176a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff20 	bl	80015b6 <LL_ADC_INJ_IsConversionOngoing>
 8001776:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d13d      	bne.n	80017fa <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d13a      	bne.n	80017fa <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001788:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001790:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017a0:	f023 0302 	bic.w	r3, r3, #2
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	6812      	ldr	r2, [r2, #0]
 80017a8:	69b9      	ldr	r1, [r7, #24]
 80017aa:	430b      	orrs	r3, r1
 80017ac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d118      	bne.n	80017ea <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80017c2:	f023 0304 	bic.w	r3, r3, #4
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017ce:	4311      	orrs	r1, r2
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80017d4:	4311      	orrs	r1, r2
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017da:	430a      	orrs	r2, r1
 80017dc:	431a      	orrs	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f042 0201 	orr.w	r2, r2, #1
 80017e6:	611a      	str	r2, [r3, #16]
 80017e8:	e007      	b.n	80017fa <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	691a      	ldr	r2, [r3, #16]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 0201 	bic.w	r2, r2, #1
 80017f8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d10c      	bne.n	800181c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001808:	f023 010f 	bic.w	r1, r3, #15
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69db      	ldr	r3, [r3, #28]
 8001810:	1e5a      	subs	r2, r3, #1
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	631a      	str	r2, [r3, #48]	; 0x30
 800181a:	e007      	b.n	800182c <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f022 020f 	bic.w	r2, r2, #15
 800182a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001830:	f023 0303 	bic.w	r3, r3, #3
 8001834:	f043 0201 	orr.w	r2, r3, #1
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	655a      	str	r2, [r3, #84]	; 0x54
 800183c:	e007      	b.n	800184e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001842:	f043 0210 	orr.w	r2, r3, #16
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800184e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3720      	adds	r7, #32
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000004 	.word	0x20000004
 800185c:	053e2d63 	.word	0x053e2d63
 8001860:	50040000 	.word	0x50040000
 8001864:	50040300 	.word	0x50040300
 8001868:	fff0c007 	.word	0xfff0c007

0800186c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fe89 	bl	8001590 <LL_ADC_REG_IsConversionOngoing>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d14f      	bne.n	8001924 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800188a:	2b01      	cmp	r3, #1
 800188c:	d101      	bne.n	8001892 <HAL_ADC_Start+0x26>
 800188e:	2302      	movs	r3, #2
 8001890:	e04b      	b.n	800192a <HAL_ADC_Start+0xbe>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 fcc6 	bl	800222c <ADC_Enable>
 80018a0:	4603      	mov	r3, r0
 80018a2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d137      	bne.n	800191a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018b2:	f023 0301 	bic.w	r3, r3, #1
 80018b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018ca:	d106      	bne.n	80018da <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d0:	f023 0206 	bic.w	r2, r3, #6
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	659a      	str	r2, [r3, #88]	; 0x58
 80018d8:	e002      	b.n	80018e0 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	221c      	movs	r2, #28
 80018e6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d007      	beq.n	800190e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001902:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001906:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fe28 	bl	8001568 <LL_ADC_REG_StartConversion>
 8001918:	e006      	b.n	8001928 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001922:	e001      	b.n	8001928 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001924:	2302      	movs	r3, #2
 8001926:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001928:	7bfb      	ldrb	r3, [r7, #15]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b086      	sub	sp, #24
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	2b08      	cmp	r3, #8
 8001942:	d102      	bne.n	800194a <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001944:	2308      	movs	r3, #8
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	e010      	b.n	800196c <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b00      	cmp	r3, #0
 8001956:	d007      	beq.n	8001968 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800195c:	f043 0220 	orr.w	r2, r3, #32
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e06f      	b.n	8001a48 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001968:	2304      	movs	r3, #4
 800196a:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800196c:	f7ff fc3c 	bl	80011e8 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001972:	e021      	b.n	80019b8 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800197a:	d01d      	beq.n	80019b8 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800197c:	f7ff fc34 	bl	80011e8 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d302      	bcc.n	8001992 <HAL_ADC_PollForConversion+0x60>
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d112      	bne.n	80019b8 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	4013      	ands	r3, r2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d10b      	bne.n	80019b8 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a4:	f043 0204 	orr.w	r2, r3, #4
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e047      	b.n	8001a48 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	4013      	ands	r3, r2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d0d6      	beq.n	8001974 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fc9b 	bl	8001312 <LL_ADC_REG_IsTriggerSourceSWStart>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d01c      	beq.n	8001a1c <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	7e5b      	ldrb	r3, [r3, #25]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d118      	bne.n	8001a1c <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0308 	and.w	r3, r3, #8
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d111      	bne.n	8001a1c <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d105      	bne.n	8001a1c <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a14:	f043 0201 	orr.w	r2, r3, #1
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	2b08      	cmp	r3, #8
 8001a28:	d104      	bne.n	8001a34 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2208      	movs	r2, #8
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	e008      	b.n	8001a46 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d103      	bne.n	8001a46 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	220c      	movs	r2, #12
 8001a44:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
	...

08001a6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b0b6      	sub	sp, #216	; 0xd8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d101      	bne.n	8001a8e <HAL_ADC_ConfigChannel+0x22>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e3b9      	b.n	8002202 <HAL_ADC_ConfigChannel+0x796>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fd78 	bl	8001590 <LL_ADC_REG_IsConversionOngoing>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f040 839e 	bne.w	80021e4 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b05      	cmp	r3, #5
 8001aae:	d824      	bhi.n	8001afa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	3b02      	subs	r3, #2
 8001ab6:	2b03      	cmp	r3, #3
 8001ab8:	d81b      	bhi.n	8001af2 <HAL_ADC_ConfigChannel+0x86>
 8001aba:	a201      	add	r2, pc, #4	; (adr r2, 8001ac0 <HAL_ADC_ConfigChannel+0x54>)
 8001abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac0:	08001ad1 	.word	0x08001ad1
 8001ac4:	08001ad9 	.word	0x08001ad9
 8001ac8:	08001ae1 	.word	0x08001ae1
 8001acc:	08001ae9 	.word	0x08001ae9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	220c      	movs	r2, #12
 8001ad4:	605a      	str	r2, [r3, #4]
          break;
 8001ad6:	e011      	b.n	8001afc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	2212      	movs	r2, #18
 8001adc:	605a      	str	r2, [r3, #4]
          break;
 8001ade:	e00d      	b.n	8001afc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	2218      	movs	r2, #24
 8001ae4:	605a      	str	r2, [r3, #4]
          break;
 8001ae6:	e009      	b.n	8001afc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aee:	605a      	str	r2, [r3, #4]
          break;
 8001af0:	e004      	b.n	8001afc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	2206      	movs	r2, #6
 8001af6:	605a      	str	r2, [r3, #4]
          break;
 8001af8:	e000      	b.n	8001afc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001afa:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6818      	ldr	r0, [r3, #0]
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	6859      	ldr	r1, [r3, #4]
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	f7ff fc15 	bl	8001338 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fd3c 	bl	8001590 <LL_ADC_REG_IsConversionOngoing>
 8001b18:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fd48 	bl	80015b6 <LL_ADC_INJ_IsConversionOngoing>
 8001b26:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b2a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f040 81a6 	bne.w	8001e80 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f040 81a1 	bne.w	8001e80 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6818      	ldr	r0, [r3, #0]
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	6819      	ldr	r1, [r3, #0]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	f7ff fc20 	bl	8001390 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	695a      	ldr	r2, [r3, #20]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	08db      	lsrs	r3, r3, #3
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d00a      	beq.n	8001b88 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6818      	ldr	r0, [r3, #0]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	6919      	ldr	r1, [r3, #16]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b82:	f7ff fb71 	bl	8001268 <LL_ADC_SetOffset>
 8001b86:	e17b      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fb8e 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10a      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x148>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fb83 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 8001baa:	4603      	mov	r3, r0
 8001bac:	0e9b      	lsrs	r3, r3, #26
 8001bae:	f003 021f 	and.w	r2, r3, #31
 8001bb2:	e01e      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x186>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fb78 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001bca:	fa93 f3a3 	rbit	r3, r3
 8001bce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001bd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001bda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001be2:	2320      	movs	r3, #32
 8001be4:	e004      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001be6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bea:	fab3 f383 	clz	r3, r3
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d105      	bne.n	8001c0a <HAL_ADC_ConfigChannel+0x19e>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	0e9b      	lsrs	r3, r3, #26
 8001c04:	f003 031f 	and.w	r3, r3, #31
 8001c08:	e018      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x1d0>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c16:	fa93 f3a3 	rbit	r3, r3
 8001c1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001c1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001c26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001c2e:	2320      	movs	r3, #32
 8001c30:	e004      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001c32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c36:	fab3 f383 	clz	r3, r3
 8001c3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d106      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2200      	movs	r2, #0
 8001c46:	2100      	movs	r1, #0
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fb47 	bl	80012dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2101      	movs	r1, #1
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fb2b 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10a      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x20e>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2101      	movs	r1, #1
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fb20 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 8001c70:	4603      	mov	r3, r0
 8001c72:	0e9b      	lsrs	r3, r3, #26
 8001c74:	f003 021f 	and.w	r2, r3, #31
 8001c78:	e01e      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x24c>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2101      	movs	r1, #1
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fb15 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 8001c86:	4603      	mov	r3, r0
 8001c88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c90:	fa93 f3a3 	rbit	r3, r3
 8001c94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001c98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001ca0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001ca8:	2320      	movs	r3, #32
 8001caa:	e004      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001cac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cb0:	fab3 f383 	clz	r3, r3
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d105      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x264>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	0e9b      	lsrs	r3, r3, #26
 8001cca:	f003 031f 	and.w	r3, r3, #31
 8001cce:	e018      	b.n	8001d02 <HAL_ADC_ConfigChannel+0x296>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001ce4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ce8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001cec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001cf4:	2320      	movs	r3, #32
 8001cf6:	e004      	b.n	8001d02 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001cf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cfc:	fab3 f383 	clz	r3, r3
 8001d00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d106      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fae4 	bl	80012dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2102      	movs	r1, #2
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff fac8 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 8001d20:	4603      	mov	r3, r0
 8001d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10a      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x2d4>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2102      	movs	r1, #2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff fabd 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 8001d36:	4603      	mov	r3, r0
 8001d38:	0e9b      	lsrs	r3, r3, #26
 8001d3a:	f003 021f 	and.w	r2, r3, #31
 8001d3e:	e01e      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x312>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2102      	movs	r1, #2
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff fab2 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d56:	fa93 f3a3 	rbit	r3, r3
 8001d5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001d5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001d66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001d6e:	2320      	movs	r3, #32
 8001d70:	e004      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001d72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d76:	fab3 f383 	clz	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d105      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x32a>
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	0e9b      	lsrs	r3, r3, #26
 8001d90:	f003 031f 	and.w	r3, r3, #31
 8001d94:	e016      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x358>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001da2:	fa93 f3a3 	rbit	r3, r3
 8001da6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001da8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001daa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001dae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001db6:	2320      	movs	r3, #32
 8001db8:	e004      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001dba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001dbe:	fab3 f383 	clz	r3, r3
 8001dc2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d106      	bne.n	8001dd6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2102      	movs	r1, #2
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff fa83 	bl	80012dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2103      	movs	r1, #3
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff fa67 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 8001de2:	4603      	mov	r3, r0
 8001de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10a      	bne.n	8001e02 <HAL_ADC_ConfigChannel+0x396>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2103      	movs	r1, #3
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff fa5c 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	0e9b      	lsrs	r3, r3, #26
 8001dfc:	f003 021f 	and.w	r2, r3, #31
 8001e00:	e017      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x3c6>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2103      	movs	r1, #3
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fa51 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e14:	fa93 f3a3 	rbit	r3, r3
 8001e18:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001e1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e1c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001e1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001e24:	2320      	movs	r3, #32
 8001e26:	e003      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001e28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e2a:	fab3 f383 	clz	r3, r3
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d105      	bne.n	8001e4a <HAL_ADC_ConfigChannel+0x3de>
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	0e9b      	lsrs	r3, r3, #26
 8001e44:	f003 031f 	and.w	r3, r3, #31
 8001e48:	e011      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x402>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e52:	fa93 f3a3 	rbit	r3, r3
 8001e56:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001e58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e5a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001e62:	2320      	movs	r3, #32
 8001e64:	e003      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e68:	fab3 f383 	clz	r3, r3
 8001e6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d106      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2200      	movs	r2, #0
 8001e78:	2103      	movs	r1, #3
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff fa2e 	bl	80012dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fb49 	bl	800151c <LL_ADC_IsEnabled>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f040 813f 	bne.w	8002110 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6818      	ldr	r0, [r3, #0]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	6819      	ldr	r1, [r3, #0]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	f7ff faa2 	bl	80013e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	4a8e      	ldr	r2, [pc, #568]	; (80020e4 <HAL_ADC_ConfigChannel+0x678>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	f040 8130 	bne.w	8002110 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10b      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x46c>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	0e9b      	lsrs	r3, r3, #26
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	f003 031f 	and.w	r3, r3, #31
 8001ecc:	2b09      	cmp	r3, #9
 8001ece:	bf94      	ite	ls
 8001ed0:	2301      	movls	r3, #1
 8001ed2:	2300      	movhi	r3, #0
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	e019      	b.n	8001f0c <HAL_ADC_ConfigChannel+0x4a0>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ede:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ee0:	fa93 f3a3 	rbit	r3, r3
 8001ee4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001ee6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ee8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001eea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001ef0:	2320      	movs	r3, #32
 8001ef2:	e003      	b.n	8001efc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001ef4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ef6:	fab3 f383 	clz	r3, r3
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	3301      	adds	r3, #1
 8001efe:	f003 031f 	and.w	r3, r3, #31
 8001f02:	2b09      	cmp	r3, #9
 8001f04:	bf94      	ite	ls
 8001f06:	2301      	movls	r3, #1
 8001f08:	2300      	movhi	r3, #0
 8001f0a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d079      	beq.n	8002004 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d107      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x4c0>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	0e9b      	lsrs	r3, r3, #26
 8001f22:	3301      	adds	r3, #1
 8001f24:	069b      	lsls	r3, r3, #26
 8001f26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f2a:	e015      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x4ec>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f34:	fa93 f3a3 	rbit	r3, r3
 8001f38:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f3c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001f44:	2320      	movs	r3, #32
 8001f46:	e003      	b.n	8001f50 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001f48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f4a:	fab3 f383 	clz	r3, r3
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	3301      	adds	r3, #1
 8001f52:	069b      	lsls	r3, r3, #26
 8001f54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d109      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x50c>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	0e9b      	lsrs	r3, r3, #26
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	f003 031f 	and.w	r3, r3, #31
 8001f70:	2101      	movs	r1, #1
 8001f72:	fa01 f303 	lsl.w	r3, r1, r3
 8001f76:	e017      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x53c>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f80:	fa93 f3a3 	rbit	r3, r3
 8001f84:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f88:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001f90:	2320      	movs	r3, #32
 8001f92:	e003      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f96:	fab3 f383 	clz	r3, r3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	f003 031f 	and.w	r3, r3, #31
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa8:	ea42 0103 	orr.w	r1, r2, r3
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10a      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x562>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	0e9b      	lsrs	r3, r3, #26
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	f003 021f 	and.w	r2, r3, #31
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4413      	add	r3, r2
 8001fca:	051b      	lsls	r3, r3, #20
 8001fcc:	e018      	b.n	8002000 <HAL_ADC_ConfigChannel+0x594>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fd6:	fa93 f3a3 	rbit	r3, r3
 8001fda:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fde:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001fe6:	2320      	movs	r3, #32
 8001fe8:	e003      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fec:	fab3 f383 	clz	r3, r3
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	f003 021f 	and.w	r2, r3, #31
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	4413      	add	r3, r2
 8001ffe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002000:	430b      	orrs	r3, r1
 8002002:	e080      	b.n	8002106 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200c:	2b00      	cmp	r3, #0
 800200e:	d107      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x5b4>
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	0e9b      	lsrs	r3, r3, #26
 8002016:	3301      	adds	r3, #1
 8002018:	069b      	lsls	r3, r3, #26
 800201a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800201e:	e015      	b.n	800204c <HAL_ADC_ConfigChannel+0x5e0>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002028:	fa93 f3a3 	rbit	r3, r3
 800202c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800202e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002030:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002038:	2320      	movs	r3, #32
 800203a:	e003      	b.n	8002044 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800203c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800203e:	fab3 f383 	clz	r3, r3
 8002042:	b2db      	uxtb	r3, r3
 8002044:	3301      	adds	r3, #1
 8002046:	069b      	lsls	r3, r3, #26
 8002048:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002054:	2b00      	cmp	r3, #0
 8002056:	d109      	bne.n	800206c <HAL_ADC_ConfigChannel+0x600>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	0e9b      	lsrs	r3, r3, #26
 800205e:	3301      	adds	r3, #1
 8002060:	f003 031f 	and.w	r3, r3, #31
 8002064:	2101      	movs	r1, #1
 8002066:	fa01 f303 	lsl.w	r3, r1, r3
 800206a:	e017      	b.n	800209c <HAL_ADC_ConfigChannel+0x630>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	fa93 f3a3 	rbit	r3, r3
 8002078:	61fb      	str	r3, [r7, #28]
  return result;
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002084:	2320      	movs	r3, #32
 8002086:	e003      	b.n	8002090 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	fab3 f383 	clz	r3, r3
 800208e:	b2db      	uxtb	r3, r3
 8002090:	3301      	adds	r3, #1
 8002092:	f003 031f 	and.w	r3, r3, #31
 8002096:	2101      	movs	r1, #1
 8002098:	fa01 f303 	lsl.w	r3, r1, r3
 800209c:	ea42 0103 	orr.w	r1, r2, r3
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10d      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x65c>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	0e9b      	lsrs	r3, r3, #26
 80020b2:	3301      	adds	r3, #1
 80020b4:	f003 021f 	and.w	r2, r3, #31
 80020b8:	4613      	mov	r3, r2
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4413      	add	r3, r2
 80020be:	3b1e      	subs	r3, #30
 80020c0:	051b      	lsls	r3, r3, #20
 80020c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020c6:	e01d      	b.n	8002104 <HAL_ADC_ConfigChannel+0x698>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	fa93 f3a3 	rbit	r3, r3
 80020d4:	613b      	str	r3, [r7, #16]
  return result;
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d103      	bne.n	80020e8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80020e0:	2320      	movs	r3, #32
 80020e2:	e005      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x684>
 80020e4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	fab3 f383 	clz	r3, r3
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	3301      	adds	r3, #1
 80020f2:	f003 021f 	and.w	r2, r3, #31
 80020f6:	4613      	mov	r3, r2
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	4413      	add	r3, r2
 80020fc:	3b1e      	subs	r3, #30
 80020fe:	051b      	lsls	r3, r3, #20
 8002100:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002104:	430b      	orrs	r3, r1
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	6892      	ldr	r2, [r2, #8]
 800210a:	4619      	mov	r1, r3
 800210c:	f7ff f940 	bl	8001390 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4b3d      	ldr	r3, [pc, #244]	; (800220c <HAL_ADC_ConfigChannel+0x7a0>)
 8002116:	4013      	ands	r3, r2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d06c      	beq.n	80021f6 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800211c:	483c      	ldr	r0, [pc, #240]	; (8002210 <HAL_ADC_ConfigChannel+0x7a4>)
 800211e:	f7ff f895 	bl	800124c <LL_ADC_GetCommonPathInternalCh>
 8002122:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a3a      	ldr	r2, [pc, #232]	; (8002214 <HAL_ADC_ConfigChannel+0x7a8>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d127      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002130:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002134:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d121      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a35      	ldr	r2, [pc, #212]	; (8002218 <HAL_ADC_ConfigChannel+0x7ac>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d157      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002146:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800214a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800214e:	4619      	mov	r1, r3
 8002150:	482f      	ldr	r0, [pc, #188]	; (8002210 <HAL_ADC_ConfigChannel+0x7a4>)
 8002152:	f7ff f868 	bl	8001226 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002156:	4b31      	ldr	r3, [pc, #196]	; (800221c <HAL_ADC_ConfigChannel+0x7b0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	099b      	lsrs	r3, r3, #6
 800215c:	4a30      	ldr	r2, [pc, #192]	; (8002220 <HAL_ADC_ConfigChannel+0x7b4>)
 800215e:	fba2 2303 	umull	r2, r3, r2, r3
 8002162:	099b      	lsrs	r3, r3, #6
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	4613      	mov	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4413      	add	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002170:	e002      	b.n	8002178 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	3b01      	subs	r3, #1
 8002176:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f9      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800217e:	e03a      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a27      	ldr	r2, [pc, #156]	; (8002224 <HAL_ADC_ConfigChannel+0x7b8>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d113      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x746>
 800218a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800218e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10d      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a1f      	ldr	r2, [pc, #124]	; (8002218 <HAL_ADC_ConfigChannel+0x7ac>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d12a      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021a8:	4619      	mov	r1, r3
 80021aa:	4819      	ldr	r0, [pc, #100]	; (8002210 <HAL_ADC_ConfigChannel+0x7a4>)
 80021ac:	f7ff f83b 	bl	8001226 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021b0:	e021      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a1c      	ldr	r2, [pc, #112]	; (8002228 <HAL_ADC_ConfigChannel+0x7bc>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d11c      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80021bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d116      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a12      	ldr	r2, [pc, #72]	; (8002218 <HAL_ADC_ConfigChannel+0x7ac>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d111      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021da:	4619      	mov	r1, r3
 80021dc:	480c      	ldr	r0, [pc, #48]	; (8002210 <HAL_ADC_ConfigChannel+0x7a4>)
 80021de:	f7ff f822 	bl	8001226 <LL_ADC_SetCommonPathInternalCh>
 80021e2:	e008      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e8:	f043 0220 	orr.w	r2, r3, #32
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80021fe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002202:	4618      	mov	r0, r3
 8002204:	37d8      	adds	r7, #216	; 0xd8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	80080000 	.word	0x80080000
 8002210:	50040300 	.word	0x50040300
 8002214:	c7520000 	.word	0xc7520000
 8002218:	50040000 	.word	0x50040000
 800221c:	20000004 	.word	0x20000004
 8002220:	053e2d63 	.word	0x053e2d63
 8002224:	cb840000 	.word	0xcb840000
 8002228:	80000001 	.word	0x80000001

0800222c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff f96f 	bl	800151c <LL_ADC_IsEnabled>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d14d      	bne.n	80022e0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	4b28      	ldr	r3, [pc, #160]	; (80022ec <ADC_Enable+0xc0>)
 800224c:	4013      	ands	r3, r2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00d      	beq.n	800226e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002256:	f043 0210 	orr.w	r2, r3, #16
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002262:	f043 0201 	orr.w	r2, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e039      	b.n	80022e2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff f92a 	bl	80014cc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002278:	f7fe ffb6 	bl	80011e8 <HAL_GetTick>
 800227c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800227e:	e028      	b.n	80022d2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff f949 	bl	800151c <LL_ADC_IsEnabled>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d104      	bne.n	800229a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff f919 	bl	80014cc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800229a:	f7fe ffa5 	bl	80011e8 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d914      	bls.n	80022d2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d00d      	beq.n	80022d2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ba:	f043 0210 	orr.w	r2, r3, #16
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c6:	f043 0201 	orr.w	r2, r3, #1
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e007      	b.n	80022e2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d1cf      	bne.n	8002280 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	8000003f 	.word	0x8000003f

080022f0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff f920 	bl	8001542 <LL_ADC_IsDisableOngoing>
 8002302:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff f907 	bl	800151c <LL_ADC_IsEnabled>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d047      	beq.n	80023a4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d144      	bne.n	80023a4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 030d 	and.w	r3, r3, #13
 8002324:	2b01      	cmp	r3, #1
 8002326:	d10c      	bne.n	8002342 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff f8e1 	bl	80014f4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2203      	movs	r2, #3
 8002338:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800233a:	f7fe ff55 	bl	80011e8 <HAL_GetTick>
 800233e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002340:	e029      	b.n	8002396 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002346:	f043 0210 	orr.w	r2, r3, #16
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002352:	f043 0201 	orr.w	r2, r3, #1
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e023      	b.n	80023a6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800235e:	f7fe ff43 	bl	80011e8 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d914      	bls.n	8002396 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00d      	beq.n	8002396 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237e:	f043 0210 	orr.w	r2, r3, #16
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238a:	f043 0201 	orr.w	r2, r3, #1
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e007      	b.n	80023a6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1dc      	bne.n	800235e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <LL_ADC_StartCalibration>:
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80023c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80023ca:	4313      	orrs	r3, r2
 80023cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	609a      	str	r2, [r3, #8]
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <LL_ADC_IsCalibrationOnGoing>:
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023f4:	d101      	bne.n	80023fa <LL_ADC_IsCalibrationOnGoing+0x1a>
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <LL_ADC_IsCalibrationOnGoing+0x1c>
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002412:	2300      	movs	r3, #0
 8002414:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800241c:	2b01      	cmp	r3, #1
 800241e:	d101      	bne.n	8002424 <HAL_ADCEx_Calibration_Start+0x1c>
 8002420:	2302      	movs	r3, #2
 8002422:	e04d      	b.n	80024c0 <HAL_ADCEx_Calibration_Start+0xb8>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff ff5f 	bl	80022f0 <ADC_Disable>
 8002432:	4603      	mov	r3, r0
 8002434:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d136      	bne.n	80024aa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002440:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002444:	f023 0302 	bic.w	r3, r3, #2
 8002448:	f043 0202 	orr.w	r2, r3, #2
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6839      	ldr	r1, [r7, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff ffa9 	bl	80023ae <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800245c:	e014      	b.n	8002488 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	3301      	adds	r3, #1
 8002462:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800246a:	d30d      	bcc.n	8002488 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002470:	f023 0312 	bic.w	r3, r3, #18
 8002474:	f043 0210 	orr.w	r2, r3, #16
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e01b      	b.n	80024c0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff ffa7 	bl	80023e0 <LL_ADC_IsCalibrationOnGoing>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1e2      	bne.n	800245e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249c:	f023 0303 	bic.w	r3, r3, #3
 80024a0:	f043 0201 	orr.w	r2, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	655a      	str	r2, [r3, #84]	; 0x54
 80024a8:	e005      	b.n	80024b6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ae:	f043 0210 	orr.w	r2, r3, #16
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80024be:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d8:	4b0c      	ldr	r3, [pc, #48]	; (800250c <__NVIC_SetPriorityGrouping+0x44>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024e4:	4013      	ands	r3, r2
 80024e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024fa:	4a04      	ldr	r2, [pc, #16]	; (800250c <__NVIC_SetPriorityGrouping+0x44>)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	60d3      	str	r3, [r2, #12]
}
 8002500:	bf00      	nop
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002514:	4b04      	ldr	r3, [pc, #16]	; (8002528 <__NVIC_GetPriorityGrouping+0x18>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	0a1b      	lsrs	r3, r3, #8
 800251a:	f003 0307 	and.w	r3, r3, #7
}
 800251e:	4618      	mov	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253a:	2b00      	cmp	r3, #0
 800253c:	db0b      	blt.n	8002556 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	f003 021f 	and.w	r2, r3, #31
 8002544:	4907      	ldr	r1, [pc, #28]	; (8002564 <__NVIC_EnableIRQ+0x38>)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	095b      	lsrs	r3, r3, #5
 800254c:	2001      	movs	r0, #1
 800254e:	fa00 f202 	lsl.w	r2, r0, r2
 8002552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	e000e100 	.word	0xe000e100

08002568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	6039      	str	r1, [r7, #0]
 8002572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002578:	2b00      	cmp	r3, #0
 800257a:	db0a      	blt.n	8002592 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	b2da      	uxtb	r2, r3
 8002580:	490c      	ldr	r1, [pc, #48]	; (80025b4 <__NVIC_SetPriority+0x4c>)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	0112      	lsls	r2, r2, #4
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	440b      	add	r3, r1
 800258c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002590:	e00a      	b.n	80025a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	b2da      	uxtb	r2, r3
 8002596:	4908      	ldr	r1, [pc, #32]	; (80025b8 <__NVIC_SetPriority+0x50>)
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	3b04      	subs	r3, #4
 80025a0:	0112      	lsls	r2, r2, #4
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	440b      	add	r3, r1
 80025a6:	761a      	strb	r2, [r3, #24]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000e100 	.word	0xe000e100
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025bc:	b480      	push	{r7}
 80025be:	b089      	sub	sp, #36	; 0x24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f1c3 0307 	rsb	r3, r3, #7
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	bf28      	it	cs
 80025da:	2304      	movcs	r3, #4
 80025dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3304      	adds	r3, #4
 80025e2:	2b06      	cmp	r3, #6
 80025e4:	d902      	bls.n	80025ec <NVIC_EncodePriority+0x30>
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3b03      	subs	r3, #3
 80025ea:	e000      	b.n	80025ee <NVIC_EncodePriority+0x32>
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f0:	f04f 32ff 	mov.w	r2, #4294967295
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43da      	mvns	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	401a      	ands	r2, r3
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002604:	f04f 31ff 	mov.w	r1, #4294967295
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	fa01 f303 	lsl.w	r3, r1, r3
 800260e:	43d9      	mvns	r1, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002614:	4313      	orrs	r3, r2
         );
}
 8002616:	4618      	mov	r0, r3
 8002618:	3724      	adds	r7, #36	; 0x24
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
	...

08002624 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3b01      	subs	r3, #1
 8002630:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002634:	d301      	bcc.n	800263a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002636:	2301      	movs	r3, #1
 8002638:	e00f      	b.n	800265a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800263a:	4a0a      	ldr	r2, [pc, #40]	; (8002664 <SysTick_Config+0x40>)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3b01      	subs	r3, #1
 8002640:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002642:	210f      	movs	r1, #15
 8002644:	f04f 30ff 	mov.w	r0, #4294967295
 8002648:	f7ff ff8e 	bl	8002568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800264c:	4b05      	ldr	r3, [pc, #20]	; (8002664 <SysTick_Config+0x40>)
 800264e:	2200      	movs	r2, #0
 8002650:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002652:	4b04      	ldr	r3, [pc, #16]	; (8002664 <SysTick_Config+0x40>)
 8002654:	2207      	movs	r2, #7
 8002656:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	e000e010 	.word	0xe000e010

08002668 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7ff ff29 	bl	80024c8 <__NVIC_SetPriorityGrouping>
}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b086      	sub	sp, #24
 8002682:	af00      	add	r7, sp, #0
 8002684:	4603      	mov	r3, r0
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
 800268a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002690:	f7ff ff3e 	bl	8002510 <__NVIC_GetPriorityGrouping>
 8002694:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	68b9      	ldr	r1, [r7, #8]
 800269a:	6978      	ldr	r0, [r7, #20]
 800269c:	f7ff ff8e 	bl	80025bc <NVIC_EncodePriority>
 80026a0:	4602      	mov	r2, r0
 80026a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026a6:	4611      	mov	r1, r2
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff ff5d 	bl	8002568 <__NVIC_SetPriority>
}
 80026ae:	bf00      	nop
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b082      	sub	sp, #8
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	4603      	mov	r3, r0
 80026be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff ff31 	bl	800252c <__NVIC_EnableIRQ>
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7ff ffa2 	bl	8002624 <SysTick_Config>
 80026e0:	4603      	mov	r3, r0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b085      	sub	sp, #20
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d008      	beq.n	8002714 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2204      	movs	r2, #4
 8002706:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e022      	b.n	800275a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 020e 	bic.w	r2, r2, #14
 8002722:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0201 	bic.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002738:	f003 021c 	and.w	r2, r3, #28
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	2101      	movs	r1, #1
 8002742:	fa01 f202 	lsl.w	r2, r1, r2
 8002746:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002758:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800275a:	4618      	mov	r0, r3
 800275c:	3714      	adds	r7, #20
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b084      	sub	sp, #16
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d005      	beq.n	800278a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2204      	movs	r2, #4
 8002782:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
 8002788:	e029      	b.n	80027de <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 020e 	bic.w	r2, r2, #14
 8002798:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0201 	bic.w	r2, r2, #1
 80027a8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	f003 021c 	and.w	r2, r3, #28
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	2101      	movs	r1, #1
 80027b8:	fa01 f202 	lsl.w	r2, r1, r2
 80027bc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	4798      	blx	r3
    }
  }
  return status;
 80027de:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027f2:	2300      	movs	r3, #0
 80027f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027f6:	e148      	b.n	8002a8a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	2101      	movs	r1, #1
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	fa01 f303 	lsl.w	r3, r1, r3
 8002804:	4013      	ands	r3, r2
 8002806:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 813a 	beq.w	8002a84 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d00b      	beq.n	8002830 <HAL_GPIO_Init+0x48>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d007      	beq.n	8002830 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002824:	2b11      	cmp	r3, #17
 8002826:	d003      	beq.n	8002830 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b12      	cmp	r3, #18
 800282e:	d130      	bne.n	8002892 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	2203      	movs	r2, #3
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4013      	ands	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	4313      	orrs	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002866:	2201      	movs	r2, #1
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43db      	mvns	r3, r3
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4013      	ands	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	091b      	lsrs	r3, r3, #4
 800287c:	f003 0201 	and.w	r2, r3, #1
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	2203      	movs	r2, #3
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43db      	mvns	r3, r3
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	4013      	ands	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d003      	beq.n	80028d2 <HAL_GPIO_Init+0xea>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b12      	cmp	r3, #18
 80028d0:	d123      	bne.n	800291a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	08da      	lsrs	r2, r3, #3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3208      	adds	r2, #8
 80028da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	220f      	movs	r2, #15
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43db      	mvns	r3, r3
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4013      	ands	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	691a      	ldr	r2, [r3, #16]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4313      	orrs	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	08da      	lsrs	r2, r3, #3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3208      	adds	r2, #8
 8002914:	6939      	ldr	r1, [r7, #16]
 8002916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	2203      	movs	r2, #3
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43db      	mvns	r3, r3
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	4013      	ands	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 0203 	and.w	r2, r3, #3
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 8094 	beq.w	8002a84 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295c:	4b52      	ldr	r3, [pc, #328]	; (8002aa8 <HAL_GPIO_Init+0x2c0>)
 800295e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002960:	4a51      	ldr	r2, [pc, #324]	; (8002aa8 <HAL_GPIO_Init+0x2c0>)
 8002962:	f043 0301 	orr.w	r3, r3, #1
 8002966:	6613      	str	r3, [r2, #96]	; 0x60
 8002968:	4b4f      	ldr	r3, [pc, #316]	; (8002aa8 <HAL_GPIO_Init+0x2c0>)
 800296a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	60bb      	str	r3, [r7, #8]
 8002972:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002974:	4a4d      	ldr	r2, [pc, #308]	; (8002aac <HAL_GPIO_Init+0x2c4>)
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	089b      	lsrs	r3, r3, #2
 800297a:	3302      	adds	r3, #2
 800297c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002980:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f003 0303 	and.w	r3, r3, #3
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	220f      	movs	r2, #15
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	4013      	ands	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800299e:	d00d      	beq.n	80029bc <HAL_GPIO_Init+0x1d4>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a43      	ldr	r2, [pc, #268]	; (8002ab0 <HAL_GPIO_Init+0x2c8>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d007      	beq.n	80029b8 <HAL_GPIO_Init+0x1d0>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a42      	ldr	r2, [pc, #264]	; (8002ab4 <HAL_GPIO_Init+0x2cc>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d101      	bne.n	80029b4 <HAL_GPIO_Init+0x1cc>
 80029b0:	2302      	movs	r3, #2
 80029b2:	e004      	b.n	80029be <HAL_GPIO_Init+0x1d6>
 80029b4:	2307      	movs	r3, #7
 80029b6:	e002      	b.n	80029be <HAL_GPIO_Init+0x1d6>
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <HAL_GPIO_Init+0x1d6>
 80029bc:	2300      	movs	r3, #0
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	f002 0203 	and.w	r2, r2, #3
 80029c4:	0092      	lsls	r2, r2, #2
 80029c6:	4093      	lsls	r3, r2
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029ce:	4937      	ldr	r1, [pc, #220]	; (8002aac <HAL_GPIO_Init+0x2c4>)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	089b      	lsrs	r3, r3, #2
 80029d4:	3302      	adds	r3, #2
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80029dc:	4b36      	ldr	r3, [pc, #216]	; (8002ab8 <HAL_GPIO_Init+0x2d0>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	43db      	mvns	r3, r3
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4013      	ands	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a00:	4a2d      	ldr	r2, [pc, #180]	; (8002ab8 <HAL_GPIO_Init+0x2d0>)
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002a06:	4b2c      	ldr	r3, [pc, #176]	; (8002ab8 <HAL_GPIO_Init+0x2d0>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4013      	ands	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a2a:	4a23      	ldr	r2, [pc, #140]	; (8002ab8 <HAL_GPIO_Init+0x2d0>)
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a30:	4b21      	ldr	r3, [pc, #132]	; (8002ab8 <HAL_GPIO_Init+0x2d0>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a54:	4a18      	ldr	r2, [pc, #96]	; (8002ab8 <HAL_GPIO_Init+0x2d0>)
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a5a:	4b17      	ldr	r3, [pc, #92]	; (8002ab8 <HAL_GPIO_Init+0x2d0>)
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	43db      	mvns	r3, r3
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4013      	ands	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a7e:	4a0e      	ldr	r2, [pc, #56]	; (8002ab8 <HAL_GPIO_Init+0x2d0>)
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	3301      	adds	r3, #1
 8002a88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	fa22 f303 	lsr.w	r3, r2, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f47f aeaf 	bne.w	80027f8 <HAL_GPIO_Init+0x10>
  }
}
 8002a9a:	bf00      	nop
 8002a9c:	bf00      	nop
 8002a9e:	371c      	adds	r7, #28
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	40010000 	.word	0x40010000
 8002ab0:	48000400 	.word	0x48000400
 8002ab4:	48000800 	.word	0x48000800
 8002ab8:	40010400 	.word	0x40010400

08002abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	807b      	strh	r3, [r7, #2]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002acc:	787b      	ldrb	r3, [r7, #1]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ad2:	887a      	ldrh	r2, [r7, #2]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ad8:	e002      	b.n	8002ae0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ada:	887a      	ldrh	r2, [r7, #2]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002af6:	4b08      	ldr	r3, [pc, #32]	; (8002b18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002af8:	695a      	ldr	r2, [r3, #20]
 8002afa:	88fb      	ldrh	r3, [r7, #6]
 8002afc:	4013      	ands	r3, r2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d006      	beq.n	8002b10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b02:	4a05      	ldr	r2, [pc, #20]	; (8002b18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b04:	88fb      	ldrh	r3, [r7, #6]
 8002b06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b08:	88fb      	ldrh	r3, [r7, #6]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 f806 	bl	8002b1c <HAL_GPIO_EXTI_Callback>
  }
}
 8002b10:	bf00      	nop
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40010400 	.word	0x40010400

08002b1c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
	...

08002b34 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b38:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <HAL_PWREx_GetVoltageRange+0x18>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40007000 	.word	0x40007000

08002b50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b5e:	d130      	bne.n	8002bc2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b60:	4b23      	ldr	r3, [pc, #140]	; (8002bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b6c:	d038      	beq.n	8002be0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b6e:	4b20      	ldr	r3, [pc, #128]	; (8002bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b76:	4a1e      	ldr	r2, [pc, #120]	; (8002bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b7c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b7e:	4b1d      	ldr	r3, [pc, #116]	; (8002bf4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2232      	movs	r2, #50	; 0x32
 8002b84:	fb02 f303 	mul.w	r3, r2, r3
 8002b88:	4a1b      	ldr	r2, [pc, #108]	; (8002bf8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8e:	0c9b      	lsrs	r3, r3, #18
 8002b90:	3301      	adds	r3, #1
 8002b92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b94:	e002      	b.n	8002b9c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b9c:	4b14      	ldr	r3, [pc, #80]	; (8002bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba8:	d102      	bne.n	8002bb0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1f2      	bne.n	8002b96 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bb0:	4b0f      	ldr	r3, [pc, #60]	; (8002bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bbc:	d110      	bne.n	8002be0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e00f      	b.n	8002be2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bc2:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bce:	d007      	beq.n	8002be0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bd0:	4b07      	ldr	r3, [pc, #28]	; (8002bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bd8:	4a05      	ldr	r2, [pc, #20]	; (8002bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bde:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	40007000 	.word	0x40007000
 8002bf4:	20000004 	.word	0x20000004
 8002bf8:	431bde83 	.word	0x431bde83

08002bfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d102      	bne.n	8002c10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	f000 bc11 	b.w	8003432 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c10:	4ba0      	ldr	r3, [pc, #640]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 030c 	and.w	r3, r3, #12
 8002c18:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c1a:	4b9e      	ldr	r3, [pc, #632]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0310 	and.w	r3, r3, #16
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 80e4 	beq.w	8002dfa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d007      	beq.n	8002c48 <HAL_RCC_OscConfig+0x4c>
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	2b0c      	cmp	r3, #12
 8002c3c:	f040 808b 	bne.w	8002d56 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	f040 8087 	bne.w	8002d56 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c48:	4b92      	ldr	r3, [pc, #584]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d005      	beq.n	8002c60 <HAL_RCC_OscConfig+0x64>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e3e8      	b.n	8003432 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a1a      	ldr	r2, [r3, #32]
 8002c64:	4b8b      	ldr	r3, [pc, #556]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0308 	and.w	r3, r3, #8
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d004      	beq.n	8002c7a <HAL_RCC_OscConfig+0x7e>
 8002c70:	4b88      	ldr	r3, [pc, #544]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c78:	e005      	b.n	8002c86 <HAL_RCC_OscConfig+0x8a>
 8002c7a:	4b86      	ldr	r3, [pc, #536]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c80:	091b      	lsrs	r3, r3, #4
 8002c82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d223      	bcs.n	8002cd2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 fd7a 	bl	8003788 <RCC_SetFlashLatencyFromMSIRange>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e3c9      	b.n	8003432 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c9e:	4b7d      	ldr	r3, [pc, #500]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a7c      	ldr	r2, [pc, #496]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002ca4:	f043 0308 	orr.w	r3, r3, #8
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	4b7a      	ldr	r3, [pc, #488]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	4977      	ldr	r1, [pc, #476]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cbc:	4b75      	ldr	r3, [pc, #468]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	021b      	lsls	r3, r3, #8
 8002cca:	4972      	ldr	r1, [pc, #456]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	604b      	str	r3, [r1, #4]
 8002cd0:	e025      	b.n	8002d1e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cd2:	4b70      	ldr	r3, [pc, #448]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a6f      	ldr	r2, [pc, #444]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002cd8:	f043 0308 	orr.w	r3, r3, #8
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	4b6d      	ldr	r3, [pc, #436]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	496a      	ldr	r1, [pc, #424]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cf0:	4b68      	ldr	r3, [pc, #416]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	021b      	lsls	r3, r3, #8
 8002cfe:	4965      	ldr	r1, [pc, #404]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d109      	bne.n	8002d1e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 fd3a 	bl	8003788 <RCC_SetFlashLatencyFromMSIRange>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e389      	b.n	8003432 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d1e:	f000 fc6f 	bl	8003600 <HAL_RCC_GetSysClockFreq>
 8002d22:	4602      	mov	r2, r0
 8002d24:	4b5b      	ldr	r3, [pc, #364]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	091b      	lsrs	r3, r3, #4
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	495a      	ldr	r1, [pc, #360]	; (8002e98 <HAL_RCC_OscConfig+0x29c>)
 8002d30:	5ccb      	ldrb	r3, [r1, r3]
 8002d32:	f003 031f 	and.w	r3, r3, #31
 8002d36:	fa22 f303 	lsr.w	r3, r2, r3
 8002d3a:	4a58      	ldr	r2, [pc, #352]	; (8002e9c <HAL_RCC_OscConfig+0x2a0>)
 8002d3c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d3e:	4b58      	ldr	r3, [pc, #352]	; (8002ea0 <HAL_RCC_OscConfig+0x2a4>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fe fa00 	bl	8001148 <HAL_InitTick>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d052      	beq.n	8002df8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	e36d      	b.n	8003432 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d032      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d5e:	4b4d      	ldr	r3, [pc, #308]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a4c      	ldr	r2, [pc, #304]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002d64:	f043 0301 	orr.w	r3, r3, #1
 8002d68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d6a:	f7fe fa3d 	bl	80011e8 <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d72:	f7fe fa39 	bl	80011e8 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e356      	b.n	8003432 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d84:	4b43      	ldr	r3, [pc, #268]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0f0      	beq.n	8002d72 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d90:	4b40      	ldr	r3, [pc, #256]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a3f      	ldr	r2, [pc, #252]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002d96:	f043 0308 	orr.w	r3, r3, #8
 8002d9a:	6013      	str	r3, [r2, #0]
 8002d9c:	4b3d      	ldr	r3, [pc, #244]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	493a      	ldr	r1, [pc, #232]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dae:	4b39      	ldr	r3, [pc, #228]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	021b      	lsls	r3, r3, #8
 8002dbc:	4935      	ldr	r1, [pc, #212]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	604b      	str	r3, [r1, #4]
 8002dc2:	e01a      	b.n	8002dfa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002dc4:	4b33      	ldr	r3, [pc, #204]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a32      	ldr	r2, [pc, #200]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002dca:	f023 0301 	bic.w	r3, r3, #1
 8002dce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dd0:	f7fe fa0a 	bl	80011e8 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dd8:	f7fe fa06 	bl	80011e8 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e323      	b.n	8003432 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002dea:	4b2a      	ldr	r3, [pc, #168]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x1dc>
 8002df6:	e000      	b.n	8002dfa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002df8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d073      	beq.n	8002eee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_OscConfig+0x21c>
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	2b0c      	cmp	r3, #12
 8002e10:	d10e      	bne.n	8002e30 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d10b      	bne.n	8002e30 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e18:	4b1e      	ldr	r3, [pc, #120]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d063      	beq.n	8002eec <HAL_RCC_OscConfig+0x2f0>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d15f      	bne.n	8002eec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e300      	b.n	8003432 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e38:	d106      	bne.n	8002e48 <HAL_RCC_OscConfig+0x24c>
 8002e3a:	4b16      	ldr	r3, [pc, #88]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a15      	ldr	r2, [pc, #84]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	e01d      	b.n	8002e84 <HAL_RCC_OscConfig+0x288>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e50:	d10c      	bne.n	8002e6c <HAL_RCC_OscConfig+0x270>
 8002e52:	4b10      	ldr	r3, [pc, #64]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a0f      	ldr	r2, [pc, #60]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	4b0d      	ldr	r3, [pc, #52]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a0c      	ldr	r2, [pc, #48]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e68:	6013      	str	r3, [r2, #0]
 8002e6a:	e00b      	b.n	8002e84 <HAL_RCC_OscConfig+0x288>
 8002e6c:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a08      	ldr	r2, [pc, #32]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e76:	6013      	str	r3, [r2, #0]
 8002e78:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a05      	ldr	r2, [pc, #20]	; (8002e94 <HAL_RCC_OscConfig+0x298>)
 8002e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d01b      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8c:	f7fe f9ac 	bl	80011e8 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e92:	e010      	b.n	8002eb6 <HAL_RCC_OscConfig+0x2ba>
 8002e94:	40021000 	.word	0x40021000
 8002e98:	08005f08 	.word	0x08005f08
 8002e9c:	20000004 	.word	0x20000004
 8002ea0:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ea4:	f7fe f9a0 	bl	80011e8 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b64      	cmp	r3, #100	; 0x64
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e2bd      	b.n	8003432 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eb6:	4baf      	ldr	r3, [pc, #700]	; (8003174 <HAL_RCC_OscConfig+0x578>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0f0      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x2a8>
 8002ec2:	e014      	b.n	8002eee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec4:	f7fe f990 	bl	80011e8 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ecc:	f7fe f98c 	bl	80011e8 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b64      	cmp	r3, #100	; 0x64
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e2a9      	b.n	8003432 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ede:	4ba5      	ldr	r3, [pc, #660]	; (8003174 <HAL_RCC_OscConfig+0x578>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f0      	bne.n	8002ecc <HAL_RCC_OscConfig+0x2d0>
 8002eea:	e000      	b.n	8002eee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d060      	beq.n	8002fbc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	2b04      	cmp	r3, #4
 8002efe:	d005      	beq.n	8002f0c <HAL_RCC_OscConfig+0x310>
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	2b0c      	cmp	r3, #12
 8002f04:	d119      	bne.n	8002f3a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d116      	bne.n	8002f3a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f0c:	4b99      	ldr	r3, [pc, #612]	; (8003174 <HAL_RCC_OscConfig+0x578>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d005      	beq.n	8002f24 <HAL_RCC_OscConfig+0x328>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e286      	b.n	8003432 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f24:	4b93      	ldr	r3, [pc, #588]	; (8003174 <HAL_RCC_OscConfig+0x578>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	061b      	lsls	r3, r3, #24
 8002f32:	4990      	ldr	r1, [pc, #576]	; (8003174 <HAL_RCC_OscConfig+0x578>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f38:	e040      	b.n	8002fbc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d023      	beq.n	8002f8a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f42:	4b8c      	ldr	r3, [pc, #560]	; (8003174 <HAL_RCC_OscConfig+0x578>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a8b      	ldr	r2, [pc, #556]	; (8003174 <HAL_RCC_OscConfig+0x578>)
 8002f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4e:	f7fe f94b 	bl	80011e8 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f56:	f7fe f947 	bl	80011e8 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e264      	b.n	8003432 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f68:	4b82      	ldr	r3, [pc, #520]	; (8003174 <HAL_RCC_OscConfig+0x578>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0f0      	beq.n	8002f56 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f74:	4b7f      	ldr	r3, [pc, #508]	; (8003174 <HAL_RCC_OscConfig+0x578>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	061b      	lsls	r3, r3, #24
 8002f82:	497c      	ldr	r1, [pc, #496]	; (8003174 <HAL_RCC_OscConfig+0x578>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	604b      	str	r3, [r1, #4]
 8002f88:	e018      	b.n	8002fbc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f8a:	4b7a      	ldr	r3, [pc, #488]	; (8003174 <HAL_RCC_OscConfig+0x578>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a79      	ldr	r2, [pc, #484]	; (8003174 <HAL_RCC_OscConfig+0x578>)
 8002f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f96:	f7fe f927 	bl	80011e8 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f9e:	f7fe f923 	bl	80011e8 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e240      	b.n	8003432 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fb0:	4b70      	ldr	r3, [pc, #448]	; (8003174 <HAL_RCC_OscConfig+0x578>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1f0      	bne.n	8002f9e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0308 	and.w	r3, r3, #8
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d03c      	beq.n	8003042 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d01c      	beq.n	800300a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fd0:	4b68      	ldr	r3, [pc, #416]	; (8003174 <HAL_RCC_OscConfig+0x578>)
 8002fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fd6:	4a67      	ldr	r2, [pc, #412]	; (8003174 <HAL_RCC_OscConfig+0x578>)
 8002fd8:	f043 0301 	orr.w	r3, r3, #1
 8002fdc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe0:	f7fe f902 	bl	80011e8 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fe8:	f7fe f8fe 	bl	80011e8 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e21b      	b.n	8003432 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ffa:	4b5e      	ldr	r3, [pc, #376]	; (8003174 <HAL_RCC_OscConfig+0x578>)
 8002ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0ef      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x3ec>
 8003008:	e01b      	b.n	8003042 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800300a:	4b5a      	ldr	r3, [pc, #360]	; (8003174 <HAL_RCC_OscConfig+0x578>)
 800300c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003010:	4a58      	ldr	r2, [pc, #352]	; (8003174 <HAL_RCC_OscConfig+0x578>)
 8003012:	f023 0301 	bic.w	r3, r3, #1
 8003016:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301a:	f7fe f8e5 	bl	80011e8 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003022:	f7fe f8e1 	bl	80011e8 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e1fe      	b.n	8003432 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003034:	4b4f      	ldr	r3, [pc, #316]	; (8003174 <HAL_RCC_OscConfig+0x578>)
 8003036:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1ef      	bne.n	8003022 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	2b00      	cmp	r3, #0
 800304c:	f000 80a6 	beq.w	800319c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003050:	2300      	movs	r3, #0
 8003052:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003054:	4b47      	ldr	r3, [pc, #284]	; (8003174 <HAL_RCC_OscConfig+0x578>)
 8003056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10d      	bne.n	800307c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003060:	4b44      	ldr	r3, [pc, #272]	; (8003174 <HAL_RCC_OscConfig+0x578>)
 8003062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003064:	4a43      	ldr	r2, [pc, #268]	; (8003174 <HAL_RCC_OscConfig+0x578>)
 8003066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800306a:	6593      	str	r3, [r2, #88]	; 0x58
 800306c:	4b41      	ldr	r3, [pc, #260]	; (8003174 <HAL_RCC_OscConfig+0x578>)
 800306e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003074:	60bb      	str	r3, [r7, #8]
 8003076:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003078:	2301      	movs	r3, #1
 800307a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800307c:	4b3e      	ldr	r3, [pc, #248]	; (8003178 <HAL_RCC_OscConfig+0x57c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003084:	2b00      	cmp	r3, #0
 8003086:	d118      	bne.n	80030ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003088:	4b3b      	ldr	r3, [pc, #236]	; (8003178 <HAL_RCC_OscConfig+0x57c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a3a      	ldr	r2, [pc, #232]	; (8003178 <HAL_RCC_OscConfig+0x57c>)
 800308e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003092:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003094:	f7fe f8a8 	bl	80011e8 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800309c:	f7fe f8a4 	bl	80011e8 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e1c1      	b.n	8003432 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030ae:	4b32      	ldr	r3, [pc, #200]	; (8003178 <HAL_RCC_OscConfig+0x57c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0f0      	beq.n	800309c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d108      	bne.n	80030d4 <HAL_RCC_OscConfig+0x4d8>
 80030c2:	4b2c      	ldr	r3, [pc, #176]	; (8003174 <HAL_RCC_OscConfig+0x578>)
 80030c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c8:	4a2a      	ldr	r2, [pc, #168]	; (8003174 <HAL_RCC_OscConfig+0x578>)
 80030ca:	f043 0301 	orr.w	r3, r3, #1
 80030ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030d2:	e024      	b.n	800311e <HAL_RCC_OscConfig+0x522>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	2b05      	cmp	r3, #5
 80030da:	d110      	bne.n	80030fe <HAL_RCC_OscConfig+0x502>
 80030dc:	4b25      	ldr	r3, [pc, #148]	; (8003174 <HAL_RCC_OscConfig+0x578>)
 80030de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e2:	4a24      	ldr	r2, [pc, #144]	; (8003174 <HAL_RCC_OscConfig+0x578>)
 80030e4:	f043 0304 	orr.w	r3, r3, #4
 80030e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030ec:	4b21      	ldr	r3, [pc, #132]	; (8003174 <HAL_RCC_OscConfig+0x578>)
 80030ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f2:	4a20      	ldr	r2, [pc, #128]	; (8003174 <HAL_RCC_OscConfig+0x578>)
 80030f4:	f043 0301 	orr.w	r3, r3, #1
 80030f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030fc:	e00f      	b.n	800311e <HAL_RCC_OscConfig+0x522>
 80030fe:	4b1d      	ldr	r3, [pc, #116]	; (8003174 <HAL_RCC_OscConfig+0x578>)
 8003100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003104:	4a1b      	ldr	r2, [pc, #108]	; (8003174 <HAL_RCC_OscConfig+0x578>)
 8003106:	f023 0301 	bic.w	r3, r3, #1
 800310a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800310e:	4b19      	ldr	r3, [pc, #100]	; (8003174 <HAL_RCC_OscConfig+0x578>)
 8003110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003114:	4a17      	ldr	r2, [pc, #92]	; (8003174 <HAL_RCC_OscConfig+0x578>)
 8003116:	f023 0304 	bic.w	r3, r3, #4
 800311a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d016      	beq.n	8003154 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003126:	f7fe f85f 	bl	80011e8 <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800312c:	e00a      	b.n	8003144 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800312e:	f7fe f85b 	bl	80011e8 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	f241 3288 	movw	r2, #5000	; 0x1388
 800313c:	4293      	cmp	r3, r2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e176      	b.n	8003432 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003144:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <HAL_RCC_OscConfig+0x578>)
 8003146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0ed      	beq.n	800312e <HAL_RCC_OscConfig+0x532>
 8003152:	e01a      	b.n	800318a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003154:	f7fe f848 	bl	80011e8 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800315a:	e00f      	b.n	800317c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800315c:	f7fe f844 	bl	80011e8 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	f241 3288 	movw	r2, #5000	; 0x1388
 800316a:	4293      	cmp	r3, r2
 800316c:	d906      	bls.n	800317c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e15f      	b.n	8003432 <HAL_RCC_OscConfig+0x836>
 8003172:	bf00      	nop
 8003174:	40021000 	.word	0x40021000
 8003178:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800317c:	4baa      	ldr	r3, [pc, #680]	; (8003428 <HAL_RCC_OscConfig+0x82c>)
 800317e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1e8      	bne.n	800315c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800318a:	7ffb      	ldrb	r3, [r7, #31]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d105      	bne.n	800319c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003190:	4ba5      	ldr	r3, [pc, #660]	; (8003428 <HAL_RCC_OscConfig+0x82c>)
 8003192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003194:	4aa4      	ldr	r2, [pc, #656]	; (8003428 <HAL_RCC_OscConfig+0x82c>)
 8003196:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800319a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0320 	and.w	r3, r3, #32
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d03c      	beq.n	8003222 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d01c      	beq.n	80031ea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031b0:	4b9d      	ldr	r3, [pc, #628]	; (8003428 <HAL_RCC_OscConfig+0x82c>)
 80031b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031b6:	4a9c      	ldr	r2, [pc, #624]	; (8003428 <HAL_RCC_OscConfig+0x82c>)
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c0:	f7fe f812 	bl	80011e8 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031c8:	f7fe f80e 	bl	80011e8 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e12b      	b.n	8003432 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031da:	4b93      	ldr	r3, [pc, #588]	; (8003428 <HAL_RCC_OscConfig+0x82c>)
 80031dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0ef      	beq.n	80031c8 <HAL_RCC_OscConfig+0x5cc>
 80031e8:	e01b      	b.n	8003222 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031ea:	4b8f      	ldr	r3, [pc, #572]	; (8003428 <HAL_RCC_OscConfig+0x82c>)
 80031ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031f0:	4a8d      	ldr	r2, [pc, #564]	; (8003428 <HAL_RCC_OscConfig+0x82c>)
 80031f2:	f023 0301 	bic.w	r3, r3, #1
 80031f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fa:	f7fd fff5 	bl	80011e8 <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003200:	e008      	b.n	8003214 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003202:	f7fd fff1 	bl	80011e8 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e10e      	b.n	8003432 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003214:	4b84      	ldr	r3, [pc, #528]	; (8003428 <HAL_RCC_OscConfig+0x82c>)
 8003216:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1ef      	bne.n	8003202 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 8102 	beq.w	8003430 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003230:	2b02      	cmp	r3, #2
 8003232:	f040 80c5 	bne.w	80033c0 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003236:	4b7c      	ldr	r3, [pc, #496]	; (8003428 <HAL_RCC_OscConfig+0x82c>)
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f003 0203 	and.w	r2, r3, #3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003246:	429a      	cmp	r2, r3
 8003248:	d12c      	bne.n	80032a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003254:	3b01      	subs	r3, #1
 8003256:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003258:	429a      	cmp	r2, r3
 800325a:	d123      	bne.n	80032a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003266:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003268:	429a      	cmp	r2, r3
 800326a:	d11b      	bne.n	80032a4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003276:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003278:	429a      	cmp	r2, r3
 800327a:	d113      	bne.n	80032a4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003286:	085b      	lsrs	r3, r3, #1
 8003288:	3b01      	subs	r3, #1
 800328a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800328c:	429a      	cmp	r2, r3
 800328e:	d109      	bne.n	80032a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	085b      	lsrs	r3, r3, #1
 800329c:	3b01      	subs	r3, #1
 800329e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d067      	beq.n	8003374 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	2b0c      	cmp	r3, #12
 80032a8:	d062      	beq.n	8003370 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80032aa:	4b5f      	ldr	r3, [pc, #380]	; (8003428 <HAL_RCC_OscConfig+0x82c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e0bb      	b.n	8003432 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032ba:	4b5b      	ldr	r3, [pc, #364]	; (8003428 <HAL_RCC_OscConfig+0x82c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a5a      	ldr	r2, [pc, #360]	; (8003428 <HAL_RCC_OscConfig+0x82c>)
 80032c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032c4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032c6:	f7fd ff8f 	bl	80011e8 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ce:	f7fd ff8b 	bl	80011e8 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e0a8      	b.n	8003432 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032e0:	4b51      	ldr	r3, [pc, #324]	; (8003428 <HAL_RCC_OscConfig+0x82c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1f0      	bne.n	80032ce <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032ec:	4b4e      	ldr	r3, [pc, #312]	; (8003428 <HAL_RCC_OscConfig+0x82c>)
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	4b4e      	ldr	r3, [pc, #312]	; (800342c <HAL_RCC_OscConfig+0x830>)
 80032f2:	4013      	ands	r3, r2
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032fc:	3a01      	subs	r2, #1
 80032fe:	0112      	lsls	r2, r2, #4
 8003300:	4311      	orrs	r1, r2
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003306:	0212      	lsls	r2, r2, #8
 8003308:	4311      	orrs	r1, r2
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800330e:	0852      	lsrs	r2, r2, #1
 8003310:	3a01      	subs	r2, #1
 8003312:	0552      	lsls	r2, r2, #21
 8003314:	4311      	orrs	r1, r2
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800331a:	0852      	lsrs	r2, r2, #1
 800331c:	3a01      	subs	r2, #1
 800331e:	0652      	lsls	r2, r2, #25
 8003320:	4311      	orrs	r1, r2
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003326:	06d2      	lsls	r2, r2, #27
 8003328:	430a      	orrs	r2, r1
 800332a:	493f      	ldr	r1, [pc, #252]	; (8003428 <HAL_RCC_OscConfig+0x82c>)
 800332c:	4313      	orrs	r3, r2
 800332e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003330:	4b3d      	ldr	r3, [pc, #244]	; (8003428 <HAL_RCC_OscConfig+0x82c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a3c      	ldr	r2, [pc, #240]	; (8003428 <HAL_RCC_OscConfig+0x82c>)
 8003336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800333a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800333c:	4b3a      	ldr	r3, [pc, #232]	; (8003428 <HAL_RCC_OscConfig+0x82c>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	4a39      	ldr	r2, [pc, #228]	; (8003428 <HAL_RCC_OscConfig+0x82c>)
 8003342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003346:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003348:	f7fd ff4e 	bl	80011e8 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003350:	f7fd ff4a 	bl	80011e8 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e067      	b.n	8003432 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003362:	4b31      	ldr	r3, [pc, #196]	; (8003428 <HAL_RCC_OscConfig+0x82c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f0      	beq.n	8003350 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800336e:	e05f      	b.n	8003430 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e05e      	b.n	8003432 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003374:	4b2c      	ldr	r3, [pc, #176]	; (8003428 <HAL_RCC_OscConfig+0x82c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d157      	bne.n	8003430 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003380:	4b29      	ldr	r3, [pc, #164]	; (8003428 <HAL_RCC_OscConfig+0x82c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a28      	ldr	r2, [pc, #160]	; (8003428 <HAL_RCC_OscConfig+0x82c>)
 8003386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800338a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800338c:	4b26      	ldr	r3, [pc, #152]	; (8003428 <HAL_RCC_OscConfig+0x82c>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	4a25      	ldr	r2, [pc, #148]	; (8003428 <HAL_RCC_OscConfig+0x82c>)
 8003392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003396:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003398:	f7fd ff26 	bl	80011e8 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a0:	f7fd ff22 	bl	80011e8 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e03f      	b.n	8003432 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033b2:	4b1d      	ldr	r3, [pc, #116]	; (8003428 <HAL_RCC_OscConfig+0x82c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0f0      	beq.n	80033a0 <HAL_RCC_OscConfig+0x7a4>
 80033be:	e037      	b.n	8003430 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	2b0c      	cmp	r3, #12
 80033c4:	d02d      	beq.n	8003422 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c6:	4b18      	ldr	r3, [pc, #96]	; (8003428 <HAL_RCC_OscConfig+0x82c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a17      	ldr	r2, [pc, #92]	; (8003428 <HAL_RCC_OscConfig+0x82c>)
 80033cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033d0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033d2:	4b15      	ldr	r3, [pc, #84]	; (8003428 <HAL_RCC_OscConfig+0x82c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d105      	bne.n	80033ea <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80033de:	4b12      	ldr	r3, [pc, #72]	; (8003428 <HAL_RCC_OscConfig+0x82c>)
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	4a11      	ldr	r2, [pc, #68]	; (8003428 <HAL_RCC_OscConfig+0x82c>)
 80033e4:	f023 0303 	bic.w	r3, r3, #3
 80033e8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80033ea:	4b0f      	ldr	r3, [pc, #60]	; (8003428 <HAL_RCC_OscConfig+0x82c>)
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	4a0e      	ldr	r2, [pc, #56]	; (8003428 <HAL_RCC_OscConfig+0x82c>)
 80033f0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80033f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fa:	f7fd fef5 	bl	80011e8 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003402:	f7fd fef1 	bl	80011e8 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e00e      	b.n	8003432 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003414:	4b04      	ldr	r3, [pc, #16]	; (8003428 <HAL_RCC_OscConfig+0x82c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1f0      	bne.n	8003402 <HAL_RCC_OscConfig+0x806>
 8003420:	e006      	b.n	8003430 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e005      	b.n	8003432 <HAL_RCC_OscConfig+0x836>
 8003426:	bf00      	nop
 8003428:	40021000 	.word	0x40021000
 800342c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3720      	adds	r7, #32
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop

0800343c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e0c8      	b.n	80035e2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003450:	4b66      	ldr	r3, [pc, #408]	; (80035ec <HAL_RCC_ClockConfig+0x1b0>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	429a      	cmp	r2, r3
 800345c:	d910      	bls.n	8003480 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345e:	4b63      	ldr	r3, [pc, #396]	; (80035ec <HAL_RCC_ClockConfig+0x1b0>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f023 0207 	bic.w	r2, r3, #7
 8003466:	4961      	ldr	r1, [pc, #388]	; (80035ec <HAL_RCC_ClockConfig+0x1b0>)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	4313      	orrs	r3, r2
 800346c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800346e:	4b5f      	ldr	r3, [pc, #380]	; (80035ec <HAL_RCC_ClockConfig+0x1b0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	429a      	cmp	r2, r3
 800347a:	d001      	beq.n	8003480 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e0b0      	b.n	80035e2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b00      	cmp	r3, #0
 800348a:	d04c      	beq.n	8003526 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2b03      	cmp	r3, #3
 8003492:	d107      	bne.n	80034a4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003494:	4b56      	ldr	r3, [pc, #344]	; (80035f0 <HAL_RCC_ClockConfig+0x1b4>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d121      	bne.n	80034e4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e09e      	b.n	80035e2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d107      	bne.n	80034bc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034ac:	4b50      	ldr	r3, [pc, #320]	; (80035f0 <HAL_RCC_ClockConfig+0x1b4>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d115      	bne.n	80034e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e092      	b.n	80035e2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d107      	bne.n	80034d4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034c4:	4b4a      	ldr	r3, [pc, #296]	; (80035f0 <HAL_RCC_ClockConfig+0x1b4>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d109      	bne.n	80034e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e086      	b.n	80035e2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034d4:	4b46      	ldr	r3, [pc, #280]	; (80035f0 <HAL_RCC_ClockConfig+0x1b4>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e07e      	b.n	80035e2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034e4:	4b42      	ldr	r3, [pc, #264]	; (80035f0 <HAL_RCC_ClockConfig+0x1b4>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f023 0203 	bic.w	r2, r3, #3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	493f      	ldr	r1, [pc, #252]	; (80035f0 <HAL_RCC_ClockConfig+0x1b4>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034f6:	f7fd fe77 	bl	80011e8 <HAL_GetTick>
 80034fa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fc:	e00a      	b.n	8003514 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034fe:	f7fd fe73 	bl	80011e8 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	f241 3288 	movw	r2, #5000	; 0x1388
 800350c:	4293      	cmp	r3, r2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e066      	b.n	80035e2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003514:	4b36      	ldr	r3, [pc, #216]	; (80035f0 <HAL_RCC_ClockConfig+0x1b4>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 020c 	and.w	r2, r3, #12
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	429a      	cmp	r2, r3
 8003524:	d1eb      	bne.n	80034fe <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d008      	beq.n	8003544 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003532:	4b2f      	ldr	r3, [pc, #188]	; (80035f0 <HAL_RCC_ClockConfig+0x1b4>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	492c      	ldr	r1, [pc, #176]	; (80035f0 <HAL_RCC_ClockConfig+0x1b4>)
 8003540:	4313      	orrs	r3, r2
 8003542:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003544:	4b29      	ldr	r3, [pc, #164]	; (80035ec <HAL_RCC_ClockConfig+0x1b0>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d210      	bcs.n	8003574 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003552:	4b26      	ldr	r3, [pc, #152]	; (80035ec <HAL_RCC_ClockConfig+0x1b0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f023 0207 	bic.w	r2, r3, #7
 800355a:	4924      	ldr	r1, [pc, #144]	; (80035ec <HAL_RCC_ClockConfig+0x1b0>)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	4313      	orrs	r3, r2
 8003560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003562:	4b22      	ldr	r3, [pc, #136]	; (80035ec <HAL_RCC_ClockConfig+0x1b0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d001      	beq.n	8003574 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e036      	b.n	80035e2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d008      	beq.n	8003592 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003580:	4b1b      	ldr	r3, [pc, #108]	; (80035f0 <HAL_RCC_ClockConfig+0x1b4>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	4918      	ldr	r1, [pc, #96]	; (80035f0 <HAL_RCC_ClockConfig+0x1b4>)
 800358e:	4313      	orrs	r3, r2
 8003590:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b00      	cmp	r3, #0
 800359c:	d009      	beq.n	80035b2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800359e:	4b14      	ldr	r3, [pc, #80]	; (80035f0 <HAL_RCC_ClockConfig+0x1b4>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	4910      	ldr	r1, [pc, #64]	; (80035f0 <HAL_RCC_ClockConfig+0x1b4>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035b2:	f000 f825 	bl	8003600 <HAL_RCC_GetSysClockFreq>
 80035b6:	4602      	mov	r2, r0
 80035b8:	4b0d      	ldr	r3, [pc, #52]	; (80035f0 <HAL_RCC_ClockConfig+0x1b4>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	091b      	lsrs	r3, r3, #4
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	490c      	ldr	r1, [pc, #48]	; (80035f4 <HAL_RCC_ClockConfig+0x1b8>)
 80035c4:	5ccb      	ldrb	r3, [r1, r3]
 80035c6:	f003 031f 	and.w	r3, r3, #31
 80035ca:	fa22 f303 	lsr.w	r3, r2, r3
 80035ce:	4a0a      	ldr	r2, [pc, #40]	; (80035f8 <HAL_RCC_ClockConfig+0x1bc>)
 80035d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035d2:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <HAL_RCC_ClockConfig+0x1c0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fd fdb6 	bl	8001148 <HAL_InitTick>
 80035dc:	4603      	mov	r3, r0
 80035de:	72fb      	strb	r3, [r7, #11]

  return status;
 80035e0:	7afb      	ldrb	r3, [r7, #11]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	40022000 	.word	0x40022000
 80035f0:	40021000 	.word	0x40021000
 80035f4:	08005f08 	.word	0x08005f08
 80035f8:	20000004 	.word	0x20000004
 80035fc:	20000008 	.word	0x20000008

08003600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003600:	b480      	push	{r7}
 8003602:	b089      	sub	sp, #36	; 0x24
 8003604:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003606:	2300      	movs	r3, #0
 8003608:	61fb      	str	r3, [r7, #28]
 800360a:	2300      	movs	r3, #0
 800360c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800360e:	4b3e      	ldr	r3, [pc, #248]	; (8003708 <HAL_RCC_GetSysClockFreq+0x108>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 030c 	and.w	r3, r3, #12
 8003616:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003618:	4b3b      	ldr	r3, [pc, #236]	; (8003708 <HAL_RCC_GetSysClockFreq+0x108>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	f003 0303 	and.w	r3, r3, #3
 8003620:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <HAL_RCC_GetSysClockFreq+0x34>
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	2b0c      	cmp	r3, #12
 800362c:	d121      	bne.n	8003672 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d11e      	bne.n	8003672 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003634:	4b34      	ldr	r3, [pc, #208]	; (8003708 <HAL_RCC_GetSysClockFreq+0x108>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0308 	and.w	r3, r3, #8
 800363c:	2b00      	cmp	r3, #0
 800363e:	d107      	bne.n	8003650 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003640:	4b31      	ldr	r3, [pc, #196]	; (8003708 <HAL_RCC_GetSysClockFreq+0x108>)
 8003642:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003646:	0a1b      	lsrs	r3, r3, #8
 8003648:	f003 030f 	and.w	r3, r3, #15
 800364c:	61fb      	str	r3, [r7, #28]
 800364e:	e005      	b.n	800365c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003650:	4b2d      	ldr	r3, [pc, #180]	; (8003708 <HAL_RCC_GetSysClockFreq+0x108>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	091b      	lsrs	r3, r3, #4
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800365c:	4a2b      	ldr	r2, [pc, #172]	; (800370c <HAL_RCC_GetSysClockFreq+0x10c>)
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003664:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10d      	bne.n	8003688 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003670:	e00a      	b.n	8003688 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	2b04      	cmp	r3, #4
 8003676:	d102      	bne.n	800367e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003678:	4b25      	ldr	r3, [pc, #148]	; (8003710 <HAL_RCC_GetSysClockFreq+0x110>)
 800367a:	61bb      	str	r3, [r7, #24]
 800367c:	e004      	b.n	8003688 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	2b08      	cmp	r3, #8
 8003682:	d101      	bne.n	8003688 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003684:	4b23      	ldr	r3, [pc, #140]	; (8003714 <HAL_RCC_GetSysClockFreq+0x114>)
 8003686:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	2b0c      	cmp	r3, #12
 800368c:	d134      	bne.n	80036f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800368e:	4b1e      	ldr	r3, [pc, #120]	; (8003708 <HAL_RCC_GetSysClockFreq+0x108>)
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b02      	cmp	r3, #2
 800369c:	d003      	beq.n	80036a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d003      	beq.n	80036ac <HAL_RCC_GetSysClockFreq+0xac>
 80036a4:	e005      	b.n	80036b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80036a6:	4b1a      	ldr	r3, [pc, #104]	; (8003710 <HAL_RCC_GetSysClockFreq+0x110>)
 80036a8:	617b      	str	r3, [r7, #20]
      break;
 80036aa:	e005      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80036ac:	4b19      	ldr	r3, [pc, #100]	; (8003714 <HAL_RCC_GetSysClockFreq+0x114>)
 80036ae:	617b      	str	r3, [r7, #20]
      break;
 80036b0:	e002      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	617b      	str	r3, [r7, #20]
      break;
 80036b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036b8:	4b13      	ldr	r3, [pc, #76]	; (8003708 <HAL_RCC_GetSysClockFreq+0x108>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	091b      	lsrs	r3, r3, #4
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	3301      	adds	r3, #1
 80036c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036c6:	4b10      	ldr	r3, [pc, #64]	; (8003708 <HAL_RCC_GetSysClockFreq+0x108>)
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	0a1b      	lsrs	r3, r3, #8
 80036cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	fb02 f203 	mul.w	r2, r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036de:	4b0a      	ldr	r3, [pc, #40]	; (8003708 <HAL_RCC_GetSysClockFreq+0x108>)
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	0e5b      	lsrs	r3, r3, #25
 80036e4:	f003 0303 	and.w	r3, r3, #3
 80036e8:	3301      	adds	r3, #1
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80036f8:	69bb      	ldr	r3, [r7, #24]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3724      	adds	r7, #36	; 0x24
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40021000 	.word	0x40021000
 800370c:	08005f20 	.word	0x08005f20
 8003710:	00f42400 	.word	0x00f42400
 8003714:	007a1200 	.word	0x007a1200

08003718 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800371c:	4b03      	ldr	r3, [pc, #12]	; (800372c <HAL_RCC_GetHCLKFreq+0x14>)
 800371e:	681b      	ldr	r3, [r3, #0]
}
 8003720:	4618      	mov	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	20000004 	.word	0x20000004

08003730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003734:	f7ff fff0 	bl	8003718 <HAL_RCC_GetHCLKFreq>
 8003738:	4602      	mov	r2, r0
 800373a:	4b06      	ldr	r3, [pc, #24]	; (8003754 <HAL_RCC_GetPCLK1Freq+0x24>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	0a1b      	lsrs	r3, r3, #8
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	4904      	ldr	r1, [pc, #16]	; (8003758 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003746:	5ccb      	ldrb	r3, [r1, r3]
 8003748:	f003 031f 	and.w	r3, r3, #31
 800374c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003750:	4618      	mov	r0, r3
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40021000 	.word	0x40021000
 8003758:	08005f18 	.word	0x08005f18

0800375c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003760:	f7ff ffda 	bl	8003718 <HAL_RCC_GetHCLKFreq>
 8003764:	4602      	mov	r2, r0
 8003766:	4b06      	ldr	r3, [pc, #24]	; (8003780 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	0adb      	lsrs	r3, r3, #11
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	4904      	ldr	r1, [pc, #16]	; (8003784 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003772:	5ccb      	ldrb	r3, [r1, r3]
 8003774:	f003 031f 	and.w	r3, r3, #31
 8003778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800377c:	4618      	mov	r0, r3
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40021000 	.word	0x40021000
 8003784:	08005f18 	.word	0x08005f18

08003788 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003790:	2300      	movs	r3, #0
 8003792:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003794:	4b2a      	ldr	r3, [pc, #168]	; (8003840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037a0:	f7ff f9c8 	bl	8002b34 <HAL_PWREx_GetVoltageRange>
 80037a4:	6178      	str	r0, [r7, #20]
 80037a6:	e014      	b.n	80037d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037a8:	4b25      	ldr	r3, [pc, #148]	; (8003840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ac:	4a24      	ldr	r2, [pc, #144]	; (8003840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b2:	6593      	str	r3, [r2, #88]	; 0x58
 80037b4:	4b22      	ldr	r3, [pc, #136]	; (8003840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80037c0:	f7ff f9b8 	bl	8002b34 <HAL_PWREx_GetVoltageRange>
 80037c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80037c6:	4b1e      	ldr	r3, [pc, #120]	; (8003840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ca:	4a1d      	ldr	r2, [pc, #116]	; (8003840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037d8:	d10b      	bne.n	80037f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b80      	cmp	r3, #128	; 0x80
 80037de:	d919      	bls.n	8003814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2ba0      	cmp	r3, #160	; 0xa0
 80037e4:	d902      	bls.n	80037ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037e6:	2302      	movs	r3, #2
 80037e8:	613b      	str	r3, [r7, #16]
 80037ea:	e013      	b.n	8003814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037ec:	2301      	movs	r3, #1
 80037ee:	613b      	str	r3, [r7, #16]
 80037f0:	e010      	b.n	8003814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b80      	cmp	r3, #128	; 0x80
 80037f6:	d902      	bls.n	80037fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80037f8:	2303      	movs	r3, #3
 80037fa:	613b      	str	r3, [r7, #16]
 80037fc:	e00a      	b.n	8003814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b80      	cmp	r3, #128	; 0x80
 8003802:	d102      	bne.n	800380a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003804:	2302      	movs	r3, #2
 8003806:	613b      	str	r3, [r7, #16]
 8003808:	e004      	b.n	8003814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b70      	cmp	r3, #112	; 0x70
 800380e:	d101      	bne.n	8003814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003810:	2301      	movs	r3, #1
 8003812:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003814:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f023 0207 	bic.w	r2, r3, #7
 800381c:	4909      	ldr	r1, [pc, #36]	; (8003844 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	4313      	orrs	r3, r2
 8003822:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003824:	4b07      	ldr	r3, [pc, #28]	; (8003844 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	429a      	cmp	r2, r3
 8003830:	d001      	beq.n	8003836 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40021000 	.word	0x40021000
 8003844:	40022000 	.word	0x40022000

08003848 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003850:	2300      	movs	r3, #0
 8003852:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003854:	2300      	movs	r3, #0
 8003856:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003860:	2b00      	cmp	r3, #0
 8003862:	d031      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003868:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800386c:	d01a      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800386e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003872:	d814      	bhi.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003874:	2b00      	cmp	r3, #0
 8003876:	d009      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003878:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800387c:	d10f      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800387e:	4bac      	ldr	r3, [pc, #688]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	4aab      	ldr	r2, [pc, #684]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003888:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800388a:	e00c      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3304      	adds	r3, #4
 8003890:	2100      	movs	r1, #0
 8003892:	4618      	mov	r0, r3
 8003894:	f000 f9cc 	bl	8003c30 <RCCEx_PLLSAI1_Config>
 8003898:	4603      	mov	r3, r0
 800389a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800389c:	e003      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	74fb      	strb	r3, [r7, #19]
      break;
 80038a2:	e000      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80038a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038a6:	7cfb      	ldrb	r3, [r7, #19]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10b      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038ac:	4ba0      	ldr	r3, [pc, #640]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ba:	499d      	ldr	r1, [pc, #628]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80038c2:	e001      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c4:	7cfb      	ldrb	r3, [r7, #19]
 80038c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 8099 	beq.w	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038d6:	2300      	movs	r3, #0
 80038d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038da:	4b95      	ldr	r3, [pc, #596]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80038e6:	2301      	movs	r3, #1
 80038e8:	e000      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80038ea:	2300      	movs	r3, #0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00d      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038f0:	4b8f      	ldr	r3, [pc, #572]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f4:	4a8e      	ldr	r2, [pc, #568]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038fa:	6593      	str	r3, [r2, #88]	; 0x58
 80038fc:	4b8c      	ldr	r3, [pc, #560]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003904:	60bb      	str	r3, [r7, #8]
 8003906:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003908:	2301      	movs	r3, #1
 800390a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800390c:	4b89      	ldr	r3, [pc, #548]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a88      	ldr	r2, [pc, #544]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003916:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003918:	f7fd fc66 	bl	80011e8 <HAL_GetTick>
 800391c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800391e:	e009      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003920:	f7fd fc62 	bl	80011e8 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d902      	bls.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	74fb      	strb	r3, [r7, #19]
        break;
 8003932:	e005      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003934:	4b7f      	ldr	r3, [pc, #508]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0ef      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003940:	7cfb      	ldrb	r3, [r7, #19]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d155      	bne.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003946:	4b7a      	ldr	r3, [pc, #488]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003950:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d01e      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	429a      	cmp	r2, r3
 8003960:	d019      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003962:	4b73      	ldr	r3, [pc, #460]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003968:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800396c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800396e:	4b70      	ldr	r3, [pc, #448]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003974:	4a6e      	ldr	r2, [pc, #440]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800397a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800397e:	4b6c      	ldr	r3, [pc, #432]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003984:	4a6a      	ldr	r2, [pc, #424]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800398a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800398e:	4a68      	ldr	r2, [pc, #416]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b00      	cmp	r3, #0
 800399e:	d016      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a0:	f7fd fc22 	bl	80011e8 <HAL_GetTick>
 80039a4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039a6:	e00b      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a8:	f7fd fc1e 	bl	80011e8 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d902      	bls.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	74fb      	strb	r3, [r7, #19]
            break;
 80039be:	e006      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039c0:	4b5b      	ldr	r3, [pc, #364]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80039c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0ec      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80039ce:	7cfb      	ldrb	r3, [r7, #19]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10b      	bne.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039d4:	4b56      	ldr	r3, [pc, #344]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80039d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e2:	4953      	ldr	r1, [pc, #332]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039ea:	e004      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039ec:	7cfb      	ldrb	r3, [r7, #19]
 80039ee:	74bb      	strb	r3, [r7, #18]
 80039f0:	e001      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f2:	7cfb      	ldrb	r3, [r7, #19]
 80039f4:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039f6:	7c7b      	ldrb	r3, [r7, #17]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d105      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039fc:	4b4c      	ldr	r3, [pc, #304]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80039fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a00:	4a4b      	ldr	r2, [pc, #300]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a06:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00a      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a14:	4b46      	ldr	r3, [pc, #280]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1a:	f023 0203 	bic.w	r2, r3, #3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	4943      	ldr	r1, [pc, #268]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00a      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a36:	4b3e      	ldr	r3, [pc, #248]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3c:	f023 020c 	bic.w	r2, r3, #12
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	493a      	ldr	r1, [pc, #232]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0320 	and.w	r3, r3, #32
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00a      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a58:	4b35      	ldr	r3, [pc, #212]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a66:	4932      	ldr	r1, [pc, #200]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00a      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a7a:	4b2d      	ldr	r3, [pc, #180]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a88:	4929      	ldr	r1, [pc, #164]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00a      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a9c:	4b24      	ldr	r3, [pc, #144]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aaa:	4921      	ldr	r1, [pc, #132]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00a      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003abe:	4b1c      	ldr	r3, [pc, #112]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003acc:	4918      	ldr	r1, [pc, #96]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00a      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ae0:	4b13      	ldr	r3, [pc, #76]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	4910      	ldr	r1, [pc, #64]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d02c      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b02:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b08:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b10:	4907      	ldr	r1, [pc, #28]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b20:	d10a      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b22:	4b03      	ldr	r3, [pc, #12]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	4a02      	ldr	r2, [pc, #8]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b2c:	60d3      	str	r3, [r2, #12]
 8003b2e:	e015      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003b30:	40021000 	.word	0x40021000
 8003b34:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b40:	d10c      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	3304      	adds	r3, #4
 8003b46:	2101      	movs	r1, #1
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 f871 	bl	8003c30 <RCCEx_PLLSAI1_Config>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b52:	7cfb      	ldrb	r3, [r7, #19]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d001      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8003b58:	7cfb      	ldrb	r3, [r7, #19]
 8003b5a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d028      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b68:	4b30      	ldr	r3, [pc, #192]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b76:	492d      	ldr	r1, [pc, #180]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b86:	d106      	bne.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b88:	4b28      	ldr	r3, [pc, #160]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	4a27      	ldr	r2, [pc, #156]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b92:	60d3      	str	r3, [r2, #12]
 8003b94:	e011      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b9e:	d10c      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3304      	adds	r3, #4
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 f842 	bl	8003c30 <RCCEx_PLLSAI1_Config>
 8003bac:	4603      	mov	r3, r0
 8003bae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bb0:	7cfb      	ldrb	r3, [r7, #19]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8003bb6:	7cfb      	ldrb	r3, [r7, #19]
 8003bb8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d01c      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bc6:	4b19      	ldr	r3, [pc, #100]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bcc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd4:	4915      	ldr	r1, [pc, #84]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003be0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003be4:	d10c      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	3304      	adds	r3, #4
 8003bea:	2102      	movs	r1, #2
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 f81f 	bl	8003c30 <RCCEx_PLLSAI1_Config>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bf6:	7cfb      	ldrb	r3, [r7, #19]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003bfc:	7cfb      	ldrb	r3, [r7, #19]
 8003bfe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00a      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c0c:	4b07      	ldr	r3, [pc, #28]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c12:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c1a:	4904      	ldr	r1, [pc, #16]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c22:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3718      	adds	r7, #24
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40021000 	.word	0x40021000

08003c30 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c3e:	4b74      	ldr	r3, [pc, #464]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d018      	beq.n	8003c7c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c4a:	4b71      	ldr	r3, [pc, #452]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f003 0203 	and.w	r2, r3, #3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d10d      	bne.n	8003c76 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
       ||
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d009      	beq.n	8003c76 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c62:	4b6b      	ldr	r3, [pc, #428]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	091b      	lsrs	r3, r3, #4
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	1c5a      	adds	r2, r3, #1
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
       ||
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d047      	beq.n	8003d06 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	73fb      	strb	r3, [r7, #15]
 8003c7a:	e044      	b.n	8003d06 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b03      	cmp	r3, #3
 8003c82:	d018      	beq.n	8003cb6 <RCCEx_PLLSAI1_Config+0x86>
 8003c84:	2b03      	cmp	r3, #3
 8003c86:	d825      	bhi.n	8003cd4 <RCCEx_PLLSAI1_Config+0xa4>
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d002      	beq.n	8003c92 <RCCEx_PLLSAI1_Config+0x62>
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d009      	beq.n	8003ca4 <RCCEx_PLLSAI1_Config+0x74>
 8003c90:	e020      	b.n	8003cd4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c92:	4b5f      	ldr	r3, [pc, #380]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d11d      	bne.n	8003cda <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ca2:	e01a      	b.n	8003cda <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ca4:	4b5a      	ldr	r3, [pc, #360]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d116      	bne.n	8003cde <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cb4:	e013      	b.n	8003cde <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cb6:	4b56      	ldr	r3, [pc, #344]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10f      	bne.n	8003ce2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003cc2:	4b53      	ldr	r3, [pc, #332]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d109      	bne.n	8003ce2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003cd2:	e006      	b.n	8003ce2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8003cd8:	e004      	b.n	8003ce4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cda:	bf00      	nop
 8003cdc:	e002      	b.n	8003ce4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cde:	bf00      	nop
 8003ce0:	e000      	b.n	8003ce4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ce2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10d      	bne.n	8003d06 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003cea:	4b49      	ldr	r3, [pc, #292]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6819      	ldr	r1, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	011b      	lsls	r3, r3, #4
 8003cfe:	430b      	orrs	r3, r1
 8003d00:	4943      	ldr	r1, [pc, #268]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d06:	7bfb      	ldrb	r3, [r7, #15]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d17c      	bne.n	8003e06 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d0c:	4b40      	ldr	r3, [pc, #256]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a3f      	ldr	r2, [pc, #252]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d18:	f7fd fa66 	bl	80011e8 <HAL_GetTick>
 8003d1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d1e:	e009      	b.n	8003d34 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d20:	f7fd fa62 	bl	80011e8 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d902      	bls.n	8003d34 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	73fb      	strb	r3, [r7, #15]
        break;
 8003d32:	e005      	b.n	8003d40 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d34:	4b36      	ldr	r3, [pc, #216]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1ef      	bne.n	8003d20 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d15f      	bne.n	8003e06 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d110      	bne.n	8003d6e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d4c:	4b30      	ldr	r3, [pc, #192]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003d54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6892      	ldr	r2, [r2, #8]
 8003d5c:	0211      	lsls	r1, r2, #8
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	68d2      	ldr	r2, [r2, #12]
 8003d62:	06d2      	lsls	r2, r2, #27
 8003d64:	430a      	orrs	r2, r1
 8003d66:	492a      	ldr	r1, [pc, #168]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	610b      	str	r3, [r1, #16]
 8003d6c:	e027      	b.n	8003dbe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d112      	bne.n	8003d9a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d74:	4b26      	ldr	r3, [pc, #152]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6892      	ldr	r2, [r2, #8]
 8003d84:	0211      	lsls	r1, r2, #8
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6912      	ldr	r2, [r2, #16]
 8003d8a:	0852      	lsrs	r2, r2, #1
 8003d8c:	3a01      	subs	r2, #1
 8003d8e:	0552      	lsls	r2, r2, #21
 8003d90:	430a      	orrs	r2, r1
 8003d92:	491f      	ldr	r1, [pc, #124]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	610b      	str	r3, [r1, #16]
 8003d98:	e011      	b.n	8003dbe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d9a:	4b1d      	ldr	r3, [pc, #116]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003da2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	6892      	ldr	r2, [r2, #8]
 8003daa:	0211      	lsls	r1, r2, #8
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6952      	ldr	r2, [r2, #20]
 8003db0:	0852      	lsrs	r2, r2, #1
 8003db2:	3a01      	subs	r2, #1
 8003db4:	0652      	lsls	r2, r2, #25
 8003db6:	430a      	orrs	r2, r1
 8003db8:	4915      	ldr	r1, [pc, #84]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003dbe:	4b14      	ldr	r3, [pc, #80]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a13      	ldr	r2, [pc, #76]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003dc8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dca:	f7fd fa0d 	bl	80011e8 <HAL_GetTick>
 8003dce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003dd0:	e009      	b.n	8003de6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003dd2:	f7fd fa09 	bl	80011e8 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d902      	bls.n	8003de6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	73fb      	strb	r3, [r7, #15]
          break;
 8003de4:	e005      	b.n	8003df2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003de6:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0ef      	beq.n	8003dd2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003df2:	7bfb      	ldrb	r3, [r7, #15]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d106      	bne.n	8003e06 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003df8:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dfa:	691a      	ldr	r2, [r3, #16]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	4903      	ldr	r1, [pc, #12]	; (8003e10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40021000 	.word	0x40021000

08003e14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e049      	b.n	8003eba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d106      	bne.n	8003e40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7fc ffd4 	bl	8000de8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3304      	adds	r3, #4
 8003e50:	4619      	mov	r1, r3
 8003e52:	4610      	mov	r0, r2
 8003e54:	f000 fc22 	bl	800469c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
	...

08003ec4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d001      	beq.n	8003edc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e03b      	b.n	8003f54 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0201 	orr.w	r2, r2, #1
 8003ef2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a19      	ldr	r2, [pc, #100]	; (8003f60 <HAL_TIM_Base_Start_IT+0x9c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d009      	beq.n	8003f12 <HAL_TIM_Base_Start_IT+0x4e>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f06:	d004      	beq.n	8003f12 <HAL_TIM_Base_Start_IT+0x4e>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a15      	ldr	r2, [pc, #84]	; (8003f64 <HAL_TIM_Base_Start_IT+0xa0>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d115      	bne.n	8003f3e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	4b13      	ldr	r3, [pc, #76]	; (8003f68 <HAL_TIM_Base_Start_IT+0xa4>)
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2b06      	cmp	r3, #6
 8003f22:	d015      	beq.n	8003f50 <HAL_TIM_Base_Start_IT+0x8c>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f2a:	d011      	beq.n	8003f50 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f042 0201 	orr.w	r2, r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f3c:	e008      	b.n	8003f50 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f042 0201 	orr.w	r2, r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	e000      	b.n	8003f52 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3714      	adds	r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	40012c00 	.word	0x40012c00
 8003f64:	40014000 	.word	0x40014000
 8003f68:	00010007 	.word	0x00010007

08003f6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e049      	b.n	8004012 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d106      	bne.n	8003f98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7fc ff08 	bl	8000da8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4610      	mov	r0, r2
 8003fac:	f000 fb76 	bl	800469c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
	...

0800401c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d109      	bne.n	8004040 <HAL_TIM_PWM_Start+0x24>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b01      	cmp	r3, #1
 8004036:	bf14      	ite	ne
 8004038:	2301      	movne	r3, #1
 800403a:	2300      	moveq	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	e03c      	b.n	80040ba <HAL_TIM_PWM_Start+0x9e>
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	2b04      	cmp	r3, #4
 8004044:	d109      	bne.n	800405a <HAL_TIM_PWM_Start+0x3e>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b01      	cmp	r3, #1
 8004050:	bf14      	ite	ne
 8004052:	2301      	movne	r3, #1
 8004054:	2300      	moveq	r3, #0
 8004056:	b2db      	uxtb	r3, r3
 8004058:	e02f      	b.n	80040ba <HAL_TIM_PWM_Start+0x9e>
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b08      	cmp	r3, #8
 800405e:	d109      	bne.n	8004074 <HAL_TIM_PWM_Start+0x58>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b01      	cmp	r3, #1
 800406a:	bf14      	ite	ne
 800406c:	2301      	movne	r3, #1
 800406e:	2300      	moveq	r3, #0
 8004070:	b2db      	uxtb	r3, r3
 8004072:	e022      	b.n	80040ba <HAL_TIM_PWM_Start+0x9e>
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	2b0c      	cmp	r3, #12
 8004078:	d109      	bne.n	800408e <HAL_TIM_PWM_Start+0x72>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b01      	cmp	r3, #1
 8004084:	bf14      	ite	ne
 8004086:	2301      	movne	r3, #1
 8004088:	2300      	moveq	r3, #0
 800408a:	b2db      	uxtb	r3, r3
 800408c:	e015      	b.n	80040ba <HAL_TIM_PWM_Start+0x9e>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2b10      	cmp	r3, #16
 8004092:	d109      	bne.n	80040a8 <HAL_TIM_PWM_Start+0x8c>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b01      	cmp	r3, #1
 800409e:	bf14      	ite	ne
 80040a0:	2301      	movne	r3, #1
 80040a2:	2300      	moveq	r3, #0
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	e008      	b.n	80040ba <HAL_TIM_PWM_Start+0x9e>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	bf14      	ite	ne
 80040b4:	2301      	movne	r3, #1
 80040b6:	2300      	moveq	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e07e      	b.n	80041c0 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d104      	bne.n	80040d2 <HAL_TIM_PWM_Start+0xb6>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040d0:	e023      	b.n	800411a <HAL_TIM_PWM_Start+0xfe>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	d104      	bne.n	80040e2 <HAL_TIM_PWM_Start+0xc6>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040e0:	e01b      	b.n	800411a <HAL_TIM_PWM_Start+0xfe>
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d104      	bne.n	80040f2 <HAL_TIM_PWM_Start+0xd6>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2202      	movs	r2, #2
 80040ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040f0:	e013      	b.n	800411a <HAL_TIM_PWM_Start+0xfe>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b0c      	cmp	r3, #12
 80040f6:	d104      	bne.n	8004102 <HAL_TIM_PWM_Start+0xe6>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004100:	e00b      	b.n	800411a <HAL_TIM_PWM_Start+0xfe>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b10      	cmp	r3, #16
 8004106:	d104      	bne.n	8004112 <HAL_TIM_PWM_Start+0xf6>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2202      	movs	r2, #2
 800410c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004110:	e003      	b.n	800411a <HAL_TIM_PWM_Start+0xfe>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2202      	movs	r2, #2
 8004116:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2201      	movs	r2, #1
 8004120:	6839      	ldr	r1, [r7, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f000 fd9c 	bl	8004c60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a26      	ldr	r2, [pc, #152]	; (80041c8 <HAL_TIM_PWM_Start+0x1ac>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d009      	beq.n	8004146 <HAL_TIM_PWM_Start+0x12a>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a25      	ldr	r2, [pc, #148]	; (80041cc <HAL_TIM_PWM_Start+0x1b0>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d004      	beq.n	8004146 <HAL_TIM_PWM_Start+0x12a>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a23      	ldr	r2, [pc, #140]	; (80041d0 <HAL_TIM_PWM_Start+0x1b4>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d101      	bne.n	800414a <HAL_TIM_PWM_Start+0x12e>
 8004146:	2301      	movs	r3, #1
 8004148:	e000      	b.n	800414c <HAL_TIM_PWM_Start+0x130>
 800414a:	2300      	movs	r3, #0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d007      	beq.n	8004160 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800415e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a18      	ldr	r2, [pc, #96]	; (80041c8 <HAL_TIM_PWM_Start+0x1ac>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d009      	beq.n	800417e <HAL_TIM_PWM_Start+0x162>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004172:	d004      	beq.n	800417e <HAL_TIM_PWM_Start+0x162>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a14      	ldr	r2, [pc, #80]	; (80041cc <HAL_TIM_PWM_Start+0x1b0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d115      	bne.n	80041aa <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	4b13      	ldr	r3, [pc, #76]	; (80041d4 <HAL_TIM_PWM_Start+0x1b8>)
 8004186:	4013      	ands	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2b06      	cmp	r3, #6
 800418e:	d015      	beq.n	80041bc <HAL_TIM_PWM_Start+0x1a0>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004196:	d011      	beq.n	80041bc <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0201 	orr.w	r2, r2, #1
 80041a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041a8:	e008      	b.n	80041bc <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f042 0201 	orr.w	r2, r2, #1
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	e000      	b.n	80041be <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	40012c00 	.word	0x40012c00
 80041cc:	40014000 	.word	0x40014000
 80041d0:	40014400 	.word	0x40014400
 80041d4:	00010007 	.word	0x00010007

080041d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d122      	bne.n	8004234 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d11b      	bne.n	8004234 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f06f 0202 	mvn.w	r2, #2
 8004204:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 fa20 	bl	8004660 <HAL_TIM_IC_CaptureCallback>
 8004220:	e005      	b.n	800422e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 fa12 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 fa23 	bl	8004674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f003 0304 	and.w	r3, r3, #4
 800423e:	2b04      	cmp	r3, #4
 8004240:	d122      	bne.n	8004288 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b04      	cmp	r3, #4
 800424e:	d11b      	bne.n	8004288 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f06f 0204 	mvn.w	r2, #4
 8004258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2202      	movs	r2, #2
 800425e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f9f6 	bl	8004660 <HAL_TIM_IC_CaptureCallback>
 8004274:	e005      	b.n	8004282 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f9e8 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f9f9 	bl	8004674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b08      	cmp	r3, #8
 8004294:	d122      	bne.n	80042dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f003 0308 	and.w	r3, r3, #8
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d11b      	bne.n	80042dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f06f 0208 	mvn.w	r2, #8
 80042ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2204      	movs	r2, #4
 80042b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f9cc 	bl	8004660 <HAL_TIM_IC_CaptureCallback>
 80042c8:	e005      	b.n	80042d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f9be 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f9cf 	bl	8004674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f003 0310 	and.w	r3, r3, #16
 80042e6:	2b10      	cmp	r3, #16
 80042e8:	d122      	bne.n	8004330 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f003 0310 	and.w	r3, r3, #16
 80042f4:	2b10      	cmp	r3, #16
 80042f6:	d11b      	bne.n	8004330 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f06f 0210 	mvn.w	r2, #16
 8004300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2208      	movs	r2, #8
 8004306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f9a2 	bl	8004660 <HAL_TIM_IC_CaptureCallback>
 800431c:	e005      	b.n	800432a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f994 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f9a5 	bl	8004674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b01      	cmp	r3, #1
 800433c:	d10e      	bne.n	800435c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b01      	cmp	r3, #1
 800434a:	d107      	bne.n	800435c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f06f 0201 	mvn.w	r2, #1
 8004354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f96e 	bl	8004638 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004366:	2b80      	cmp	r3, #128	; 0x80
 8004368:	d10e      	bne.n	8004388 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004374:	2b80      	cmp	r3, #128	; 0x80
 8004376:	d107      	bne.n	8004388 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 fd7a 	bl	8004e7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004396:	d10e      	bne.n	80043b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a2:	2b80      	cmp	r3, #128	; 0x80
 80043a4:	d107      	bne.n	80043b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80043ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 fd6d 	bl	8004e90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c0:	2b40      	cmp	r3, #64	; 0x40
 80043c2:	d10e      	bne.n	80043e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ce:	2b40      	cmp	r3, #64	; 0x40
 80043d0:	d107      	bne.n	80043e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f953 	bl	8004688 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	f003 0320 	and.w	r3, r3, #32
 80043ec:	2b20      	cmp	r3, #32
 80043ee:	d10e      	bne.n	800440e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	f003 0320 	and.w	r3, r3, #32
 80043fa:	2b20      	cmp	r3, #32
 80043fc:	d107      	bne.n	800440e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f06f 0220 	mvn.w	r2, #32
 8004406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 fd2d 	bl	8004e68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800440e:	bf00      	nop
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800442a:	2b01      	cmp	r3, #1
 800442c:	d101      	bne.n	8004432 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800442e:	2302      	movs	r3, #2
 8004430:	e0fd      	b.n	800462e <HAL_TIM_PWM_ConfigChannel+0x216>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b14      	cmp	r3, #20
 800443e:	f200 80f0 	bhi.w	8004622 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004442:	a201      	add	r2, pc, #4	; (adr r2, 8004448 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004448:	0800449d 	.word	0x0800449d
 800444c:	08004623 	.word	0x08004623
 8004450:	08004623 	.word	0x08004623
 8004454:	08004623 	.word	0x08004623
 8004458:	080044dd 	.word	0x080044dd
 800445c:	08004623 	.word	0x08004623
 8004460:	08004623 	.word	0x08004623
 8004464:	08004623 	.word	0x08004623
 8004468:	0800451f 	.word	0x0800451f
 800446c:	08004623 	.word	0x08004623
 8004470:	08004623 	.word	0x08004623
 8004474:	08004623 	.word	0x08004623
 8004478:	0800455f 	.word	0x0800455f
 800447c:	08004623 	.word	0x08004623
 8004480:	08004623 	.word	0x08004623
 8004484:	08004623 	.word	0x08004623
 8004488:	080045a1 	.word	0x080045a1
 800448c:	08004623 	.word	0x08004623
 8004490:	08004623 	.word	0x08004623
 8004494:	08004623 	.word	0x08004623
 8004498:	080045e1 	.word	0x080045e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68b9      	ldr	r1, [r7, #8]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 f95e 	bl	8004764 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699a      	ldr	r2, [r3, #24]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0208 	orr.w	r2, r2, #8
 80044b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	699a      	ldr	r2, [r3, #24]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 0204 	bic.w	r2, r2, #4
 80044c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6999      	ldr	r1, [r3, #24]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	691a      	ldr	r2, [r3, #16]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	619a      	str	r2, [r3, #24]
      break;
 80044da:	e0a3      	b.n	8004624 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68b9      	ldr	r1, [r7, #8]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 f9ba 	bl	800485c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699a      	ldr	r2, [r3, #24]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699a      	ldr	r2, [r3, #24]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004506:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6999      	ldr	r1, [r3, #24]
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	021a      	lsls	r2, r3, #8
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	619a      	str	r2, [r3, #24]
      break;
 800451c:	e082      	b.n	8004624 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68b9      	ldr	r1, [r7, #8]
 8004524:	4618      	mov	r0, r3
 8004526:	f000 fa13 	bl	8004950 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	69da      	ldr	r2, [r3, #28]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f042 0208 	orr.w	r2, r2, #8
 8004538:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	69da      	ldr	r2, [r3, #28]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 0204 	bic.w	r2, r2, #4
 8004548:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	69d9      	ldr	r1, [r3, #28]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	691a      	ldr	r2, [r3, #16]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	61da      	str	r2, [r3, #28]
      break;
 800455c:	e062      	b.n	8004624 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68b9      	ldr	r1, [r7, #8]
 8004564:	4618      	mov	r0, r3
 8004566:	f000 fa6b 	bl	8004a40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	69da      	ldr	r2, [r3, #28]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004578:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69da      	ldr	r2, [r3, #28]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004588:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	69d9      	ldr	r1, [r3, #28]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	021a      	lsls	r2, r3, #8
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	61da      	str	r2, [r3, #28]
      break;
 800459e:	e041      	b.n	8004624 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68b9      	ldr	r1, [r7, #8]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 faa8 	bl	8004afc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0208 	orr.w	r2, r2, #8
 80045ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0204 	bic.w	r2, r2, #4
 80045ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	691a      	ldr	r2, [r3, #16]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80045de:	e021      	b.n	8004624 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68b9      	ldr	r1, [r7, #8]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 fae0 	bl	8004bac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800460a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	021a      	lsls	r2, r3, #8
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004620:	e000      	b.n	8004624 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004622:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop

08004638 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a2a      	ldr	r2, [pc, #168]	; (8004758 <TIM_Base_SetConfig+0xbc>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d003      	beq.n	80046bc <TIM_Base_SetConfig+0x20>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ba:	d108      	bne.n	80046ce <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a21      	ldr	r2, [pc, #132]	; (8004758 <TIM_Base_SetConfig+0xbc>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d00b      	beq.n	80046ee <TIM_Base_SetConfig+0x52>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046dc:	d007      	beq.n	80046ee <TIM_Base_SetConfig+0x52>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a1e      	ldr	r2, [pc, #120]	; (800475c <TIM_Base_SetConfig+0xc0>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d003      	beq.n	80046ee <TIM_Base_SetConfig+0x52>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a1d      	ldr	r2, [pc, #116]	; (8004760 <TIM_Base_SetConfig+0xc4>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d108      	bne.n	8004700 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	4313      	orrs	r3, r2
 800470c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a0c      	ldr	r2, [pc, #48]	; (8004758 <TIM_Base_SetConfig+0xbc>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d007      	beq.n	800473c <TIM_Base_SetConfig+0xa0>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a0b      	ldr	r2, [pc, #44]	; (800475c <TIM_Base_SetConfig+0xc0>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d003      	beq.n	800473c <TIM_Base_SetConfig+0xa0>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a0a      	ldr	r2, [pc, #40]	; (8004760 <TIM_Base_SetConfig+0xc4>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d103      	bne.n	8004744 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	691a      	ldr	r2, [r3, #16]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	615a      	str	r2, [r3, #20]
}
 800474a:	bf00      	nop
 800474c:	3714      	adds	r7, #20
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	40012c00 	.word	0x40012c00
 800475c:	40014000 	.word	0x40014000
 8004760:	40014400 	.word	0x40014400

08004764 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004764:	b480      	push	{r7}
 8004766:	b087      	sub	sp, #28
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	f023 0201 	bic.w	r2, r3, #1
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f023 0303 	bic.w	r3, r3, #3
 800479e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f023 0302 	bic.w	r3, r3, #2
 80047b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a24      	ldr	r2, [pc, #144]	; (8004850 <TIM_OC1_SetConfig+0xec>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d007      	beq.n	80047d4 <TIM_OC1_SetConfig+0x70>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a23      	ldr	r2, [pc, #140]	; (8004854 <TIM_OC1_SetConfig+0xf0>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d003      	beq.n	80047d4 <TIM_OC1_SetConfig+0x70>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a22      	ldr	r2, [pc, #136]	; (8004858 <TIM_OC1_SetConfig+0xf4>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d10c      	bne.n	80047ee <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f023 0308 	bic.w	r3, r3, #8
 80047da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	f023 0304 	bic.w	r3, r3, #4
 80047ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a17      	ldr	r2, [pc, #92]	; (8004850 <TIM_OC1_SetConfig+0xec>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d007      	beq.n	8004806 <TIM_OC1_SetConfig+0xa2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a16      	ldr	r2, [pc, #88]	; (8004854 <TIM_OC1_SetConfig+0xf0>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d003      	beq.n	8004806 <TIM_OC1_SetConfig+0xa2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a15      	ldr	r2, [pc, #84]	; (8004858 <TIM_OC1_SetConfig+0xf4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d111      	bne.n	800482a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800480c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	4313      	orrs	r3, r2
 800481e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	4313      	orrs	r3, r2
 8004828:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	621a      	str	r2, [r3, #32]
}
 8004844:	bf00      	nop
 8004846:	371c      	adds	r7, #28
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	40012c00 	.word	0x40012c00
 8004854:	40014000 	.word	0x40014000
 8004858:	40014400 	.word	0x40014400

0800485c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800485c:	b480      	push	{r7}
 800485e:	b087      	sub	sp, #28
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	f023 0210 	bic.w	r2, r3, #16
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800488a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800488e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	021b      	lsls	r3, r3, #8
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f023 0320 	bic.w	r3, r3, #32
 80048aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	011b      	lsls	r3, r3, #4
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a22      	ldr	r2, [pc, #136]	; (8004944 <TIM_OC2_SetConfig+0xe8>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d10d      	bne.n	80048dc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a19      	ldr	r2, [pc, #100]	; (8004944 <TIM_OC2_SetConfig+0xe8>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d007      	beq.n	80048f4 <TIM_OC2_SetConfig+0x98>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a18      	ldr	r2, [pc, #96]	; (8004948 <TIM_OC2_SetConfig+0xec>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d003      	beq.n	80048f4 <TIM_OC2_SetConfig+0x98>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a17      	ldr	r2, [pc, #92]	; (800494c <TIM_OC2_SetConfig+0xf0>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d113      	bne.n	800491c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004902:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	4313      	orrs	r3, r2
 800490e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	4313      	orrs	r3, r2
 800491a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	621a      	str	r2, [r3, #32]
}
 8004936:	bf00      	nop
 8004938:	371c      	adds	r7, #28
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	40012c00 	.word	0x40012c00
 8004948:	40014000 	.word	0x40014000
 800494c:	40014400 	.word	0x40014400

08004950 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004950:	b480      	push	{r7}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800497e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f023 0303 	bic.w	r3, r3, #3
 800498a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	4313      	orrs	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800499c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	021b      	lsls	r3, r3, #8
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a21      	ldr	r2, [pc, #132]	; (8004a34 <TIM_OC3_SetConfig+0xe4>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d10d      	bne.n	80049ce <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	021b      	lsls	r3, r3, #8
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a18      	ldr	r2, [pc, #96]	; (8004a34 <TIM_OC3_SetConfig+0xe4>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d007      	beq.n	80049e6 <TIM_OC3_SetConfig+0x96>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a17      	ldr	r2, [pc, #92]	; (8004a38 <TIM_OC3_SetConfig+0xe8>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d003      	beq.n	80049e6 <TIM_OC3_SetConfig+0x96>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a16      	ldr	r2, [pc, #88]	; (8004a3c <TIM_OC3_SetConfig+0xec>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d113      	bne.n	8004a0e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	011b      	lsls	r3, r3, #4
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	011b      	lsls	r3, r3, #4
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	621a      	str	r2, [r3, #32]
}
 8004a28:	bf00      	nop
 8004a2a:	371c      	adds	r7, #28
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	40012c00 	.word	0x40012c00
 8004a38:	40014000 	.word	0x40014000
 8004a3c:	40014400 	.word	0x40014400

08004a40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b087      	sub	sp, #28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	021b      	lsls	r3, r3, #8
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	031b      	lsls	r3, r3, #12
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a14      	ldr	r2, [pc, #80]	; (8004af0 <TIM_OC4_SetConfig+0xb0>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d007      	beq.n	8004ab4 <TIM_OC4_SetConfig+0x74>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a13      	ldr	r2, [pc, #76]	; (8004af4 <TIM_OC4_SetConfig+0xb4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d003      	beq.n	8004ab4 <TIM_OC4_SetConfig+0x74>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a12      	ldr	r2, [pc, #72]	; (8004af8 <TIM_OC4_SetConfig+0xb8>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d109      	bne.n	8004ac8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	019b      	lsls	r3, r3, #6
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	621a      	str	r2, [r3, #32]
}
 8004ae2:	bf00      	nop
 8004ae4:	371c      	adds	r7, #28
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	40012c00 	.word	0x40012c00
 8004af4:	40014000 	.word	0x40014000
 8004af8:	40014400 	.word	0x40014400

08004afc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004b40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	041b      	lsls	r3, r3, #16
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a13      	ldr	r2, [pc, #76]	; (8004ba0 <TIM_OC5_SetConfig+0xa4>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d007      	beq.n	8004b66 <TIM_OC5_SetConfig+0x6a>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a12      	ldr	r2, [pc, #72]	; (8004ba4 <TIM_OC5_SetConfig+0xa8>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d003      	beq.n	8004b66 <TIM_OC5_SetConfig+0x6a>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a11      	ldr	r2, [pc, #68]	; (8004ba8 <TIM_OC5_SetConfig+0xac>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d109      	bne.n	8004b7a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	021b      	lsls	r3, r3, #8
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	621a      	str	r2, [r3, #32]
}
 8004b94:	bf00      	nop
 8004b96:	371c      	adds	r7, #28
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	40012c00 	.word	0x40012c00
 8004ba4:	40014000 	.word	0x40014000
 8004ba8:	40014400 	.word	0x40014400

08004bac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b087      	sub	sp, #28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	021b      	lsls	r3, r3, #8
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004bf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	051b      	lsls	r3, r3, #20
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a14      	ldr	r2, [pc, #80]	; (8004c54 <TIM_OC6_SetConfig+0xa8>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d007      	beq.n	8004c18 <TIM_OC6_SetConfig+0x6c>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a13      	ldr	r2, [pc, #76]	; (8004c58 <TIM_OC6_SetConfig+0xac>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d003      	beq.n	8004c18 <TIM_OC6_SetConfig+0x6c>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a12      	ldr	r2, [pc, #72]	; (8004c5c <TIM_OC6_SetConfig+0xb0>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d109      	bne.n	8004c2c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	029b      	lsls	r3, r3, #10
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685a      	ldr	r2, [r3, #4]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	621a      	str	r2, [r3, #32]
}
 8004c46:	bf00      	nop
 8004c48:	371c      	adds	r7, #28
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	40012c00 	.word	0x40012c00
 8004c58:	40014000 	.word	0x40014000
 8004c5c:	40014400 	.word	0x40014400

08004c60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b087      	sub	sp, #28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	f003 031f 	and.w	r3, r3, #31
 8004c72:	2201      	movs	r2, #1
 8004c74:	fa02 f303 	lsl.w	r3, r2, r3
 8004c78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6a1a      	ldr	r2, [r3, #32]
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	43db      	mvns	r3, r3
 8004c82:	401a      	ands	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6a1a      	ldr	r2, [r3, #32]
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f003 031f 	and.w	r3, r3, #31
 8004c92:	6879      	ldr	r1, [r7, #4]
 8004c94:	fa01 f303 	lsl.w	r3, r1, r3
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	621a      	str	r2, [r3, #32]
}
 8004c9e:	bf00      	nop
 8004ca0:	371c      	adds	r7, #28
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
	...

08004cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d101      	bne.n	8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e04f      	b.n	8004d64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a21      	ldr	r2, [pc, #132]	; (8004d70 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d108      	bne.n	8004d00 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004cf4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a14      	ldr	r2, [pc, #80]	; (8004d70 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d009      	beq.n	8004d38 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d2c:	d004      	beq.n	8004d38 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a10      	ldr	r2, [pc, #64]	; (8004d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d10c      	bne.n	8004d52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr
 8004d70:	40012c00 	.word	0x40012c00
 8004d74:	40014000 	.word	0x40014000

08004d78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d101      	bne.n	8004d94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d90:	2302      	movs	r3, #2
 8004d92:	e060      	b.n	8004e56 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	041b      	lsls	r3, r3, #16
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a14      	ldr	r2, [pc, #80]	; (8004e64 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d115      	bne.n	8004e44 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	051b      	lsls	r3, r3, #20
 8004e24:	4313      	orrs	r3, r2
 8004e26:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	40012c00 	.word	0x40012c00

08004e68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e040      	b.n	8004f38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d106      	bne.n	8004ecc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7fc f808 	bl	8000edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2224      	movs	r2, #36	; 0x24
 8004ed0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 0201 	bic.w	r2, r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 fa9c 	bl	8005420 <UART_SetConfig>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d101      	bne.n	8004ef2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e022      	b.n	8004f38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 fc9c 	bl	8005838 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689a      	ldr	r2, [r3, #8]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0201 	orr.w	r2, r2, #1
 8004f2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 fd23 	bl	800597c <UART_CheckIdleState>
 8004f36:	4603      	mov	r3, r0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f52:	2b20      	cmp	r3, #32
 8004f54:	d131      	bne.n	8004fba <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d002      	beq.n	8004f62 <HAL_UART_Receive_IT+0x22>
 8004f5c:	88fb      	ldrh	r3, [r7, #6]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e02a      	b.n	8004fbc <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d101      	bne.n	8004f74 <HAL_UART_Receive_IT+0x34>
 8004f70:	2302      	movs	r3, #2
 8004f72:	e023      	b.n	8004fbc <HAL_UART_Receive_IT+0x7c>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a0f      	ldr	r2, [pc, #60]	; (8004fc4 <HAL_UART_Receive_IT+0x84>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d00e      	beq.n	8004faa <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d007      	beq.n	8004faa <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004fa8:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004faa:	88fb      	ldrh	r3, [r7, #6]
 8004fac:	461a      	mov	r2, r3
 8004fae:	68b9      	ldr	r1, [r7, #8]
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f000 fda9 	bl	8005b08 <UART_Start_Receive_IT>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	e000      	b.n	8004fbc <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8004fba:	2302      	movs	r3, #2
  }
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	40008000 	.word	0x40008000

08004fc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b088      	sub	sp, #32
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004fe8:	69fa      	ldr	r2, [r7, #28]
 8004fea:	f640 030f 	movw	r3, #2063	; 0x80f
 8004fee:	4013      	ands	r3, r2
 8004ff0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d113      	bne.n	8005020 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	f003 0320 	and.w	r3, r3, #32
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00e      	beq.n	8005020 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	f003 0320 	and.w	r3, r3, #32
 8005008:	2b00      	cmp	r3, #0
 800500a:	d009      	beq.n	8005020 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 81ce 	beq.w	80053b2 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	4798      	blx	r3
      }
      return;
 800501e:	e1c8      	b.n	80053b2 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	2b00      	cmp	r3, #0
 8005024:	f000 80e3 	beq.w	80051ee <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	d105      	bne.n	800503e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	4ba6      	ldr	r3, [pc, #664]	; (80052d0 <HAL_UART_IRQHandler+0x308>)
 8005036:	4013      	ands	r3, r2
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 80d8 	beq.w	80051ee <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b00      	cmp	r3, #0
 8005046:	d010      	beq.n	800506a <HAL_UART_IRQHandler+0xa2>
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00b      	beq.n	800506a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2201      	movs	r2, #1
 8005058:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005060:	f043 0201 	orr.w	r2, r3, #1
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d010      	beq.n	8005096 <HAL_UART_IRQHandler+0xce>
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00b      	beq.n	8005096 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2202      	movs	r2, #2
 8005084:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800508c:	f043 0204 	orr.w	r2, r3, #4
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	f003 0304 	and.w	r3, r3, #4
 800509c:	2b00      	cmp	r3, #0
 800509e:	d010      	beq.n	80050c2 <HAL_UART_IRQHandler+0xfa>
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00b      	beq.n	80050c2 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2204      	movs	r2, #4
 80050b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050b8:	f043 0202 	orr.w	r2, r3, #2
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	f003 0308 	and.w	r3, r3, #8
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d015      	beq.n	80050f8 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	f003 0320 	and.w	r3, r3, #32
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d104      	bne.n	80050e0 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00b      	beq.n	80050f8 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2208      	movs	r2, #8
 80050e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050ee:	f043 0208 	orr.w	r2, r3, #8
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d011      	beq.n	8005126 <HAL_UART_IRQHandler+0x15e>
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00c      	beq.n	8005126 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005114:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800511c:	f043 0220 	orr.w	r2, r3, #32
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 8142 	beq.w	80053b6 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	f003 0320 	and.w	r3, r3, #32
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00c      	beq.n	8005156 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	f003 0320 	and.w	r3, r3, #32
 8005142:	2b00      	cmp	r3, #0
 8005144:	d007      	beq.n	8005156 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800514a:	2b00      	cmp	r3, #0
 800514c:	d003      	beq.n	8005156 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800515c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005168:	2b40      	cmp	r3, #64	; 0x40
 800516a:	d004      	beq.n	8005176 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005172:	2b00      	cmp	r3, #0
 8005174:	d031      	beq.n	80051da <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 fd4e 	bl	8005c18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005186:	2b40      	cmp	r3, #64	; 0x40
 8005188:	d123      	bne.n	80051d2 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689a      	ldr	r2, [r3, #8]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005198:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d013      	beq.n	80051ca <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a6:	4a4b      	ldr	r2, [pc, #300]	; (80052d4 <HAL_UART_IRQHandler+0x30c>)
 80051a8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fd fad9 	bl	8002766 <HAL_DMA_Abort_IT>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d017      	beq.n	80051ea <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80051c4:	4610      	mov	r0, r2
 80051c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c8:	e00f      	b.n	80051ea <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f912 	bl	80053f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d0:	e00b      	b.n	80051ea <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f90e 	bl	80053f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d8:	e007      	b.n	80051ea <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f90a 	bl	80053f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80051e8:	e0e5      	b.n	80053b6 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ea:	bf00      	nop
    return;
 80051ec:	e0e3      	b.n	80053b6 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	f040 80a9 	bne.w	800534a <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	f003 0310 	and.w	r3, r3, #16
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f000 80a3 	beq.w	800534a <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	f003 0310 	and.w	r3, r3, #16
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 809d 	beq.w	800534a <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2210      	movs	r2, #16
 8005216:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005222:	2b40      	cmp	r3, #64	; 0x40
 8005224:	d158      	bne.n	80052d8 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8005230:	893b      	ldrh	r3, [r7, #8]
 8005232:	2b00      	cmp	r3, #0
 8005234:	f000 80c1 	beq.w	80053ba <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800523e:	893a      	ldrh	r2, [r7, #8]
 8005240:	429a      	cmp	r2, r3
 8005242:	f080 80ba 	bcs.w	80053ba <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	893a      	ldrh	r2, [r7, #8]
 800524a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0320 	and.w	r3, r3, #32
 800525a:	2b00      	cmp	r3, #0
 800525c:	d12a      	bne.n	80052b4 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800526c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	689a      	ldr	r2, [r3, #8]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 0201 	bic.w	r2, r2, #1
 800527c:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800528c:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2220      	movs	r2, #32
 8005292:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 0210 	bic.w	r2, r2, #16
 80052a8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7fd fa1b 	bl	80026ea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	4619      	mov	r1, r3
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f89d 	bl	8005408 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80052ce:	e074      	b.n	80053ba <HAL_UART_IRQHandler+0x3f2>
 80052d0:	04000120 	.word	0x04000120
 80052d4:	08005c77 	.word	0x08005c77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d063      	beq.n	80053be <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 80052f6:	897b      	ldrh	r3, [r7, #10]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d060      	beq.n	80053be <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800530a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689a      	ldr	r2, [r3, #8]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f022 0201 	bic.w	r2, r2, #1
 800531a:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2220      	movs	r2, #32
 8005320:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 0210 	bic.w	r2, r2, #16
 800533c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800533e:	897b      	ldrh	r3, [r7, #10]
 8005340:	4619      	mov	r1, r3
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f860 	bl	8005408 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005348:	e039      	b.n	80053be <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00d      	beq.n	8005370 <HAL_UART_IRQHandler+0x3a8>
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d008      	beq.n	8005370 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005366:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 fd8b 	bl	8005e84 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800536e:	e029      	b.n	80053c4 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00d      	beq.n	8005396 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005380:	2b00      	cmp	r3, #0
 8005382:	d008      	beq.n	8005396 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005388:	2b00      	cmp	r3, #0
 800538a:	d01a      	beq.n	80053c2 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	4798      	blx	r3
    }
    return;
 8005394:	e015      	b.n	80053c2 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539c:	2b00      	cmp	r3, #0
 800539e:	d011      	beq.n	80053c4 <HAL_UART_IRQHandler+0x3fc>
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00c      	beq.n	80053c4 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fc79 	bl	8005ca2 <UART_EndTransmit_IT>
    return;
 80053b0:	e008      	b.n	80053c4 <HAL_UART_IRQHandler+0x3fc>
      return;
 80053b2:	bf00      	nop
 80053b4:	e006      	b.n	80053c4 <HAL_UART_IRQHandler+0x3fc>
    return;
 80053b6:	bf00      	nop
 80053b8:	e004      	b.n	80053c4 <HAL_UART_IRQHandler+0x3fc>
      return;
 80053ba:	bf00      	nop
 80053bc:	e002      	b.n	80053c4 <HAL_UART_IRQHandler+0x3fc>
      return;
 80053be:	bf00      	nop
 80053c0:	e000      	b.n	80053c4 <HAL_UART_IRQHandler+0x3fc>
    return;
 80053c2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80053c4:	3720      	adds	r7, #32
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop

080053cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	460b      	mov	r3, r1
 8005412:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005420:	b5b0      	push	{r4, r5, r7, lr}
 8005422:	b088      	sub	sp, #32
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005428:	2300      	movs	r3, #0
 800542a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	689a      	ldr	r2, [r3, #8]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	431a      	orrs	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	69db      	ldr	r3, [r3, #28]
 8005440:	4313      	orrs	r3, r2
 8005442:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	4baf      	ldr	r3, [pc, #700]	; (8005708 <UART_SetConfig+0x2e8>)
 800544c:	4013      	ands	r3, r2
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	6812      	ldr	r2, [r2, #0]
 8005452:	69f9      	ldr	r1, [r7, #28]
 8005454:	430b      	orrs	r3, r1
 8005456:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68da      	ldr	r2, [r3, #12]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4aa4      	ldr	r2, [pc, #656]	; (800570c <UART_SetConfig+0x2ec>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d004      	beq.n	8005488 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	69fa      	ldr	r2, [r7, #28]
 8005484:	4313      	orrs	r3, r2
 8005486:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	69fa      	ldr	r2, [r7, #28]
 8005498:	430a      	orrs	r2, r1
 800549a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a9b      	ldr	r2, [pc, #620]	; (8005710 <UART_SetConfig+0x2f0>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d121      	bne.n	80054ea <UART_SetConfig+0xca>
 80054a6:	4b9b      	ldr	r3, [pc, #620]	; (8005714 <UART_SetConfig+0x2f4>)
 80054a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ac:	f003 0303 	and.w	r3, r3, #3
 80054b0:	2b03      	cmp	r3, #3
 80054b2:	d817      	bhi.n	80054e4 <UART_SetConfig+0xc4>
 80054b4:	a201      	add	r2, pc, #4	; (adr r2, 80054bc <UART_SetConfig+0x9c>)
 80054b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ba:	bf00      	nop
 80054bc:	080054cd 	.word	0x080054cd
 80054c0:	080054d9 	.word	0x080054d9
 80054c4:	080054d3 	.word	0x080054d3
 80054c8:	080054df 	.word	0x080054df
 80054cc:	2301      	movs	r3, #1
 80054ce:	76fb      	strb	r3, [r7, #27]
 80054d0:	e070      	b.n	80055b4 <UART_SetConfig+0x194>
 80054d2:	2302      	movs	r3, #2
 80054d4:	76fb      	strb	r3, [r7, #27]
 80054d6:	e06d      	b.n	80055b4 <UART_SetConfig+0x194>
 80054d8:	2304      	movs	r3, #4
 80054da:	76fb      	strb	r3, [r7, #27]
 80054dc:	e06a      	b.n	80055b4 <UART_SetConfig+0x194>
 80054de:	2308      	movs	r3, #8
 80054e0:	76fb      	strb	r3, [r7, #27]
 80054e2:	e067      	b.n	80055b4 <UART_SetConfig+0x194>
 80054e4:	2310      	movs	r3, #16
 80054e6:	76fb      	strb	r3, [r7, #27]
 80054e8:	e064      	b.n	80055b4 <UART_SetConfig+0x194>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a8a      	ldr	r2, [pc, #552]	; (8005718 <UART_SetConfig+0x2f8>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d132      	bne.n	800555a <UART_SetConfig+0x13a>
 80054f4:	4b87      	ldr	r3, [pc, #540]	; (8005714 <UART_SetConfig+0x2f4>)
 80054f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fa:	f003 030c 	and.w	r3, r3, #12
 80054fe:	2b0c      	cmp	r3, #12
 8005500:	d828      	bhi.n	8005554 <UART_SetConfig+0x134>
 8005502:	a201      	add	r2, pc, #4	; (adr r2, 8005508 <UART_SetConfig+0xe8>)
 8005504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005508:	0800553d 	.word	0x0800553d
 800550c:	08005555 	.word	0x08005555
 8005510:	08005555 	.word	0x08005555
 8005514:	08005555 	.word	0x08005555
 8005518:	08005549 	.word	0x08005549
 800551c:	08005555 	.word	0x08005555
 8005520:	08005555 	.word	0x08005555
 8005524:	08005555 	.word	0x08005555
 8005528:	08005543 	.word	0x08005543
 800552c:	08005555 	.word	0x08005555
 8005530:	08005555 	.word	0x08005555
 8005534:	08005555 	.word	0x08005555
 8005538:	0800554f 	.word	0x0800554f
 800553c:	2300      	movs	r3, #0
 800553e:	76fb      	strb	r3, [r7, #27]
 8005540:	e038      	b.n	80055b4 <UART_SetConfig+0x194>
 8005542:	2302      	movs	r3, #2
 8005544:	76fb      	strb	r3, [r7, #27]
 8005546:	e035      	b.n	80055b4 <UART_SetConfig+0x194>
 8005548:	2304      	movs	r3, #4
 800554a:	76fb      	strb	r3, [r7, #27]
 800554c:	e032      	b.n	80055b4 <UART_SetConfig+0x194>
 800554e:	2308      	movs	r3, #8
 8005550:	76fb      	strb	r3, [r7, #27]
 8005552:	e02f      	b.n	80055b4 <UART_SetConfig+0x194>
 8005554:	2310      	movs	r3, #16
 8005556:	76fb      	strb	r3, [r7, #27]
 8005558:	e02c      	b.n	80055b4 <UART_SetConfig+0x194>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a6b      	ldr	r2, [pc, #428]	; (800570c <UART_SetConfig+0x2ec>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d125      	bne.n	80055b0 <UART_SetConfig+0x190>
 8005564:	4b6b      	ldr	r3, [pc, #428]	; (8005714 <UART_SetConfig+0x2f4>)
 8005566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800556a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800556e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005572:	d017      	beq.n	80055a4 <UART_SetConfig+0x184>
 8005574:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005578:	d817      	bhi.n	80055aa <UART_SetConfig+0x18a>
 800557a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800557e:	d00b      	beq.n	8005598 <UART_SetConfig+0x178>
 8005580:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005584:	d811      	bhi.n	80055aa <UART_SetConfig+0x18a>
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <UART_SetConfig+0x172>
 800558a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800558e:	d006      	beq.n	800559e <UART_SetConfig+0x17e>
 8005590:	e00b      	b.n	80055aa <UART_SetConfig+0x18a>
 8005592:	2300      	movs	r3, #0
 8005594:	76fb      	strb	r3, [r7, #27]
 8005596:	e00d      	b.n	80055b4 <UART_SetConfig+0x194>
 8005598:	2302      	movs	r3, #2
 800559a:	76fb      	strb	r3, [r7, #27]
 800559c:	e00a      	b.n	80055b4 <UART_SetConfig+0x194>
 800559e:	2304      	movs	r3, #4
 80055a0:	76fb      	strb	r3, [r7, #27]
 80055a2:	e007      	b.n	80055b4 <UART_SetConfig+0x194>
 80055a4:	2308      	movs	r3, #8
 80055a6:	76fb      	strb	r3, [r7, #27]
 80055a8:	e004      	b.n	80055b4 <UART_SetConfig+0x194>
 80055aa:	2310      	movs	r3, #16
 80055ac:	76fb      	strb	r3, [r7, #27]
 80055ae:	e001      	b.n	80055b4 <UART_SetConfig+0x194>
 80055b0:	2310      	movs	r3, #16
 80055b2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a54      	ldr	r2, [pc, #336]	; (800570c <UART_SetConfig+0x2ec>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d173      	bne.n	80056a6 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055be:	7efb      	ldrb	r3, [r7, #27]
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d824      	bhi.n	800560e <UART_SetConfig+0x1ee>
 80055c4:	a201      	add	r2, pc, #4	; (adr r2, 80055cc <UART_SetConfig+0x1ac>)
 80055c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ca:	bf00      	nop
 80055cc:	080055f1 	.word	0x080055f1
 80055d0:	0800560f 	.word	0x0800560f
 80055d4:	080055f9 	.word	0x080055f9
 80055d8:	0800560f 	.word	0x0800560f
 80055dc:	080055ff 	.word	0x080055ff
 80055e0:	0800560f 	.word	0x0800560f
 80055e4:	0800560f 	.word	0x0800560f
 80055e8:	0800560f 	.word	0x0800560f
 80055ec:	08005607 	.word	0x08005607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055f0:	f7fe f89e 	bl	8003730 <HAL_RCC_GetPCLK1Freq>
 80055f4:	6178      	str	r0, [r7, #20]
        break;
 80055f6:	e00f      	b.n	8005618 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055f8:	4b48      	ldr	r3, [pc, #288]	; (800571c <UART_SetConfig+0x2fc>)
 80055fa:	617b      	str	r3, [r7, #20]
        break;
 80055fc:	e00c      	b.n	8005618 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055fe:	f7fd ffff 	bl	8003600 <HAL_RCC_GetSysClockFreq>
 8005602:	6178      	str	r0, [r7, #20]
        break;
 8005604:	e008      	b.n	8005618 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800560a:	617b      	str	r3, [r7, #20]
        break;
 800560c:	e004      	b.n	8005618 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	76bb      	strb	r3, [r7, #26]
        break;
 8005616:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	2b00      	cmp	r3, #0
 800561c:	f000 80fe 	beq.w	800581c <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	4613      	mov	r3, r2
 8005626:	005b      	lsls	r3, r3, #1
 8005628:	4413      	add	r3, r2
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	429a      	cmp	r2, r3
 800562e:	d305      	bcc.n	800563c <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	429a      	cmp	r2, r3
 800563a:	d902      	bls.n	8005642 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	76bb      	strb	r3, [r7, #26]
 8005640:	e0ec      	b.n	800581c <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	4618      	mov	r0, r3
 8005646:	f04f 0100 	mov.w	r1, #0
 800564a:	f04f 0200 	mov.w	r2, #0
 800564e:	f04f 0300 	mov.w	r3, #0
 8005652:	020b      	lsls	r3, r1, #8
 8005654:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005658:	0202      	lsls	r2, r0, #8
 800565a:	6879      	ldr	r1, [r7, #4]
 800565c:	6849      	ldr	r1, [r1, #4]
 800565e:	0849      	lsrs	r1, r1, #1
 8005660:	4608      	mov	r0, r1
 8005662:	f04f 0100 	mov.w	r1, #0
 8005666:	1814      	adds	r4, r2, r0
 8005668:	eb43 0501 	adc.w	r5, r3, r1
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	461a      	mov	r2, r3
 8005672:	f04f 0300 	mov.w	r3, #0
 8005676:	4620      	mov	r0, r4
 8005678:	4629      	mov	r1, r5
 800567a:	f7fa fda7 	bl	80001cc <__aeabi_uldivmod>
 800567e:	4602      	mov	r2, r0
 8005680:	460b      	mov	r3, r1
 8005682:	4613      	mov	r3, r2
 8005684:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800568c:	d308      	bcc.n	80056a0 <UART_SetConfig+0x280>
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005694:	d204      	bcs.n	80056a0 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	60da      	str	r2, [r3, #12]
 800569e:	e0bd      	b.n	800581c <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	76bb      	strb	r3, [r7, #26]
 80056a4:	e0ba      	b.n	800581c <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056ae:	d168      	bne.n	8005782 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 80056b0:	7efb      	ldrb	r3, [r7, #27]
 80056b2:	2b08      	cmp	r3, #8
 80056b4:	d834      	bhi.n	8005720 <UART_SetConfig+0x300>
 80056b6:	a201      	add	r2, pc, #4	; (adr r2, 80056bc <UART_SetConfig+0x29c>)
 80056b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056bc:	080056e1 	.word	0x080056e1
 80056c0:	080056e9 	.word	0x080056e9
 80056c4:	080056f1 	.word	0x080056f1
 80056c8:	08005721 	.word	0x08005721
 80056cc:	080056f7 	.word	0x080056f7
 80056d0:	08005721 	.word	0x08005721
 80056d4:	08005721 	.word	0x08005721
 80056d8:	08005721 	.word	0x08005721
 80056dc:	080056ff 	.word	0x080056ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056e0:	f7fe f826 	bl	8003730 <HAL_RCC_GetPCLK1Freq>
 80056e4:	6178      	str	r0, [r7, #20]
        break;
 80056e6:	e020      	b.n	800572a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056e8:	f7fe f838 	bl	800375c <HAL_RCC_GetPCLK2Freq>
 80056ec:	6178      	str	r0, [r7, #20]
        break;
 80056ee:	e01c      	b.n	800572a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056f0:	4b0a      	ldr	r3, [pc, #40]	; (800571c <UART_SetConfig+0x2fc>)
 80056f2:	617b      	str	r3, [r7, #20]
        break;
 80056f4:	e019      	b.n	800572a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056f6:	f7fd ff83 	bl	8003600 <HAL_RCC_GetSysClockFreq>
 80056fa:	6178      	str	r0, [r7, #20]
        break;
 80056fc:	e015      	b.n	800572a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005702:	617b      	str	r3, [r7, #20]
        break;
 8005704:	e011      	b.n	800572a <UART_SetConfig+0x30a>
 8005706:	bf00      	nop
 8005708:	efff69f3 	.word	0xefff69f3
 800570c:	40008000 	.word	0x40008000
 8005710:	40013800 	.word	0x40013800
 8005714:	40021000 	.word	0x40021000
 8005718:	40004400 	.word	0x40004400
 800571c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005720:	2300      	movs	r3, #0
 8005722:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	76bb      	strb	r3, [r7, #26]
        break;
 8005728:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d075      	beq.n	800581c <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	005a      	lsls	r2, r3, #1
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	085b      	lsrs	r3, r3, #1
 800573a:	441a      	add	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	fbb2 f3f3 	udiv	r3, r2, r3
 8005744:	b29b      	uxth	r3, r3
 8005746:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	2b0f      	cmp	r3, #15
 800574c:	d916      	bls.n	800577c <UART_SetConfig+0x35c>
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005754:	d212      	bcs.n	800577c <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	b29b      	uxth	r3, r3
 800575a:	f023 030f 	bic.w	r3, r3, #15
 800575e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	085b      	lsrs	r3, r3, #1
 8005764:	b29b      	uxth	r3, r3
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	b29a      	uxth	r2, r3
 800576c:	89fb      	ldrh	r3, [r7, #14]
 800576e:	4313      	orrs	r3, r2
 8005770:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	89fa      	ldrh	r2, [r7, #14]
 8005778:	60da      	str	r2, [r3, #12]
 800577a:	e04f      	b.n	800581c <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	76bb      	strb	r3, [r7, #26]
 8005780:	e04c      	b.n	800581c <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005782:	7efb      	ldrb	r3, [r7, #27]
 8005784:	2b08      	cmp	r3, #8
 8005786:	d828      	bhi.n	80057da <UART_SetConfig+0x3ba>
 8005788:	a201      	add	r2, pc, #4	; (adr r2, 8005790 <UART_SetConfig+0x370>)
 800578a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578e:	bf00      	nop
 8005790:	080057b5 	.word	0x080057b5
 8005794:	080057bd 	.word	0x080057bd
 8005798:	080057c5 	.word	0x080057c5
 800579c:	080057db 	.word	0x080057db
 80057a0:	080057cb 	.word	0x080057cb
 80057a4:	080057db 	.word	0x080057db
 80057a8:	080057db 	.word	0x080057db
 80057ac:	080057db 	.word	0x080057db
 80057b0:	080057d3 	.word	0x080057d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057b4:	f7fd ffbc 	bl	8003730 <HAL_RCC_GetPCLK1Freq>
 80057b8:	6178      	str	r0, [r7, #20]
        break;
 80057ba:	e013      	b.n	80057e4 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057bc:	f7fd ffce 	bl	800375c <HAL_RCC_GetPCLK2Freq>
 80057c0:	6178      	str	r0, [r7, #20]
        break;
 80057c2:	e00f      	b.n	80057e4 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057c4:	4b1b      	ldr	r3, [pc, #108]	; (8005834 <UART_SetConfig+0x414>)
 80057c6:	617b      	str	r3, [r7, #20]
        break;
 80057c8:	e00c      	b.n	80057e4 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057ca:	f7fd ff19 	bl	8003600 <HAL_RCC_GetSysClockFreq>
 80057ce:	6178      	str	r0, [r7, #20]
        break;
 80057d0:	e008      	b.n	80057e4 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057d6:	617b      	str	r3, [r7, #20]
        break;
 80057d8:	e004      	b.n	80057e4 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 80057da:	2300      	movs	r3, #0
 80057dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	76bb      	strb	r3, [r7, #26]
        break;
 80057e2:	bf00      	nop
    }

    if (pclk != 0U)
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d018      	beq.n	800581c <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	085a      	lsrs	r2, r3, #1
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	441a      	add	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	2b0f      	cmp	r3, #15
 8005804:	d908      	bls.n	8005818 <UART_SetConfig+0x3f8>
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800580c:	d204      	bcs.n	8005818 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	60da      	str	r2, [r3, #12]
 8005816:	e001      	b.n	800581c <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005828:	7ebb      	ldrb	r3, [r7, #26]
}
 800582a:	4618      	mov	r0, r3
 800582c:	3720      	adds	r7, #32
 800582e:	46bd      	mov	sp, r7
 8005830:	bdb0      	pop	{r4, r5, r7, pc}
 8005832:	bf00      	nop
 8005834:	00f42400 	.word	0x00f42400

08005838 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00a      	beq.n	8005862 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	430a      	orrs	r2, r1
 8005860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00a      	beq.n	8005884 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	430a      	orrs	r2, r1
 8005882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00a      	beq.n	80058a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058aa:	f003 0308 	and.w	r3, r3, #8
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00a      	beq.n	80058c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	430a      	orrs	r2, r1
 80058c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058cc:	f003 0310 	and.w	r3, r3, #16
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00a      	beq.n	80058ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ee:	f003 0320 	and.w	r3, r3, #32
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00a      	beq.n	800590c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005914:	2b00      	cmp	r3, #0
 8005916:	d01a      	beq.n	800594e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005936:	d10a      	bne.n	800594e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00a      	beq.n	8005970 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	605a      	str	r2, [r3, #4]
  }
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b086      	sub	sp, #24
 8005980:	af02      	add	r7, sp, #8
 8005982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800598c:	f7fb fc2c 	bl	80011e8 <HAL_GetTick>
 8005990:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0308 	and.w	r3, r3, #8
 800599c:	2b08      	cmp	r3, #8
 800599e:	d10e      	bne.n	80059be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059a4:	9300      	str	r3, [sp, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f82d 	bl	8005a0e <UART_WaitOnFlagUntilTimeout>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e023      	b.n	8005a06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0304 	and.w	r3, r3, #4
 80059c8:	2b04      	cmp	r3, #4
 80059ca:	d10e      	bne.n	80059ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f817 	bl	8005a0e <UART_WaitOnFlagUntilTimeout>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e00d      	b.n	8005a06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2220      	movs	r2, #32
 80059ee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2220      	movs	r2, #32
 80059f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b084      	sub	sp, #16
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	60f8      	str	r0, [r7, #12]
 8005a16:	60b9      	str	r1, [r7, #8]
 8005a18:	603b      	str	r3, [r7, #0]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a1e:	e05e      	b.n	8005ade <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a26:	d05a      	beq.n	8005ade <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a28:	f7fb fbde 	bl	80011e8 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d302      	bcc.n	8005a3e <UART_WaitOnFlagUntilTimeout+0x30>
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d11b      	bne.n	8005a76 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a4c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	689a      	ldr	r2, [r3, #8]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 0201 	bic.w	r2, r2, #1
 8005a5c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2220      	movs	r2, #32
 8005a62:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2220      	movs	r2, #32
 8005a68:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e043      	b.n	8005afe <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0304 	and.w	r3, r3, #4
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d02c      	beq.n	8005ade <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a92:	d124      	bne.n	8005ade <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a9c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005aac:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	689a      	ldr	r2, [r3, #8]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 0201 	bic.w	r2, r2, #1
 8005abc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2220      	movs	r2, #32
 8005ace:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e00f      	b.n	8005afe <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	69da      	ldr	r2, [r3, #28]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	bf0c      	ite	eq
 8005aee:	2301      	moveq	r3, #1
 8005af0:	2300      	movne	r3, #0
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	461a      	mov	r2, r3
 8005af6:	79fb      	ldrb	r3, [r7, #7]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d091      	beq.n	8005a20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
	...

08005b08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	4613      	mov	r3, r2
 8005b14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	88fa      	ldrh	r2, [r7, #6]
 8005b20:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	88fa      	ldrh	r2, [r7, #6]
 8005b28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b3a:	d10e      	bne.n	8005b5a <UART_Start_Receive_IT+0x52>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d105      	bne.n	8005b50 <UART_Start_Receive_IT+0x48>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005b4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b4e:	e02d      	b.n	8005bac <UART_Start_Receive_IT+0xa4>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	22ff      	movs	r2, #255	; 0xff
 8005b54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b58:	e028      	b.n	8005bac <UART_Start_Receive_IT+0xa4>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10d      	bne.n	8005b7e <UART_Start_Receive_IT+0x76>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d104      	bne.n	8005b74 <UART_Start_Receive_IT+0x6c>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	22ff      	movs	r2, #255	; 0xff
 8005b6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b72:	e01b      	b.n	8005bac <UART_Start_Receive_IT+0xa4>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	227f      	movs	r2, #127	; 0x7f
 8005b78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b7c:	e016      	b.n	8005bac <UART_Start_Receive_IT+0xa4>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b86:	d10d      	bne.n	8005ba4 <UART_Start_Receive_IT+0x9c>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d104      	bne.n	8005b9a <UART_Start_Receive_IT+0x92>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	227f      	movs	r2, #127	; 0x7f
 8005b94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b98:	e008      	b.n	8005bac <UART_Start_Receive_IT+0xa4>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	223f      	movs	r2, #63	; 0x3f
 8005b9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ba2:	e003      	b.n	8005bac <UART_Start_Receive_IT+0xa4>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2222      	movs	r2, #34	; 0x22
 8005bb8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689a      	ldr	r2, [r3, #8]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f042 0201 	orr.w	r2, r2, #1
 8005bc8:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bd2:	d107      	bne.n	8005be4 <UART_Start_Receive_IT+0xdc>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d103      	bne.n	8005be4 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	4a0c      	ldr	r2, [pc, #48]	; (8005c10 <UART_Start_Receive_IT+0x108>)
 8005be0:	665a      	str	r2, [r3, #100]	; 0x64
 8005be2:	e002      	b.n	8005bea <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4a0b      	ldr	r2, [pc, #44]	; (8005c14 <UART_Start_Receive_IT+0x10c>)
 8005be8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005c00:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	08005dad 	.word	0x08005dad
 8005c14:	08005cd5 	.word	0x08005cd5

08005c18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005c2e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689a      	ldr	r2, [r3, #8]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 0201 	bic.w	r2, r2, #1
 8005c3e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d107      	bne.n	8005c58 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f022 0210 	bic.w	r2, r2, #16
 8005c56:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005c6a:	bf00      	nop
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b084      	sub	sp, #16
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f7ff fbad 	bl	80053f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c9a:	bf00      	nop
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b082      	sub	sp, #8
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cb8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2220      	movs	r2, #32
 8005cbe:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f7ff fb80 	bl	80053cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ccc:	bf00      	nop
 8005cce:	3708      	adds	r7, #8
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ce2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ce8:	2b22      	cmp	r3, #34	; 0x22
 8005cea:	d151      	bne.n	8005d90 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005cf2:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005cf4:	89bb      	ldrh	r3, [r7, #12]
 8005cf6:	b2d9      	uxtb	r1, r3
 8005cf8:	89fb      	ldrh	r3, [r7, #14]
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d00:	400a      	ands	r2, r1
 8005d02:	b2d2      	uxtb	r2, r2
 8005d04:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d0a:	1c5a      	adds	r2, r3, #1
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d13a      	bne.n	8005da4 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005d3c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689a      	ldr	r2, [r3, #8]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f022 0201 	bic.w	r2, r2, #1
 8005d4c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2220      	movs	r2, #32
 8005d52:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d10f      	bne.n	8005d82 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f022 0210 	bic.w	r2, r2, #16
 8005d70:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d78:	4619      	mov	r1, r3
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7ff fb44 	bl	8005408 <HAL_UARTEx_RxEventCallback>
 8005d80:	e002      	b.n	8005d88 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f7ff fb2c 	bl	80053e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d8e:	e009      	b.n	8005da4 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	8b1b      	ldrh	r3, [r3, #24]
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f042 0208 	orr.w	r2, r2, #8
 8005da0:	b292      	uxth	r2, r2
 8005da2:	831a      	strh	r2, [r3, #24]
}
 8005da4:	bf00      	nop
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005dba:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dc0:	2b22      	cmp	r3, #34	; 0x22
 8005dc2:	d151      	bne.n	8005e68 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005dca:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dd0:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005dd2:	89ba      	ldrh	r2, [r7, #12]
 8005dd4:	89fb      	ldrh	r3, [r7, #14]
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de2:	1c9a      	adds	r2, r3, #2
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	3b01      	subs	r3, #1
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d13a      	bne.n	8005e7c <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005e14:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689a      	ldr	r2, [r3, #8]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0201 	bic.w	r2, r2, #1
 8005e24:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d10f      	bne.n	8005e5a <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 0210 	bic.w	r2, r2, #16
 8005e48:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005e50:	4619      	mov	r1, r3
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7ff fad8 	bl	8005408 <HAL_UARTEx_RxEventCallback>
 8005e58:	e002      	b.n	8005e60 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7ff fac0 	bl	80053e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e66:	e009      	b.n	8005e7c <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	8b1b      	ldrh	r3, [r3, #24]
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f042 0208 	orr.w	r2, r2, #8
 8005e78:	b292      	uxth	r2, r2
 8005e7a:	831a      	strh	r2, [r3, #24]
}
 8005e7c:	bf00      	nop
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <__libc_init_array>:
 8005e98:	b570      	push	{r4, r5, r6, lr}
 8005e9a:	4d0d      	ldr	r5, [pc, #52]	; (8005ed0 <__libc_init_array+0x38>)
 8005e9c:	4c0d      	ldr	r4, [pc, #52]	; (8005ed4 <__libc_init_array+0x3c>)
 8005e9e:	1b64      	subs	r4, r4, r5
 8005ea0:	10a4      	asrs	r4, r4, #2
 8005ea2:	2600      	movs	r6, #0
 8005ea4:	42a6      	cmp	r6, r4
 8005ea6:	d109      	bne.n	8005ebc <__libc_init_array+0x24>
 8005ea8:	4d0b      	ldr	r5, [pc, #44]	; (8005ed8 <__libc_init_array+0x40>)
 8005eaa:	4c0c      	ldr	r4, [pc, #48]	; (8005edc <__libc_init_array+0x44>)
 8005eac:	f000 f820 	bl	8005ef0 <_init>
 8005eb0:	1b64      	subs	r4, r4, r5
 8005eb2:	10a4      	asrs	r4, r4, #2
 8005eb4:	2600      	movs	r6, #0
 8005eb6:	42a6      	cmp	r6, r4
 8005eb8:	d105      	bne.n	8005ec6 <__libc_init_array+0x2e>
 8005eba:	bd70      	pop	{r4, r5, r6, pc}
 8005ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ec0:	4798      	blx	r3
 8005ec2:	3601      	adds	r6, #1
 8005ec4:	e7ee      	b.n	8005ea4 <__libc_init_array+0xc>
 8005ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eca:	4798      	blx	r3
 8005ecc:	3601      	adds	r6, #1
 8005ece:	e7f2      	b.n	8005eb6 <__libc_init_array+0x1e>
 8005ed0:	08005f58 	.word	0x08005f58
 8005ed4:	08005f58 	.word	0x08005f58
 8005ed8:	08005f58 	.word	0x08005f58
 8005edc:	08005f5c 	.word	0x08005f5c

08005ee0 <memset>:
 8005ee0:	4402      	add	r2, r0
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d100      	bne.n	8005eea <memset+0xa>
 8005ee8:	4770      	bx	lr
 8005eea:	f803 1b01 	strb.w	r1, [r3], #1
 8005eee:	e7f9      	b.n	8005ee4 <memset+0x4>

08005ef0 <_init>:
 8005ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ef2:	bf00      	nop
 8005ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ef6:	bc08      	pop	{r3}
 8005ef8:	469e      	mov	lr, r3
 8005efa:	4770      	bx	lr

08005efc <_fini>:
 8005efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005efe:	bf00      	nop
 8005f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f02:	bc08      	pop	{r3}
 8005f04:	469e      	mov	lr, r3
 8005f06:	4770      	bx	lr
