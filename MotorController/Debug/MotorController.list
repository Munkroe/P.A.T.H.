
MotorController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af8c  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  0800b120  0800b120  0001b120  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b348  0800b348  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  0800b348  0800b348  0001b348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b350  0800b350  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b350  0800b350  0001b350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b354  0800b354  0001b354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  0800b358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000528  20000030  0800b388  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  0800b388  00020558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c920  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032a2  00000000  00000000  0003c980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001750  00000000  00000000  0003fc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001618  00000000  00000000  00041378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004b42  00000000  00000000  00042990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019dd7  00000000  00000000  000474d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de213  00000000  00000000  000612a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013f4bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000680c  00000000  00000000  0013f510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000030 	.word	0x20000030
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b104 	.word	0x0800b104

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000034 	.word	0x20000034
 80001cc:	0800b104 	.word	0x0800b104

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b80:	f000 b96e 	b.w	8000e60 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	468c      	mov	ip, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 8083 	bne.w	8000cb2 <__udivmoddi4+0x116>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	4617      	mov	r7, r2
 8000bb0:	d947      	bls.n	8000c42 <__udivmoddi4+0xa6>
 8000bb2:	fab2 f282 	clz	r2, r2
 8000bb6:	b142      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb8:	f1c2 0020 	rsb	r0, r2, #32
 8000bbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000bc0:	4091      	lsls	r1, r2
 8000bc2:	4097      	lsls	r7, r2
 8000bc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000bc8:	4094      	lsls	r4, r2
 8000bca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000bd4:	fa1f fe87 	uxth.w	lr, r7
 8000bd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be0:	fb06 f10e 	mul.w	r1, r6, lr
 8000be4:	4299      	cmp	r1, r3
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x60>
 8000be8:	18fb      	adds	r3, r7, r3
 8000bea:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bee:	f080 8119 	bcs.w	8000e24 <__udivmoddi4+0x288>
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	f240 8116 	bls.w	8000e24 <__udivmoddi4+0x288>
 8000bf8:	3e02      	subs	r6, #2
 8000bfa:	443b      	add	r3, r7
 8000bfc:	1a5b      	subs	r3, r3, r1
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c04:	fb08 3310 	mls	r3, r8, r0, r3
 8000c08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	45a6      	cmp	lr, r4
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x8c>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c1a:	f080 8105 	bcs.w	8000e28 <__udivmoddi4+0x28c>
 8000c1e:	45a6      	cmp	lr, r4
 8000c20:	f240 8102 	bls.w	8000e28 <__udivmoddi4+0x28c>
 8000c24:	3802      	subs	r0, #2
 8000c26:	443c      	add	r4, r7
 8000c28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	2600      	movs	r6, #0
 8000c32:	b11d      	cbz	r5, 8000c3c <__udivmoddi4+0xa0>
 8000c34:	40d4      	lsrs	r4, r2
 8000c36:	2300      	movs	r3, #0
 8000c38:	e9c5 4300 	strd	r4, r3, [r5]
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	b902      	cbnz	r2, 8000c46 <__udivmoddi4+0xaa>
 8000c44:	deff      	udf	#255	; 0xff
 8000c46:	fab2 f282 	clz	r2, r2
 8000c4a:	2a00      	cmp	r2, #0
 8000c4c:	d150      	bne.n	8000cf0 <__udivmoddi4+0x154>
 8000c4e:	1bcb      	subs	r3, r1, r7
 8000c50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c54:	fa1f f887 	uxth.w	r8, r7
 8000c58:	2601      	movs	r6, #1
 8000c5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c5e:	0c21      	lsrs	r1, r4, #16
 8000c60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c68:	fb08 f30c 	mul.w	r3, r8, ip
 8000c6c:	428b      	cmp	r3, r1
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0xe4>
 8000c70:	1879      	adds	r1, r7, r1
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0xe2>
 8000c78:	428b      	cmp	r3, r1
 8000c7a:	f200 80e9 	bhi.w	8000e50 <__udivmoddi4+0x2b4>
 8000c7e:	4684      	mov	ip, r0
 8000c80:	1ac9      	subs	r1, r1, r3
 8000c82:	b2a3      	uxth	r3, r4
 8000c84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c90:	fb08 f800 	mul.w	r8, r8, r0
 8000c94:	45a0      	cmp	r8, r4
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0x10c>
 8000c98:	193c      	adds	r4, r7, r4
 8000c9a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x10a>
 8000ca0:	45a0      	cmp	r8, r4
 8000ca2:	f200 80d9 	bhi.w	8000e58 <__udivmoddi4+0x2bc>
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	eba4 0408 	sub.w	r4, r4, r8
 8000cac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cb0:	e7bf      	b.n	8000c32 <__udivmoddi4+0x96>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0x12e>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80b1 	beq.w	8000e1e <__udivmoddi4+0x282>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x1cc>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0x140>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80b8 	bhi.w	8000e4c <__udivmoddi4+0x2b0>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0103 	sbc.w	r1, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	468c      	mov	ip, r1
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0a8      	beq.n	8000c3c <__udivmoddi4+0xa0>
 8000cea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cee:	e7a5      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f603 	lsr.w	r6, r0, r3
 8000cf8:	4097      	lsls	r7, r2
 8000cfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000cfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d02:	40d9      	lsrs	r1, r3
 8000d04:	4330      	orrs	r0, r6
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d0c:	fa1f f887 	uxth.w	r8, r7
 8000d10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d18:	fb06 f108 	mul.w	r1, r6, r8
 8000d1c:	4299      	cmp	r1, r3
 8000d1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x19c>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d2a:	f080 808d 	bcs.w	8000e48 <__udivmoddi4+0x2ac>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 808a 	bls.w	8000e48 <__udivmoddi4+0x2ac>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b281      	uxth	r1, r0
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d48:	fb00 f308 	mul.w	r3, r0, r8
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	d907      	bls.n	8000d60 <__udivmoddi4+0x1c4>
 8000d50:	1879      	adds	r1, r7, r1
 8000d52:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d56:	d273      	bcs.n	8000e40 <__udivmoddi4+0x2a4>
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d971      	bls.n	8000e40 <__udivmoddi4+0x2a4>
 8000d5c:	3802      	subs	r0, #2
 8000d5e:	4439      	add	r1, r7
 8000d60:	1acb      	subs	r3, r1, r3
 8000d62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d66:	e778      	b.n	8000c5a <__udivmoddi4+0xbe>
 8000d68:	f1c6 0c20 	rsb	ip, r6, #32
 8000d6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d74:	431c      	orrs	r4, r3
 8000d76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d86:	431f      	orrs	r7, r3
 8000d88:	0c3b      	lsrs	r3, r7, #16
 8000d8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d8e:	fa1f f884 	uxth.w	r8, r4
 8000d92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d9e:	458a      	cmp	sl, r1
 8000da0:	fa02 f206 	lsl.w	r2, r2, r6
 8000da4:	fa00 f306 	lsl.w	r3, r0, r6
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x220>
 8000daa:	1861      	adds	r1, r4, r1
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000db0:	d248      	bcs.n	8000e44 <__udivmoddi4+0x2a8>
 8000db2:	458a      	cmp	sl, r1
 8000db4:	d946      	bls.n	8000e44 <__udivmoddi4+0x2a8>
 8000db6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dba:	4421      	add	r1, r4
 8000dbc:	eba1 010a 	sub.w	r1, r1, sl
 8000dc0:	b2bf      	uxth	r7, r7
 8000dc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dce:	fb00 f808 	mul.w	r8, r0, r8
 8000dd2:	45b8      	cmp	r8, r7
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x24a>
 8000dd6:	19e7      	adds	r7, r4, r7
 8000dd8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ddc:	d22e      	bcs.n	8000e3c <__udivmoddi4+0x2a0>
 8000dde:	45b8      	cmp	r8, r7
 8000de0:	d92c      	bls.n	8000e3c <__udivmoddi4+0x2a0>
 8000de2:	3802      	subs	r0, #2
 8000de4:	4427      	add	r7, r4
 8000de6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dea:	eba7 0708 	sub.w	r7, r7, r8
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	454f      	cmp	r7, r9
 8000df4:	46c6      	mov	lr, r8
 8000df6:	4649      	mov	r1, r9
 8000df8:	d31a      	bcc.n	8000e30 <__udivmoddi4+0x294>
 8000dfa:	d017      	beq.n	8000e2c <__udivmoddi4+0x290>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x27a>
 8000dfe:	ebb3 020e 	subs.w	r2, r3, lr
 8000e02:	eb67 0701 	sbc.w	r7, r7, r1
 8000e06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e0a:	40f2      	lsrs	r2, r6
 8000e0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e10:	40f7      	lsrs	r7, r6
 8000e12:	e9c5 2700 	strd	r2, r7, [r5]
 8000e16:	2600      	movs	r6, #0
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	462e      	mov	r6, r5
 8000e20:	4628      	mov	r0, r5
 8000e22:	e70b      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000e24:	4606      	mov	r6, r0
 8000e26:	e6e9      	b.n	8000bfc <__udivmoddi4+0x60>
 8000e28:	4618      	mov	r0, r3
 8000e2a:	e6fd      	b.n	8000c28 <__udivmoddi4+0x8c>
 8000e2c:	4543      	cmp	r3, r8
 8000e2e:	d2e5      	bcs.n	8000dfc <__udivmoddi4+0x260>
 8000e30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e34:	eb69 0104 	sbc.w	r1, r9, r4
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e7df      	b.n	8000dfc <__udivmoddi4+0x260>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	e7d2      	b.n	8000de6 <__udivmoddi4+0x24a>
 8000e40:	4660      	mov	r0, ip
 8000e42:	e78d      	b.n	8000d60 <__udivmoddi4+0x1c4>
 8000e44:	4681      	mov	r9, r0
 8000e46:	e7b9      	b.n	8000dbc <__udivmoddi4+0x220>
 8000e48:	4666      	mov	r6, ip
 8000e4a:	e775      	b.n	8000d38 <__udivmoddi4+0x19c>
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	e74a      	b.n	8000ce6 <__udivmoddi4+0x14a>
 8000e50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e54:	4439      	add	r1, r7
 8000e56:	e713      	b.n	8000c80 <__udivmoddi4+0xe4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	443c      	add	r4, r7
 8000e5c:	e724      	b.n	8000ca8 <__udivmoddi4+0x10c>
 8000e5e:	bf00      	nop

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <MPU_Init>:
Axes3 resultGyro = { 0 };
Axes3 resultAccel = { 0 };

I2C_HandleTypeDef *hi2c;

HAL_StatusTypeDef MPU_Init(I2C_HandleTypeDef *I2C_handler) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af02      	add	r7, sp, #8
 8000e6a:	6078      	str	r0, [r7, #4]
	hi2c = I2C_handler;
 8000e6c:	4a51      	ldr	r2, [pc, #324]	; (8000fb4 <MPU_Init+0x150>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef returnValue = HAL_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	73fb      	strb	r3, [r7, #15]
	uint8_t initializationBuffer[5] = { 0 };
 8000e76:	2300      	movs	r3, #0
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	733b      	strb	r3, [r7, #12]

	initializationBuffer[0] = MPU_PWR_MGT_1;
 8000e7e:	236b      	movs	r3, #107	; 0x6b
 8000e80:	723b      	strb	r3, [r7, #8]
	initializationBuffer[1] = 0x00; //Set clocksource to internal 8MHz oscillator
 8000e82:	2300      	movs	r3, #0
 8000e84:	727b      	strb	r3, [r7, #9]
	returnValue = HAL_I2C_Master_Transmit(hi2c, (MPU_Address << 1),
 8000e86:	4b4b      	ldr	r3, [pc, #300]	; (8000fb4 <MPU_Init+0x150>)
 8000e88:	6818      	ldr	r0, [r3, #0]
 8000e8a:	2368      	movs	r3, #104	; 0x68
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	b299      	uxth	r1, r3
 8000e92:	f107 0208 	add.w	r2, r7, #8
 8000e96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e9a:	9300      	str	r3, [sp, #0]
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	f004 fa05 	bl	80052ac <HAL_I2C_Master_Transmit>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	73fb      	strb	r3, [r7, #15]
			initializationBuffer, 2, HAL_MAX_DELAY);
	if (returnValue != HAL_OK)
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MPU_Init+0x4c>
		return returnValue;
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	e07d      	b.n	8000fac <MPU_Init+0x148>

	initializationBuffer[0] = SIGNAL_PATH_RESET;
 8000eb0:	2368      	movs	r3, #104	; 0x68
 8000eb2:	723b      	strb	r3, [r7, #8]
	initializationBuffer[1] = 0x07; // Resets gyro, accel & temp signal path to disable any filtering
 8000eb4:	2307      	movs	r3, #7
 8000eb6:	727b      	strb	r3, [r7, #9]
	returnValue = HAL_I2C_Master_Transmit(hi2c, (MPU_Address << 1),
 8000eb8:	4b3e      	ldr	r3, [pc, #248]	; (8000fb4 <MPU_Init+0x150>)
 8000eba:	6818      	ldr	r0, [r3, #0]
 8000ebc:	2368      	movs	r3, #104	; 0x68
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	b299      	uxth	r1, r3
 8000ec4:	f107 0208 	add.w	r2, r7, #8
 8000ec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	2302      	movs	r3, #2
 8000ed0:	f004 f9ec 	bl	80052ac <HAL_I2C_Master_Transmit>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	73fb      	strb	r3, [r7, #15]
			initializationBuffer, 2, HAL_MAX_DELAY);
	if (returnValue != HAL_OK)
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MPU_Init+0x7e>
		return returnValue;
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	e064      	b.n	8000fac <MPU_Init+0x148>

	initializationBuffer[0] = DLPF_CFG;
 8000ee2:	231a      	movs	r3, #26
 8000ee4:	723b      	strb	r3, [r7, #8]
	initializationBuffer[1] = 0x01; //Digital low pass filter disable & gyro sample rate at 1 kHz
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	727b      	strb	r3, [r7, #9]
	returnValue = HAL_I2C_Master_Transmit(hi2c, (MPU_Address << 1),
 8000eea:	4b32      	ldr	r3, [pc, #200]	; (8000fb4 <MPU_Init+0x150>)
 8000eec:	6818      	ldr	r0, [r3, #0]
 8000eee:	2368      	movs	r3, #104	; 0x68
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	b299      	uxth	r1, r3
 8000ef6:	f107 0208 	add.w	r2, r7, #8
 8000efa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	2302      	movs	r3, #2
 8000f02:	f004 f9d3 	bl	80052ac <HAL_I2C_Master_Transmit>
 8000f06:	4603      	mov	r3, r0
 8000f08:	73fb      	strb	r3, [r7, #15]
			initializationBuffer, 2, HAL_MAX_DELAY);
	if (returnValue != HAL_OK)
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MPU_Init+0xb0>
		return returnValue;
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	e04b      	b.n	8000fac <MPU_Init+0x148>

	initializationBuffer[0] = SMPLRT_DIV;
 8000f14:	2319      	movs	r3, #25
 8000f16:	723b      	strb	r3, [r7, #8]
	initializationBuffer[1] = 0x00; //Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)  @ 1kHz
 8000f18:	2300      	movs	r3, #0
 8000f1a:	727b      	strb	r3, [r7, #9]
	returnValue = HAL_I2C_Master_Transmit(hi2c, (MPU_Address << 1),
 8000f1c:	4b25      	ldr	r3, [pc, #148]	; (8000fb4 <MPU_Init+0x150>)
 8000f1e:	6818      	ldr	r0, [r3, #0]
 8000f20:	2368      	movs	r3, #104	; 0x68
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	b299      	uxth	r1, r3
 8000f28:	f107 0208 	add.w	r2, r7, #8
 8000f2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	2302      	movs	r3, #2
 8000f34:	f004 f9ba 	bl	80052ac <HAL_I2C_Master_Transmit>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	73fb      	strb	r3, [r7, #15]
			initializationBuffer, 2, HAL_MAX_DELAY);
	if (returnValue != HAL_OK)
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MPU_Init+0xe2>
		return returnValue;
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	e032      	b.n	8000fac <MPU_Init+0x148>

	initializationBuffer[0] = GYRO_CONFIG;
 8000f46:	231b      	movs	r3, #27
 8000f48:	723b      	strb	r3, [r7, #8]
	initializationBuffer[1] = GYRO_CONFIG_SCALE; // Sets the full scale to +-2000 degrees per second
 8000f4a:	2318      	movs	r3, #24
 8000f4c:	727b      	strb	r3, [r7, #9]
	returnValue = HAL_I2C_Master_Transmit(hi2c, (MPU_Address << 1),
 8000f4e:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <MPU_Init+0x150>)
 8000f50:	6818      	ldr	r0, [r3, #0]
 8000f52:	2368      	movs	r3, #104	; 0x68
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	b299      	uxth	r1, r3
 8000f5a:	f107 0208 	add.w	r2, r7, #8
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	2302      	movs	r3, #2
 8000f66:	f004 f9a1 	bl	80052ac <HAL_I2C_Master_Transmit>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	73fb      	strb	r3, [r7, #15]
			initializationBuffer, 2, HAL_MAX_DELAY);
	if (returnValue != HAL_OK)
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MPU_Init+0x114>
		return returnValue;
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	e019      	b.n	8000fac <MPU_Init+0x148>

	initializationBuffer[0] = ACCEL_CONFIG;
 8000f78:	231c      	movs	r3, #28
 8000f7a:	723b      	strb	r3, [r7, #8]
	initializationBuffer[1] = ACCEL_CONFIG_SCALE; // Sets the accelerometer full scale to +-16g
 8000f7c:	2318      	movs	r3, #24
 8000f7e:	727b      	strb	r3, [r7, #9]
	returnValue = HAL_I2C_Master_Transmit(hi2c, (MPU_Address << 1),
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <MPU_Init+0x150>)
 8000f82:	6818      	ldr	r0, [r3, #0]
 8000f84:	2368      	movs	r3, #104	; 0x68
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	b299      	uxth	r1, r3
 8000f8c:	f107 0208 	add.w	r2, r7, #8
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2302      	movs	r3, #2
 8000f98:	f004 f988 	bl	80052ac <HAL_I2C_Master_Transmit>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	73fb      	strb	r3, [r7, #15]
			initializationBuffer, 2, HAL_MAX_DELAY);
	if (returnValue != HAL_OK)
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MPU_Init+0x146>
		return returnValue;
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	e000      	b.n	8000fac <MPU_Init+0x148>

	return returnValue;
 8000faa:	7bfb      	ldrb	r3, [r7, #15]

}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000234 	.word	0x20000234

08000fb8 <StructQueueFull>:
 *  Created on: Mar 16, 2021
 *      Author: Mikkel
 */
#include "circle_queue_struct.h"

int StructQueueFull(StructQueue *q){
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	return (((q->pointWR +1) % q->queueLength) == q->pointRD);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	885b      	ldrh	r3, [r3, #2]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	8892      	ldrh	r2, [r2, #4]
 8000fca:	fb93 f1f2 	sdiv	r1, r3, r2
 8000fce:	fb02 f201 	mul.w	r2, r2, r1
 8000fd2:	1a9b      	subs	r3, r3, r2
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	8812      	ldrh	r2, [r2, #0]
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	bf0c      	ite	eq
 8000fdc:	2301      	moveq	r3, #1
 8000fde:	2300      	movne	r3, #0
 8000fe0:	b2db      	uxtb	r3, r3
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <EnterStructQueue>:

int StructQueueEmpty(StructQueue *q){
	return (q->pointWR == q->pointRD);
}

int EnterStructQueue(StructQueue *q, Axes3 *data) {
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
 8000ff6:	6039      	str	r1, [r7, #0]

	if (StructQueueFull(q)) {
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ffdd 	bl	8000fb8 <StructQueueFull>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <EnterStructQueue+0x1a>
		return 0;
 8001004:	2300      	movs	r3, #0
 8001006:	e01f      	b.n	8001048 <EnterStructQueue+0x5a>
	}
	else {
		q->queue[q->pointWR] = *data;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	885b      	ldrh	r3, [r3, #2]
 8001010:	4619      	mov	r1, r3
 8001012:	460b      	mov	r3, r1
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	440b      	add	r3, r1
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001020:	e883 0007 	stmia.w	r3, {r0, r1, r2}


		if ((q->pointWR + 1) == q->queueLength){
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	885b      	ldrh	r3, [r3, #2]
 8001028:	3301      	adds	r3, #1
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	8892      	ldrh	r2, [r2, #4]
 800102e:	4293      	cmp	r3, r2
 8001030:	d103      	bne.n	800103a <EnterStructQueue+0x4c>
			q->pointWR = 0;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	805a      	strh	r2, [r3, #2]
 8001038:	e005      	b.n	8001046 <EnterStructQueue+0x58>
		}
		else{
			q->pointWR += 1;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	885b      	ldrh	r3, [r3, #2]
 800103e:	3301      	adds	r3, #1
 8001040:	b29a      	uxth	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	805a      	strh	r2, [r3, #2]
		}

	}
	return 1;
 8001046:	2301      	movs	r3, #1
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <to_frame>:

#include "comm_relay.h"
#include "stdint.h"
#include "main.h"

int to_frame(char * frame, uint8_t *revolutionAddr, uint8_t *ID) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]

	int i = 2, j = 0, PACKAGE_SIZE = 0;
 800105c:	2302      	movs	r3, #2
 800105e:	61fb      	str	r3, [r7, #28]
 8001060:	2300      	movs	r3, #0
 8001062:	61bb      	str	r3, [r7, #24]
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]

	frame[0] = COMM_DEL_START;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2224      	movs	r2, #36	; 0x24
 800106c:	701a      	strb	r2, [r3, #0]
	frame[1] = ID;
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	3301      	adds	r3, #1
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	701a      	strb	r2, [r3, #0]

	if (ID == 3) {
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b03      	cmp	r3, #3
 800107c:	d102      	bne.n	8001084 <to_frame+0x34>
		PACKAGE_SIZE = 5;
 800107e:	2305      	movs	r3, #5
 8001080:	617b      	str	r3, [r7, #20]
 8001082:	e02d      	b.n	80010e0 <to_frame+0x90>
	} else if (ID == 2) {
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b02      	cmp	r3, #2
 8001088:	d12a      	bne.n	80010e0 <to_frame+0x90>
		PACKAGE_SIZE = 24;
 800108a:	2318      	movs	r3, #24
 800108c:	617b      	str	r3, [r7, #20]
	}

	for (; i < FRAME_SIZE && j < PACKAGE_SIZE; i++, j++) {
 800108e:	e027      	b.n	80010e0 <to_frame+0x90>
		char c;
		c = *(revolutionAddr + j);
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	4413      	add	r3, r2
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	74fb      	strb	r3, [r7, #19]

		if (is_special_character(c)) {
 800109a:	7cfb      	ldrb	r3, [r7, #19]
 800109c:	4618      	mov	r0, r3
 800109e:	f000 f830 	bl	8001102 <is_special_character>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d010      	beq.n	80010ca <to_frame+0x7a>
			frame[i] = COMM_ESCAPE;
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	4413      	add	r3, r2
 80010ae:	2223      	movs	r2, #35	; 0x23
 80010b0:	701a      	strb	r2, [r3, #0]
			frame[i+1] = c + 2;
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3301      	adds	r3, #1
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	4413      	add	r3, r2
 80010ba:	7cfa      	ldrb	r2, [r7, #19]
 80010bc:	3202      	adds	r2, #2
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	701a      	strb	r2, [r3, #0]
			i++;
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3301      	adds	r3, #1
 80010c6:	61fb      	str	r3, [r7, #28]
 80010c8:	e004      	b.n	80010d4 <to_frame+0x84>
		} else {
			frame[i] = c;
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	4413      	add	r3, r2
 80010d0:	7cfa      	ldrb	r2, [r7, #19]
 80010d2:	701a      	strb	r2, [r3, #0]
	for (; i < FRAME_SIZE && j < PACKAGE_SIZE; i++, j++) {
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	3301      	adds	r3, #1
 80010d8:	61fb      	str	r3, [r7, #28]
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	3301      	adds	r3, #1
 80010de:	61bb      	str	r3, [r7, #24]
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	2b32      	cmp	r3, #50	; 0x32
 80010e4:	dc03      	bgt.n	80010ee <to_frame+0x9e>
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	dbd0      	blt.n	8001090 <to_frame+0x40>
		}
	}

	frame[i] = COMM_DEL_STOP;
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	4413      	add	r3, r2
 80010f4:	2240      	movs	r2, #64	; 0x40
 80010f6:	701a      	strb	r2, [r3, #0]

	return 1;
 80010f8:	2301      	movs	r3, #1
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3720      	adds	r7, #32
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <is_special_character>:


int is_special_character(char c) {
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	71fb      	strb	r3, [r7, #7]
	if ((c == COMM_DEL_START) || (c == COMM_DEL_STOP) || (c == COMM_ESCAPE) || (c == 0)) return 1;
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	2b24      	cmp	r3, #36	; 0x24
 8001110:	d008      	beq.n	8001124 <is_special_character+0x22>
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	2b40      	cmp	r3, #64	; 0x40
 8001116:	d005      	beq.n	8001124 <is_special_character+0x22>
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	2b23      	cmp	r3, #35	; 0x23
 800111c:	d002      	beq.n	8001124 <is_special_character+0x22>
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d101      	bne.n	8001128 <is_special_character+0x26>
 8001124:	2301      	movs	r3, #1
 8001126:	e000      	b.n	800112a <is_special_character+0x28>
	return 0;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <from_frame>:

int from_frame(const char * frame, size_t len, char * destination, uint32_t *outputLen) {
 8001136:	b480      	push	{r7}
 8001138:	b089      	sub	sp, #36	; 0x24
 800113a:	af00      	add	r7, sp, #0
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	603b      	str	r3, [r7, #0]
	uint32_t indexFrame = 0, indexDest = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
 8001148:	2300      	movs	r3, #0
 800114a:	61bb      	str	r3, [r7, #24]

	if (frame[0] == COMM_DEL_START) indexFrame++;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b24      	cmp	r3, #36	; 0x24
 8001152:	d137      	bne.n	80011c4 <from_frame+0x8e>
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	3301      	adds	r3, #1
 8001158:	61fb      	str	r3, [r7, #28]

	for (; indexFrame < len - 1; indexFrame++, indexDest++) {
 800115a:	e033      	b.n	80011c4 <from_frame+0x8e>
		char c = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	75fb      	strb	r3, [r7, #23]

		if (frame[indexFrame] == COMM_DEL_START) return -1; // If we meet start delimiter inside frame data, something's wrong.
 8001160:	68fa      	ldr	r2, [r7, #12]
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	4413      	add	r3, r2
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b24      	cmp	r3, #36	; 0x24
 800116a:	d102      	bne.n	8001172 <from_frame+0x3c>
 800116c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001170:	e044      	b.n	80011fc <from_frame+0xc6>
		if (frame[indexFrame] == COMM_DEL_STOP) return 1; // If we meet stop delimiter inside frame data, it is just a shorter message.
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	4413      	add	r3, r2
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b40      	cmp	r3, #64	; 0x40
 800117c:	d101      	bne.n	8001182 <from_frame+0x4c>
 800117e:	2301      	movs	r3, #1
 8001180:	e03c      	b.n	80011fc <from_frame+0xc6>

		if (frame[indexFrame] == COMM_ESCAPE) {
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	4413      	add	r3, r2
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b23      	cmp	r3, #35	; 0x23
 800118c:	d10a      	bne.n	80011a4 <from_frame+0x6e>
			c = frame[indexFrame+1] - 2; // Return the character after the escape character minus 2
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3301      	adds	r3, #1
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	4413      	add	r3, r2
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	3b02      	subs	r3, #2
 800119a:	75fb      	strb	r3, [r7, #23]
			indexFrame++;
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	3301      	adds	r3, #1
 80011a0:	61fb      	str	r3, [r7, #28]
 80011a2:	e004      	b.n	80011ae <from_frame+0x78>
		}
		else c = frame[indexFrame]; // There was no escape character, so return it
 80011a4:	68fa      	ldr	r2, [r7, #12]
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	4413      	add	r3, r2
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	75fb      	strb	r3, [r7, #23]

		destination[indexDest] = c; 	// Insert the data
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	4413      	add	r3, r2
 80011b4:	7dfa      	ldrb	r2, [r7, #23]
 80011b6:	701a      	strb	r2, [r3, #0]
	for (; indexFrame < len - 1; indexFrame++, indexDest++) {
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	3301      	adds	r3, #1
 80011bc:	61fb      	str	r3, [r7, #28]
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	3301      	adds	r3, #1
 80011c2:	61bb      	str	r3, [r7, #24]
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	69fa      	ldr	r2, [r7, #28]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d3c6      	bcc.n	800115c <from_frame+0x26>
	}

	// Check whether the last character is either the specified stop delimiter or '0'
	if (indexFrame < len) {
 80011ce:	69fa      	ldr	r2, [r7, #28]
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d20e      	bcs.n	80011f4 <from_frame+0xbe>
		if (!(frame[indexFrame] == COMM_DEL_STOP || frame[indexFrame] == 0)) return -1;
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	4413      	add	r3, r2
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b40      	cmp	r3, #64	; 0x40
 80011e0:	d008      	beq.n	80011f4 <from_frame+0xbe>
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	4413      	add	r3, r2
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d002      	beq.n	80011f4 <from_frame+0xbe>
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011f2:	e003      	b.n	80011fc <from_frame+0xc6>
	}

	*outputLen = indexDest;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	601a      	str	r2, [r3, #0]

	return 1;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3724      	adds	r7, #36	; 0x24
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001208:	b5b0      	push	{r4, r5, r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800120e:	f002 f8d0 	bl	80033b2 <HAL_Init>

	/* USER CODE BEGIN Init */

	// Motor Initialization
	motor_init(&motorR, 'R');
 8001212:	2152      	movs	r1, #82	; 0x52
 8001214:	4854      	ldr	r0, [pc, #336]	; (8001368 <main+0x160>)
 8001216:	f000 fc1f 	bl	8001a58 <motor_init>
	motor_init(&motorL, 'L');
 800121a:	214c      	movs	r1, #76	; 0x4c
 800121c:	4853      	ldr	r0, [pc, #332]	; (800136c <main+0x164>)
 800121e:	f000 fc1b 	bl	8001a58 <motor_init>

	motorEncoder_init(&encoderR);
 8001222:	4853      	ldr	r0, [pc, #332]	; (8001370 <main+0x168>)
 8001224:	f000 fc2e 	bl	8001a84 <motorEncoder_init>
	motorEncoder_init(&encoderL);
 8001228:	4852      	ldr	r0, [pc, #328]	; (8001374 <main+0x16c>)
 800122a:	f000 fc2b 	bl	8001a84 <motorEncoder_init>

	motorController_init(&controllerR, &motorR, &encoderR);
 800122e:	4a50      	ldr	r2, [pc, #320]	; (8001370 <main+0x168>)
 8001230:	494d      	ldr	r1, [pc, #308]	; (8001368 <main+0x160>)
 8001232:	4851      	ldr	r0, [pc, #324]	; (8001378 <main+0x170>)
 8001234:	f000 fc41 	bl	8001aba <motorController_init>
	motorController_init(&controllerL, &motorL, &encoderL);
 8001238:	4a4e      	ldr	r2, [pc, #312]	; (8001374 <main+0x16c>)
 800123a:	494c      	ldr	r1, [pc, #304]	; (800136c <main+0x164>)
 800123c:	484f      	ldr	r0, [pc, #316]	; (800137c <main+0x174>)
 800123e:	f000 fc3c 	bl	8001aba <motorController_init>

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001242:	f000 f8b3 	bl	80013ac <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001246:	f000 fb65 	bl	8001914 <MX_GPIO_Init>
	MX_DMA_Init();
 800124a:	f000 fb45 	bl	80018d8 <MX_DMA_Init>
	MX_TIM1_Init();
 800124e:	f000 f9b3 	bl	80015b8 <MX_TIM1_Init>
	MX_TIM6_Init();
 8001252:	f000 faa3 	bl	800179c <MX_TIM6_Init>
	MX_USART2_UART_Init();
 8001256:	f000 fb0f 	bl	8001878 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 800125a:	f000 f8f9 	bl	8001450 <MX_ADC1_Init>
	MX_TIM7_Init();
 800125e:	f000 fad3 	bl	8001808 <MX_TIM7_Init>
	MX_TIM2_Init();
 8001262:	f000 fa45 	bl	80016f0 <MX_TIM2_Init>
	MX_I2C3_Init();
 8001266:	f000 f967 	bl	8001538 <MX_I2C3_Init>
	/* USER CODE BEGIN 2 */

	positionCalculationPeriod = ((htim6.Instance->ARR + 1) / (80000000.0 / (htim6.Instance->PSC + 1)));
 800126a:	4b45      	ldr	r3, [pc, #276]	; (8001380 <main+0x178>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001270:	3301      	adds	r3, #1
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f8ee 	bl	8000454 <__aeabi_ui2d>
 8001278:	4604      	mov	r4, r0
 800127a:	460d      	mov	r5, r1
 800127c:	4b40      	ldr	r3, [pc, #256]	; (8001380 <main+0x178>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001282:	3301      	adds	r3, #1
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f8e5 	bl	8000454 <__aeabi_ui2d>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	a134      	add	r1, pc, #208	; (adr r1, 8001360 <main+0x158>)
 8001290:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001294:	f7ff fa82 	bl	800079c <__aeabi_ddiv>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4620      	mov	r0, r4
 800129e:	4629      	mov	r1, r5
 80012a0:	f7ff fa7c 	bl	800079c <__aeabi_ddiv>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4610      	mov	r0, r2
 80012aa:	4619      	mov	r1, r3
 80012ac:	f7ff fc0e 	bl	8000acc <__aeabi_d2f>
 80012b0:	4603      	mov	r3, r0
 80012b2:	4a34      	ldr	r2, [pc, #208]	; (8001384 <main+0x17c>)
 80012b4:	6013      	str	r3, [r2, #0]
	controllerPeriod = ((htim2.Instance->ARR + 1) / (80000000.0 / (htim2.Instance->PSC + 1)));
 80012b6:	4b34      	ldr	r3, [pc, #208]	; (8001388 <main+0x180>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012bc:	3301      	adds	r3, #1
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff f8c8 	bl	8000454 <__aeabi_ui2d>
 80012c4:	4604      	mov	r4, r0
 80012c6:	460d      	mov	r5, r1
 80012c8:	4b2f      	ldr	r3, [pc, #188]	; (8001388 <main+0x180>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ce:	3301      	adds	r3, #1
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff f8bf 	bl	8000454 <__aeabi_ui2d>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	a121      	add	r1, pc, #132	; (adr r1, 8001360 <main+0x158>)
 80012dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012e0:	f7ff fa5c 	bl	800079c <__aeabi_ddiv>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4620      	mov	r0, r4
 80012ea:	4629      	mov	r1, r5
 80012ec:	f7ff fa56 	bl	800079c <__aeabi_ddiv>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	f7ff fbe8 	bl	8000acc <__aeabi_d2f>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4a23      	ldr	r2, [pc, #140]	; (800138c <main+0x184>)
 8001300:	6013      	str	r3, [r2, #0]

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001302:	217f      	movs	r1, #127	; 0x7f
 8001304:	4822      	ldr	r0, [pc, #136]	; (8001390 <main+0x188>)
 8001306:	f003 f9cd 	bl	80046a4 <HAL_ADCEx_Calibration_Start>

	HAL_UART_Receive_DMA(&huart2, uart_in, UART_IN_BUF_SIZE);
 800130a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800130e:	4921      	ldr	r1, [pc, #132]	; (8001394 <main+0x18c>)
 8001310:	4821      	ldr	r0, [pc, #132]	; (8001398 <main+0x190>)
 8001312:	f008 f8ff 	bl	8009514 <HAL_UART_Receive_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 8001316:	481c      	ldr	r0, [pc, #112]	; (8001388 <main+0x180>)
 8001318:	f006 ff5e 	bl	80081d8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 800131c:	4818      	ldr	r0, [pc, #96]	; (8001380 <main+0x178>)
 800131e:	f006 ff5b 	bl	80081d8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8001322:	481e      	ldr	r0, [pc, #120]	; (800139c <main+0x194>)
 8001324:	f006 ff58 	bl	80081d8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001328:	2100      	movs	r1, #0
 800132a:	481d      	ldr	r0, [pc, #116]	; (80013a0 <main+0x198>)
 800132c:	f007 f856 	bl	80083dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001330:	2104      	movs	r1, #4
 8001332:	481b      	ldr	r0, [pc, #108]	; (80013a0 <main+0x198>)
 8001334:	f007 f852 	bl	80083dc <HAL_TIM_PWM_Start>

	if (MPU_Init(&hi2c3) != HAL_OK) {
 8001338:	481a      	ldr	r0, [pc, #104]	; (80013a4 <main+0x19c>)
 800133a:	f7ff fd93 	bl	8000e64 <MPU_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <main+0x140>
		int dev = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	607b      	str	r3, [r7, #4]
	}
	HAL_StatusTypeDef returnValue = HAL_I2C_Master_Transmit_IT(&hi2c3, MPU_Address << 1, &MPU_GyroOut, 1);
 8001348:	2368      	movs	r3, #104	; 0x68
 800134a:	b29b      	uxth	r3, r3
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	b299      	uxth	r1, r3
 8001350:	2301      	movs	r3, #1
 8001352:	4a15      	ldr	r2, [pc, #84]	; (80013a8 <main+0x1a0>)
 8001354:	4813      	ldr	r0, [pc, #76]	; (80013a4 <main+0x19c>)
 8001356:	f004 f89d 	bl	8005494 <HAL_I2C_Master_Transmit_IT>
 800135a:	4603      	mov	r3, r0
 800135c:	70fb      	strb	r3, [r7, #3]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
 800135e:	e7fe      	b.n	800135e <main+0x156>
 8001360:	00000000 	.word	0x00000000
 8001364:	419312d0 	.word	0x419312d0
 8001368:	200002cc 	.word	0x200002cc
 800136c:	200002d4 	.word	0x200002d4
 8001370:	20000540 	.word	0x20000540
 8001374:	200004e0 	.word	0x200004e0
 8001378:	200003ac 	.word	0x200003ac
 800137c:	200002e0 	.word	0x200002e0
 8001380:	20000360 	.word	0x20000360
 8001384:	200002dc 	.word	0x200002dc
 8001388:	20000410 	.word	0x20000410
 800138c:	2000035c 	.word	0x2000035c
 8001390:	200002f8 	.word	0x200002f8
 8001394:	20000058 	.word	0x20000058
 8001398:	2000045c 	.word	0x2000045c
 800139c:	200004f4 	.word	0x200004f4
 80013a0:	200003c4 	.word	0x200003c4
 80013a4:	20000280 	.word	0x20000280
 80013a8:	0800b120 	.word	0x0800b120

080013ac <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b096      	sub	sp, #88	; 0x58
 80013b0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	2244      	movs	r2, #68	; 0x44
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f008 fe14 	bl	8009fe8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80013c0:	463b      	mov	r3, r7
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
 80013cc:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 80013ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013d2:	f005 fd47 	bl	8006e64 <HAL_PWREx_ControlVoltageScaling>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <SystemClock_Config+0x34>
		Error_Handler();
 80013dc:	f001 fb9a 	bl	8002b14 <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80013e0:	2310      	movs	r3, #16
 80013e2:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013e4:	2301      	movs	r3, #1
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013ec:	2360      	movs	r3, #96	; 0x60
 80013ee:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f0:	2302      	movs	r3, #2
 80013f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80013f4:	2301      	movs	r3, #1
 80013f6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80013f8:	2301      	movs	r3, #1
 80013fa:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 80013fc:	2328      	movs	r3, #40	; 0x28
 80013fe:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001400:	2307      	movs	r3, #7
 8001402:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001404:	2302      	movs	r3, #2
 8001406:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001408:	2302      	movs	r3, #2
 800140a:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	4618      	mov	r0, r3
 8001412:	f005 fd7d 	bl	8006f10 <HAL_RCC_OscConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <SystemClock_Config+0x74>
		Error_Handler();
 800141c:	f001 fb7a 	bl	8002b14 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001420:	230f      	movs	r3, #15
 8001422:	603b      	str	r3, [r7, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001424:	2303      	movs	r3, #3
 8001426:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001428:	2300      	movs	r3, #0
 800142a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001430:	2300      	movs	r3, #0
 8001432:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001434:	463b      	mov	r3, r7
 8001436:	2104      	movs	r1, #4
 8001438:	4618      	mov	r0, r3
 800143a:	f006 f989 	bl	8007750 <HAL_RCC_ClockConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <SystemClock_Config+0x9c>
		Error_Handler();
 8001444:	f001 fb66 	bl	8002b14 <Error_Handler>
	}
}
 8001448:	bf00      	nop
 800144a:	3758      	adds	r7, #88	; 0x58
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001456:	f107 0308 	add.w	r3, r7, #8
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]
 8001466:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001468:	4b2f      	ldr	r3, [pc, #188]	; (8001528 <MX_ADC1_Init+0xd8>)
 800146a:	4a30      	ldr	r2, [pc, #192]	; (800152c <MX_ADC1_Init+0xdc>)
 800146c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800146e:	4b2e      	ldr	r3, [pc, #184]	; (8001528 <MX_ADC1_Init+0xd8>)
 8001470:	2200      	movs	r2, #0
 8001472:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001474:	4b2c      	ldr	r3, [pc, #176]	; (8001528 <MX_ADC1_Init+0xd8>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800147a:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <MX_ADC1_Init+0xd8>)
 800147c:	2200      	movs	r2, #0
 800147e:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001480:	4b29      	ldr	r3, [pc, #164]	; (8001528 <MX_ADC1_Init+0xd8>)
 8001482:	2200      	movs	r2, #0
 8001484:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001486:	4b28      	ldr	r3, [pc, #160]	; (8001528 <MX_ADC1_Init+0xd8>)
 8001488:	2204      	movs	r2, #4
 800148a:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800148c:	4b26      	ldr	r3, [pc, #152]	; (8001528 <MX_ADC1_Init+0xd8>)
 800148e:	2200      	movs	r2, #0
 8001490:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001492:	4b25      	ldr	r3, [pc, #148]	; (8001528 <MX_ADC1_Init+0xd8>)
 8001494:	2200      	movs	r2, #0
 8001496:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8001498:	4b23      	ldr	r3, [pc, #140]	; (8001528 <MX_ADC1_Init+0xd8>)
 800149a:	2201      	movs	r2, #1
 800149c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800149e:	4b22      	ldr	r3, [pc, #136]	; (8001528 <MX_ADC1_Init+0xd8>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014a6:	4b20      	ldr	r3, [pc, #128]	; (8001528 <MX_ADC1_Init+0xd8>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014ac:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <MX_ADC1_Init+0xd8>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80014b2:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <MX_ADC1_Init+0xd8>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014ba:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <MX_ADC1_Init+0xd8>)
 80014bc:	2200      	movs	r2, #0
 80014be:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80014c0:	4b19      	ldr	r3, [pc, #100]	; (8001528 <MX_ADC1_Init+0xd8>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80014c8:	4817      	ldr	r0, [pc, #92]	; (8001528 <MX_ADC1_Init+0xd8>)
 80014ca:	f002 f9d5 	bl	8003878 <HAL_ADC_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_ADC1_Init+0x88>
		Error_Handler();
 80014d4:	f001 fb1e 	bl	8002b14 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 80014d8:	4b15      	ldr	r3, [pc, #84]	; (8001530 <MX_ADC1_Init+0xe0>)
 80014da:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80014dc:	2306      	movs	r3, #6
 80014de:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80014e0:	2300      	movs	r3, #0
 80014e2:	613b      	str	r3, [r7, #16]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014e4:	237f      	movs	r3, #127	; 0x7f
 80014e6:	617b      	str	r3, [r7, #20]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014e8:	2304      	movs	r3, #4
 80014ea:	61bb      	str	r3, [r7, #24]
	sConfig.Offset = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80014f0:	f107 0308 	add.w	r3, r7, #8
 80014f4:	4619      	mov	r1, r3
 80014f6:	480c      	ldr	r0, [pc, #48]	; (8001528 <MX_ADC1_Init+0xd8>)
 80014f8:	f002 fc06 	bl	8003d08 <HAL_ADC_ConfigChannel>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_ADC1_Init+0xb6>
		Error_Handler();
 8001502:	f001 fb07 	bl	8002b14 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */
	__HAL_RCC_ADC_CLK_ENABLE();
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <MX_ADC1_Init+0xe4>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <MX_ADC1_Init+0xe4>)
 800150c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <MX_ADC1_Init+0xe4>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
	/* USER CODE END ADC1_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	3720      	adds	r7, #32
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200002f8 	.word	0x200002f8
 800152c:	50040000 	.word	0x50040000
 8001530:	21800100 	.word	0x21800100
 8001534:	40021000 	.word	0x40021000

08001538 <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 800153c:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <MX_I2C3_Init+0x74>)
 800153e:	4a1c      	ldr	r2, [pc, #112]	; (80015b0 <MX_I2C3_Init+0x78>)
 8001540:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x00702991;
 8001542:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <MX_I2C3_Init+0x74>)
 8001544:	4a1b      	ldr	r2, [pc, #108]	; (80015b4 <MX_I2C3_Init+0x7c>)
 8001546:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 8001548:	4b18      	ldr	r3, [pc, #96]	; (80015ac <MX_I2C3_Init+0x74>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800154e:	4b17      	ldr	r3, [pc, #92]	; (80015ac <MX_I2C3_Init+0x74>)
 8001550:	2201      	movs	r2, #1
 8001552:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001554:	4b15      	ldr	r3, [pc, #84]	; (80015ac <MX_I2C3_Init+0x74>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 800155a:	4b14      	ldr	r3, [pc, #80]	; (80015ac <MX_I2C3_Init+0x74>)
 800155c:	2200      	movs	r2, #0
 800155e:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <MX_I2C3_Init+0x74>)
 8001562:	2200      	movs	r2, #0
 8001564:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MX_I2C3_Init+0x74>)
 8001568:	2200      	movs	r2, #0
 800156a:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <MX_I2C3_Init+0x74>)
 800156e:	2200      	movs	r2, #0
 8001570:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 8001572:	480e      	ldr	r0, [pc, #56]	; (80015ac <MX_I2C3_Init+0x74>)
 8001574:	f003 fe0b 	bl	800518e <HAL_I2C_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_I2C3_Init+0x4a>
		Error_Handler();
 800157e:	f001 fac9 	bl	8002b14 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8001582:	2100      	movs	r1, #0
 8001584:	4809      	ldr	r0, [pc, #36]	; (80015ac <MX_I2C3_Init+0x74>)
 8001586:	f005 fbc7 	bl	8006d18 <HAL_I2CEx_ConfigAnalogFilter>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_I2C3_Init+0x5c>
		Error_Handler();
 8001590:	f001 fac0 	bl	8002b14 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) {
 8001594:	2100      	movs	r1, #0
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <MX_I2C3_Init+0x74>)
 8001598:	f005 fc09 	bl	8006dae <HAL_I2CEx_ConfigDigitalFilter>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_I2C3_Init+0x6e>
		Error_Handler();
 80015a2:	f001 fab7 	bl	8002b14 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000280 	.word	0x20000280
 80015b0:	40005c00 	.word	0x40005c00
 80015b4:	00702991 	.word	0x00702991

080015b8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b096      	sub	sp, #88	; 0x58
 80015bc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80015be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80015ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
 80015d8:	611a      	str	r2, [r3, #16]
 80015da:	615a      	str	r2, [r3, #20]
 80015dc:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	222c      	movs	r2, #44	; 0x2c
 80015e2:	2100      	movs	r1, #0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f008 fcff 	bl	8009fe8 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80015ea:	4b3f      	ldr	r3, [pc, #252]	; (80016e8 <MX_TIM1_Init+0x130>)
 80015ec:	4a3f      	ldr	r2, [pc, #252]	; (80016ec <MX_TIM1_Init+0x134>)
 80015ee:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80015f0:	4b3d      	ldr	r3, [pc, #244]	; (80016e8 <MX_TIM1_Init+0x130>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f6:	4b3c      	ldr	r3, [pc, #240]	; (80016e8 <MX_TIM1_Init+0x130>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80015fc:	4b3a      	ldr	r3, [pc, #232]	; (80016e8 <MX_TIM1_Init+0x130>)
 80015fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001602:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001604:	4b38      	ldr	r3, [pc, #224]	; (80016e8 <MX_TIM1_Init+0x130>)
 8001606:	2200      	movs	r2, #0
 8001608:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800160a:	4b37      	ldr	r3, [pc, #220]	; (80016e8 <MX_TIM1_Init+0x130>)
 800160c:	2200      	movs	r2, #0
 800160e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001610:	4b35      	ldr	r3, [pc, #212]	; (80016e8 <MX_TIM1_Init+0x130>)
 8001612:	2280      	movs	r2, #128	; 0x80
 8001614:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001616:	4834      	ldr	r0, [pc, #208]	; (80016e8 <MX_TIM1_Init+0x130>)
 8001618:	f006 fe89 	bl	800832e <HAL_TIM_PWM_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM1_Init+0x6e>
		Error_Handler();
 8001622:	f001 fa77 	bl	8002b14 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001626:	2300      	movs	r3, #0
 8001628:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800162a:	2300      	movs	r3, #0
 800162c:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8001632:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001636:	4619      	mov	r1, r3
 8001638:	482b      	ldr	r0, [pc, #172]	; (80016e8 <MX_TIM1_Init+0x130>)
 800163a:	f007 fd8d 	bl	8009158 <HAL_TIMEx_MasterConfigSynchronization>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM1_Init+0x90>
		Error_Handler();
 8001644:	f001 fa66 	bl	8002b14 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001648:	2360      	movs	r3, #96	; 0x60
 800164a:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001650:	2300      	movs	r3, #0
 8001652:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001654:	2300      	movs	r3, #0
 8001656:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800165c:	2300      	movs	r3, #0
 800165e:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001660:	2300      	movs	r3, #0
 8001662:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001664:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001668:	2200      	movs	r2, #0
 800166a:	4619      	mov	r1, r3
 800166c:	481e      	ldr	r0, [pc, #120]	; (80016e8 <MX_TIM1_Init+0x130>)
 800166e:	f007 f929 	bl	80088c4 <HAL_TIM_PWM_ConfigChannel>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM1_Init+0xc4>
		Error_Handler();
 8001678:	f001 fa4c 	bl	8002b14 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 800167c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001680:	2204      	movs	r2, #4
 8001682:	4619      	mov	r1, r3
 8001684:	4818      	ldr	r0, [pc, #96]	; (80016e8 <MX_TIM1_Init+0x130>)
 8001686:	f007 f91d 	bl	80088c4 <HAL_TIM_PWM_ConfigChannel>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM1_Init+0xdc>
		Error_Handler();
 8001690:	f001 fa40 	bl	8002b14 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001694:	2300      	movs	r3, #0
 8001696:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ac:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	4619      	mov	r1, r3
 80016c8:	4807      	ldr	r0, [pc, #28]	; (80016e8 <MX_TIM1_Init+0x130>)
 80016ca:	f007 fdab 	bl	8009224 <HAL_TIMEx_ConfigBreakDeadTime>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM1_Init+0x120>
		Error_Handler();
 80016d4:	f001 fa1e 	bl	8002b14 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80016d8:	4803      	ldr	r0, [pc, #12]	; (80016e8 <MX_TIM1_Init+0x130>)
 80016da:	f001 fc9d 	bl	8003018 <HAL_TIM_MspPostInit>

}
 80016de:	bf00      	nop
 80016e0:	3758      	adds	r7, #88	; 0x58
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200003c4 	.word	0x200003c4
 80016ec:	40012c00 	.word	0x40012c00

080016f0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80016f6:	f107 031c 	add.w	r3, r7, #28
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001702:	463b      	mov	r3, r7
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
 8001710:	615a      	str	r2, [r3, #20]
 8001712:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001714:	4b20      	ldr	r3, [pc, #128]	; (8001798 <MX_TIM2_Init+0xa8>)
 8001716:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800171a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 80 - 1;
 800171c:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <MX_TIM2_Init+0xa8>)
 800171e:	224f      	movs	r2, #79	; 0x4f
 8001720:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001722:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <MX_TIM2_Init+0xa8>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10000 - 1;
 8001728:	4b1b      	ldr	r3, [pc, #108]	; (8001798 <MX_TIM2_Init+0xa8>)
 800172a:	f242 720f 	movw	r2, #9999	; 0x270f
 800172e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001730:	4b19      	ldr	r3, [pc, #100]	; (8001798 <MX_TIM2_Init+0xa8>)
 8001732:	2200      	movs	r2, #0
 8001734:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001736:	4b18      	ldr	r3, [pc, #96]	; (8001798 <MX_TIM2_Init+0xa8>)
 8001738:	2280      	movs	r2, #128	; 0x80
 800173a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK) {
 800173c:	4816      	ldr	r0, [pc, #88]	; (8001798 <MX_TIM2_Init+0xa8>)
 800173e:	f006 fd9f 	bl	8008280 <HAL_TIM_OC_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM2_Init+0x5c>
		Error_Handler();
 8001748:	f001 f9e4 	bl	8002b14 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001750:	2300      	movs	r3, #0
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8001754:	f107 031c 	add.w	r3, r7, #28
 8001758:	4619      	mov	r1, r3
 800175a:	480f      	ldr	r0, [pc, #60]	; (8001798 <MX_TIM2_Init+0xa8>)
 800175c:	f007 fcfc 	bl	8009158 <HAL_TIMEx_MasterConfigSynchronization>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM2_Init+0x7a>
		Error_Handler();
 8001766:	f001 f9d5 	bl	8002b14 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800176a:	2300      	movs	r3, #0
 800176c:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 800177a:	463b      	mov	r3, r7
 800177c:	2204      	movs	r2, #4
 800177e:	4619      	mov	r1, r3
 8001780:	4805      	ldr	r0, [pc, #20]	; (8001798 <MX_TIM2_Init+0xa8>)
 8001782:	f007 f829 	bl	80087d8 <HAL_TIM_OC_ConfigChannel>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM2_Init+0xa0>
		Error_Handler();
 800178c:	f001 f9c2 	bl	8002b14 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001790:	bf00      	nop
 8001792:	3728      	adds	r7, #40	; 0x28
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000410 	.word	0x20000410

0800179c <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 80017ac:	4b14      	ldr	r3, [pc, #80]	; (8001800 <MX_TIM6_Init+0x64>)
 80017ae:	4a15      	ldr	r2, [pc, #84]	; (8001804 <MX_TIM6_Init+0x68>)
 80017b0:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 160 - 1;
 80017b2:	4b13      	ldr	r3, [pc, #76]	; (8001800 <MX_TIM6_Init+0x64>)
 80017b4:	229f      	movs	r2, #159	; 0x9f
 80017b6:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <MX_TIM6_Init+0x64>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 50000 - 1;
 80017be:	4b10      	ldr	r3, [pc, #64]	; (8001800 <MX_TIM6_Init+0x64>)
 80017c0:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80017c4:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <MX_TIM6_Init+0x64>)
 80017c8:	2280      	movs	r2, #128	; 0x80
 80017ca:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 80017cc:	480c      	ldr	r0, [pc, #48]	; (8001800 <MX_TIM6_Init+0x64>)
 80017ce:	f006 fcab 	bl	8008128 <HAL_TIM_Base_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM6_Init+0x40>
		Error_Handler();
 80017d8:	f001 f99c 	bl	8002b14 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017dc:	2300      	movs	r3, #0
 80017de:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 80017e4:	1d3b      	adds	r3, r7, #4
 80017e6:	4619      	mov	r1, r3
 80017e8:	4805      	ldr	r0, [pc, #20]	; (8001800 <MX_TIM6_Init+0x64>)
 80017ea:	f007 fcb5 	bl	8009158 <HAL_TIMEx_MasterConfigSynchronization>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM6_Init+0x5c>
		Error_Handler();
 80017f4:	f001 f98e 	bl	8002b14 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 80017f8:	bf00      	nop
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000360 	.word	0x20000360
 8001804:	40001000 	.word	0x40001000

08001808 <MX_TIM7_Init>:
/**
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 8001818:	4b15      	ldr	r3, [pc, #84]	; (8001870 <MX_TIM7_Init+0x68>)
 800181a:	4a16      	ldr	r2, [pc, #88]	; (8001874 <MX_TIM7_Init+0x6c>)
 800181c:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 65535;
 800181e:	4b14      	ldr	r3, [pc, #80]	; (8001870 <MX_TIM7_Init+0x68>)
 8001820:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001824:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001826:	4b12      	ldr	r3, [pc, #72]	; (8001870 <MX_TIM7_Init+0x68>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 12207 - 1;
 800182c:	4b10      	ldr	r3, [pc, #64]	; (8001870 <MX_TIM7_Init+0x68>)
 800182e:	f642 72ae 	movw	r2, #12206	; 0x2fae
 8001832:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001834:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <MX_TIM7_Init+0x68>)
 8001836:	2280      	movs	r2, #128	; 0x80
 8001838:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 800183a:	480d      	ldr	r0, [pc, #52]	; (8001870 <MX_TIM7_Init+0x68>)
 800183c:	f006 fc74 	bl	8008128 <HAL_TIM_Base_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM7_Init+0x42>
		Error_Handler();
 8001846:	f001 f965 	bl	8002b14 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800184a:	2300      	movs	r3, #0
 800184c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	4619      	mov	r1, r3
 8001856:	4806      	ldr	r0, [pc, #24]	; (8001870 <MX_TIM7_Init+0x68>)
 8001858:	f007 fc7e 	bl	8009158 <HAL_TIMEx_MasterConfigSynchronization>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM7_Init+0x5e>
		Error_Handler();
 8001862:	f001 f957 	bl	8002b14 <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200004f4 	.word	0x200004f4
 8001874:	40001400 	.word	0x40001400

08001878 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800187c:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <MX_USART2_UART_Init+0x58>)
 800187e:	4a15      	ldr	r2, [pc, #84]	; (80018d4 <MX_USART2_UART_Init+0x5c>)
 8001880:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001882:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <MX_USART2_UART_Init+0x58>)
 8001884:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001888:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800188a:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <MX_USART2_UART_Init+0x58>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <MX_USART2_UART_Init+0x58>)
 8001892:	2200      	movs	r2, #0
 8001894:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001896:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <MX_USART2_UART_Init+0x58>)
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <MX_USART2_UART_Init+0x58>)
 800189e:	220c      	movs	r2, #12
 80018a0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018a2:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <MX_USART2_UART_Init+0x58>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a8:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <MX_USART2_UART_Init+0x58>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ae:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <MX_USART2_UART_Init+0x58>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <MX_USART2_UART_Init+0x58>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80018ba:	4805      	ldr	r0, [pc, #20]	; (80018d0 <MX_USART2_UART_Init+0x58>)
 80018bc:	f007 fd48 	bl	8009350 <HAL_UART_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80018c6:	f001 f925 	bl	8002b14 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	2000045c 	.word	0x2000045c
 80018d4:	40004400 	.word	0x40004400

080018d8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80018de:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <MX_DMA_Init+0x38>)
 80018e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018e2:	4a0b      	ldr	r2, [pc, #44]	; (8001910 <MX_DMA_Init+0x38>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6493      	str	r3, [r2, #72]	; 0x48
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <MX_DMA_Init+0x38>)
 80018ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	2010      	movs	r0, #16
 80018fc:	f003 f80d 	bl	800491a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001900:	2010      	movs	r0, #16
 8001902:	f003 f826 	bl	8004952 <HAL_NVIC_EnableIRQ>

}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40021000 	.word	0x40021000

08001914 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800191a:	f107 030c 	add.w	r3, r7, #12
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	4b48      	ldr	r3, [pc, #288]	; (8001a4c <MX_GPIO_Init+0x138>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	4a47      	ldr	r2, [pc, #284]	; (8001a4c <MX_GPIO_Init+0x138>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001936:	4b45      	ldr	r3, [pc, #276]	; (8001a4c <MX_GPIO_Init+0x138>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001942:	4b42      	ldr	r3, [pc, #264]	; (8001a4c <MX_GPIO_Init+0x138>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	4a41      	ldr	r2, [pc, #260]	; (8001a4c <MX_GPIO_Init+0x138>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800194e:	4b3f      	ldr	r3, [pc, #252]	; (8001a4c <MX_GPIO_Init+0x138>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, DIR_L1_Pin | testLED_Pin | DIR_L2_Pin, GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	f44f 51a2 	mov.w	r1, #5184	; 0x1440
 8001960:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001964:	f003 fbd8 	bl	8005118 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, DIR_R1_Pin | DIR_R2_Pin, GPIO_PIN_RESET);
 8001968:	2200      	movs	r2, #0
 800196a:	21c0      	movs	r1, #192	; 0xc0
 800196c:	4838      	ldr	r0, [pc, #224]	; (8001a50 <MX_GPIO_Init+0x13c>)
 800196e:	f003 fbd3 	bl	8005118 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : Motor_counterclock_right_Pin Motor_Left_clock_Pin orientation_counterclock_Pin */
	GPIO_InitStruct.Pin = Motor_counterclock_right_Pin | Motor_Left_clock_Pin | orientation_counterclock_Pin;
 8001972:	f44f 6303 	mov.w	r3, #2096	; 0x830
 8001976:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001978:	4b36      	ldr	r3, [pc, #216]	; (8001a54 <MX_GPIO_Init+0x140>)
 800197a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800197c:	2302      	movs	r3, #2
 800197e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	4619      	mov	r1, r3
 8001986:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800198a:	f003 fa43 	bl	8004e14 <HAL_GPIO_Init>

	/*Configure GPIO pins : DIR_L1_Pin testLED_Pin DIR_L2_Pin */
	GPIO_InitStruct.Pin = DIR_L1_Pin | testLED_Pin | DIR_L2_Pin;
 800198e:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 8001992:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001994:	2301      	movs	r3, #1
 8001996:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199c:	2300      	movs	r3, #0
 800199e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a0:	f107 030c 	add.w	r3, r7, #12
 80019a4:	4619      	mov	r1, r3
 80019a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019aa:	f003 fa33 	bl	8004e14 <HAL_GPIO_Init>

	/*Configure GPIO pins : motor_Right_clock_Pin Motor_left_counterclock_Pin orientation_clock_Pin */
	GPIO_InitStruct.Pin = motor_Right_clock_Pin | Motor_left_counterclock_Pin | orientation_clock_Pin;
 80019ae:	230b      	movs	r3, #11
 80019b0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80019b2:	4b28      	ldr	r3, [pc, #160]	; (8001a54 <MX_GPIO_Init+0x140>)
 80019b4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019b6:	2302      	movs	r3, #2
 80019b8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ba:	f107 030c 	add.w	r3, r7, #12
 80019be:	4619      	mov	r1, r3
 80019c0:	4823      	ldr	r0, [pc, #140]	; (8001a50 <MX_GPIO_Init+0x13c>)
 80019c2:	f003 fa27 	bl	8004e14 <HAL_GPIO_Init>

	/*Configure GPIO pins : DIR_R1_Pin DIR_R2_Pin */
	GPIO_InitStruct.Pin = DIR_R1_Pin | DIR_R2_Pin;
 80019c6:	23c0      	movs	r3, #192	; 0xc0
 80019c8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ca:	2301      	movs	r3, #1
 80019cc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d6:	f107 030c 	add.w	r3, r7, #12
 80019da:	4619      	mov	r1, r3
 80019dc:	481c      	ldr	r0, [pc, #112]	; (8001a50 <MX_GPIO_Init+0x13c>)
 80019de:	f003 fa19 	bl	8004e14 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2100      	movs	r1, #0
 80019e6:	2006      	movs	r0, #6
 80019e8:	f002 ff97 	bl	800491a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80019ec:	2006      	movs	r0, #6
 80019ee:	f002 ffb0 	bl	8004952 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	2007      	movs	r0, #7
 80019f8:	f002 ff8f 	bl	800491a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80019fc:	2007      	movs	r0, #7
 80019fe:	f002 ffa8 	bl	8004952 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2100      	movs	r1, #0
 8001a06:	2009      	movs	r0, #9
 8001a08:	f002 ff87 	bl	800491a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001a0c:	2009      	movs	r0, #9
 8001a0e:	f002 ffa0 	bl	8004952 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2100      	movs	r1, #0
 8001a16:	200a      	movs	r0, #10
 8001a18:	f002 ff7f 	bl	800491a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001a1c:	200a      	movs	r0, #10
 8001a1e:	f002 ff98 	bl	8004952 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2100      	movs	r1, #0
 8001a26:	2017      	movs	r0, #23
 8001a28:	f002 ff77 	bl	800491a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a2c:	2017      	movs	r0, #23
 8001a2e:	f002 ff90 	bl	8004952 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2100      	movs	r1, #0
 8001a36:	2028      	movs	r0, #40	; 0x28
 8001a38:	f002 ff6f 	bl	800491a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a3c:	2028      	movs	r0, #40	; 0x28
 8001a3e:	f002 ff88 	bl	8004952 <HAL_NVIC_EnableIRQ>

}
 8001a42:	bf00      	nop
 8001a44:	3720      	adds	r7, #32
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	48000400 	.word	0x48000400
 8001a54:	10310000 	.word	0x10310000

08001a58 <motor_init>:

/* USER CODE BEGIN 4 */
void motor_init(Motor *m, char name) {
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	70fb      	strb	r3, [r7, #3]
	m->name = name;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	78fa      	ldrb	r2, [r7, #3]
 8001a68:	701a      	strb	r2, [r3, #0]
	m->direction = 0;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	705a      	strb	r2, [r3, #1]
	m->dutyCycle = 0.0;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	605a      	str	r2, [r3, #4]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <motorEncoder_init>:

void motorEncoder_init(MotorEncoder *e) {
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
	e->fineAdjustment = 0;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	811a      	strh	r2, [r3, #8]
	e->lastAngle = 0.0;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	605a      	str	r2, [r3, #4]
	e->lastTicks = 0;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
	e->output = 0.0;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
	e->revolutions = 0;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	60da      	str	r2, [r3, #12]
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <motorController_init>:

void motorController_init(MotorController *c, Motor *m, MotorEncoder *e) {
 8001aba:	b480      	push	{r7}
 8001abc:	b085      	sub	sp, #20
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
	c->Encoder = e;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	615a      	str	r2, [r3, #20]
	c->lastError = 0.0;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
	c->motor = m;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	611a      	str	r2, [r3, #16]
	c->reference = 0.0;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
	c->voltage = 0.0;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	60da      	str	r2, [r3, #12]
	c->measAngVel = 0.0;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	605a      	str	r2, [r3, #4]
}
 8001af2:	bf00      	nop
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <uart_in_read>:

void uart_in_read(void (*formattingFunc)(char*, uint32_t)) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b092      	sub	sp, #72	; 0x48
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
	// The position at which the DMA writes (can be larger than queue size, if DMA is a lap ahead)
	int dma_ptr = (UART_IN_BUF_SIZE - huart2.hdmarx->Instance->CNDTR) + UART_IN_BUF_SIZE * uart_dma_laps_ahead;
 8001b08:	4b5d      	ldr	r3, [pc, #372]	; (8001c80 <uart_in_read+0x180>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	021b      	lsls	r3, r3, #8
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4b5c      	ldr	r3, [pc, #368]	; (8001c84 <uart_in_read+0x184>)
 8001b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001b1e:	647b      	str	r3, [r7, #68]	; 0x44

	// dma_ptr - uart_in_read_ptr is the number of unread/uninterpreted bytes in queue
	for (; dma_ptr - uart_in_read_ptr > 0; uart_in_read_ptr++) {
 8001b20:	e0a1      	b.n	8001c66 <uart_in_read+0x166>

		// If read pointer crosses "queue border"
		if (uart_in_read_ptr >= UART_IN_BUF_SIZE) {
 8001b22:	4b59      	ldr	r3, [pc, #356]	; (8001c88 <uart_in_read+0x188>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2bff      	cmp	r3, #255	; 0xff
 8001b28:	dd19      	ble.n	8001b5e <uart_in_read+0x5e>
			uart_in_read_ptr = 0;
 8001b2a:	4b57      	ldr	r3, [pc, #348]	; (8001c88 <uart_in_read+0x188>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
			uart_in_lastStart -= UART_IN_BUF_SIZE;
 8001b30:	4b56      	ldr	r3, [pc, #344]	; (8001c8c <uart_in_read+0x18c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001b38:	4a54      	ldr	r2, [pc, #336]	; (8001c8c <uart_in_read+0x18c>)
 8001b3a:	6013      	str	r3, [r2, #0]
			uart_dma_laps_ahead--;
 8001b3c:	4b50      	ldr	r3, [pc, #320]	; (8001c80 <uart_in_read+0x180>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	3b01      	subs	r3, #1
 8001b42:	4a4f      	ldr	r2, [pc, #316]	; (8001c80 <uart_in_read+0x180>)
 8001b44:	6013      	str	r3, [r2, #0]
			dma_ptr = (UART_IN_BUF_SIZE - huart2.hdmarx->Instance->CNDTR) + UART_IN_BUF_SIZE * uart_dma_laps_ahead;
 8001b46:	4b4e      	ldr	r3, [pc, #312]	; (8001c80 <uart_in_read+0x180>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	021b      	lsls	r3, r3, #8
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b4d      	ldr	r3, [pc, #308]	; (8001c84 <uart_in_read+0x184>)
 8001b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001b5c:	647b      	str	r3, [r7, #68]	; 0x44
		}

		// If we find the beginning of a message
		if (uart_in[uart_in_read_ptr] == COMM_DEL_START) {
 8001b5e:	4b4a      	ldr	r3, [pc, #296]	; (8001c88 <uart_in_read+0x188>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a4b      	ldr	r2, [pc, #300]	; (8001c90 <uart_in_read+0x190>)
 8001b64:	5cd3      	ldrb	r3, [r2, r3]
 8001b66:	2b24      	cmp	r3, #36	; 0x24
 8001b68:	d10a      	bne.n	8001b80 <uart_in_read+0x80>
			validStartDelimiter = true;
 8001b6a:	4b4a      	ldr	r3, [pc, #296]	; (8001c94 <uart_in_read+0x194>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	701a      	strb	r2, [r3, #0]
			uart_in_lastStart = uart_in_read_ptr;
 8001b70:	4b45      	ldr	r3, [pc, #276]	; (8001c88 <uart_in_read+0x188>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a45      	ldr	r2, [pc, #276]	; (8001c8c <uart_in_read+0x18c>)
 8001b76:	6013      	str	r3, [r2, #0]
			uart_in_escapes = 0;
 8001b78:	4b47      	ldr	r3, [pc, #284]	; (8001c98 <uart_in_read+0x198>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	e06d      	b.n	8001c5c <uart_in_read+0x15c>
		} else if (uart_in[uart_in_read_ptr] == COMM_ESCAPE)
 8001b80:	4b41      	ldr	r3, [pc, #260]	; (8001c88 <uart_in_read+0x188>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a42      	ldr	r2, [pc, #264]	; (8001c90 <uart_in_read+0x190>)
 8001b86:	5cd3      	ldrb	r3, [r2, r3]
 8001b88:	2b23      	cmp	r3, #35	; 0x23
 8001b8a:	d105      	bne.n	8001b98 <uart_in_read+0x98>
			uart_in_escapes++;
 8001b8c:	4b42      	ldr	r3, [pc, #264]	; (8001c98 <uart_in_read+0x198>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	3301      	adds	r3, #1
 8001b92:	4a41      	ldr	r2, [pc, #260]	; (8001c98 <uart_in_read+0x198>)
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	e061      	b.n	8001c5c <uart_in_read+0x15c>

		// If we find the end of a message
		else if (uart_in[uart_in_read_ptr] == COMM_DEL_STOP) {
 8001b98:	4b3b      	ldr	r3, [pc, #236]	; (8001c88 <uart_in_read+0x188>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a3c      	ldr	r2, [pc, #240]	; (8001c90 <uart_in_read+0x190>)
 8001b9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ba0:	2b40      	cmp	r3, #64	; 0x40
 8001ba2:	d15b      	bne.n	8001c5c <uart_in_read+0x15c>

			int frameLength = uart_in_read_ptr - uart_in_lastStart + 1;
 8001ba4:	4b38      	ldr	r3, [pc, #224]	; (8001c88 <uart_in_read+0x188>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4b38      	ldr	r3, [pc, #224]	; (8001c8c <uart_in_read+0x18c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	3301      	adds	r3, #1
 8001bb0:	643b      	str	r3, [r7, #64]	; 0x40

			char frame[COMM_MAX_FRAME_SIZE] = { 0 };
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	60da      	str	r2, [r3, #12]
 8001bc4:	821a      	strh	r2, [r3, #16]

			// If the start and stop delimiter are on opposite sides of the "queue border"
			if (uart_in_lastStart < 0) {
 8001bc6:	4b31      	ldr	r3, [pc, #196]	; (8001c8c <uart_in_read+0x18c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	da1c      	bge.n	8001c08 <uart_in_read+0x108>
				memcpy(frame, uart_in + UART_IN_BUF_SIZE + uart_in_lastStart, -uart_in_lastStart);
 8001bce:	4b2f      	ldr	r3, [pc, #188]	; (8001c8c <uart_in_read+0x18c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001bd6:	4a2e      	ldr	r2, [pc, #184]	; (8001c90 <uart_in_read+0x190>)
 8001bd8:	1899      	adds	r1, r3, r2
 8001bda:	4b2c      	ldr	r3, [pc, #176]	; (8001c8c <uart_in_read+0x18c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	425b      	negs	r3, r3
 8001be0:	461a      	mov	r2, r3
 8001be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be6:	4618      	mov	r0, r3
 8001be8:	f008 f9f0 	bl	8009fcc <memcpy>
				memcpy(frame - uart_in_lastStart, uart_in, uart_in_read_ptr + 1);
 8001bec:	4b27      	ldr	r3, [pc, #156]	; (8001c8c <uart_in_read+0x18c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	425b      	negs	r3, r3
 8001bf2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001bf6:	18d0      	adds	r0, r2, r3
 8001bf8:	4b23      	ldr	r3, [pc, #140]	; (8001c88 <uart_in_read+0x188>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	461a      	mov	r2, r3
 8001c00:	4923      	ldr	r1, [pc, #140]	; (8001c90 <uart_in_read+0x190>)
 8001c02:	f008 f9e3 	bl	8009fcc <memcpy>
 8001c06:	e00a      	b.n	8001c1e <uart_in_read+0x11e>
			} else
				memcpy(frame, uart_in + uart_in_lastStart, frameLength);
 8001c08:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <uart_in_read+0x18c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4b20      	ldr	r3, [pc, #128]	; (8001c90 <uart_in_read+0x190>)
 8001c10:	18d1      	adds	r1, r2, r3
 8001c12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f008 f9d7 	bl	8009fcc <memcpy>
			validStartDelimiter = false;
 8001c1e:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <uart_in_read+0x194>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]

			char data[COMM_MAX_FRAME_SIZE] = { 0 };
 8001c24:	2300      	movs	r3, #0
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	f107 0310 	add.w	r3, r7, #16
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	821a      	strh	r2, [r3, #16]
			uint32_t *dataLength;

			if (from_frame(frame, frameLength, data, dataLength) == 1) {
 8001c38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001c3a:	f107 020c 	add.w	r2, r7, #12
 8001c3e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c44:	f7ff fa77 	bl	8001136 <from_frame>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d106      	bne.n	8001c5c <uart_in_read+0x15c>
				(*formattingFunc)(data, *dataLength);
 8001c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c50:	6819      	ldr	r1, [r3, #0]
 8001c52:	f107 020c 	add.w	r2, r7, #12
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4610      	mov	r0, r2
 8001c5a:	4798      	blx	r3
	for (; dma_ptr - uart_in_read_ptr > 0; uart_in_read_ptr++) {
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <uart_in_read+0x188>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	3301      	adds	r3, #1
 8001c62:	4a09      	ldr	r2, [pc, #36]	; (8001c88 <uart_in_read+0x188>)
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <uart_in_read+0x188>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f73f af57 	bgt.w	8001b22 <uart_in_read+0x22>
			}
		}
	}
}
 8001c74:	bf00      	nop
 8001c76:	bf00      	nop
 8001c78:	3748      	adds	r7, #72	; 0x48
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000054 	.word	0x20000054
 8001c84:	2000045c 	.word	0x2000045c
 8001c88:	20000050 	.word	0x20000050
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	20000058 	.word	0x20000058
 8001c94:	2000004c 	.word	0x2000004c
 8001c98:	20000158 	.word	0x20000158

08001c9c <referenceFormatting>:

void referenceFormatting(char *uart_msg, uint32_t len) {
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]

	// Check length of msg
	if (len != 10)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	2b0a      	cmp	r3, #10
 8001caa:	d115      	bne.n	8001cd8 <referenceFormatting+0x3c>
		return;

	// Retrieve reference for right wheel
	if (uart_msg[0] == 'R') {
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b52      	cmp	r3, #82	; 0x52
 8001cb2:	d113      	bne.n	8001cdc <referenceFormatting+0x40>
		memcpy(&controllerR.reference, uart_msg + 1, 4);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <referenceFormatting+0x50>)
 8001cbe:	601a      	str	r2, [r3, #0]
	} else {
		return;
	}

	// Retrieve reference for left wheel
	if (uart_msg[5] == 'L') {
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3305      	adds	r3, #5
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b4c      	cmp	r3, #76	; 0x4c
 8001cc8:	d10a      	bne.n	8001ce0 <referenceFormatting+0x44>
		memcpy(&controllerL.reference, uart_msg + 6, 4);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	3306      	adds	r3, #6
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <referenceFormatting+0x54>)
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	e004      	b.n	8001ce2 <referenceFormatting+0x46>
		return;
 8001cd8:	bf00      	nop
 8001cda:	e002      	b.n	8001ce2 <referenceFormatting+0x46>
		return;
 8001cdc:	bf00      	nop
 8001cde:	e000      	b.n	8001ce2 <referenceFormatting+0x46>
	} else {
		return;
 8001ce0:	bf00      	nop
	}
}
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	200003ac 	.word	0x200003ac
 8001cf0:	200002e0 	.word	0x200002e0
 8001cf4:	00000000 	.word	0x00000000

08001cf8 <calcDistance>:

float calcDistance(MotorController *c) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
	float deltaTicks = c->Encoder->output * TOTAL_WHEEL_TICKS - c->Encoder->lastTicks;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d08:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001d68 <calcDistance+0x70>
 8001d0c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	ee07 3a90 	vmov	s15, r3
 8001d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d22:	edc7 7a03 	vstr	s15, [r7, #12]
	return M_PI * WHEELDIA * (deltaTicks / TOTAL_WHEEL_TICKS);
 8001d26:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d2a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001d68 <calcDistance+0x70>
 8001d2e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001d32:	ee16 0a90 	vmov	r0, s13
 8001d36:	f7fe fbaf 	bl	8000498 <__aeabi_f2d>
 8001d3a:	a309      	add	r3, pc, #36	; (adr r3, 8001d60 <calcDistance+0x68>)
 8001d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d40:	f7fe fc02 	bl	8000548 <__aeabi_dmul>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4610      	mov	r0, r2
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	f7fe febe 	bl	8000acc <__aeabi_d2f>
 8001d50:	4603      	mov	r3, r0
 8001d52:	ee07 3a90 	vmov	s15, r3
}
 8001d56:	eeb0 0a67 	vmov.f32	s0, s15
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	9217271a 	.word	0x9217271a
 8001d64:	3fd015bf 	.word	0x3fd015bf
 8001d68:	44f00000 	.word	0x44f00000
 8001d6c:	00000000 	.word	0x00000000

08001d70 <calcPositionAndVelocity>:

void calcPositionAndVelocity() {
 8001d70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d74:	b084      	sub	sp, #16
 8001d76:	af00      	add	r7, sp, #0
	float distR = calcDistance(&controllerR);
 8001d78:	487b      	ldr	r0, [pc, #492]	; (8001f68 <calcPositionAndVelocity+0x1f8>)
 8001d7a:	f7ff ffbd 	bl	8001cf8 <calcDistance>
 8001d7e:	ed87 0a03 	vstr	s0, [r7, #12]
	float distL = calcDistance(&controllerL);
 8001d82:	487a      	ldr	r0, [pc, #488]	; (8001f6c <calcPositionAndVelocity+0x1fc>)
 8001d84:	f7ff ffb8 	bl	8001cf8 <calcDistance>
 8001d88:	ed87 0a02 	vstr	s0, [r7, #8]
	controllerR.Encoder->lastTicks = controllerR.Encoder->output * TOTAL_WHEEL_TICKS;
 8001d8c:	4b76      	ldr	r3, [pc, #472]	; (8001f68 <calcPositionAndVelocity+0x1f8>)
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d94:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001f70 <calcPositionAndVelocity+0x200>
 8001d98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d9c:	4b72      	ldr	r3, [pc, #456]	; (8001f68 <calcPositionAndVelocity+0x1f8>)
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001da4:	ee17 2a90 	vmov	r2, s15
 8001da8:	601a      	str	r2, [r3, #0]
	controllerL.Encoder->lastTicks = controllerL.Encoder->output * TOTAL_WHEEL_TICKS;
 8001daa:	4b70      	ldr	r3, [pc, #448]	; (8001f6c <calcPositionAndVelocity+0x1fc>)
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	edd3 7a04 	vldr	s15, [r3, #16]
 8001db2:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8001f70 <calcPositionAndVelocity+0x200>
 8001db6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dba:	4b6c      	ldr	r3, [pc, #432]	; (8001f6c <calcPositionAndVelocity+0x1fc>)
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dc2:	ee17 2a90 	vmov	r2, s15
 8001dc6:	601a      	str	r2, [r3, #0]
	float dist = (distL + distR) / 2;
 8001dc8:	ed97 7a02 	vldr	s14, [r7, #8]
 8001dcc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dd4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001dd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ddc:	edc7 7a01 	vstr	s15, [r7, #4]
	posX = posX + dist * cos(posPhi);
 8001de0:	4b64      	ldr	r3, [pc, #400]	; (8001f74 <calcPositionAndVelocity+0x204>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fb57 	bl	8000498 <__aeabi_f2d>
 8001dea:	4604      	mov	r4, r0
 8001dec:	460d      	mov	r5, r1
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7fe fb52 	bl	8000498 <__aeabi_f2d>
 8001df4:	4680      	mov	r8, r0
 8001df6:	4689      	mov	r9, r1
 8001df8:	4b5f      	ldr	r3, [pc, #380]	; (8001f78 <calcPositionAndVelocity+0x208>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe fb4b 	bl	8000498 <__aeabi_f2d>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	ec43 2b10 	vmov	d0, r2, r3
 8001e0a:	f008 f8f5 	bl	8009ff8 <cos>
 8001e0e:	ec53 2b10 	vmov	r2, r3, d0
 8001e12:	4640      	mov	r0, r8
 8001e14:	4649      	mov	r1, r9
 8001e16:	f7fe fb97 	bl	8000548 <__aeabi_dmul>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4620      	mov	r0, r4
 8001e20:	4629      	mov	r1, r5
 8001e22:	f7fe f9db 	bl	80001dc <__adddf3>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f7fe fe4d 	bl	8000acc <__aeabi_d2f>
 8001e32:	4603      	mov	r3, r0
 8001e34:	4a4f      	ldr	r2, [pc, #316]	; (8001f74 <calcPositionAndVelocity+0x204>)
 8001e36:	6013      	str	r3, [r2, #0]
	posY = posY + dist * sin(posPhi);
 8001e38:	4b50      	ldr	r3, [pc, #320]	; (8001f7c <calcPositionAndVelocity+0x20c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fb2b 	bl	8000498 <__aeabi_f2d>
 8001e42:	4604      	mov	r4, r0
 8001e44:	460d      	mov	r5, r1
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7fe fb26 	bl	8000498 <__aeabi_f2d>
 8001e4c:	4680      	mov	r8, r0
 8001e4e:	4689      	mov	r9, r1
 8001e50:	4b49      	ldr	r3, [pc, #292]	; (8001f78 <calcPositionAndVelocity+0x208>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe fb1f 	bl	8000498 <__aeabi_f2d>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	ec43 2b10 	vmov	d0, r2, r3
 8001e62:	f008 f919 	bl	800a098 <sin>
 8001e66:	ec53 2b10 	vmov	r2, r3, d0
 8001e6a:	4640      	mov	r0, r8
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	f7fe fb6b 	bl	8000548 <__aeabi_dmul>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4620      	mov	r0, r4
 8001e78:	4629      	mov	r1, r5
 8001e7a:	f7fe f9af 	bl	80001dc <__adddf3>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4610      	mov	r0, r2
 8001e84:	4619      	mov	r1, r3
 8001e86:	f7fe fe21 	bl	8000acc <__aeabi_d2f>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	4a3b      	ldr	r2, [pc, #236]	; (8001f7c <calcPositionAndVelocity+0x20c>)
 8001e8e:	6013      	str	r3, [r2, #0]
	posPhi = posPhi + (distR - distL) / DISBETWHEEL;
 8001e90:	4b39      	ldr	r3, [pc, #228]	; (8001f78 <calcPositionAndVelocity+0x208>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe faff 	bl	8000498 <__aeabi_f2d>
 8001e9a:	4604      	mov	r4, r0
 8001e9c:	460d      	mov	r5, r1
 8001e9e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ea2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ea6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eaa:	ee17 0a90 	vmov	r0, s15
 8001eae:	f7fe faf3 	bl	8000498 <__aeabi_f2d>
 8001eb2:	a32b      	add	r3, pc, #172	; (adr r3, 8001f60 <calcPositionAndVelocity+0x1f0>)
 8001eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb8:	f7fe fc70 	bl	800079c <__aeabi_ddiv>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4620      	mov	r0, r4
 8001ec2:	4629      	mov	r1, r5
 8001ec4:	f7fe f98a 	bl	80001dc <__adddf3>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4610      	mov	r0, r2
 8001ece:	4619      	mov	r1, r3
 8001ed0:	f7fe fdfc 	bl	8000acc <__aeabi_d2f>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	4a28      	ldr	r2, [pc, #160]	; (8001f78 <calcPositionAndVelocity+0x208>)
 8001ed8:	6013      	str	r3, [r2, #0]

	velPhi = ((posPhi - posPhiPrev)) / positionCalculationPeriod;
 8001eda:	4b27      	ldr	r3, [pc, #156]	; (8001f78 <calcPositionAndVelocity+0x208>)
 8001edc:	ed93 7a00 	vldr	s14, [r3]
 8001ee0:	4b27      	ldr	r3, [pc, #156]	; (8001f80 <calcPositionAndVelocity+0x210>)
 8001ee2:	edd3 7a00 	vldr	s15, [r3]
 8001ee6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001eea:	4b26      	ldr	r3, [pc, #152]	; (8001f84 <calcPositionAndVelocity+0x214>)
 8001eec:	ed93 7a00 	vldr	s14, [r3]
 8001ef0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ef4:	4b24      	ldr	r3, [pc, #144]	; (8001f88 <calcPositionAndVelocity+0x218>)
 8001ef6:	edc3 7a00 	vstr	s15, [r3]
	velX = (posX - posXPrev) / positionCalculationPeriod;
 8001efa:	4b1e      	ldr	r3, [pc, #120]	; (8001f74 <calcPositionAndVelocity+0x204>)
 8001efc:	ed93 7a00 	vldr	s14, [r3]
 8001f00:	4b22      	ldr	r3, [pc, #136]	; (8001f8c <calcPositionAndVelocity+0x21c>)
 8001f02:	edd3 7a00 	vldr	s15, [r3]
 8001f06:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f0a:	4b1e      	ldr	r3, [pc, #120]	; (8001f84 <calcPositionAndVelocity+0x214>)
 8001f0c:	ed93 7a00 	vldr	s14, [r3]
 8001f10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f14:	4b1e      	ldr	r3, [pc, #120]	; (8001f90 <calcPositionAndVelocity+0x220>)
 8001f16:	edc3 7a00 	vstr	s15, [r3]
	velY = (posY - posYPrev) / positionCalculationPeriod;
 8001f1a:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <calcPositionAndVelocity+0x20c>)
 8001f1c:	ed93 7a00 	vldr	s14, [r3]
 8001f20:	4b1c      	ldr	r3, [pc, #112]	; (8001f94 <calcPositionAndVelocity+0x224>)
 8001f22:	edd3 7a00 	vldr	s15, [r3]
 8001f26:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f2a:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <calcPositionAndVelocity+0x214>)
 8001f2c:	ed93 7a00 	vldr	s14, [r3]
 8001f30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f34:	4b18      	ldr	r3, [pc, #96]	; (8001f98 <calcPositionAndVelocity+0x228>)
 8001f36:	edc3 7a00 	vstr	s15, [r3]

	posPhiPrev = posPhi;
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <calcPositionAndVelocity+0x208>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a10      	ldr	r2, [pc, #64]	; (8001f80 <calcPositionAndVelocity+0x210>)
 8001f40:	6013      	str	r3, [r2, #0]
	posXPrev = posX;
 8001f42:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <calcPositionAndVelocity+0x204>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a11      	ldr	r2, [pc, #68]	; (8001f8c <calcPositionAndVelocity+0x21c>)
 8001f48:	6013      	str	r3, [r2, #0]
	posYPrev = posY;
 8001f4a:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <calcPositionAndVelocity+0x20c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a11      	ldr	r2, [pc, #68]	; (8001f94 <calcPositionAndVelocity+0x224>)
 8001f50:	6013      	str	r3, [r2, #0]
}
 8001f52:	bf00      	nop
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f5c:	f3af 8000 	nop.w
 8001f60:	851eb852 	.word	0x851eb852
 8001f64:	3fd851eb 	.word	0x3fd851eb
 8001f68:	200003ac 	.word	0x200003ac
 8001f6c:	200002e0 	.word	0x200002e0
 8001f70:	44f00000 	.word	0x44f00000
 8001f74:	200001a8 	.word	0x200001a8
 8001f78:	200001b8 	.word	0x200001b8
 8001f7c:	200001b0 	.word	0x200001b0
 8001f80:	200001bc 	.word	0x200001bc
 8001f84:	200002dc 	.word	0x200002dc
 8001f88:	200001c8 	.word	0x200001c8
 8001f8c:	200001ac 	.word	0x200001ac
 8001f90:	200001c0 	.word	0x200001c0
 8001f94:	200001b4 	.word	0x200001b4
 8001f98:	200001c4 	.word	0x200001c4

08001f9c <updatePositionsAndVelocities>:

void updatePositionsAndVelocities() {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0

	// Position and velocity data from wheel encoders
	calcPositionAndVelocity();
 8001fa0:	f7ff fee6 	bl	8001d70 <calcPositionAndVelocity>
	sendPositionAndVelocity();
 8001fa4:	f000 f89c 	bl	80020e0 <sendPositionAndVelocity>

	// Encoder data from top plate
	calcOrientOutput();
 8001fa8:	f000 fdba 	bl	8002b20 <calcOrientOutput>
	sendOrientData();
 8001fac:	f000 fe62 	bl	8002c74 <sendOrientData>
}
 8001fb0:	bf00      	nop
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <packThe6Floats>:

void packThe6Floats() {
 8001fb4:	b480      	push	{r7}
 8001fb6:	b089      	sub	sp, #36	; 0x24
 8001fb8:	af00      	add	r7, sp, #0
	uint8_t *pointer = &posX;
 8001fba:	4b42      	ldr	r3, [pc, #264]	; (80020c4 <packThe6Floats+0x110>)
 8001fbc:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 4; i++) {
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
 8001fc2:	e00b      	b.n	8001fdc <packThe6Floats+0x28>
		position[i] = *(pointer + i);
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	7819      	ldrb	r1, [r3, #0]
 8001fcc:	4a3e      	ldr	r2, [pc, #248]	; (80020c8 <packThe6Floats+0x114>)
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	460a      	mov	r2, r1
 8001fd4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	61fb      	str	r3, [r7, #28]
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	2b03      	cmp	r3, #3
 8001fe0:	ddf0      	ble.n	8001fc4 <packThe6Floats+0x10>
	}

	pointer = &posY;
 8001fe2:	4b3a      	ldr	r3, [pc, #232]	; (80020cc <packThe6Floats+0x118>)
 8001fe4:	607b      	str	r3, [r7, #4]
	for (int k = 4; k < 8; k++) {
 8001fe6:	2304      	movs	r3, #4
 8001fe8:	61bb      	str	r3, [r7, #24]
 8001fea:	e00c      	b.n	8002006 <packThe6Floats+0x52>
		position[k] = *(pointer + k - 4);
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	3b04      	subs	r3, #4
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	7819      	ldrb	r1, [r3, #0]
 8001ff6:	4a34      	ldr	r2, [pc, #208]	; (80020c8 <packThe6Floats+0x114>)
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	460a      	mov	r2, r1
 8001ffe:	701a      	strb	r2, [r3, #0]
	for (int k = 4; k < 8; k++) {
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	3301      	adds	r3, #1
 8002004:	61bb      	str	r3, [r7, #24]
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	2b07      	cmp	r3, #7
 800200a:	ddef      	ble.n	8001fec <packThe6Floats+0x38>
	}
	pointer = &posPhi;
 800200c:	4b30      	ldr	r3, [pc, #192]	; (80020d0 <packThe6Floats+0x11c>)
 800200e:	607b      	str	r3, [r7, #4]
	for (int j = 8; j < 12; j++) {
 8002010:	2308      	movs	r3, #8
 8002012:	617b      	str	r3, [r7, #20]
 8002014:	e00c      	b.n	8002030 <packThe6Floats+0x7c>
		position[j] = *(pointer + j - 8);
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	3b08      	subs	r3, #8
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	7819      	ldrb	r1, [r3, #0]
 8002020:	4a29      	ldr	r2, [pc, #164]	; (80020c8 <packThe6Floats+0x114>)
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	4413      	add	r3, r2
 8002026:	460a      	mov	r2, r1
 8002028:	701a      	strb	r2, [r3, #0]
	for (int j = 8; j < 12; j++) {
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	3301      	adds	r3, #1
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	2b0b      	cmp	r3, #11
 8002034:	ddef      	ble.n	8002016 <packThe6Floats+0x62>
	}
	pointer = &velX;
 8002036:	4b27      	ldr	r3, [pc, #156]	; (80020d4 <packThe6Floats+0x120>)
 8002038:	607b      	str	r3, [r7, #4]
	for (int m = 12; m < 16; m++) {
 800203a:	230c      	movs	r3, #12
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	e00c      	b.n	800205a <packThe6Floats+0xa6>
		position[m] = *(pointer + m - 12);
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	3b0c      	subs	r3, #12
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	4413      	add	r3, r2
 8002048:	7819      	ldrb	r1, [r3, #0]
 800204a:	4a1f      	ldr	r2, [pc, #124]	; (80020c8 <packThe6Floats+0x114>)
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4413      	add	r3, r2
 8002050:	460a      	mov	r2, r1
 8002052:	701a      	strb	r2, [r3, #0]
	for (int m = 12; m < 16; m++) {
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	3301      	adds	r3, #1
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	2b0f      	cmp	r3, #15
 800205e:	ddef      	ble.n	8002040 <packThe6Floats+0x8c>
	}
	pointer = &velY;
 8002060:	4b1d      	ldr	r3, [pc, #116]	; (80020d8 <packThe6Floats+0x124>)
 8002062:	607b      	str	r3, [r7, #4]
	for (int n = 16; n < 20; n++) {
 8002064:	2310      	movs	r3, #16
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	e00c      	b.n	8002084 <packThe6Floats+0xd0>
		position[n] = *(pointer + n - 16);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	3b10      	subs	r3, #16
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	4413      	add	r3, r2
 8002072:	7819      	ldrb	r1, [r3, #0]
 8002074:	4a14      	ldr	r2, [pc, #80]	; (80020c8 <packThe6Floats+0x114>)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4413      	add	r3, r2
 800207a:	460a      	mov	r2, r1
 800207c:	701a      	strb	r2, [r3, #0]
	for (int n = 16; n < 20; n++) {
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	3301      	adds	r3, #1
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2b13      	cmp	r3, #19
 8002088:	ddef      	ble.n	800206a <packThe6Floats+0xb6>
	}
	pointer = &velPhi;
 800208a:	4b14      	ldr	r3, [pc, #80]	; (80020dc <packThe6Floats+0x128>)
 800208c:	607b      	str	r3, [r7, #4]
	for (int o = 20; o < 24; o++) {
 800208e:	2314      	movs	r3, #20
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	e00c      	b.n	80020ae <packThe6Floats+0xfa>
		position[o] = *(pointer + o - 20);
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	3b14      	subs	r3, #20
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	4413      	add	r3, r2
 800209c:	7819      	ldrb	r1, [r3, #0]
 800209e:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <packThe6Floats+0x114>)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	4413      	add	r3, r2
 80020a4:	460a      	mov	r2, r1
 80020a6:	701a      	strb	r2, [r3, #0]
	for (int o = 20; o < 24; o++) {
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	3301      	adds	r3, #1
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	2b17      	cmp	r3, #23
 80020b2:	ddef      	ble.n	8002094 <packThe6Floats+0xe0>
	}
}
 80020b4:	bf00      	nop
 80020b6:	bf00      	nop
 80020b8:	3724      	adds	r7, #36	; 0x24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	200001a8 	.word	0x200001a8
 80020c8:	200001cc 	.word	0x200001cc
 80020cc:	200001b0 	.word	0x200001b0
 80020d0:	200001b8 	.word	0x200001b8
 80020d4:	200001c0 	.word	0x200001c0
 80020d8:	200001c4 	.word	0x200001c4
 80020dc:	200001c8 	.word	0x200001c8

080020e0 <sendPositionAndVelocity>:

void sendPositionAndVelocity() {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
	if (spamCheckX != posX || spamCheckY != posY || spamCheckPhi != posPhi) {
 80020e4:	4b20      	ldr	r3, [pc, #128]	; (8002168 <sendPositionAndVelocity+0x88>)
 80020e6:	ed93 7a00 	vldr	s14, [r3]
 80020ea:	4b20      	ldr	r3, [pc, #128]	; (800216c <sendPositionAndVelocity+0x8c>)
 80020ec:	edd3 7a00 	vldr	s15, [r3]
 80020f0:	eeb4 7a67 	vcmp.f32	s14, s15
 80020f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f8:	d115      	bne.n	8002126 <sendPositionAndVelocity+0x46>
 80020fa:	4b1d      	ldr	r3, [pc, #116]	; (8002170 <sendPositionAndVelocity+0x90>)
 80020fc:	ed93 7a00 	vldr	s14, [r3]
 8002100:	4b1c      	ldr	r3, [pc, #112]	; (8002174 <sendPositionAndVelocity+0x94>)
 8002102:	edd3 7a00 	vldr	s15, [r3]
 8002106:	eeb4 7a67 	vcmp.f32	s14, s15
 800210a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210e:	d10a      	bne.n	8002126 <sendPositionAndVelocity+0x46>
 8002110:	4b19      	ldr	r3, [pc, #100]	; (8002178 <sendPositionAndVelocity+0x98>)
 8002112:	ed93 7a00 	vldr	s14, [r3]
 8002116:	4b19      	ldr	r3, [pc, #100]	; (800217c <sendPositionAndVelocity+0x9c>)
 8002118:	edd3 7a00 	vldr	s15, [r3]
 800211c:	eeb4 7a67 	vcmp.f32	s14, s15
 8002120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002124:	d01e      	beq.n	8002164 <sendPositionAndVelocity+0x84>
		spamCheckX = posX;
 8002126:	4b11      	ldr	r3, [pc, #68]	; (800216c <sendPositionAndVelocity+0x8c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a0f      	ldr	r2, [pc, #60]	; (8002168 <sendPositionAndVelocity+0x88>)
 800212c:	6013      	str	r3, [r2, #0]
		spamCheckY = posY;
 800212e:	4b11      	ldr	r3, [pc, #68]	; (8002174 <sendPositionAndVelocity+0x94>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a0f      	ldr	r2, [pc, #60]	; (8002170 <sendPositionAndVelocity+0x90>)
 8002134:	6013      	str	r3, [r2, #0]
		spamCheckPhi = posPhi;
 8002136:	4b11      	ldr	r3, [pc, #68]	; (800217c <sendPositionAndVelocity+0x9c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a0f      	ldr	r2, [pc, #60]	; (8002178 <sendPositionAndVelocity+0x98>)
 800213c:	6013      	str	r3, [r2, #0]
		packThe6Floats();
 800213e:	f7ff ff39 	bl	8001fb4 <packThe6Floats>
		memset(packedMotorData, 0, sizeof(packedMotorData));
 8002142:	2232      	movs	r2, #50	; 0x32
 8002144:	2100      	movs	r1, #0
 8002146:	480e      	ldr	r0, [pc, #56]	; (8002180 <sendPositionAndVelocity+0xa0>)
 8002148:	f007 ff4e 	bl	8009fe8 <memset>

		to_frame(packedMotorData, position, 3);
 800214c:	2203      	movs	r2, #3
 800214e:	490d      	ldr	r1, [pc, #52]	; (8002184 <sendPositionAndVelocity+0xa4>)
 8002150:	480b      	ldr	r0, [pc, #44]	; (8002180 <sendPositionAndVelocity+0xa0>)
 8002152:	f7fe ff7d 	bl	8001050 <to_frame>
		HAL_UART_Transmit(&huart2, packedMotorData, sizeof(packedMotorData),
 8002156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800215a:	2232      	movs	r2, #50	; 0x32
 800215c:	4908      	ldr	r1, [pc, #32]	; (8002180 <sendPositionAndVelocity+0xa0>)
 800215e:	480a      	ldr	r0, [pc, #40]	; (8002188 <sendPositionAndVelocity+0xa8>)
 8002160:	f007 f944 	bl	80093ec <HAL_UART_Transmit>
		HAL_MAX_DELAY);
	}
}
 8002164:	bf00      	nop
 8002166:	bd80      	pop	{r7, pc}
 8002168:	2000016c 	.word	0x2000016c
 800216c:	200001a8 	.word	0x200001a8
 8002170:	20000168 	.word	0x20000168
 8002174:	200001b0 	.word	0x200001b0
 8002178:	20000170 	.word	0x20000170
 800217c:	200001b8 	.word	0x200001b8
 8002180:	20000174 	.word	0x20000174
 8002184:	200001cc 	.word	0x200001cc
 8002188:	2000045c 	.word	0x2000045c

0800218c <clockcheckRight>:
	c->Encoder->output = 0.0;
	c->Encoder->fineAdjustment = 0;
	c->Encoder->revolutions = 0;
}

void clockcheckRight() {
 800218c:	b598      	push	{r3, r4, r7, lr}
 800218e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(motor_Right_clock_GPIO_Port, motor_Right_clock_Pin) == HAL_GPIO_ReadPin(Motor_counterclock_right_GPIO_Port,
 8002190:	2101      	movs	r1, #1
 8002192:	482b      	ldr	r0, [pc, #172]	; (8002240 <clockcheckRight+0xb4>)
 8002194:	f002 ffa8 	bl	80050e8 <HAL_GPIO_ReadPin>
 8002198:	4603      	mov	r3, r0
 800219a:	461c      	mov	r4, r3
 800219c:	2110      	movs	r1, #16
 800219e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021a2:	f002 ffa1 	bl	80050e8 <HAL_GPIO_ReadPin>
 80021a6:	4603      	mov	r3, r0
 80021a8:	429c      	cmp	r4, r3
 80021aa:	d122      	bne.n	80021f2 <clockcheckRight+0x66>
	Motor_counterclock_right_Pin)) {
		controllerR.motor->direction = -1;
 80021ac:	4b25      	ldr	r3, [pc, #148]	; (8002244 <clockcheckRight+0xb8>)
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	22ff      	movs	r2, #255	; 0xff
 80021b2:	705a      	strb	r2, [r3, #1]
		controllerR.Encoder->fineAdjustment = abs((controllerR.Encoder->fineAdjustment + controllerR.motor->direction) % TOTAL_WHEEL_TICKS);
 80021b4:	4b23      	ldr	r3, [pc, #140]	; (8002244 <clockcheckRight+0xb8>)
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80021bc:	461a      	mov	r2, r3
 80021be:	4b21      	ldr	r3, [pc, #132]	; (8002244 <clockcheckRight+0xb8>)
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80021c6:	441a      	add	r2, r3
 80021c8:	4b1f      	ldr	r3, [pc, #124]	; (8002248 <clockcheckRight+0xbc>)
 80021ca:	fb83 1302 	smull	r1, r3, r3, r2
 80021ce:	4413      	add	r3, r2
 80021d0:	1299      	asrs	r1, r3, #10
 80021d2:	17d3      	asrs	r3, r2, #31
 80021d4:	1ac9      	subs	r1, r1, r3
 80021d6:	460b      	mov	r3, r1
 80021d8:	011b      	lsls	r3, r3, #4
 80021da:	1a5b      	subs	r3, r3, r1
 80021dc:	01db      	lsls	r3, r3, #7
 80021de:	1ad1      	subs	r1, r2, r3
 80021e0:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 80021e4:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 80021e8:	4b16      	ldr	r3, [pc, #88]	; (8002244 <clockcheckRight+0xb8>)
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	b212      	sxth	r2, r2
 80021ee:	811a      	strh	r2, [r3, #8]
 80021f0:	e020      	b.n	8002234 <clockcheckRight+0xa8>
	} else {
		controllerR.motor->direction = 1;
 80021f2:	4b14      	ldr	r3, [pc, #80]	; (8002244 <clockcheckRight+0xb8>)
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	2201      	movs	r2, #1
 80021f8:	705a      	strb	r2, [r3, #1]
		controllerR.Encoder->fineAdjustment = abs((controllerR.Encoder->fineAdjustment + controllerR.motor->direction) % (TOTAL_WHEEL_TICKS + 1));
 80021fa:	4b12      	ldr	r3, [pc, #72]	; (8002244 <clockcheckRight+0xb8>)
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002202:	461a      	mov	r2, r3
 8002204:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <clockcheckRight+0xb8>)
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800220c:	18d1      	adds	r1, r2, r3
 800220e:	4b0f      	ldr	r3, [pc, #60]	; (800224c <clockcheckRight+0xc0>)
 8002210:	fb83 2301 	smull	r2, r3, r3, r1
 8002214:	115a      	asrs	r2, r3, #5
 8002216:	17cb      	asrs	r3, r1, #31
 8002218:	1ad2      	subs	r2, r2, r3
 800221a:	4613      	mov	r3, r2
 800221c:	011b      	lsls	r3, r3, #4
 800221e:	1a9b      	subs	r3, r3, r2
 8002220:	01db      	lsls	r3, r3, #7
 8002222:	4413      	add	r3, r2
 8002224:	1aca      	subs	r2, r1, r3
 8002226:	2a00      	cmp	r2, #0
 8002228:	bfb8      	it	lt
 800222a:	4252      	neglt	r2, r2
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <clockcheckRight+0xb8>)
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	b212      	sxth	r2, r2
 8002232:	811a      	strh	r2, [r3, #8]
	}

	checkRevolutions(&controllerR);
 8002234:	4803      	ldr	r0, [pc, #12]	; (8002244 <clockcheckRight+0xb8>)
 8002236:	f000 f931 	bl	800249c <checkRevolutions>
}
 800223a:	bf00      	nop
 800223c:	bd98      	pop	{r3, r4, r7, pc}
 800223e:	bf00      	nop
 8002240:	48000400 	.word	0x48000400
 8002244:	200003ac 	.word	0x200003ac
 8002248:	88888889 	.word	0x88888889
 800224c:	0443b2b5 	.word	0x0443b2b5

08002250 <counterclockcheckRight>:

void counterclockcheckRight() {
 8002250:	b598      	push	{r3, r4, r7, lr}
 8002252:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(motor_Right_clock_GPIO_Port, motor_Right_clock_Pin) == HAL_GPIO_ReadPin(Motor_counterclock_right_GPIO_Port,
 8002254:	2101      	movs	r1, #1
 8002256:	482b      	ldr	r0, [pc, #172]	; (8002304 <counterclockcheckRight+0xb4>)
 8002258:	f002 ff46 	bl	80050e8 <HAL_GPIO_ReadPin>
 800225c:	4603      	mov	r3, r0
 800225e:	461c      	mov	r4, r3
 8002260:	2110      	movs	r1, #16
 8002262:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002266:	f002 ff3f 	bl	80050e8 <HAL_GPIO_ReadPin>
 800226a:	4603      	mov	r3, r0
 800226c:	429c      	cmp	r4, r3
 800226e:	d121      	bne.n	80022b4 <counterclockcheckRight+0x64>
	Motor_counterclock_right_Pin)) {
		controllerR.motor->direction = 1;
 8002270:	4b25      	ldr	r3, [pc, #148]	; (8002308 <counterclockcheckRight+0xb8>)
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	2201      	movs	r2, #1
 8002276:	705a      	strb	r2, [r3, #1]
		controllerR.Encoder->fineAdjustment = abs((controllerR.Encoder->fineAdjustment + controllerR.motor->direction) % (TOTAL_WHEEL_TICKS + 1));
 8002278:	4b23      	ldr	r3, [pc, #140]	; (8002308 <counterclockcheckRight+0xb8>)
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002280:	461a      	mov	r2, r3
 8002282:	4b21      	ldr	r3, [pc, #132]	; (8002308 <counterclockcheckRight+0xb8>)
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800228a:	18d1      	adds	r1, r2, r3
 800228c:	4b1f      	ldr	r3, [pc, #124]	; (800230c <counterclockcheckRight+0xbc>)
 800228e:	fb83 2301 	smull	r2, r3, r3, r1
 8002292:	115a      	asrs	r2, r3, #5
 8002294:	17cb      	asrs	r3, r1, #31
 8002296:	1ad2      	subs	r2, r2, r3
 8002298:	4613      	mov	r3, r2
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	1a9b      	subs	r3, r3, r2
 800229e:	01db      	lsls	r3, r3, #7
 80022a0:	4413      	add	r3, r2
 80022a2:	1aca      	subs	r2, r1, r3
 80022a4:	2a00      	cmp	r2, #0
 80022a6:	bfb8      	it	lt
 80022a8:	4252      	neglt	r2, r2
 80022aa:	4b17      	ldr	r3, [pc, #92]	; (8002308 <counterclockcheckRight+0xb8>)
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	b212      	sxth	r2, r2
 80022b0:	811a      	strh	r2, [r3, #8]
 80022b2:	e021      	b.n	80022f8 <counterclockcheckRight+0xa8>
	} else {
		controllerR.motor->direction = -1;
 80022b4:	4b14      	ldr	r3, [pc, #80]	; (8002308 <counterclockcheckRight+0xb8>)
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	22ff      	movs	r2, #255	; 0xff
 80022ba:	705a      	strb	r2, [r3, #1]
		controllerR.Encoder->fineAdjustment = abs((controllerR.Encoder->fineAdjustment + controllerR.motor->direction) % TOTAL_WHEEL_TICKS);
 80022bc:	4b12      	ldr	r3, [pc, #72]	; (8002308 <counterclockcheckRight+0xb8>)
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80022c4:	461a      	mov	r2, r3
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <counterclockcheckRight+0xb8>)
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80022ce:	441a      	add	r2, r3
 80022d0:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <counterclockcheckRight+0xc0>)
 80022d2:	fb83 1302 	smull	r1, r3, r3, r2
 80022d6:	4413      	add	r3, r2
 80022d8:	1299      	asrs	r1, r3, #10
 80022da:	17d3      	asrs	r3, r2, #31
 80022dc:	1ac9      	subs	r1, r1, r3
 80022de:	460b      	mov	r3, r1
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	1a5b      	subs	r3, r3, r1
 80022e4:	01db      	lsls	r3, r3, #7
 80022e6:	1ad1      	subs	r1, r2, r3
 80022e8:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 80022ec:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 80022f0:	4b05      	ldr	r3, [pc, #20]	; (8002308 <counterclockcheckRight+0xb8>)
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	b212      	sxth	r2, r2
 80022f6:	811a      	strh	r2, [r3, #8]
	}

	checkRevolutions(&controllerR);
 80022f8:	4803      	ldr	r0, [pc, #12]	; (8002308 <counterclockcheckRight+0xb8>)
 80022fa:	f000 f8cf 	bl	800249c <checkRevolutions>
}
 80022fe:	bf00      	nop
 8002300:	bd98      	pop	{r3, r4, r7, pc}
 8002302:	bf00      	nop
 8002304:	48000400 	.word	0x48000400
 8002308:	200003ac 	.word	0x200003ac
 800230c:	0443b2b5 	.word	0x0443b2b5
 8002310:	88888889 	.word	0x88888889

08002314 <clockcheckLeft>:

void clockcheckLeft() {
 8002314:	b598      	push	{r3, r4, r7, lr}
 8002316:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(Motor_Left_clock_GPIO_Port, Motor_Left_clock_Pin) == HAL_GPIO_ReadPin(Motor_left_counterclock_GPIO_Port,
 8002318:	2120      	movs	r1, #32
 800231a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800231e:	f002 fee3 	bl	80050e8 <HAL_GPIO_ReadPin>
 8002322:	4603      	mov	r3, r0
 8002324:	461c      	mov	r4, r3
 8002326:	2102      	movs	r1, #2
 8002328:	4827      	ldr	r0, [pc, #156]	; (80023c8 <clockcheckLeft+0xb4>)
 800232a:	f002 fedd 	bl	80050e8 <HAL_GPIO_ReadPin>
 800232e:	4603      	mov	r3, r0
 8002330:	429c      	cmp	r4, r3
 8002332:	d122      	bne.n	800237a <clockcheckLeft+0x66>
	Motor_left_counterclock_Pin)) {
		controllerL.motor->direction = -1;
 8002334:	4b25      	ldr	r3, [pc, #148]	; (80023cc <clockcheckLeft+0xb8>)
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	22ff      	movs	r2, #255	; 0xff
 800233a:	705a      	strb	r2, [r3, #1]
		controllerL.Encoder->fineAdjustment = abs((controllerL.Encoder->fineAdjustment + controllerL.motor->direction) % TOTAL_WHEEL_TICKS);
 800233c:	4b23      	ldr	r3, [pc, #140]	; (80023cc <clockcheckLeft+0xb8>)
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002344:	461a      	mov	r2, r3
 8002346:	4b21      	ldr	r3, [pc, #132]	; (80023cc <clockcheckLeft+0xb8>)
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800234e:	441a      	add	r2, r3
 8002350:	4b1f      	ldr	r3, [pc, #124]	; (80023d0 <clockcheckLeft+0xbc>)
 8002352:	fb83 1302 	smull	r1, r3, r3, r2
 8002356:	4413      	add	r3, r2
 8002358:	1299      	asrs	r1, r3, #10
 800235a:	17d3      	asrs	r3, r2, #31
 800235c:	1ac9      	subs	r1, r1, r3
 800235e:	460b      	mov	r3, r1
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	1a5b      	subs	r3, r3, r1
 8002364:	01db      	lsls	r3, r3, #7
 8002366:	1ad1      	subs	r1, r2, r3
 8002368:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 800236c:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 8002370:	4b16      	ldr	r3, [pc, #88]	; (80023cc <clockcheckLeft+0xb8>)
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	b212      	sxth	r2, r2
 8002376:	811a      	strh	r2, [r3, #8]
 8002378:	e020      	b.n	80023bc <clockcheckLeft+0xa8>
	} else {
		controllerL.motor->direction = 1;
 800237a:	4b14      	ldr	r3, [pc, #80]	; (80023cc <clockcheckLeft+0xb8>)
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	2201      	movs	r2, #1
 8002380:	705a      	strb	r2, [r3, #1]
		controllerL.Encoder->fineAdjustment = abs((controllerL.Encoder->fineAdjustment + controllerL.motor->direction) % (TOTAL_WHEEL_TICKS + 1));
 8002382:	4b12      	ldr	r3, [pc, #72]	; (80023cc <clockcheckLeft+0xb8>)
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800238a:	461a      	mov	r2, r3
 800238c:	4b0f      	ldr	r3, [pc, #60]	; (80023cc <clockcheckLeft+0xb8>)
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002394:	18d1      	adds	r1, r2, r3
 8002396:	4b0f      	ldr	r3, [pc, #60]	; (80023d4 <clockcheckLeft+0xc0>)
 8002398:	fb83 2301 	smull	r2, r3, r3, r1
 800239c:	115a      	asrs	r2, r3, #5
 800239e:	17cb      	asrs	r3, r1, #31
 80023a0:	1ad2      	subs	r2, r2, r3
 80023a2:	4613      	mov	r3, r2
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	1a9b      	subs	r3, r3, r2
 80023a8:	01db      	lsls	r3, r3, #7
 80023aa:	4413      	add	r3, r2
 80023ac:	1aca      	subs	r2, r1, r3
 80023ae:	2a00      	cmp	r2, #0
 80023b0:	bfb8      	it	lt
 80023b2:	4252      	neglt	r2, r2
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <clockcheckLeft+0xb8>)
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	b212      	sxth	r2, r2
 80023ba:	811a      	strh	r2, [r3, #8]
	}

	checkRevolutions(&controllerL);
 80023bc:	4803      	ldr	r0, [pc, #12]	; (80023cc <clockcheckLeft+0xb8>)
 80023be:	f000 f86d 	bl	800249c <checkRevolutions>
}
 80023c2:	bf00      	nop
 80023c4:	bd98      	pop	{r3, r4, r7, pc}
 80023c6:	bf00      	nop
 80023c8:	48000400 	.word	0x48000400
 80023cc:	200002e0 	.word	0x200002e0
 80023d0:	88888889 	.word	0x88888889
 80023d4:	0443b2b5 	.word	0x0443b2b5

080023d8 <counterclockcheckLeft>:

void counterclockcheckLeft() {
 80023d8:	b598      	push	{r3, r4, r7, lr}
 80023da:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(Motor_Left_clock_GPIO_Port, Motor_Left_clock_Pin) == HAL_GPIO_ReadPin(Motor_left_counterclock_GPIO_Port,
 80023dc:	2120      	movs	r1, #32
 80023de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023e2:	f002 fe81 	bl	80050e8 <HAL_GPIO_ReadPin>
 80023e6:	4603      	mov	r3, r0
 80023e8:	461c      	mov	r4, r3
 80023ea:	2102      	movs	r1, #2
 80023ec:	4827      	ldr	r0, [pc, #156]	; (800248c <counterclockcheckLeft+0xb4>)
 80023ee:	f002 fe7b 	bl	80050e8 <HAL_GPIO_ReadPin>
 80023f2:	4603      	mov	r3, r0
 80023f4:	429c      	cmp	r4, r3
 80023f6:	d121      	bne.n	800243c <counterclockcheckLeft+0x64>
	Motor_left_counterclock_Pin)) {
		controllerL.motor->direction = 1;
 80023f8:	4b25      	ldr	r3, [pc, #148]	; (8002490 <counterclockcheckLeft+0xb8>)
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	2201      	movs	r2, #1
 80023fe:	705a      	strb	r2, [r3, #1]
		controllerL.Encoder->fineAdjustment = abs((controllerL.Encoder->fineAdjustment + controllerL.motor->direction) % (TOTAL_WHEEL_TICKS + 1));
 8002400:	4b23      	ldr	r3, [pc, #140]	; (8002490 <counterclockcheckLeft+0xb8>)
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002408:	461a      	mov	r2, r3
 800240a:	4b21      	ldr	r3, [pc, #132]	; (8002490 <counterclockcheckLeft+0xb8>)
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002412:	18d1      	adds	r1, r2, r3
 8002414:	4b1f      	ldr	r3, [pc, #124]	; (8002494 <counterclockcheckLeft+0xbc>)
 8002416:	fb83 2301 	smull	r2, r3, r3, r1
 800241a:	115a      	asrs	r2, r3, #5
 800241c:	17cb      	asrs	r3, r1, #31
 800241e:	1ad2      	subs	r2, r2, r3
 8002420:	4613      	mov	r3, r2
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	1a9b      	subs	r3, r3, r2
 8002426:	01db      	lsls	r3, r3, #7
 8002428:	4413      	add	r3, r2
 800242a:	1aca      	subs	r2, r1, r3
 800242c:	2a00      	cmp	r2, #0
 800242e:	bfb8      	it	lt
 8002430:	4252      	neglt	r2, r2
 8002432:	4b17      	ldr	r3, [pc, #92]	; (8002490 <counterclockcheckLeft+0xb8>)
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	b212      	sxth	r2, r2
 8002438:	811a      	strh	r2, [r3, #8]
 800243a:	e021      	b.n	8002480 <counterclockcheckLeft+0xa8>
	} else {
		controllerL.motor->direction = -1;
 800243c:	4b14      	ldr	r3, [pc, #80]	; (8002490 <counterclockcheckLeft+0xb8>)
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	22ff      	movs	r2, #255	; 0xff
 8002442:	705a      	strb	r2, [r3, #1]
		controllerL.Encoder->fineAdjustment = abs((controllerL.Encoder->fineAdjustment + controllerL.motor->direction) % TOTAL_WHEEL_TICKS);
 8002444:	4b12      	ldr	r3, [pc, #72]	; (8002490 <counterclockcheckLeft+0xb8>)
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800244c:	461a      	mov	r2, r3
 800244e:	4b10      	ldr	r3, [pc, #64]	; (8002490 <counterclockcheckLeft+0xb8>)
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002456:	441a      	add	r2, r3
 8002458:	4b0f      	ldr	r3, [pc, #60]	; (8002498 <counterclockcheckLeft+0xc0>)
 800245a:	fb83 1302 	smull	r1, r3, r3, r2
 800245e:	4413      	add	r3, r2
 8002460:	1299      	asrs	r1, r3, #10
 8002462:	17d3      	asrs	r3, r2, #31
 8002464:	1ac9      	subs	r1, r1, r3
 8002466:	460b      	mov	r3, r1
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	1a5b      	subs	r3, r3, r1
 800246c:	01db      	lsls	r3, r3, #7
 800246e:	1ad1      	subs	r1, r2, r3
 8002470:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 8002474:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 8002478:	4b05      	ldr	r3, [pc, #20]	; (8002490 <counterclockcheckLeft+0xb8>)
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	b212      	sxth	r2, r2
 800247e:	811a      	strh	r2, [r3, #8]
	}

	checkRevolutions(&controllerL);
 8002480:	4803      	ldr	r0, [pc, #12]	; (8002490 <counterclockcheckLeft+0xb8>)
 8002482:	f000 f80b 	bl	800249c <checkRevolutions>
}
 8002486:	bf00      	nop
 8002488:	bd98      	pop	{r3, r4, r7, pc}
 800248a:	bf00      	nop
 800248c:	48000400 	.word	0x48000400
 8002490:	200002e0 	.word	0x200002e0
 8002494:	0443b2b5 	.word	0x0443b2b5
 8002498:	88888889 	.word	0x88888889

0800249c <checkRevolutions>:

void checkRevolutions(MotorController *c) {
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
	if (c->Encoder->fineAdjustment == 0 && c->motor->direction == 1) {
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d116      	bne.n	80024de <checkRevolutions+0x42>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d110      	bne.n	80024de <checkRevolutions+0x42>
		c->Encoder->revolutions = c->Encoder->revolutions + c->motor->direction;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80024ca:	4619      	mov	r1, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	440a      	add	r2, r1
 80024d2:	60da      	str	r2, [r3, #12]
		c->Encoder->fineAdjustment = 1;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	2201      	movs	r2, #1
 80024da:	811a      	strh	r2, [r3, #8]
	 fineadjustmentRight = 1;
	 } else if (fineadjustmentRight == 0 && directionRight == -1) {
	 revolutionRight = revolutionRight + directionRight;
	 fineadjustmentRight = TOTAL_WHEEL_TICKS;
	 }*/
}
 80024dc:	e01d      	b.n	800251a <checkRevolutions+0x7e>
	} else if (c->Encoder->fineAdjustment == 0 && c->motor->direction == -1) {
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d117      	bne.n	800251a <checkRevolutions+0x7e>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80024f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024f6:	d110      	bne.n	800251a <checkRevolutions+0x7e>
		c->Encoder->revolutions = c->Encoder->revolutions + c->motor->direction;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002506:	4619      	mov	r1, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	440a      	add	r2, r1
 800250e:	60da      	str	r2, [r3, #12]
		c->Encoder->fineAdjustment = TOTAL_WHEEL_TICKS;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8002518:	811a      	strh	r2, [r3, #8]
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
	...

08002528 <calcOutput>:

void calcOutput(MotorEncoder *e) {
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
	e->output = e->revolutions + ((float) e->fineAdjustment / TOTAL_WHEEL_TICKS);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	ee07 3a90 	vmov	s15, r3
 8002538:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002542:	ee07 3a90 	vmov	s15, r3
 8002546:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800254a:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8002568 <calcOutput+0x40>
 800254e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002552:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	edc3 7a04 	vstr	s15, [r3, #16]
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	44f00000 	.word	0x44f00000

0800256c <calculateError>:

void calculateError(MotorController *c) {
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
	c->lastError = c->reference - c->measAngVel;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	ed93 7a00 	vldr	s14, [r3]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002580:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
	...

08002598 <nextVoltage>:

void nextVoltage(MotorController *c) {
 8002598:	b5b0      	push	{r4, r5, r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
	c->voltage = c->lastError * 2.82 * controllerPeriod + c->voltage;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fd ff77 	bl	8000498 <__aeabi_f2d>
 80025aa:	a31a      	add	r3, pc, #104	; (adr r3, 8002614 <nextVoltage+0x7c>)
 80025ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b0:	f7fd ffca 	bl	8000548 <__aeabi_dmul>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4614      	mov	r4, r2
 80025ba:	461d      	mov	r5, r3
 80025bc:	4b14      	ldr	r3, [pc, #80]	; (8002610 <nextVoltage+0x78>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fd ff69 	bl	8000498 <__aeabi_f2d>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4620      	mov	r0, r4
 80025cc:	4629      	mov	r1, r5
 80025ce:	f7fd ffbb 	bl	8000548 <__aeabi_dmul>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4614      	mov	r4, r2
 80025d8:	461d      	mov	r5, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fd ff5a 	bl	8000498 <__aeabi_f2d>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4620      	mov	r0, r4
 80025ea:	4629      	mov	r1, r5
 80025ec:	f7fd fdf6 	bl	80001dc <__adddf3>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	4610      	mov	r0, r2
 80025f6:	4619      	mov	r1, r3
 80025f8:	f7fe fa68 	bl	8000acc <__aeabi_d2f>
 80025fc:	4602      	mov	r2, r0
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	60da      	str	r2, [r3, #12]
}
 8002602:	bf00      	nop
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bdb0      	pop	{r4, r5, r7, pc}
 800260a:	bf00      	nop
 800260c:	f3af 8000 	nop.w
 8002610:	2000035c 	.word	0x2000035c
 8002614:	28f5c28f 	.word	0x28f5c28f
 8002618:	40068f5c 	.word	0x40068f5c
 800261c:	00000000 	.word	0x00000000

08002620 <updateAngularVelocity>:

void updateAngularVelocity(MotorController *c) {
 8002620:	b5b0      	push	{r4, r5, r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
	float deltaAngle = c->Encoder->output * 2 * M_PI - c->Encoder->lastAngle;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002630:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002634:	ee17 0a90 	vmov	r0, s15
 8002638:	f7fd ff2e 	bl	8000498 <__aeabi_f2d>
 800263c:	a323      	add	r3, pc, #140	; (adr r3, 80026cc <updateAngularVelocity+0xac>)
 800263e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002642:	f7fd ff81 	bl	8000548 <__aeabi_dmul>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	4614      	mov	r4, r2
 800264c:	461d      	mov	r5, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	4618      	mov	r0, r3
 8002656:	f7fd ff1f 	bl	8000498 <__aeabi_f2d>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4620      	mov	r0, r4
 8002660:	4629      	mov	r1, r5
 8002662:	f7fd fdb9 	bl	80001d8 <__aeabi_dsub>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	4610      	mov	r0, r2
 800266c:	4619      	mov	r1, r3
 800266e:	f7fe fa2d 	bl	8000acc <__aeabi_d2f>
 8002672:	4603      	mov	r3, r0
 8002674:	60fb      	str	r3, [r7, #12]
	c->Encoder->lastAngle = c->Encoder->output * 2 * M_PI;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	edd3 7a04 	vldr	s15, [r3, #16]
 800267e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002682:	ee17 0a90 	vmov	r0, s15
 8002686:	f7fd ff07 	bl	8000498 <__aeabi_f2d>
 800268a:	a310      	add	r3, pc, #64	; (adr r3, 80026cc <updateAngularVelocity+0xac>)
 800268c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002690:	f7fd ff5a 	bl	8000548 <__aeabi_dmul>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4610      	mov	r0, r2
 800269a:	4619      	mov	r1, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	695c      	ldr	r4, [r3, #20]
 80026a0:	f7fe fa14 	bl	8000acc <__aeabi_d2f>
 80026a4:	4603      	mov	r3, r0
 80026a6:	6063      	str	r3, [r4, #4]
	c->measAngVel = deltaAngle / controllerPeriod;
 80026a8:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <updateAngularVelocity+0xa8>)
 80026aa:	ed93 7a00 	vldr	s14, [r3]
 80026ae:	edd7 6a03 	vldr	s13, [r7, #12]
 80026b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80026bc:	bf00      	nop
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bdb0      	pop	{r4, r5, r7, pc}
 80026c4:	f3af 8000 	nop.w
 80026c8:	2000035c 	.word	0x2000035c
 80026cc:	54442d18 	.word	0x54442d18
 80026d0:	400921fb 	.word	0x400921fb

080026d4 <updateDutyCycle>:

void updateDutyCycle(MotorController *c) {
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
	if (c->voltage > 0) {
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	edd3 7a03 	vldr	s15, [r3, #12]
 80026e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ea:	dd04      	ble.n	80026f6 <updateDutyCycle+0x22>
		c->motor->direction = 1;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	2201      	movs	r2, #1
 80026f2:	705a      	strb	r2, [r3, #1]
 80026f4:	e012      	b.n	800271c <updateDutyCycle+0x48>
	} else if (c->voltage < 0) {
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	edd3 7a03 	vldr	s15, [r3, #12]
 80026fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002704:	d504      	bpl.n	8002710 <updateDutyCycle+0x3c>
		c->motor->direction = -1;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	22ff      	movs	r2, #255	; 0xff
 800270c:	705a      	strb	r2, [r3, #1]
 800270e:	e005      	b.n	800271c <updateDutyCycle+0x48>
	} else {
		c->motor->dutyCycle = 0;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	605a      	str	r2, [r3, #4]
		return;
 800271a:	e026      	b.n	800276a <updateDutyCycle+0x96>
	}

	float pwm = c->voltage / batteryVoltage;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	edd3 6a03 	vldr	s13, [r3, #12]
 8002722:	4b14      	ldr	r3, [pc, #80]	; (8002774 <updateDutyCycle+0xa0>)
 8002724:	ed93 7a00 	vldr	s14, [r3]
 8002728:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800272c:	edc7 7a03 	vstr	s15, [r7, #12]

	if (pwm < 0)
 8002730:	edd7 7a03 	vldr	s15, [r7, #12]
 8002734:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273c:	d505      	bpl.n	800274a <updateDutyCycle+0x76>
		pwm = -pwm;
 800273e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002742:	eef1 7a67 	vneg.f32	s15, s15
 8002746:	edc7 7a03 	vstr	s15, [r7, #12]
	if (pwm > 1.0)
 800274a:	edd7 7a03 	vldr	s15, [r7, #12]
 800274e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002752:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800275a:	dd02      	ble.n	8002762 <updateDutyCycle+0x8e>
		pwm = 1.0;
 800275c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002760:	60fb      	str	r3, [r7, #12]
	c->motor->dutyCycle = pwm;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	605a      	str	r2, [r3, #4]
}
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	20000164 	.word	0x20000164

08002778 <setDutyCycle>:

void setDutyCycle(MotorController *c) {
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
	if (c->motor->name == 'R') {
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b52      	cmp	r3, #82	; 0x52
 8002788:	d136      	bne.n	80027f8 <setDutyCycle+0x80>
		htim1.Instance->CCR1 = (uint32_t) ((htim1.Instance->ARR) * c->motor->dutyCycle);
 800278a:	4b3e      	ldr	r3, [pc, #248]	; (8002884 <setDutyCycle+0x10c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002790:	ee07 3a90 	vmov	s15, r3
 8002794:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	edd3 7a01 	vldr	s15, [r3, #4]
 80027a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a4:	4b37      	ldr	r3, [pc, #220]	; (8002884 <setDutyCycle+0x10c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027ac:	ee17 2a90 	vmov	r2, s15
 80027b0:	635a      	str	r2, [r3, #52]	; 0x34

		if (c->motor->direction == 1) {
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d10a      	bne.n	80027d4 <setDutyCycle+0x5c>
			HAL_GPIO_WritePin(DIR_R1_GPIO_Port, DIR_R1_Pin, 1);
 80027be:	2201      	movs	r2, #1
 80027c0:	2140      	movs	r1, #64	; 0x40
 80027c2:	4831      	ldr	r0, [pc, #196]	; (8002888 <setDutyCycle+0x110>)
 80027c4:	f002 fca8 	bl	8005118 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIR_R2_GPIO_Port, DIR_R2_Pin, 0);
 80027c8:	2200      	movs	r2, #0
 80027ca:	2180      	movs	r1, #128	; 0x80
 80027cc:	482e      	ldr	r0, [pc, #184]	; (8002888 <setDutyCycle+0x110>)
 80027ce:	f002 fca3 	bl	8005118 <HAL_GPIO_WritePin>
 80027d2:	e054      	b.n	800287e <setDutyCycle+0x106>
		} else if (c->motor->direction == -1) {
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80027dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027e0:	d14d      	bne.n	800287e <setDutyCycle+0x106>
			HAL_GPIO_WritePin(DIR_R1_GPIO_Port, DIR_R1_Pin, 0);
 80027e2:	2200      	movs	r2, #0
 80027e4:	2140      	movs	r1, #64	; 0x40
 80027e6:	4828      	ldr	r0, [pc, #160]	; (8002888 <setDutyCycle+0x110>)
 80027e8:	f002 fc96 	bl	8005118 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIR_R2_GPIO_Port, DIR_R2_Pin, 1);
 80027ec:	2201      	movs	r2, #1
 80027ee:	2180      	movs	r1, #128	; 0x80
 80027f0:	4825      	ldr	r0, [pc, #148]	; (8002888 <setDutyCycle+0x110>)
 80027f2:	f002 fc91 	bl	8005118 <HAL_GPIO_WritePin>
 80027f6:	e042      	b.n	800287e <setDutyCycle+0x106>
		}
	} else if (c->motor->name == 'L') {
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b4c      	cmp	r3, #76	; 0x4c
 8002800:	d13c      	bne.n	800287c <setDutyCycle+0x104>
		htim1.Instance->CCR2 = (uint32_t) ((htim1.Instance->ARR) * c->motor->dutyCycle);
 8002802:	4b20      	ldr	r3, [pc, #128]	; (8002884 <setDutyCycle+0x10c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002808:	ee07 3a90 	vmov	s15, r3
 800280c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	edd3 7a01 	vldr	s15, [r3, #4]
 8002818:	ee67 7a27 	vmul.f32	s15, s14, s15
 800281c:	4b19      	ldr	r3, [pc, #100]	; (8002884 <setDutyCycle+0x10c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002824:	ee17 2a90 	vmov	r2, s15
 8002828:	639a      	str	r2, [r3, #56]	; 0x38

		if (c->motor->direction == 1) {
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d10d      	bne.n	8002852 <setDutyCycle+0xda>
			HAL_GPIO_WritePin(DIR_L1_GPIO_Port, DIR_L1_Pin, 1);
 8002836:	2201      	movs	r2, #1
 8002838:	2140      	movs	r1, #64	; 0x40
 800283a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800283e:	f002 fc6b 	bl	8005118 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIR_L2_GPIO_Port, DIR_L2_Pin, 0);
 8002842:	2200      	movs	r2, #0
 8002844:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002848:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800284c:	f002 fc64 	bl	8005118 <HAL_GPIO_WritePin>
 8002850:	e015      	b.n	800287e <setDutyCycle+0x106>
		} else if (c->motor->direction == -1) {
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800285a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800285e:	d10e      	bne.n	800287e <setDutyCycle+0x106>
			HAL_GPIO_WritePin(DIR_L1_GPIO_Port, DIR_L1_Pin, 0);
 8002860:	2200      	movs	r2, #0
 8002862:	2140      	movs	r1, #64	; 0x40
 8002864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002868:	f002 fc56 	bl	8005118 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIR_L2_GPIO_Port, DIR_L2_Pin, 1);
 800286c:	2201      	movs	r2, #1
 800286e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002876:	f002 fc4f 	bl	8005118 <HAL_GPIO_WritePin>
 800287a:	e000      	b.n	800287e <setDutyCycle+0x106>
		}
	} else {
		return;
 800287c:	bf00      	nop
	}
}
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	200003c4 	.word	0x200003c4
 8002888:	48000400 	.word	0x48000400

0800288c <controller>:

void controller(MotorController *c) {
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
	calcOutput(c->Encoder);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff fe45 	bl	8002528 <calcOutput>

	// Measure the angular velocity (feedback)
	updateAngularVelocity(c);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7ff febe 	bl	8002620 <updateAngularVelocity>

	// Calculate next voltage according to the controller design
	nextVoltage(c);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7ff fe77 	bl	8002598 <nextVoltage>

	// Calculate current error to use for next iteration
	calculateError(c);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7ff fe5e 	bl	800256c <calculateError>

	// Update the duty cycle
	updateDutyCycle(c);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff ff0f 	bl	80026d4 <updateDutyCycle>

	setDutyCycle(c);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff ff5e 	bl	8002778 <setDutyCycle>
}
 80028bc:	bf00      	nop
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <controlBothMotors>:

void controlBothMotors() {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
	uart_in_read(&referenceFormatting);
 80028c8:	4805      	ldr	r0, [pc, #20]	; (80028e0 <controlBothMotors+0x1c>)
 80028ca:	f7ff f919 	bl	8001b00 <uart_in_read>
	controller(&controllerR);
 80028ce:	4805      	ldr	r0, [pc, #20]	; (80028e4 <controlBothMotors+0x20>)
 80028d0:	f7ff ffdc 	bl	800288c <controller>
	controller(&controllerL);
 80028d4:	4804      	ldr	r0, [pc, #16]	; (80028e8 <controlBothMotors+0x24>)
 80028d6:	f7ff ffd9 	bl	800288c <controller>
}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	08001c9d 	.word	0x08001c9d
 80028e4:	200003ac 	.word	0x200003ac
 80028e8:	200002e0 	.word	0x200002e0

080028ec <UpdateBatteryVoltage>:

void UpdateBatteryVoltage() {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1); // Start ADC conversion
 80028f2:	480e      	ldr	r0, [pc, #56]	; (800292c <UpdateBatteryVoltage+0x40>)
 80028f4:	f001 f908 	bl	8003b08 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY); // Wait for conversion to complete
 80028f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028fc:	480b      	ldr	r0, [pc, #44]	; (800292c <UpdateBatteryVoltage+0x40>)
 80028fe:	f001 f966 	bl	8003bce <HAL_ADC_PollForConversion>
	uint32_t adc_val = HAL_ADC_GetValue(&hadc1); // Get the ADC value
 8002902:	480a      	ldr	r0, [pc, #40]	; (800292c <UpdateBatteryVoltage+0x40>)
 8002904:	f001 f9f2 	bl	8003cec <HAL_ADC_GetValue>
 8002908:	6078      	str	r0, [r7, #4]
	batteryVoltage = adc_val * voltageMeasScaling;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	ee07 3a90 	vmov	s15, r3
 8002910:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002914:	4b06      	ldr	r3, [pc, #24]	; (8002930 <UpdateBatteryVoltage+0x44>)
 8002916:	edd3 7a00 	vldr	s15, [r3]
 800291a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800291e:	4b05      	ldr	r3, [pc, #20]	; (8002934 <UpdateBatteryVoltage+0x48>)
 8002920:	edc3 7a00 	vstr	s15, [r3]
}
 8002924:	bf00      	nop
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	200002f8 	.word	0x200002f8
 8002930:	2000001c 	.word	0x2000001c
 8002934:	20000164 	.word	0x20000164

08002938 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
	if (globalDMAFlag == 0) {
 8002940:	4b10      	ldr	r3, [pc, #64]	; (8002984 <HAL_I2C_MasterTxCpltCallback+0x4c>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10c      	bne.n	8002964 <HAL_I2C_MasterTxCpltCallback+0x2c>
		HAL_I2C_Master_Receive_IT(&hi2c3, MPU_Address << 1 , MPU_out, 6);
 800294a:	2368      	movs	r3, #104	; 0x68
 800294c:	b29b      	uxth	r3, r3
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	b299      	uxth	r1, r3
 8002952:	2306      	movs	r3, #6
 8002954:	4a0c      	ldr	r2, [pc, #48]	; (8002988 <HAL_I2C_MasterTxCpltCallback+0x50>)
 8002956:	480d      	ldr	r0, [pc, #52]	; (800298c <HAL_I2C_MasterTxCpltCallback+0x54>)
 8002958:	f002 fe0c 	bl	8005574 <HAL_I2C_Master_Receive_IT>
		globalDMAFlag = 1;
 800295c:	4b09      	ldr	r3, [pc, #36]	; (8002984 <HAL_I2C_MasterTxCpltCallback+0x4c>)
 800295e:	2201      	movs	r2, #1
 8002960:	701a      	strb	r2, [r3, #0]
	} else {
		HAL_I2C_Master_Receive_IT(&hi2c3, MPU_Address << 1 , MPU_out, 6);
		globalDMAFlag = 0;
	}

}
 8002962:	e00b      	b.n	800297c <HAL_I2C_MasterTxCpltCallback+0x44>
		HAL_I2C_Master_Receive_IT(&hi2c3, MPU_Address << 1 , MPU_out, 6);
 8002964:	2368      	movs	r3, #104	; 0x68
 8002966:	b29b      	uxth	r3, r3
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	b299      	uxth	r1, r3
 800296c:	2306      	movs	r3, #6
 800296e:	4a06      	ldr	r2, [pc, #24]	; (8002988 <HAL_I2C_MasterTxCpltCallback+0x50>)
 8002970:	4806      	ldr	r0, [pc, #24]	; (800298c <HAL_I2C_MasterTxCpltCallback+0x54>)
 8002972:	f002 fdff 	bl	8005574 <HAL_I2C_Master_Receive_IT>
		globalDMAFlag = 0;
 8002976:	4b03      	ldr	r3, [pc, #12]	; (8002984 <HAL_I2C_MasterTxCpltCallback+0x4c>)
 8002978:	2200      	movs	r2, #0
 800297a:	701a      	strb	r2, [r3, #0]
}
 800297c:	bf00      	nop
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	20000162 	.word	0x20000162
 8002988:	2000015c 	.word	0x2000015c
 800298c:	20000280 	.word	0x20000280

08002990 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8002990:	b580      	push	{r7, lr}
 8002992:	b08e      	sub	sp, #56	; 0x38
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
	if (globalDMAFlag == 1) {
 8002998:	4b50      	ldr	r3, [pc, #320]	; (8002adc <HAL_I2C_MasterRxCpltCallback+0x14c>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d14d      	bne.n	8002a3e <HAL_I2C_MasterRxCpltCallback+0xae>
		int16_t rawGyroData_X = 0;
 80029a2:	2300      	movs	r3, #0
 80029a4:	85bb      	strh	r3, [r7, #44]	; 0x2c
		int16_t rawGyroData_Y = 0;
 80029a6:	2300      	movs	r3, #0
 80029a8:	857b      	strh	r3, [r7, #42]	; 0x2a
		int16_t rawGyroData_Z = 0;
 80029aa:	2300      	movs	r3, #0
 80029ac:	853b      	strh	r3, [r7, #40]	; 0x28

		Axes3 newMPUData;

		float sensitivity = 0.0f;
 80029ae:	f04f 0300 	mov.w	r3, #0
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24

		if (GYRO_CONFIG_SCALE == 0x00)
 80029b4:	2318      	movs	r3, #24
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_I2C_MasterRxCpltCallback+0x2e>
			sensitivity = 131.0;
 80029ba:	4b49      	ldr	r3, [pc, #292]	; (8002ae0 <HAL_I2C_MasterRxCpltCallback+0x150>)
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
		if (GYRO_CONFIG_SCALE == 0x08)
 80029be:	2318      	movs	r3, #24
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d101      	bne.n	80029c8 <HAL_I2C_MasterRxCpltCallback+0x38>
			sensitivity = 65.5;
 80029c4:	4b47      	ldr	r3, [pc, #284]	; (8002ae4 <HAL_I2C_MasterRxCpltCallback+0x154>)
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24
		if (GYRO_CONFIG_SCALE == 0x10)
 80029c8:	2318      	movs	r3, #24
 80029ca:	2b10      	cmp	r3, #16
 80029cc:	d101      	bne.n	80029d2 <HAL_I2C_MasterRxCpltCallback+0x42>
			sensitivity = 32.8;
 80029ce:	4b46      	ldr	r3, [pc, #280]	; (8002ae8 <HAL_I2C_MasterRxCpltCallback+0x158>)
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
		if (GYRO_CONFIG_SCALE == 0x18)
 80029d2:	2318      	movs	r3, #24
 80029d4:	2b18      	cmp	r3, #24
 80029d6:	d101      	bne.n	80029dc <HAL_I2C_MasterRxCpltCallback+0x4c>
			sensitivity = 16.4;
 80029d8:	4b44      	ldr	r3, [pc, #272]	; (8002aec <HAL_I2C_MasterRxCpltCallback+0x15c>)
 80029da:	627b      	str	r3, [r7, #36]	; 0x24

		// Data composition from raw data
		rawGyroData_X = ((int16_t) MPU_out[0] << 8 | MPU_out[1]);
 80029dc:	4b44      	ldr	r3, [pc, #272]	; (8002af0 <HAL_I2C_MasterRxCpltCallback+0x160>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	021b      	lsls	r3, r3, #8
 80029e2:	b21a      	sxth	r2, r3
 80029e4:	4b42      	ldr	r3, [pc, #264]	; (8002af0 <HAL_I2C_MasterRxCpltCallback+0x160>)
 80029e6:	785b      	ldrb	r3, [r3, #1]
 80029e8:	b21b      	sxth	r3, r3
 80029ea:	4313      	orrs	r3, r2
 80029ec:	85bb      	strh	r3, [r7, #44]	; 0x2c
		rawGyroData_Y = ((int16_t) MPU_out[2] << 8 | MPU_out[3]);
 80029ee:	4b40      	ldr	r3, [pc, #256]	; (8002af0 <HAL_I2C_MasterRxCpltCallback+0x160>)
 80029f0:	789b      	ldrb	r3, [r3, #2]
 80029f2:	021b      	lsls	r3, r3, #8
 80029f4:	b21a      	sxth	r2, r3
 80029f6:	4b3e      	ldr	r3, [pc, #248]	; (8002af0 <HAL_I2C_MasterRxCpltCallback+0x160>)
 80029f8:	78db      	ldrb	r3, [r3, #3]
 80029fa:	b21b      	sxth	r3, r3
 80029fc:	4313      	orrs	r3, r2
 80029fe:	857b      	strh	r3, [r7, #42]	; 0x2a
		rawGyroData_Z = ((int16_t) MPU_out[4] << 8 | MPU_out[5]);
 8002a00:	4b3b      	ldr	r3, [pc, #236]	; (8002af0 <HAL_I2C_MasterRxCpltCallback+0x160>)
 8002a02:	791b      	ldrb	r3, [r3, #4]
 8002a04:	021b      	lsls	r3, r3, #8
 8002a06:	b21a      	sxth	r2, r3
 8002a08:	4b39      	ldr	r3, [pc, #228]	; (8002af0 <HAL_I2C_MasterRxCpltCallback+0x160>)
 8002a0a:	795b      	ldrb	r3, [r3, #5]
 8002a0c:	b21b      	sxth	r3, r3
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	853b      	strh	r3, [r7, #40]	; 0x28

//		newMPUData.x = (float) rawGyroData_X / sensitivity;
//		newMPUData.y = (float) rawGyroData_Y / sensitivity;
//		newMPUData.z = (float) rawGyroData_Z / sensitivity;

		newMPUData.x = 24.0;
 8002a12:	4b38      	ldr	r3, [pc, #224]	; (8002af4 <HAL_I2C_MasterRxCpltCallback+0x164>)
 8002a14:	61bb      	str	r3, [r7, #24]
		newMPUData.y = 25.0;
 8002a16:	4b38      	ldr	r3, [pc, #224]	; (8002af8 <HAL_I2C_MasterRxCpltCallback+0x168>)
 8002a18:	61fb      	str	r3, [r7, #28]
		newMPUData.z = 26.0;
 8002a1a:	4b38      	ldr	r3, [pc, #224]	; (8002afc <HAL_I2C_MasterRxCpltCallback+0x16c>)
 8002a1c:	623b      	str	r3, [r7, #32]
		EnterStructQueue(&gyro, &newMPUData);
 8002a1e:	f107 0318 	add.w	r3, r7, #24
 8002a22:	4619      	mov	r1, r3
 8002a24:	4836      	ldr	r0, [pc, #216]	; (8002b00 <HAL_I2C_MasterRxCpltCallback+0x170>)
 8002a26:	f7fe fae2 	bl	8000fee <EnterStructQueue>

		HAL_I2C_Master_Transmit_IT(&hi2c3, MPU_Address << 1, &MPU_AccelOut, 1);
 8002a2a:	2368      	movs	r3, #104	; 0x68
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	b299      	uxth	r1, r3
 8002a32:	2301      	movs	r3, #1
 8002a34:	4a33      	ldr	r2, [pc, #204]	; (8002b04 <HAL_I2C_MasterRxCpltCallback+0x174>)
 8002a36:	4834      	ldr	r0, [pc, #208]	; (8002b08 <HAL_I2C_MasterRxCpltCallback+0x178>)
 8002a38:	f002 fd2c 	bl	8005494 <HAL_I2C_Master_Transmit_IT>
		EnterStructQueue(&accel, &newMPUData);

		HAL_I2C_Master_Transmit_IT(&hi2c3, MPU_Address << 1, &MPU_GyroOut, 1);
		globalDMAFlag = 0;
	}
}
 8002a3c:	e04a      	b.n	8002ad4 <HAL_I2C_MasterRxCpltCallback+0x144>
		if (ACCEL_CONFIG_SCALE == 0x00)
 8002a3e:	2318      	movs	r3, #24
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d102      	bne.n	8002a4a <HAL_I2C_MasterRxCpltCallback+0xba>
			sensitivity = 16384.0;
 8002a44:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
 8002a48:	637b      	str	r3, [r7, #52]	; 0x34
		if (ACCEL_CONFIG_SCALE == 0x08)
 8002a4a:	2318      	movs	r3, #24
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d102      	bne.n	8002a56 <HAL_I2C_MasterRxCpltCallback+0xc6>
			sensitivity = 8192.0;
 8002a50:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 8002a54:	637b      	str	r3, [r7, #52]	; 0x34
		if (ACCEL_CONFIG_SCALE == 0x10)
 8002a56:	2318      	movs	r3, #24
 8002a58:	2b10      	cmp	r3, #16
 8002a5a:	d102      	bne.n	8002a62 <HAL_I2C_MasterRxCpltCallback+0xd2>
			sensitivity = 4096.0;
 8002a5c:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8002a60:	637b      	str	r3, [r7, #52]	; 0x34
		if (ACCEL_CONFIG_SCALE == 0x18)
 8002a62:	2318      	movs	r3, #24
 8002a64:	2b18      	cmp	r3, #24
 8002a66:	d102      	bne.n	8002a6e <HAL_I2C_MasterRxCpltCallback+0xde>
			sensitivity = 2048.0;
 8002a68:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 8002a6c:	637b      	str	r3, [r7, #52]	; 0x34
		rawAccelData_X = ((int16_t) MPU_out[0] << 8 | MPU_out[1]);
 8002a6e:	4b20      	ldr	r3, [pc, #128]	; (8002af0 <HAL_I2C_MasterRxCpltCallback+0x160>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	021b      	lsls	r3, r3, #8
 8002a74:	b21a      	sxth	r2, r3
 8002a76:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <HAL_I2C_MasterRxCpltCallback+0x160>)
 8002a78:	785b      	ldrb	r3, [r3, #1]
 8002a7a:	b21b      	sxth	r3, r3
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	867b      	strh	r3, [r7, #50]	; 0x32
		rawAccelData_Y = ((int16_t) MPU_out[2] << 8 | MPU_out[3]);
 8002a80:	4b1b      	ldr	r3, [pc, #108]	; (8002af0 <HAL_I2C_MasterRxCpltCallback+0x160>)
 8002a82:	789b      	ldrb	r3, [r3, #2]
 8002a84:	021b      	lsls	r3, r3, #8
 8002a86:	b21a      	sxth	r2, r3
 8002a88:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <HAL_I2C_MasterRxCpltCallback+0x160>)
 8002a8a:	78db      	ldrb	r3, [r3, #3]
 8002a8c:	b21b      	sxth	r3, r3
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	863b      	strh	r3, [r7, #48]	; 0x30
		rawAccelData_Z = ((int16_t) MPU_out[4] << 8 | MPU_out[5]);
 8002a92:	4b17      	ldr	r3, [pc, #92]	; (8002af0 <HAL_I2C_MasterRxCpltCallback+0x160>)
 8002a94:	791b      	ldrb	r3, [r3, #4]
 8002a96:	021b      	lsls	r3, r3, #8
 8002a98:	b21a      	sxth	r2, r3
 8002a9a:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <HAL_I2C_MasterRxCpltCallback+0x160>)
 8002a9c:	795b      	ldrb	r3, [r3, #5]
 8002a9e:	b21b      	sxth	r3, r3
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		newMPUData.x = 24.0;
 8002aa4:	4b13      	ldr	r3, [pc, #76]	; (8002af4 <HAL_I2C_MasterRxCpltCallback+0x164>)
 8002aa6:	60fb      	str	r3, [r7, #12]
		newMPUData.y = 25.0;
 8002aa8:	4b13      	ldr	r3, [pc, #76]	; (8002af8 <HAL_I2C_MasterRxCpltCallback+0x168>)
 8002aaa:	613b      	str	r3, [r7, #16]
		newMPUData.y = 26.0;
 8002aac:	4b13      	ldr	r3, [pc, #76]	; (8002afc <HAL_I2C_MasterRxCpltCallback+0x16c>)
 8002aae:	613b      	str	r3, [r7, #16]
		EnterStructQueue(&accel, &newMPUData);
 8002ab0:	f107 030c 	add.w	r3, r7, #12
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4815      	ldr	r0, [pc, #84]	; (8002b0c <HAL_I2C_MasterRxCpltCallback+0x17c>)
 8002ab8:	f7fe fa99 	bl	8000fee <EnterStructQueue>
		HAL_I2C_Master_Transmit_IT(&hi2c3, MPU_Address << 1, &MPU_GyroOut, 1);
 8002abc:	2368      	movs	r3, #104	; 0x68
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	b299      	uxth	r1, r3
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	4a12      	ldr	r2, [pc, #72]	; (8002b10 <HAL_I2C_MasterRxCpltCallback+0x180>)
 8002ac8:	480f      	ldr	r0, [pc, #60]	; (8002b08 <HAL_I2C_MasterRxCpltCallback+0x178>)
 8002aca:	f002 fce3 	bl	8005494 <HAL_I2C_Master_Transmit_IT>
		globalDMAFlag = 0;
 8002ace:	4b03      	ldr	r3, [pc, #12]	; (8002adc <HAL_I2C_MasterRxCpltCallback+0x14c>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	701a      	strb	r2, [r3, #0]
}
 8002ad4:	bf00      	nop
 8002ad6:	3738      	adds	r7, #56	; 0x38
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	20000162 	.word	0x20000162
 8002ae0:	43030000 	.word	0x43030000
 8002ae4:	42830000 	.word	0x42830000
 8002ae8:	42033333 	.word	0x42033333
 8002aec:	41833333 	.word	0x41833333
 8002af0:	2000015c 	.word	0x2000015c
 8002af4:	41c00000 	.word	0x41c00000
 8002af8:	41c80000 	.word	0x41c80000
 8002afc:	41d00000 	.word	0x41d00000
 8002b00:	20000010 	.word	0x20000010
 8002b04:	0800b121 	.word	0x0800b121
 8002b08:	20000280 	.word	0x20000280
 8002b0c:	20000004 	.word	0x20000004
 8002b10:	0800b120 	.word	0x0800b120

08002b14 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b18:	b672      	cpsid	i
}
 8002b1a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002b1c:	e7fe      	b.n	8002b1c <Error_Handler+0x8>
	...

08002b20 <calcOrientOutput>:
char packedOrientData[50] = { 0 };
uint8_t angularPosition[5] = { 0 };
float angularResolution = 360.0/TOPENCODERRESOLUTION;


void calcOrientOutput() {
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
	 orientAngle = (orientIncrement % TOPENCODERRESOLUTION) * angularResolution; // Antallet af målte inkrementer ganges med hvor stor en grad hver inkrement er
 8002b24:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <calcOrientOutput+0x44>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a0f      	ldr	r2, [pc, #60]	; (8002b68 <calcOrientOutput+0x48>)
 8002b2a:	fb82 1203 	smull	r1, r2, r2, r3
 8002b2e:	441a      	add	r2, r3
 8002b30:	1251      	asrs	r1, r2, #9
 8002b32:	17da      	asrs	r2, r3, #31
 8002b34:	1a8a      	subs	r2, r1, r2
 8002b36:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8002b3a:	fb01 f202 	mul.w	r2, r1, r2
 8002b3e:	1a9a      	subs	r2, r3, r2
 8002b40:	ee07 2a90 	vmov	s15, r2
 8002b44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b48:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <calcOrientOutput+0x4c>)
 8002b4a:	edd3 7a00 	vldr	s15, [r3]
 8002b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b52:	4b07      	ldr	r3, [pc, #28]	; (8002b70 <calcOrientOutput+0x50>)
 8002b54:	edc3 7a00 	vstr	s15, [r3]
 }
 8002b58:	bf00      	nop
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	200001e8 	.word	0x200001e8
 8002b68:	b21642c9 	.word	0xb21642c9
 8002b6c:	20000020 	.word	0x20000020
 8002b70:	200001ec 	.word	0x200001ec

08002b74 <packOrient>:

void packOrient() {
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
	uint8_t *angularPointer = &directionOrient;
 8002b7a:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <packOrient+0x4c>)
 8002b7c:	603b      	str	r3, [r7, #0]
	angularPosition[0] = *(angularPointer);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	781a      	ldrb	r2, [r3, #0]
 8002b82:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <packOrient+0x50>)
 8002b84:	701a      	strb	r2, [r3, #0]

	angularPointer = &orientAngle;
 8002b86:	4b10      	ldr	r3, [pc, #64]	; (8002bc8 <packOrient+0x54>)
 8002b88:	603b      	str	r3, [r7, #0]
		for (int x = 1; x < 5 ; x++) {
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	607b      	str	r3, [r7, #4]
 8002b8e:	e00c      	b.n	8002baa <packOrient+0x36>
		angularPosition[x] = *(angularPointer + (x-1));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3b01      	subs	r3, #1
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	4413      	add	r3, r2
 8002b98:	7819      	ldrb	r1, [r3, #0]
 8002b9a:	4a0a      	ldr	r2, [pc, #40]	; (8002bc4 <packOrient+0x50>)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	460a      	mov	r2, r1
 8002ba2:	701a      	strb	r2, [r3, #0]
		for (int x = 1; x < 5 ; x++) {
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	607b      	str	r3, [r7, #4]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	ddef      	ble.n	8002b90 <packOrient+0x1c>
	}
}
 8002bb0:	bf00      	nop
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	200001e5 	.word	0x200001e5
 8002bc4:	2000022c 	.word	0x2000022c
 8002bc8:	200001ec 	.word	0x200001ec

08002bcc <checkOrientClock>:

void checkOrientClock() { //A
 8002bcc:	b598      	push	{r3, r4, r7, lr}
 8002bce:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(orientation_clock_GPIO_Port, orientation_clock_Pin)
 8002bd0:	2108      	movs	r1, #8
 8002bd2:	4810      	ldr	r0, [pc, #64]	; (8002c14 <checkOrientClock+0x48>)
 8002bd4:	f002 fa88 	bl	80050e8 <HAL_GPIO_ReadPin>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	461c      	mov	r4, r3
				== HAL_GPIO_ReadPin(orientation_counterclock_GPIO_Port, orientation_counterclock_Pin)) {
 8002bdc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002be4:	f002 fa80 	bl	80050e8 <HAL_GPIO_ReadPin>
 8002be8:	4603      	mov	r3, r0
	if (HAL_GPIO_ReadPin(orientation_clock_GPIO_Port, orientation_clock_Pin)
 8002bea:	429c      	cmp	r4, r3
 8002bec:	d108      	bne.n	8002c00 <checkOrientClock+0x34>
			directionOrient = -1;
 8002bee:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <checkOrientClock+0x4c>)
 8002bf0:	22ff      	movs	r2, #255	; 0xff
 8002bf2:	701a      	strb	r2, [r3, #0]
			orientIncrement--;//abs((orientIncrement + directionOrient) % TOOTHRESOLUTION);
 8002bf4:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <checkOrientClock+0x50>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	4a08      	ldr	r2, [pc, #32]	; (8002c1c <checkOrientClock+0x50>)
 8002bfc:	6013      	str	r3, [r2, #0]
			directionOrient = 1;
			orientIncrement++; //= abs((orientIncrement + directionOrient) % (TOOTHRESOLUTION + 1));
		}

		//checkRevolutionsOrient();
}
 8002bfe:	e007      	b.n	8002c10 <checkOrientClock+0x44>
			directionOrient = 1;
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <checkOrientClock+0x4c>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	701a      	strb	r2, [r3, #0]
			orientIncrement++; //= abs((orientIncrement + directionOrient) % (TOOTHRESOLUTION + 1));
 8002c06:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <checkOrientClock+0x50>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	4a03      	ldr	r2, [pc, #12]	; (8002c1c <checkOrientClock+0x50>)
 8002c0e:	6013      	str	r3, [r2, #0]
}
 8002c10:	bf00      	nop
 8002c12:	bd98      	pop	{r3, r4, r7, pc}
 8002c14:	48000400 	.word	0x48000400
 8002c18:	200001e5 	.word	0x200001e5
 8002c1c:	200001e8 	.word	0x200001e8

08002c20 <checkOrientCounterClock>:

void checkOrientCounterClock() { //B
 8002c20:	b598      	push	{r3, r4, r7, lr}
 8002c22:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(orientation_counterclock_GPIO_Port, orientation_counterclock_Pin)
 8002c24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c2c:	f002 fa5c 	bl	80050e8 <HAL_GPIO_ReadPin>
 8002c30:	4603      	mov	r3, r0
 8002c32:	461c      	mov	r4, r3
				== HAL_GPIO_ReadPin(orientation_clock_GPIO_Port, orientation_clock_Pin)) {
 8002c34:	2108      	movs	r1, #8
 8002c36:	480c      	ldr	r0, [pc, #48]	; (8002c68 <checkOrientCounterClock+0x48>)
 8002c38:	f002 fa56 	bl	80050e8 <HAL_GPIO_ReadPin>
 8002c3c:	4603      	mov	r3, r0
	if (HAL_GPIO_ReadPin(orientation_counterclock_GPIO_Port, orientation_counterclock_Pin)
 8002c3e:	429c      	cmp	r4, r3
 8002c40:	d108      	bne.n	8002c54 <checkOrientCounterClock+0x34>
			directionOrient = 1;
 8002c42:	4b0a      	ldr	r3, [pc, #40]	; (8002c6c <checkOrientCounterClock+0x4c>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	701a      	strb	r2, [r3, #0]
			orientIncrement++; //= abs((orientIncrement + directionOrient) % TOOTHRESOLUTION);
 8002c48:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <checkOrientCounterClock+0x50>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	4a08      	ldr	r2, [pc, #32]	; (8002c70 <checkOrientCounterClock+0x50>)
 8002c50:	6013      	str	r3, [r2, #0]
			directionOrient = -1;
			orientIncrement--; //= abs((orientIncrement + directionOrient) % (TOOTHRESOLUTION + 1));
		}

		//checkRevolutionsOrient();
}
 8002c52:	e007      	b.n	8002c64 <checkOrientCounterClock+0x44>
			directionOrient = -1;
 8002c54:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <checkOrientCounterClock+0x4c>)
 8002c56:	22ff      	movs	r2, #255	; 0xff
 8002c58:	701a      	strb	r2, [r3, #0]
			orientIncrement--; //= abs((orientIncrement + directionOrient) % (TOOTHRESOLUTION + 1));
 8002c5a:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <checkOrientCounterClock+0x50>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	4a03      	ldr	r2, [pc, #12]	; (8002c70 <checkOrientCounterClock+0x50>)
 8002c62:	6013      	str	r3, [r2, #0]
}
 8002c64:	bf00      	nop
 8002c66:	bd98      	pop	{r3, r4, r7, pc}
 8002c68:	48000400 	.word	0x48000400
 8002c6c:	200001e5 	.word	0x200001e5
 8002c70:	200001e8 	.word	0x200001e8

08002c74 <sendOrientData>:
//	else if (orientIncrement == 0 && directionOrient == -1){
//		orientIncrement = TOOTHRESOLUTION;
//	}
//}

void sendOrientData() {
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
	if (spamCheckDirOrient != directionOrient || spamCheckOrientAngle != orientAngle) {
 8002c78:	4b16      	ldr	r3, [pc, #88]	; (8002cd4 <sendOrientData+0x60>)
 8002c7a:	781a      	ldrb	r2, [r3, #0]
 8002c7c:	4b16      	ldr	r3, [pc, #88]	; (8002cd8 <sendOrientData+0x64>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d10a      	bne.n	8002c9a <sendOrientData+0x26>
 8002c84:	4b15      	ldr	r3, [pc, #84]	; (8002cdc <sendOrientData+0x68>)
 8002c86:	ed93 7a00 	vldr	s14, [r3]
 8002c8a:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <sendOrientData+0x6c>)
 8002c8c:	edd3 7a00 	vldr	s15, [r3]
 8002c90:	eeb4 7a67 	vcmp.f32	s14, s15
 8002c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c98:	d01a      	beq.n	8002cd0 <sendOrientData+0x5c>
		spamCheckDirOrient = directionOrient;
 8002c9a:	4b0f      	ldr	r3, [pc, #60]	; (8002cd8 <sendOrientData+0x64>)
 8002c9c:	781a      	ldrb	r2, [r3, #0]
 8002c9e:	4b0d      	ldr	r3, [pc, #52]	; (8002cd4 <sendOrientData+0x60>)
 8002ca0:	701a      	strb	r2, [r3, #0]
		spamCheckOrientAngle = orientAngle;
 8002ca2:	4b0f      	ldr	r3, [pc, #60]	; (8002ce0 <sendOrientData+0x6c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a0d      	ldr	r2, [pc, #52]	; (8002cdc <sendOrientData+0x68>)
 8002ca8:	6013      	str	r3, [r2, #0]
		packOrient();
 8002caa:	f7ff ff63 	bl	8002b74 <packOrient>
		memset(packedOrientData, 0, sizeof(packedOrientData));
 8002cae:	2232      	movs	r2, #50	; 0x32
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	480c      	ldr	r0, [pc, #48]	; (8002ce4 <sendOrientData+0x70>)
 8002cb4:	f007 f998 	bl	8009fe8 <memset>

		to_frame(packedOrientData, angularPosition, ORIENTID);
 8002cb8:	2203      	movs	r2, #3
 8002cba:	490b      	ldr	r1, [pc, #44]	; (8002ce8 <sendOrientData+0x74>)
 8002cbc:	4809      	ldr	r0, [pc, #36]	; (8002ce4 <sendOrientData+0x70>)
 8002cbe:	f7fe f9c7 	bl	8001050 <to_frame>
		HAL_UART_Transmit(&huart2, packedOrientData, sizeof(packedOrientData), HAL_MAX_DELAY);
 8002cc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cc6:	2232      	movs	r2, #50	; 0x32
 8002cc8:	4906      	ldr	r1, [pc, #24]	; (8002ce4 <sendOrientData+0x70>)
 8002cca:	4808      	ldr	r0, [pc, #32]	; (8002cec <sendOrientData+0x78>)
 8002ccc:	f006 fb8e 	bl	80093ec <HAL_UART_Transmit>
	}
}
 8002cd0:	bf00      	nop
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	200001f0 	.word	0x200001f0
 8002cd8:	200001e5 	.word	0x200001e5
 8002cdc:	200001f4 	.word	0x200001f4
 8002ce0:	200001ec 	.word	0x200001ec
 8002ce4:	200001f8 	.word	0x200001f8
 8002ce8:	2000022c 	.word	0x2000022c
 8002cec:	2000045c 	.word	0x2000045c

08002cf0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cf6:	4b0f      	ldr	r3, [pc, #60]	; (8002d34 <HAL_MspInit+0x44>)
 8002cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cfa:	4a0e      	ldr	r2, [pc, #56]	; (8002d34 <HAL_MspInit+0x44>)
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	6613      	str	r3, [r2, #96]	; 0x60
 8002d02:	4b0c      	ldr	r3, [pc, #48]	; (8002d34 <HAL_MspInit+0x44>)
 8002d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	607b      	str	r3, [r7, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d0e:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <HAL_MspInit+0x44>)
 8002d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d12:	4a08      	ldr	r2, [pc, #32]	; (8002d34 <HAL_MspInit+0x44>)
 8002d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d18:	6593      	str	r3, [r2, #88]	; 0x58
 8002d1a:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <HAL_MspInit+0x44>)
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40021000 	.word	0x40021000

08002d38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b09e      	sub	sp, #120	; 0x78
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d40:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	609a      	str	r2, [r3, #8]
 8002d4c:	60da      	str	r2, [r3, #12]
 8002d4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d50:	f107 0310 	add.w	r3, r7, #16
 8002d54:	2254      	movs	r2, #84	; 0x54
 8002d56:	2100      	movs	r1, #0
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f007 f945 	bl	8009fe8 <memset>
  if(hadc->Instance==ADC1)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a25      	ldr	r2, [pc, #148]	; (8002df8 <HAL_ADC_MspInit+0xc0>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d143      	bne.n	8002df0 <HAL_ADC_MspInit+0xb8>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002d68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d6c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002d6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002d72:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002d74:	2301      	movs	r3, #1
 8002d76:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8002d7c:	2310      	movs	r3, #16
 8002d7e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002d80:	2307      	movs	r3, #7
 8002d82:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002d84:	2302      	movs	r3, #2
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 8002d88:	2308      	movs	r3, #8
 8002d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002d8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d92:	f107 0310 	add.w	r3, r7, #16
 8002d96:	4618      	mov	r0, r3
 8002d98:	f004 fee0 	bl	8007b5c <HAL_RCCEx_PeriphCLKConfig>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8002da2:	f7ff feb7 	bl	8002b14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002da6:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <HAL_ADC_MspInit+0xc4>)
 8002da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002daa:	4a14      	ldr	r2, [pc, #80]	; (8002dfc <HAL_ADC_MspInit+0xc4>)
 8002dac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002db2:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <HAL_ADC_MspInit+0xc4>)
 8002db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dbe:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <HAL_ADC_MspInit+0xc4>)
 8002dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc2:	4a0e      	ldr	r2, [pc, #56]	; (8002dfc <HAL_ADC_MspInit+0xc4>)
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dca:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <HAL_ADC_MspInit+0xc4>)
 8002dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	60bb      	str	r3, [r7, #8]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = BatteryVoltage_Pin;
 8002dd6:	2308      	movs	r3, #8
 8002dd8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002dda:	230b      	movs	r3, #11
 8002ddc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BatteryVoltage_GPIO_Port, &GPIO_InitStruct);
 8002de2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002de6:	4619      	mov	r1, r3
 8002de8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dec:	f002 f812 	bl	8004e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002df0:	bf00      	nop
 8002df2:	3778      	adds	r7, #120	; 0x78
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	50040000 	.word	0x50040000
 8002dfc:	40021000 	.word	0x40021000

08002e00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b0a0      	sub	sp, #128	; 0x80
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e08:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	605a      	str	r2, [r3, #4]
 8002e12:	609a      	str	r2, [r3, #8]
 8002e14:	60da      	str	r2, [r3, #12]
 8002e16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e18:	f107 0318 	add.w	r3, r7, #24
 8002e1c:	2254      	movs	r2, #84	; 0x54
 8002e1e:	2100      	movs	r1, #0
 8002e20:	4618      	mov	r0, r3
 8002e22:	f007 f8e1 	bl	8009fe8 <memset>
  if(hi2c->Instance==I2C3)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a35      	ldr	r2, [pc, #212]	; (8002f00 <HAL_I2C_MspInit+0x100>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d163      	bne.n	8002ef8 <HAL_I2C_MspInit+0xf8>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002e30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e34:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002e36:	2300      	movs	r3, #0
 8002e38:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e3a:	f107 0318 	add.w	r3, r7, #24
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f004 fe8c 	bl	8007b5c <HAL_RCCEx_PeriphCLKConfig>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002e4a:	f7ff fe63 	bl	8002b14 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e4e:	4b2d      	ldr	r3, [pc, #180]	; (8002f04 <HAL_I2C_MspInit+0x104>)
 8002e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e52:	4a2c      	ldr	r2, [pc, #176]	; (8002f04 <HAL_I2C_MspInit+0x104>)
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e5a:	4b2a      	ldr	r3, [pc, #168]	; (8002f04 <HAL_I2C_MspInit+0x104>)
 8002e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	617b      	str	r3, [r7, #20]
 8002e64:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e66:	4b27      	ldr	r3, [pc, #156]	; (8002f04 <HAL_I2C_MspInit+0x104>)
 8002e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6a:	4a26      	ldr	r2, [pc, #152]	; (8002f04 <HAL_I2C_MspInit+0x104>)
 8002e6c:	f043 0302 	orr.w	r3, r3, #2
 8002e70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e72:	4b24      	ldr	r3, [pc, #144]	; (8002f04 <HAL_I2C_MspInit+0x104>)
 8002e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	613b      	str	r3, [r7, #16]
 8002e7c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB4 (NJTRST)     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002e7e:	2380      	movs	r3, #128	; 0x80
 8002e80:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e82:	2312      	movs	r3, #18
 8002e84:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e8e:	2304      	movs	r3, #4
 8002e90:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e92:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e96:	4619      	mov	r1, r3
 8002e98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e9c:	f001 ffba 	bl	8004e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002ea0:	2310      	movs	r3, #16
 8002ea2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ea4:	2312      	movs	r3, #18
 8002ea6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eac:	2303      	movs	r3, #3
 8002eae:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002eb0:	2304      	movs	r3, #4
 8002eb2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eb4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4813      	ldr	r0, [pc, #76]	; (8002f08 <HAL_I2C_MspInit+0x108>)
 8002ebc:	f001 ffaa 	bl	8004e14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002ec0:	4b10      	ldr	r3, [pc, #64]	; (8002f04 <HAL_I2C_MspInit+0x104>)
 8002ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec4:	4a0f      	ldr	r2, [pc, #60]	; (8002f04 <HAL_I2C_MspInit+0x104>)
 8002ec6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002eca:	6593      	str	r3, [r2, #88]	; 0x58
 8002ecc:	4b0d      	ldr	r3, [pc, #52]	; (8002f04 <HAL_I2C_MspInit+0x104>)
 8002ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2100      	movs	r1, #0
 8002edc:	2048      	movs	r0, #72	; 0x48
 8002ede:	f001 fd1c 	bl	800491a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8002ee2:	2048      	movs	r0, #72	; 0x48
 8002ee4:	f001 fd35 	bl	8004952 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8002ee8:	2200      	movs	r2, #0
 8002eea:	2100      	movs	r1, #0
 8002eec:	2049      	movs	r0, #73	; 0x49
 8002eee:	f001 fd14 	bl	800491a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8002ef2:	2049      	movs	r0, #73	; 0x49
 8002ef4:	f001 fd2d 	bl	8004952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002ef8:	bf00      	nop
 8002efa:	3780      	adds	r7, #128	; 0x80
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40005c00 	.word	0x40005c00
 8002f04:	40021000 	.word	0x40021000
 8002f08:	48000400 	.word	0x48000400

08002f0c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <HAL_TIM_PWM_MspInit+0x38>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d10b      	bne.n	8002f36 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f1e:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <HAL_TIM_PWM_MspInit+0x3c>)
 8002f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f22:	4a09      	ldr	r2, [pc, #36]	; (8002f48 <HAL_TIM_PWM_MspInit+0x3c>)
 8002f24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f28:	6613      	str	r3, [r2, #96]	; 0x60
 8002f2a:	4b07      	ldr	r3, [pc, #28]	; (8002f48 <HAL_TIM_PWM_MspInit+0x3c>)
 8002f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002f36:	bf00      	nop
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	40012c00 	.word	0x40012c00
 8002f48:	40021000 	.word	0x40021000

08002f4c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f5c:	d113      	bne.n	8002f86 <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f5e:	4b0c      	ldr	r3, [pc, #48]	; (8002f90 <HAL_TIM_OC_MspInit+0x44>)
 8002f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f62:	4a0b      	ldr	r2, [pc, #44]	; (8002f90 <HAL_TIM_OC_MspInit+0x44>)
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	6593      	str	r3, [r2, #88]	; 0x58
 8002f6a:	4b09      	ldr	r3, [pc, #36]	; (8002f90 <HAL_TIM_OC_MspInit+0x44>)
 8002f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f76:	2200      	movs	r2, #0
 8002f78:	2100      	movs	r1, #0
 8002f7a:	201c      	movs	r0, #28
 8002f7c:	f001 fccd 	bl	800491a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f80:	201c      	movs	r0, #28
 8002f82:	f001 fce6 	bl	8004952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002f86:	bf00      	nop
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40021000 	.word	0x40021000

08002f94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a1a      	ldr	r2, [pc, #104]	; (800300c <HAL_TIM_Base_MspInit+0x78>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d114      	bne.n	8002fd0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002fa6:	4b1a      	ldr	r3, [pc, #104]	; (8003010 <HAL_TIM_Base_MspInit+0x7c>)
 8002fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002faa:	4a19      	ldr	r2, [pc, #100]	; (8003010 <HAL_TIM_Base_MspInit+0x7c>)
 8002fac:	f043 0310 	orr.w	r3, r3, #16
 8002fb0:	6593      	str	r3, [r2, #88]	; 0x58
 8002fb2:	4b17      	ldr	r3, [pc, #92]	; (8003010 <HAL_TIM_Base_MspInit+0x7c>)
 8002fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb6:	f003 0310 	and.w	r3, r3, #16
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	2036      	movs	r0, #54	; 0x36
 8002fc4:	f001 fca9 	bl	800491a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002fc8:	2036      	movs	r0, #54	; 0x36
 8002fca:	f001 fcc2 	bl	8004952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002fce:	e018      	b.n	8003002 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a0f      	ldr	r2, [pc, #60]	; (8003014 <HAL_TIM_Base_MspInit+0x80>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d113      	bne.n	8003002 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002fda:	4b0d      	ldr	r3, [pc, #52]	; (8003010 <HAL_TIM_Base_MspInit+0x7c>)
 8002fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fde:	4a0c      	ldr	r2, [pc, #48]	; (8003010 <HAL_TIM_Base_MspInit+0x7c>)
 8002fe0:	f043 0320 	orr.w	r3, r3, #32
 8002fe4:	6593      	str	r3, [r2, #88]	; 0x58
 8002fe6:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <HAL_TIM_Base_MspInit+0x7c>)
 8002fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fea:	f003 0320 	and.w	r3, r3, #32
 8002fee:	60bb      	str	r3, [r7, #8]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	2037      	movs	r0, #55	; 0x37
 8002ff8:	f001 fc8f 	bl	800491a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002ffc:	2037      	movs	r0, #55	; 0x37
 8002ffe:	f001 fca8 	bl	8004952 <HAL_NVIC_EnableIRQ>
}
 8003002:	bf00      	nop
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40001000 	.word	0x40001000
 8003010:	40021000 	.word	0x40021000
 8003014:	40001400 	.word	0x40001400

08003018 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b088      	sub	sp, #32
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003020:	f107 030c 	add.w	r3, r7, #12
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	605a      	str	r2, [r3, #4]
 800302a:	609a      	str	r2, [r3, #8]
 800302c:	60da      	str	r2, [r3, #12]
 800302e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a12      	ldr	r2, [pc, #72]	; (8003080 <HAL_TIM_MspPostInit+0x68>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d11d      	bne.n	8003076 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800303a:	4b12      	ldr	r3, [pc, #72]	; (8003084 <HAL_TIM_MspPostInit+0x6c>)
 800303c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800303e:	4a11      	ldr	r2, [pc, #68]	; (8003084 <HAL_TIM_MspPostInit+0x6c>)
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003046:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <HAL_TIM_MspPostInit+0x6c>)
 8003048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	60bb      	str	r3, [r7, #8]
 8003050:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_R_Pin|PWM_L_Pin;
 8003052:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003056:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003058:	2302      	movs	r3, #2
 800305a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003060:	2300      	movs	r3, #0
 8003062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003064:	2301      	movs	r3, #1
 8003066:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003068:	f107 030c 	add.w	r3, r7, #12
 800306c:	4619      	mov	r1, r3
 800306e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003072:	f001 fecf 	bl	8004e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003076:	bf00      	nop
 8003078:	3720      	adds	r7, #32
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40012c00 	.word	0x40012c00
 8003084:	40021000 	.word	0x40021000

08003088 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b09e      	sub	sp, #120	; 0x78
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003090:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	605a      	str	r2, [r3, #4]
 800309a:	609a      	str	r2, [r3, #8]
 800309c:	60da      	str	r2, [r3, #12]
 800309e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030a0:	f107 0310 	add.w	r3, r7, #16
 80030a4:	2254      	movs	r2, #84	; 0x54
 80030a6:	2100      	movs	r1, #0
 80030a8:	4618      	mov	r0, r3
 80030aa:	f006 ff9d 	bl	8009fe8 <memset>
  if(huart->Instance==USART2)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a3c      	ldr	r2, [pc, #240]	; (80031a4 <HAL_UART_MspInit+0x11c>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d171      	bne.n	800319c <HAL_UART_MspInit+0x114>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80030b8:	2302      	movs	r3, #2
 80030ba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80030bc:	2300      	movs	r3, #0
 80030be:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030c0:	f107 0310 	add.w	r3, r7, #16
 80030c4:	4618      	mov	r0, r3
 80030c6:	f004 fd49 	bl	8007b5c <HAL_RCCEx_PeriphCLKConfig>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80030d0:	f7ff fd20 	bl	8002b14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80030d4:	4b34      	ldr	r3, [pc, #208]	; (80031a8 <HAL_UART_MspInit+0x120>)
 80030d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d8:	4a33      	ldr	r2, [pc, #204]	; (80031a8 <HAL_UART_MspInit+0x120>)
 80030da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030de:	6593      	str	r3, [r2, #88]	; 0x58
 80030e0:	4b31      	ldr	r3, [pc, #196]	; (80031a8 <HAL_UART_MspInit+0x120>)
 80030e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ec:	4b2e      	ldr	r3, [pc, #184]	; (80031a8 <HAL_UART_MspInit+0x120>)
 80030ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f0:	4a2d      	ldr	r2, [pc, #180]	; (80031a8 <HAL_UART_MspInit+0x120>)
 80030f2:	f043 0301 	orr.w	r3, r3, #1
 80030f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030f8:	4b2b      	ldr	r3, [pc, #172]	; (80031a8 <HAL_UART_MspInit+0x120>)
 80030fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003104:	2304      	movs	r3, #4
 8003106:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003108:	2302      	movs	r3, #2
 800310a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310c:	2300      	movs	r3, #0
 800310e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003110:	2303      	movs	r3, #3
 8003112:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003114:	2307      	movs	r3, #7
 8003116:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003118:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800311c:	4619      	mov	r1, r3
 800311e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003122:	f001 fe77 	bl	8004e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800312a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312c:	2302      	movs	r3, #2
 800312e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003130:	2300      	movs	r3, #0
 8003132:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003134:	2303      	movs	r3, #3
 8003136:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8003138:	2303      	movs	r3, #3
 800313a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800313c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003140:	4619      	mov	r1, r3
 8003142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003146:	f001 fe65 	bl	8004e14 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800314a:	4b18      	ldr	r3, [pc, #96]	; (80031ac <HAL_UART_MspInit+0x124>)
 800314c:	4a18      	ldr	r2, [pc, #96]	; (80031b0 <HAL_UART_MspInit+0x128>)
 800314e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8003150:	4b16      	ldr	r3, [pc, #88]	; (80031ac <HAL_UART_MspInit+0x124>)
 8003152:	2202      	movs	r2, #2
 8003154:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003156:	4b15      	ldr	r3, [pc, #84]	; (80031ac <HAL_UART_MspInit+0x124>)
 8003158:	2200      	movs	r2, #0
 800315a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800315c:	4b13      	ldr	r3, [pc, #76]	; (80031ac <HAL_UART_MspInit+0x124>)
 800315e:	2200      	movs	r2, #0
 8003160:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003162:	4b12      	ldr	r3, [pc, #72]	; (80031ac <HAL_UART_MspInit+0x124>)
 8003164:	2280      	movs	r2, #128	; 0x80
 8003166:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003168:	4b10      	ldr	r3, [pc, #64]	; (80031ac <HAL_UART_MspInit+0x124>)
 800316a:	2200      	movs	r2, #0
 800316c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800316e:	4b0f      	ldr	r3, [pc, #60]	; (80031ac <HAL_UART_MspInit+0x124>)
 8003170:	2200      	movs	r2, #0
 8003172:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003174:	4b0d      	ldr	r3, [pc, #52]	; (80031ac <HAL_UART_MspInit+0x124>)
 8003176:	2220      	movs	r2, #32
 8003178:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800317a:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <HAL_UART_MspInit+0x124>)
 800317c:	2200      	movs	r2, #0
 800317e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003180:	480a      	ldr	r0, [pc, #40]	; (80031ac <HAL_UART_MspInit+0x124>)
 8003182:	f001 fc01 	bl	8004988 <HAL_DMA_Init>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 800318c:	f7ff fcc2 	bl	8002b14 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a06      	ldr	r2, [pc, #24]	; (80031ac <HAL_UART_MspInit+0x124>)
 8003194:	671a      	str	r2, [r3, #112]	; 0x70
 8003196:	4a05      	ldr	r2, [pc, #20]	; (80031ac <HAL_UART_MspInit+0x124>)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800319c:	bf00      	nop
 800319e:	3778      	adds	r7, #120	; 0x78
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40004400 	.word	0x40004400
 80031a8:	40021000 	.word	0x40021000
 80031ac:	20000238 	.word	0x20000238
 80031b0:	4002006c 	.word	0x4002006c

080031b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80031b8:	e7fe      	b.n	80031b8 <NMI_Handler+0x4>

080031ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031ba:	b480      	push	{r7}
 80031bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031be:	e7fe      	b.n	80031be <HardFault_Handler+0x4>

080031c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031c4:	e7fe      	b.n	80031c4 <MemManage_Handler+0x4>

080031c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031c6:	b480      	push	{r7}
 80031c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031ca:	e7fe      	b.n	80031ca <BusFault_Handler+0x4>

080031cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031d0:	e7fe      	b.n	80031d0 <UsageFault_Handler+0x4>

080031d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031d2:	b480      	push	{r7}
 80031d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031d6:	bf00      	nop
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031e4:	bf00      	nop
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031ee:	b480      	push	{r7}
 80031f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031f2:	bf00      	nop
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003200:	f000 f92c 	bl	800345c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003204:	bf00      	nop
 8003206:	bd80      	pop	{r7, pc}

08003208 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800320c:	2001      	movs	r0, #1
 800320e:	f001 ff9b 	bl	8005148 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	clockcheckRight();
 8003212:	f7fe ffbb 	bl	800218c <clockcheckRight>
  /* USER CODE END EXTI0_IRQn 1 */
}
 8003216:	bf00      	nop
 8003218:	bd80      	pop	{r7, pc}

0800321a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800321e:	2002      	movs	r0, #2
 8003220:	f001 ff92 	bl	8005148 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
	counterclockcheckLeft();
 8003224:	f7ff f8d8 	bl	80023d8 <counterclockcheckLeft>
  /* USER CODE END EXTI1_IRQn 1 */
}
 8003228:	bf00      	nop
 800322a:	bd80      	pop	{r7, pc}

0800322c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003230:	2008      	movs	r0, #8
 8003232:	f001 ff89 	bl	8005148 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
	checkOrientClock();
 8003236:	f7ff fcc9 	bl	8002bcc <checkOrientClock>
  /* USER CODE END EXTI3_IRQn 1 */
}
 800323a:	bf00      	nop
 800323c:	bd80      	pop	{r7, pc}

0800323e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003242:	2010      	movs	r0, #16
 8003244:	f001 ff80 	bl	8005148 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
	counterclockcheckRight();
 8003248:	f7ff f802 	bl	8002250 <counterclockcheckRight>
  /* USER CODE END EXTI4_IRQn 1 */
}
 800324c:	bf00      	nop
 800324e:	bd80      	pop	{r7, pc}

08003250 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003254:	4802      	ldr	r0, [pc, #8]	; (8003260 <DMA1_Channel6_IRQHandler+0x10>)
 8003256:	f001 fcf0 	bl	8004c3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800325a:	bf00      	nop
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	20000238 	.word	0x20000238

08003264 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003268:	2020      	movs	r0, #32
 800326a:	f001 ff6d 	bl	8005148 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
	clockcheckLeft();
 800326e:	f7ff f851 	bl	8002314 <clockcheckLeft>

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003272:	bf00      	nop
 8003274:	bd80      	pop	{r7, pc}
	...

08003278 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800327c:	4803      	ldr	r0, [pc, #12]	; (800328c <TIM2_IRQHandler+0x14>)
 800327e:	f005 f98b 	bl	8008598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
	controlBothMotors();
 8003282:	f7ff fb1f 	bl	80028c4 <controlBothMotors>
  /* USER CODE END TIM2_IRQn 1 */
}
 8003286:	bf00      	nop
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	20000410 	.word	0x20000410

08003290 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003294:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003298:	f001 ff56 	bl	8005148 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
	checkOrientCounterClock();
 800329c:	f7ff fcc0 	bl	8002c20 <checkOrientCounterClock>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80032a0:	bf00      	nop
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80032a8:	4803      	ldr	r0, [pc, #12]	; (80032b8 <TIM6_DAC_IRQHandler+0x14>)
 80032aa:	f005 f975 	bl	8008598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
	updatePositionsAndVelocities();
 80032ae:	f7fe fe75 	bl	8001f9c <updatePositionsAndVelocities>
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80032b2:	bf00      	nop
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20000360 	.word	0x20000360

080032bc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80032c0:	4803      	ldr	r0, [pc, #12]	; (80032d0 <TIM7_IRQHandler+0x14>)
 80032c2:	f005 f969 	bl	8008598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
	UpdateBatteryVoltage();
 80032c6:	f7ff fb11 	bl	80028ec <UpdateBatteryVoltage>

  /* USER CODE END TIM7_IRQn 1 */
}
 80032ca:	bf00      	nop
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	200004f4 	.word	0x200004f4

080032d4 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80032d8:	4802      	ldr	r0, [pc, #8]	; (80032e4 <I2C3_EV_IRQHandler+0x10>)
 80032da:	f002 f9bb 	bl	8005654 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80032de:	bf00      	nop
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20000280 	.word	0x20000280

080032e8 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80032ec:	4802      	ldr	r0, [pc, #8]	; (80032f8 <I2C3_ER_IRQHandler+0x10>)
 80032ee:	f002 f9cb 	bl	8005688 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80032f2:	bf00      	nop
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20000280 	.word	0x20000280

080032fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003300:	4b15      	ldr	r3, [pc, #84]	; (8003358 <SystemInit+0x5c>)
 8003302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003306:	4a14      	ldr	r2, [pc, #80]	; (8003358 <SystemInit+0x5c>)
 8003308:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800330c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003310:	4b12      	ldr	r3, [pc, #72]	; (800335c <SystemInit+0x60>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a11      	ldr	r2, [pc, #68]	; (800335c <SystemInit+0x60>)
 8003316:	f043 0301 	orr.w	r3, r3, #1
 800331a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800331c:	4b0f      	ldr	r3, [pc, #60]	; (800335c <SystemInit+0x60>)
 800331e:	2200      	movs	r2, #0
 8003320:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003322:	4b0e      	ldr	r3, [pc, #56]	; (800335c <SystemInit+0x60>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a0d      	ldr	r2, [pc, #52]	; (800335c <SystemInit+0x60>)
 8003328:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800332c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003330:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003332:	4b0a      	ldr	r3, [pc, #40]	; (800335c <SystemInit+0x60>)
 8003334:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003338:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800333a:	4b08      	ldr	r3, [pc, #32]	; (800335c <SystemInit+0x60>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a07      	ldr	r2, [pc, #28]	; (800335c <SystemInit+0x60>)
 8003340:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003344:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003346:	4b05      	ldr	r3, [pc, #20]	; (800335c <SystemInit+0x60>)
 8003348:	2200      	movs	r2, #0
 800334a:	619a      	str	r2, [r3, #24]
}
 800334c:	bf00      	nop
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	e000ed00 	.word	0xe000ed00
 800335c:	40021000 	.word	0x40021000

08003360 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003360:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003398 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003364:	f7ff ffca 	bl	80032fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003368:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800336a:	e003      	b.n	8003374 <LoopCopyDataInit>

0800336c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800336c:	4b0b      	ldr	r3, [pc, #44]	; (800339c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800336e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003370:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003372:	3104      	adds	r1, #4

08003374 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003374:	480a      	ldr	r0, [pc, #40]	; (80033a0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003376:	4b0b      	ldr	r3, [pc, #44]	; (80033a4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003378:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800337a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800337c:	d3f6      	bcc.n	800336c <CopyDataInit>
	ldr	r2, =_sbss
 800337e:	4a0a      	ldr	r2, [pc, #40]	; (80033a8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003380:	e002      	b.n	8003388 <LoopFillZerobss>

08003382 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003382:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003384:	f842 3b04 	str.w	r3, [r2], #4

08003388 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003388:	4b08      	ldr	r3, [pc, #32]	; (80033ac <LoopForever+0x16>)
	cmp	r2, r3
 800338a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800338c:	d3f9      	bcc.n	8003382 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800338e:	f006 fdf9 	bl	8009f84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003392:	f7fd ff39 	bl	8001208 <main>

08003396 <LoopForever>:

LoopForever:
    b LoopForever
 8003396:	e7fe      	b.n	8003396 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003398:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800339c:	0800b358 	.word	0x0800b358
	ldr	r0, =_sdata
 80033a0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80033a4:	20000030 	.word	0x20000030
	ldr	r2, =_sbss
 80033a8:	20000030 	.word	0x20000030
	ldr	r3, = _ebss
 80033ac:	20000558 	.word	0x20000558

080033b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80033b0:	e7fe      	b.n	80033b0 <ADC1_IRQHandler>

080033b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b082      	sub	sp, #8
 80033b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033bc:	2003      	movs	r0, #3
 80033be:	f001 faa1 	bl	8004904 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033c2:	2000      	movs	r0, #0
 80033c4:	f000 f80e 	bl	80033e4 <HAL_InitTick>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d002      	beq.n	80033d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	71fb      	strb	r3, [r7, #7]
 80033d2:	e001      	b.n	80033d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80033d4:	f7ff fc8c 	bl	8002cf0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033d8:	79fb      	ldrb	r3, [r7, #7]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
	...

080033e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80033ec:	2300      	movs	r3, #0
 80033ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80033f0:	4b17      	ldr	r3, [pc, #92]	; (8003450 <HAL_InitTick+0x6c>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d023      	beq.n	8003440 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80033f8:	4b16      	ldr	r3, [pc, #88]	; (8003454 <HAL_InitTick+0x70>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	4b14      	ldr	r3, [pc, #80]	; (8003450 <HAL_InitTick+0x6c>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	4619      	mov	r1, r3
 8003402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003406:	fbb3 f3f1 	udiv	r3, r3, r1
 800340a:	fbb2 f3f3 	udiv	r3, r2, r3
 800340e:	4618      	mov	r0, r3
 8003410:	f001 faad 	bl	800496e <HAL_SYSTICK_Config>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10f      	bne.n	800343a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b0f      	cmp	r3, #15
 800341e:	d809      	bhi.n	8003434 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003420:	2200      	movs	r2, #0
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003428:	f001 fa77 	bl	800491a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800342c:	4a0a      	ldr	r2, [pc, #40]	; (8003458 <HAL_InitTick+0x74>)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	e007      	b.n	8003444 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	73fb      	strb	r3, [r7, #15]
 8003438:	e004      	b.n	8003444 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	73fb      	strb	r3, [r7, #15]
 800343e:	e001      	b.n	8003444 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003444:	7bfb      	ldrb	r3, [r7, #15]
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	2000002c 	.word	0x2000002c
 8003454:	20000024 	.word	0x20000024
 8003458:	20000028 	.word	0x20000028

0800345c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003460:	4b06      	ldr	r3, [pc, #24]	; (800347c <HAL_IncTick+0x20>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	461a      	mov	r2, r3
 8003466:	4b06      	ldr	r3, [pc, #24]	; (8003480 <HAL_IncTick+0x24>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4413      	add	r3, r2
 800346c:	4a04      	ldr	r2, [pc, #16]	; (8003480 <HAL_IncTick+0x24>)
 800346e:	6013      	str	r3, [r2, #0]
}
 8003470:	bf00      	nop
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	2000002c 	.word	0x2000002c
 8003480:	20000554 	.word	0x20000554

08003484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
  return uwTick;
 8003488:	4b03      	ldr	r3, [pc, #12]	; (8003498 <HAL_GetTick+0x14>)
 800348a:	681b      	ldr	r3, [r3, #0]
}
 800348c:	4618      	mov	r0, r3
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	20000554 	.word	0x20000554

0800349c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	431a      	orrs	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	609a      	str	r2, [r3, #8]
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
 80034ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	609a      	str	r2, [r3, #8]
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003504:	b480      	push	{r7}
 8003506:	b087      	sub	sp, #28
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
 8003510:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	3360      	adds	r3, #96	; 0x60
 8003516:	461a      	mov	r2, r3
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	4b08      	ldr	r3, [pc, #32]	; (8003548 <LL_ADC_SetOffset+0x44>)
 8003526:	4013      	ands	r3, r2
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	4313      	orrs	r3, r2
 8003534:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800353c:	bf00      	nop
 800353e:	371c      	adds	r7, #28
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	03fff000 	.word	0x03fff000

0800354c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	3360      	adds	r3, #96	; 0x60
 800355a:	461a      	mov	r2, r3
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800356c:	4618      	mov	r0, r3
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003578:	b480      	push	{r7}
 800357a:	b087      	sub	sp, #28
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	3360      	adds	r3, #96	; 0x60
 8003588:	461a      	mov	r2, r3
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	431a      	orrs	r2, r3
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80035a2:	bf00      	nop
 80035a4:	371c      	adds	r7, #28
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80035c2:	2301      	movs	r3, #1
 80035c4:	e000      	b.n	80035c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	3330      	adds	r3, #48	; 0x30
 80035e4:	461a      	mov	r2, r3
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	0a1b      	lsrs	r3, r3, #8
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	f003 030c 	and.w	r3, r3, #12
 80035f0:	4413      	add	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	f003 031f 	and.w	r3, r3, #31
 80035fe:	211f      	movs	r1, #31
 8003600:	fa01 f303 	lsl.w	r3, r1, r3
 8003604:	43db      	mvns	r3, r3
 8003606:	401a      	ands	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	0e9b      	lsrs	r3, r3, #26
 800360c:	f003 011f 	and.w	r1, r3, #31
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f003 031f 	and.w	r3, r3, #31
 8003616:	fa01 f303 	lsl.w	r3, r1, r3
 800361a:	431a      	orrs	r2, r3
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003620:	bf00      	nop
 8003622:	371c      	adds	r7, #28
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800362c:	b480      	push	{r7}
 800362e:	b087      	sub	sp, #28
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	3314      	adds	r3, #20
 800363c:	461a      	mov	r2, r3
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	0e5b      	lsrs	r3, r3, #25
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	4413      	add	r3, r2
 800364a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	0d1b      	lsrs	r3, r3, #20
 8003654:	f003 031f 	and.w	r3, r3, #31
 8003658:	2107      	movs	r1, #7
 800365a:	fa01 f303 	lsl.w	r3, r1, r3
 800365e:	43db      	mvns	r3, r3
 8003660:	401a      	ands	r2, r3
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	0d1b      	lsrs	r3, r3, #20
 8003666:	f003 031f 	and.w	r3, r3, #31
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	fa01 f303 	lsl.w	r3, r1, r3
 8003670:	431a      	orrs	r2, r3
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003676:	bf00      	nop
 8003678:	371c      	adds	r7, #28
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
	...

08003684 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800369c:	43db      	mvns	r3, r3
 800369e:	401a      	ands	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f003 0318 	and.w	r3, r3, #24
 80036a6:	4908      	ldr	r1, [pc, #32]	; (80036c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80036a8:	40d9      	lsrs	r1, r3
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	400b      	ands	r3, r1
 80036ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b2:	431a      	orrs	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80036ba:	bf00      	nop
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	0007ffff 	.word	0x0007ffff

080036cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80036dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6093      	str	r3, [r2, #8]
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003700:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003704:	d101      	bne.n	800370a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003706:	2301      	movs	r3, #1
 8003708:	e000      	b.n	800370c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003728:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800372c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003750:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003754:	d101      	bne.n	800375a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003778:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800377c:	f043 0201 	orr.w	r2, r3, #1
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037a4:	f043 0202 	orr.w	r2, r3, #2
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <LL_ADC_IsEnabled+0x18>
 80037cc:	2301      	movs	r3, #1
 80037ce:	e000      	b.n	80037d2 <LL_ADC_IsEnabled+0x1a>
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d101      	bne.n	80037f6 <LL_ADC_IsDisableOngoing+0x18>
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <LL_ADC_IsDisableOngoing+0x1a>
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003814:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003818:	f043 0204 	orr.w	r2, r3, #4
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b04      	cmp	r3, #4
 800383e:	d101      	bne.n	8003844 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003840:	2301      	movs	r3, #1
 8003842:	e000      	b.n	8003846 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b08      	cmp	r3, #8
 8003864:	d101      	bne.n	800386a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003880:	2300      	movs	r3, #0
 8003882:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003884:	2300      	movs	r3, #0
 8003886:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e12c      	b.n	8003aec <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389c:	2b00      	cmp	r3, #0
 800389e:	d109      	bne.n	80038b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7ff fa49 	bl	8002d38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff ff19 	bl	80036f0 <LL_ADC_IsDeepPowerDownEnabled>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d004      	beq.n	80038ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff feff 	bl	80036cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff ff34 	bl	8003740 <LL_ADC_IsInternalRegulatorEnabled>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d115      	bne.n	800390a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7ff ff18 	bl	8003718 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038e8:	4b82      	ldr	r3, [pc, #520]	; (8003af4 <HAL_ADC_Init+0x27c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	099b      	lsrs	r3, r3, #6
 80038ee:	4a82      	ldr	r2, [pc, #520]	; (8003af8 <HAL_ADC_Init+0x280>)
 80038f0:	fba2 2303 	umull	r2, r3, r2, r3
 80038f4:	099b      	lsrs	r3, r3, #6
 80038f6:	3301      	adds	r3, #1
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80038fc:	e002      	b.n	8003904 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	3b01      	subs	r3, #1
 8003902:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f9      	bne.n	80038fe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff ff16 	bl	8003740 <LL_ADC_IsInternalRegulatorEnabled>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10d      	bne.n	8003936 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391e:	f043 0210 	orr.w	r2, r3, #16
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392a:	f043 0201 	orr.w	r2, r3, #1
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f7ff ff76 	bl	800382c <LL_ADC_REG_IsConversionOngoing>
 8003940:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003946:	f003 0310 	and.w	r3, r3, #16
 800394a:	2b00      	cmp	r3, #0
 800394c:	f040 80c5 	bne.w	8003ada <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	2b00      	cmp	r3, #0
 8003954:	f040 80c1 	bne.w	8003ada <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003960:	f043 0202 	orr.w	r2, r3, #2
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff ff23 	bl	80037b8 <LL_ADC_IsEnabled>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10b      	bne.n	8003990 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003978:	4860      	ldr	r0, [pc, #384]	; (8003afc <HAL_ADC_Init+0x284>)
 800397a:	f7ff ff1d 	bl	80037b8 <LL_ADC_IsEnabled>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d105      	bne.n	8003990 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	4619      	mov	r1, r3
 800398a:	485d      	ldr	r0, [pc, #372]	; (8003b00 <HAL_ADC_Init+0x288>)
 800398c:	f7ff fd86 	bl	800349c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	7e5b      	ldrb	r3, [r3, #25]
 8003994:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800399a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80039a0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80039a6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039ae:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80039b0:	4313      	orrs	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d106      	bne.n	80039cc <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	3b01      	subs	r3, #1
 80039c4:	045b      	lsls	r3, r3, #17
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d009      	beq.n	80039e8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68da      	ldr	r2, [r3, #12]
 80039ee:	4b45      	ldr	r3, [pc, #276]	; (8003b04 <HAL_ADC_Init+0x28c>)
 80039f0:	4013      	ands	r3, r2
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	6812      	ldr	r2, [r2, #0]
 80039f6:	69b9      	ldr	r1, [r7, #24]
 80039f8:	430b      	orrs	r3, r1
 80039fa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff ff13 	bl	800382c <LL_ADC_REG_IsConversionOngoing>
 8003a06:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff ff20 	bl	8003852 <LL_ADC_INJ_IsConversionOngoing>
 8003a12:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d13d      	bne.n	8003a96 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d13a      	bne.n	8003a96 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a24:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a2c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a3c:	f023 0302 	bic.w	r3, r3, #2
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6812      	ldr	r2, [r2, #0]
 8003a44:	69b9      	ldr	r1, [r7, #24]
 8003a46:	430b      	orrs	r3, r1
 8003a48:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d118      	bne.n	8003a86 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003a5e:	f023 0304 	bic.w	r3, r3, #4
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a6a:	4311      	orrs	r1, r2
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003a70:	4311      	orrs	r1, r2
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a76:	430a      	orrs	r2, r1
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0201 	orr.w	r2, r2, #1
 8003a82:	611a      	str	r2, [r3, #16]
 8003a84:	e007      	b.n	8003a96 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	691a      	ldr	r2, [r3, #16]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 0201 	bic.w	r2, r2, #1
 8003a94:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d10c      	bne.n	8003ab8 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa4:	f023 010f 	bic.w	r1, r3, #15
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	1e5a      	subs	r2, r3, #1
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	631a      	str	r2, [r3, #48]	; 0x30
 8003ab6:	e007      	b.n	8003ac8 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 020f 	bic.w	r2, r2, #15
 8003ac6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003acc:	f023 0303 	bic.w	r3, r3, #3
 8003ad0:	f043 0201 	orr.w	r2, r3, #1
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	655a      	str	r2, [r3, #84]	; 0x54
 8003ad8:	e007      	b.n	8003aea <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ade:	f043 0210 	orr.w	r2, r3, #16
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003aea:	7ffb      	ldrb	r3, [r7, #31]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3720      	adds	r7, #32
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	20000024 	.word	0x20000024
 8003af8:	053e2d63 	.word	0x053e2d63
 8003afc:	50040000 	.word	0x50040000
 8003b00:	50040300 	.word	0x50040300
 8003b04:	fff0c007 	.word	0xfff0c007

08003b08 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff fe89 	bl	800382c <LL_ADC_REG_IsConversionOngoing>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d14f      	bne.n	8003bc0 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d101      	bne.n	8003b2e <HAL_ADC_Start+0x26>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e04b      	b.n	8003bc6 <HAL_ADC_Start+0xbe>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 fcc6 	bl	80044c8 <ADC_Enable>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d137      	bne.n	8003bb6 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b4e:	f023 0301 	bic.w	r3, r3, #1
 8003b52:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b66:	d106      	bne.n	8003b76 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6c:	f023 0206 	bic.w	r2, r3, #6
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	659a      	str	r2, [r3, #88]	; 0x58
 8003b74:	e002      	b.n	8003b7c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	221c      	movs	r2, #28
 8003b82:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d007      	beq.n	8003baa <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ba2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7ff fe28 	bl	8003804 <LL_ADC_REG_StartConversion>
 8003bb4:	e006      	b.n	8003bc4 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003bbe:	e001      	b.n	8003bc4 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b086      	sub	sp, #24
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
 8003bd6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d102      	bne.n	8003be6 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003be0:	2308      	movs	r3, #8
 8003be2:	617b      	str	r3, [r7, #20]
 8003be4:	e010      	b.n	8003c08 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d007      	beq.n	8003c04 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf8:	f043 0220 	orr.w	r2, r3, #32
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e06f      	b.n	8003ce4 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8003c04:	2304      	movs	r3, #4
 8003c06:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003c08:	f7ff fc3c 	bl	8003484 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003c0e:	e021      	b.n	8003c54 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c16:	d01d      	beq.n	8003c54 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003c18:	f7ff fc34 	bl	8003484 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d302      	bcc.n	8003c2e <HAL_ADC_PollForConversion+0x60>
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d112      	bne.n	8003c54 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	4013      	ands	r3, r2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10b      	bne.n	8003c54 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c40:	f043 0204 	orr.w	r2, r3, #4
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e047      	b.n	8003ce4 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0d6      	beq.n	8003c10 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c66:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7ff fc9b 	bl	80035ae <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d01c      	beq.n	8003cb8 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	7e5b      	ldrb	r3, [r3, #25]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d118      	bne.n	8003cb8 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0308 	and.w	r3, r3, #8
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d111      	bne.n	8003cb8 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d105      	bne.n	8003cb8 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb0:	f043 0201 	orr.w	r2, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d104      	bne.n	8003cd0 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2208      	movs	r2, #8
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	e008      	b.n	8003ce2 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d103      	bne.n	8003ce2 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	220c      	movs	r2, #12
 8003ce0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3718      	adds	r7, #24
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
	...

08003d08 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b0b6      	sub	sp, #216	; 0xd8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <HAL_ADC_ConfigChannel+0x22>
 8003d26:	2302      	movs	r3, #2
 8003d28:	e3b9      	b.n	800449e <HAL_ADC_ConfigChannel+0x796>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff fd78 	bl	800382c <LL_ADC_REG_IsConversionOngoing>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f040 839e 	bne.w	8004480 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	2b05      	cmp	r3, #5
 8003d4a:	d824      	bhi.n	8003d96 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	3b02      	subs	r3, #2
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d81b      	bhi.n	8003d8e <HAL_ADC_ConfigChannel+0x86>
 8003d56:	a201      	add	r2, pc, #4	; (adr r2, 8003d5c <HAL_ADC_ConfigChannel+0x54>)
 8003d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5c:	08003d6d 	.word	0x08003d6d
 8003d60:	08003d75 	.word	0x08003d75
 8003d64:	08003d7d 	.word	0x08003d7d
 8003d68:	08003d85 	.word	0x08003d85
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	220c      	movs	r2, #12
 8003d70:	605a      	str	r2, [r3, #4]
          break;
 8003d72:	e011      	b.n	8003d98 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	2212      	movs	r2, #18
 8003d78:	605a      	str	r2, [r3, #4]
          break;
 8003d7a:	e00d      	b.n	8003d98 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	2218      	movs	r2, #24
 8003d80:	605a      	str	r2, [r3, #4]
          break;
 8003d82:	e009      	b.n	8003d98 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d8a:	605a      	str	r2, [r3, #4]
          break;
 8003d8c:	e004      	b.n	8003d98 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2206      	movs	r2, #6
 8003d92:	605a      	str	r2, [r3, #4]
          break;
 8003d94:	e000      	b.n	8003d98 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003d96:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6818      	ldr	r0, [r3, #0]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	6859      	ldr	r1, [r3, #4]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	461a      	mov	r2, r3
 8003da6:	f7ff fc15 	bl	80035d4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff fd3c 	bl	800382c <LL_ADC_REG_IsConversionOngoing>
 8003db4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff fd48 	bl	8003852 <LL_ADC_INJ_IsConversionOngoing>
 8003dc2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003dc6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f040 81a6 	bne.w	800411c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003dd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f040 81a1 	bne.w	800411c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6818      	ldr	r0, [r3, #0]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	6819      	ldr	r1, [r3, #0]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	461a      	mov	r2, r3
 8003de8:	f7ff fc20 	bl	800362c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	695a      	ldr	r2, [r3, #20]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	08db      	lsrs	r3, r3, #3
 8003df8:	f003 0303 	and.w	r3, r3, #3
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d00a      	beq.n	8003e24 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6818      	ldr	r0, [r3, #0]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	6919      	ldr	r1, [r3, #16]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e1e:	f7ff fb71 	bl	8003504 <LL_ADC_SetOffset>
 8003e22:	e17b      	b.n	800411c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2100      	movs	r1, #0
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff fb8e 	bl	800354c <LL_ADC_GetOffsetChannel>
 8003e30:	4603      	mov	r3, r0
 8003e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10a      	bne.n	8003e50 <HAL_ADC_ConfigChannel+0x148>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2100      	movs	r1, #0
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff fb83 	bl	800354c <LL_ADC_GetOffsetChannel>
 8003e46:	4603      	mov	r3, r0
 8003e48:	0e9b      	lsrs	r3, r3, #26
 8003e4a:	f003 021f 	and.w	r2, r3, #31
 8003e4e:	e01e      	b.n	8003e8e <HAL_ADC_ConfigChannel+0x186>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2100      	movs	r1, #0
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff fb78 	bl	800354c <LL_ADC_GetOffsetChannel>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e62:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e66:	fa93 f3a3 	rbit	r3, r3
 8003e6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003e76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003e7e:	2320      	movs	r3, #32
 8003e80:	e004      	b.n	8003e8c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003e82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e86:	fab3 f383 	clz	r3, r3
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d105      	bne.n	8003ea6 <HAL_ADC_ConfigChannel+0x19e>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	0e9b      	lsrs	r3, r3, #26
 8003ea0:	f003 031f 	and.w	r3, r3, #31
 8003ea4:	e018      	b.n	8003ed8 <HAL_ADC_ConfigChannel+0x1d0>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003eb2:	fa93 f3a3 	rbit	r3, r3
 8003eb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003eba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ebe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003ec2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003eca:	2320      	movs	r3, #32
 8003ecc:	e004      	b.n	8003ed8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003ece:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ed2:	fab3 f383 	clz	r3, r3
 8003ed6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d106      	bne.n	8003eea <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff fb47 	bl	8003578 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2101      	movs	r1, #1
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff fb2b 	bl	800354c <LL_ADC_GetOffsetChannel>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d10a      	bne.n	8003f16 <HAL_ADC_ConfigChannel+0x20e>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2101      	movs	r1, #1
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7ff fb20 	bl	800354c <LL_ADC_GetOffsetChannel>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	0e9b      	lsrs	r3, r3, #26
 8003f10:	f003 021f 	and.w	r2, r3, #31
 8003f14:	e01e      	b.n	8003f54 <HAL_ADC_ConfigChannel+0x24c>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff fb15 	bl	800354c <LL_ADC_GetOffsetChannel>
 8003f22:	4603      	mov	r3, r0
 8003f24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f2c:	fa93 f3a3 	rbit	r3, r3
 8003f30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003f34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003f3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003f44:	2320      	movs	r3, #32
 8003f46:	e004      	b.n	8003f52 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003f48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f4c:	fab3 f383 	clz	r3, r3
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d105      	bne.n	8003f6c <HAL_ADC_ConfigChannel+0x264>
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	0e9b      	lsrs	r3, r3, #26
 8003f66:	f003 031f 	and.w	r3, r3, #31
 8003f6a:	e018      	b.n	8003f9e <HAL_ADC_ConfigChannel+0x296>
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f78:	fa93 f3a3 	rbit	r3, r3
 8003f7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003f80:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003f84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003f88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003f90:	2320      	movs	r3, #32
 8003f92:	e004      	b.n	8003f9e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003f94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f98:	fab3 f383 	clz	r3, r3
 8003f9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d106      	bne.n	8003fb0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	2101      	movs	r1, #1
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7ff fae4 	bl	8003578 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2102      	movs	r1, #2
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7ff fac8 	bl	800354c <LL_ADC_GetOffsetChannel>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10a      	bne.n	8003fdc <HAL_ADC_ConfigChannel+0x2d4>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2102      	movs	r1, #2
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7ff fabd 	bl	800354c <LL_ADC_GetOffsetChannel>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	0e9b      	lsrs	r3, r3, #26
 8003fd6:	f003 021f 	and.w	r2, r3, #31
 8003fda:	e01e      	b.n	800401a <HAL_ADC_ConfigChannel+0x312>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2102      	movs	r1, #2
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff fab2 	bl	800354c <LL_ADC_GetOffsetChannel>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ff2:	fa93 f3a3 	rbit	r3, r3
 8003ff6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003ffa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ffe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004002:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800400a:	2320      	movs	r3, #32
 800400c:	e004      	b.n	8004018 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800400e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004012:	fab3 f383 	clz	r3, r3
 8004016:	b2db      	uxtb	r3, r3
 8004018:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004022:	2b00      	cmp	r3, #0
 8004024:	d105      	bne.n	8004032 <HAL_ADC_ConfigChannel+0x32a>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	0e9b      	lsrs	r3, r3, #26
 800402c:	f003 031f 	and.w	r3, r3, #31
 8004030:	e016      	b.n	8004060 <HAL_ADC_ConfigChannel+0x358>
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800403e:	fa93 f3a3 	rbit	r3, r3
 8004042:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004044:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004046:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800404a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8004052:	2320      	movs	r3, #32
 8004054:	e004      	b.n	8004060 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8004056:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800405a:	fab3 f383 	clz	r3, r3
 800405e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004060:	429a      	cmp	r2, r3
 8004062:	d106      	bne.n	8004072 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2200      	movs	r2, #0
 800406a:	2102      	movs	r1, #2
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff fa83 	bl	8003578 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2103      	movs	r1, #3
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff fa67 	bl	800354c <LL_ADC_GetOffsetChannel>
 800407e:	4603      	mov	r3, r0
 8004080:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10a      	bne.n	800409e <HAL_ADC_ConfigChannel+0x396>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2103      	movs	r1, #3
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff fa5c 	bl	800354c <LL_ADC_GetOffsetChannel>
 8004094:	4603      	mov	r3, r0
 8004096:	0e9b      	lsrs	r3, r3, #26
 8004098:	f003 021f 	and.w	r2, r3, #31
 800409c:	e017      	b.n	80040ce <HAL_ADC_ConfigChannel+0x3c6>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2103      	movs	r1, #3
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7ff fa51 	bl	800354c <LL_ADC_GetOffsetChannel>
 80040aa:	4603      	mov	r3, r0
 80040ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040b0:	fa93 f3a3 	rbit	r3, r3
 80040b4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80040b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040b8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80040ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80040c0:	2320      	movs	r3, #32
 80040c2:	e003      	b.n	80040cc <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80040c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040c6:	fab3 f383 	clz	r3, r3
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d105      	bne.n	80040e6 <HAL_ADC_ConfigChannel+0x3de>
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	0e9b      	lsrs	r3, r3, #26
 80040e0:	f003 031f 	and.w	r3, r3, #31
 80040e4:	e011      	b.n	800410a <HAL_ADC_ConfigChannel+0x402>
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040ee:	fa93 f3a3 	rbit	r3, r3
 80040f2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80040f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80040f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80040fe:	2320      	movs	r3, #32
 8004100:	e003      	b.n	800410a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004104:	fab3 f383 	clz	r3, r3
 8004108:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800410a:	429a      	cmp	r2, r3
 800410c:	d106      	bne.n	800411c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2200      	movs	r2, #0
 8004114:	2103      	movs	r1, #3
 8004116:	4618      	mov	r0, r3
 8004118:	f7ff fa2e 	bl	8003578 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff fb49 	bl	80037b8 <LL_ADC_IsEnabled>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	f040 813f 	bne.w	80043ac <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6818      	ldr	r0, [r3, #0]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	6819      	ldr	r1, [r3, #0]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	461a      	mov	r2, r3
 800413c:	f7ff faa2 	bl	8003684 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	4a8e      	ldr	r2, [pc, #568]	; (8004380 <HAL_ADC_ConfigChannel+0x678>)
 8004146:	4293      	cmp	r3, r2
 8004148:	f040 8130 	bne.w	80043ac <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10b      	bne.n	8004174 <HAL_ADC_ConfigChannel+0x46c>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	0e9b      	lsrs	r3, r3, #26
 8004162:	3301      	adds	r3, #1
 8004164:	f003 031f 	and.w	r3, r3, #31
 8004168:	2b09      	cmp	r3, #9
 800416a:	bf94      	ite	ls
 800416c:	2301      	movls	r3, #1
 800416e:	2300      	movhi	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	e019      	b.n	80041a8 <HAL_ADC_ConfigChannel+0x4a0>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800417c:	fa93 f3a3 	rbit	r3, r3
 8004180:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004182:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004184:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004186:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800418c:	2320      	movs	r3, #32
 800418e:	e003      	b.n	8004198 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004190:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004192:	fab3 f383 	clz	r3, r3
 8004196:	b2db      	uxtb	r3, r3
 8004198:	3301      	adds	r3, #1
 800419a:	f003 031f 	and.w	r3, r3, #31
 800419e:	2b09      	cmp	r3, #9
 80041a0:	bf94      	ite	ls
 80041a2:	2301      	movls	r3, #1
 80041a4:	2300      	movhi	r3, #0
 80041a6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d079      	beq.n	80042a0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d107      	bne.n	80041c8 <HAL_ADC_ConfigChannel+0x4c0>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	0e9b      	lsrs	r3, r3, #26
 80041be:	3301      	adds	r3, #1
 80041c0:	069b      	lsls	r3, r3, #26
 80041c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041c6:	e015      	b.n	80041f4 <HAL_ADC_ConfigChannel+0x4ec>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041d0:	fa93 f3a3 	rbit	r3, r3
 80041d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80041d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80041da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80041e0:	2320      	movs	r3, #32
 80041e2:	e003      	b.n	80041ec <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80041e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041e6:	fab3 f383 	clz	r3, r3
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	3301      	adds	r3, #1
 80041ee:	069b      	lsls	r3, r3, #26
 80041f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d109      	bne.n	8004214 <HAL_ADC_ConfigChannel+0x50c>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	0e9b      	lsrs	r3, r3, #26
 8004206:	3301      	adds	r3, #1
 8004208:	f003 031f 	and.w	r3, r3, #31
 800420c:	2101      	movs	r1, #1
 800420e:	fa01 f303 	lsl.w	r3, r1, r3
 8004212:	e017      	b.n	8004244 <HAL_ADC_ConfigChannel+0x53c>
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800421c:	fa93 f3a3 	rbit	r3, r3
 8004220:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004224:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004228:	2b00      	cmp	r3, #0
 800422a:	d101      	bne.n	8004230 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800422c:	2320      	movs	r3, #32
 800422e:	e003      	b.n	8004238 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004232:	fab3 f383 	clz	r3, r3
 8004236:	b2db      	uxtb	r3, r3
 8004238:	3301      	adds	r3, #1
 800423a:	f003 031f 	and.w	r3, r3, #31
 800423e:	2101      	movs	r1, #1
 8004240:	fa01 f303 	lsl.w	r3, r1, r3
 8004244:	ea42 0103 	orr.w	r1, r2, r3
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10a      	bne.n	800426a <HAL_ADC_ConfigChannel+0x562>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	0e9b      	lsrs	r3, r3, #26
 800425a:	3301      	adds	r3, #1
 800425c:	f003 021f 	and.w	r2, r3, #31
 8004260:	4613      	mov	r3, r2
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	4413      	add	r3, r2
 8004266:	051b      	lsls	r3, r3, #20
 8004268:	e018      	b.n	800429c <HAL_ADC_ConfigChannel+0x594>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004272:	fa93 f3a3 	rbit	r3, r3
 8004276:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800427a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800427c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004282:	2320      	movs	r3, #32
 8004284:	e003      	b.n	800428e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004288:	fab3 f383 	clz	r3, r3
 800428c:	b2db      	uxtb	r3, r3
 800428e:	3301      	adds	r3, #1
 8004290:	f003 021f 	and.w	r2, r3, #31
 8004294:	4613      	mov	r3, r2
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	4413      	add	r3, r2
 800429a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800429c:	430b      	orrs	r3, r1
 800429e:	e080      	b.n	80043a2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d107      	bne.n	80042bc <HAL_ADC_ConfigChannel+0x5b4>
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	0e9b      	lsrs	r3, r3, #26
 80042b2:	3301      	adds	r3, #1
 80042b4:	069b      	lsls	r3, r3, #26
 80042b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042ba:	e015      	b.n	80042e8 <HAL_ADC_ConfigChannel+0x5e0>
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c4:	fa93 f3a3 	rbit	r3, r3
 80042c8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80042ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042cc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80042ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80042d4:	2320      	movs	r3, #32
 80042d6:	e003      	b.n	80042e0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80042d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042da:	fab3 f383 	clz	r3, r3
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	3301      	adds	r3, #1
 80042e2:	069b      	lsls	r3, r3, #26
 80042e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d109      	bne.n	8004308 <HAL_ADC_ConfigChannel+0x600>
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	0e9b      	lsrs	r3, r3, #26
 80042fa:	3301      	adds	r3, #1
 80042fc:	f003 031f 	and.w	r3, r3, #31
 8004300:	2101      	movs	r1, #1
 8004302:	fa01 f303 	lsl.w	r3, r1, r3
 8004306:	e017      	b.n	8004338 <HAL_ADC_ConfigChannel+0x630>
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430e:	6a3b      	ldr	r3, [r7, #32]
 8004310:	fa93 f3a3 	rbit	r3, r3
 8004314:	61fb      	str	r3, [r7, #28]
  return result;
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004320:	2320      	movs	r3, #32
 8004322:	e003      	b.n	800432c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	fab3 f383 	clz	r3, r3
 800432a:	b2db      	uxtb	r3, r3
 800432c:	3301      	adds	r3, #1
 800432e:	f003 031f 	and.w	r3, r3, #31
 8004332:	2101      	movs	r1, #1
 8004334:	fa01 f303 	lsl.w	r3, r1, r3
 8004338:	ea42 0103 	orr.w	r1, r2, r3
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10d      	bne.n	8004364 <HAL_ADC_ConfigChannel+0x65c>
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	0e9b      	lsrs	r3, r3, #26
 800434e:	3301      	adds	r3, #1
 8004350:	f003 021f 	and.w	r2, r3, #31
 8004354:	4613      	mov	r3, r2
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	4413      	add	r3, r2
 800435a:	3b1e      	subs	r3, #30
 800435c:	051b      	lsls	r3, r3, #20
 800435e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004362:	e01d      	b.n	80043a0 <HAL_ADC_ConfigChannel+0x698>
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	fa93 f3a3 	rbit	r3, r3
 8004370:	613b      	str	r3, [r7, #16]
  return result;
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d103      	bne.n	8004384 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800437c:	2320      	movs	r3, #32
 800437e:	e005      	b.n	800438c <HAL_ADC_ConfigChannel+0x684>
 8004380:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	fab3 f383 	clz	r3, r3
 800438a:	b2db      	uxtb	r3, r3
 800438c:	3301      	adds	r3, #1
 800438e:	f003 021f 	and.w	r2, r3, #31
 8004392:	4613      	mov	r3, r2
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	4413      	add	r3, r2
 8004398:	3b1e      	subs	r3, #30
 800439a:	051b      	lsls	r3, r3, #20
 800439c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043a0:	430b      	orrs	r3, r1
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	6892      	ldr	r2, [r2, #8]
 80043a6:	4619      	mov	r1, r3
 80043a8:	f7ff f940 	bl	800362c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	4b3d      	ldr	r3, [pc, #244]	; (80044a8 <HAL_ADC_ConfigChannel+0x7a0>)
 80043b2:	4013      	ands	r3, r2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d06c      	beq.n	8004492 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043b8:	483c      	ldr	r0, [pc, #240]	; (80044ac <HAL_ADC_ConfigChannel+0x7a4>)
 80043ba:	f7ff f895 	bl	80034e8 <LL_ADC_GetCommonPathInternalCh>
 80043be:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a3a      	ldr	r2, [pc, #232]	; (80044b0 <HAL_ADC_ConfigChannel+0x7a8>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d127      	bne.n	800441c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80043cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d121      	bne.n	800441c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a35      	ldr	r2, [pc, #212]	; (80044b4 <HAL_ADC_ConfigChannel+0x7ac>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d157      	bne.n	8004492 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80043ea:	4619      	mov	r1, r3
 80043ec:	482f      	ldr	r0, [pc, #188]	; (80044ac <HAL_ADC_ConfigChannel+0x7a4>)
 80043ee:	f7ff f868 	bl	80034c2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043f2:	4b31      	ldr	r3, [pc, #196]	; (80044b8 <HAL_ADC_ConfigChannel+0x7b0>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	099b      	lsrs	r3, r3, #6
 80043f8:	4a30      	ldr	r2, [pc, #192]	; (80044bc <HAL_ADC_ConfigChannel+0x7b4>)
 80043fa:	fba2 2303 	umull	r2, r3, r2, r3
 80043fe:	099b      	lsrs	r3, r3, #6
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	4613      	mov	r3, r2
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	4413      	add	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800440c:	e002      	b.n	8004414 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	3b01      	subs	r3, #1
 8004412:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f9      	bne.n	800440e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800441a:	e03a      	b.n	8004492 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a27      	ldr	r2, [pc, #156]	; (80044c0 <HAL_ADC_ConfigChannel+0x7b8>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d113      	bne.n	800444e <HAL_ADC_ConfigChannel+0x746>
 8004426:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800442a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10d      	bne.n	800444e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a1f      	ldr	r2, [pc, #124]	; (80044b4 <HAL_ADC_ConfigChannel+0x7ac>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d12a      	bne.n	8004492 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800443c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004440:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004444:	4619      	mov	r1, r3
 8004446:	4819      	ldr	r0, [pc, #100]	; (80044ac <HAL_ADC_ConfigChannel+0x7a4>)
 8004448:	f7ff f83b 	bl	80034c2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800444c:	e021      	b.n	8004492 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a1c      	ldr	r2, [pc, #112]	; (80044c4 <HAL_ADC_ConfigChannel+0x7bc>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d11c      	bne.n	8004492 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004458:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800445c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d116      	bne.n	8004492 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a12      	ldr	r2, [pc, #72]	; (80044b4 <HAL_ADC_ConfigChannel+0x7ac>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d111      	bne.n	8004492 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800446e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004472:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004476:	4619      	mov	r1, r3
 8004478:	480c      	ldr	r0, [pc, #48]	; (80044ac <HAL_ADC_ConfigChannel+0x7a4>)
 800447a:	f7ff f822 	bl	80034c2 <LL_ADC_SetCommonPathInternalCh>
 800447e:	e008      	b.n	8004492 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004484:	f043 0220 	orr.w	r2, r3, #32
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800449a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800449e:	4618      	mov	r0, r3
 80044a0:	37d8      	adds	r7, #216	; 0xd8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	80080000 	.word	0x80080000
 80044ac:	50040300 	.word	0x50040300
 80044b0:	c7520000 	.word	0xc7520000
 80044b4:	50040000 	.word	0x50040000
 80044b8:	20000024 	.word	0x20000024
 80044bc:	053e2d63 	.word	0x053e2d63
 80044c0:	cb840000 	.word	0xcb840000
 80044c4:	80000001 	.word	0x80000001

080044c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff f96f 	bl	80037b8 <LL_ADC_IsEnabled>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d14d      	bne.n	800457c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689a      	ldr	r2, [r3, #8]
 80044e6:	4b28      	ldr	r3, [pc, #160]	; (8004588 <ADC_Enable+0xc0>)
 80044e8:	4013      	ands	r3, r2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00d      	beq.n	800450a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f2:	f043 0210 	orr.w	r2, r3, #16
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fe:	f043 0201 	orr.w	r2, r3, #1
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e039      	b.n	800457e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4618      	mov	r0, r3
 8004510:	f7ff f92a 	bl	8003768 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004514:	f7fe ffb6 	bl	8003484 <HAL_GetTick>
 8004518:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800451a:	e028      	b.n	800456e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff f949 	bl	80037b8 <LL_ADC_IsEnabled>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d104      	bne.n	8004536 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff f919 	bl	8003768 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004536:	f7fe ffa5 	bl	8003484 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d914      	bls.n	800456e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b01      	cmp	r3, #1
 8004550:	d00d      	beq.n	800456e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004556:	f043 0210 	orr.w	r2, r3, #16
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004562:	f043 0201 	orr.w	r2, r3, #1
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e007      	b.n	800457e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b01      	cmp	r3, #1
 800457a:	d1cf      	bne.n	800451c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	8000003f 	.word	0x8000003f

0800458c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff f920 	bl	80037de <LL_ADC_IsDisableOngoing>
 800459e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff f907 	bl	80037b8 <LL_ADC_IsEnabled>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d047      	beq.n	8004640 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d144      	bne.n	8004640 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f003 030d 	and.w	r3, r3, #13
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d10c      	bne.n	80045de <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7ff f8e1 	bl	8003790 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2203      	movs	r2, #3
 80045d4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80045d6:	f7fe ff55 	bl	8003484 <HAL_GetTick>
 80045da:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80045dc:	e029      	b.n	8004632 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e2:	f043 0210 	orr.w	r2, r3, #16
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ee:	f043 0201 	orr.w	r2, r3, #1
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e023      	b.n	8004642 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80045fa:	f7fe ff43 	bl	8003484 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d914      	bls.n	8004632 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00d      	beq.n	8004632 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461a:	f043 0210 	orr.w	r2, r3, #16
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004626:	f043 0201 	orr.w	r2, r3, #1
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e007      	b.n	8004642 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1dc      	bne.n	80045fa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <LL_ADC_StartCalibration>:
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
 8004652:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800465c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004666:	4313      	orrs	r3, r2
 8004668:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	609a      	str	r2, [r3, #8]
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <LL_ADC_IsCalibrationOnGoing>:
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800468c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004690:	d101      	bne.n	8004696 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004692:	2301      	movs	r3, #1
 8004694:	e000      	b.n	8004698 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80046ae:	2300      	movs	r3, #0
 80046b0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_ADCEx_Calibration_Start+0x1c>
 80046bc:	2302      	movs	r3, #2
 80046be:	e04d      	b.n	800475c <HAL_ADCEx_Calibration_Start+0xb8>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7ff ff5f 	bl	800458c <ADC_Disable>
 80046ce:	4603      	mov	r3, r0
 80046d0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d136      	bne.n	8004746 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80046e0:	f023 0302 	bic.w	r3, r3, #2
 80046e4:	f043 0202 	orr.w	r2, r3, #2
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6839      	ldr	r1, [r7, #0]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7ff ffa9 	bl	800464a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80046f8:	e014      	b.n	8004724 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	3301      	adds	r3, #1
 80046fe:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8004706:	d30d      	bcc.n	8004724 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470c:	f023 0312 	bic.w	r3, r3, #18
 8004710:	f043 0210 	orr.w	r2, r3, #16
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e01b      	b.n	800475c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4618      	mov	r0, r3
 800472a:	f7ff ffa7 	bl	800467c <LL_ADC_IsCalibrationOnGoing>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1e2      	bne.n	80046fa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004738:	f023 0303 	bic.w	r3, r3, #3
 800473c:	f043 0201 	orr.w	r2, r3, #1
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	655a      	str	r2, [r3, #84]	; 0x54
 8004744:	e005      	b.n	8004752 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474a:	f043 0210 	orr.w	r2, r3, #16
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800475a:	7bfb      	ldrb	r3, [r7, #15]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004774:	4b0c      	ldr	r3, [pc, #48]	; (80047a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004780:	4013      	ands	r3, r2
 8004782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800478c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004796:	4a04      	ldr	r2, [pc, #16]	; (80047a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	60d3      	str	r3, [r2, #12]
}
 800479c:	bf00      	nop
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	e000ed00 	.word	0xe000ed00

080047ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047b0:	4b04      	ldr	r3, [pc, #16]	; (80047c4 <__NVIC_GetPriorityGrouping+0x18>)
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	0a1b      	lsrs	r3, r3, #8
 80047b6:	f003 0307 	and.w	r3, r3, #7
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	e000ed00 	.word	0xe000ed00

080047c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	4603      	mov	r3, r0
 80047d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	db0b      	blt.n	80047f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047da:	79fb      	ldrb	r3, [r7, #7]
 80047dc:	f003 021f 	and.w	r2, r3, #31
 80047e0:	4907      	ldr	r1, [pc, #28]	; (8004800 <__NVIC_EnableIRQ+0x38>)
 80047e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e6:	095b      	lsrs	r3, r3, #5
 80047e8:	2001      	movs	r0, #1
 80047ea:	fa00 f202 	lsl.w	r2, r0, r2
 80047ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	e000e100 	.word	0xe000e100

08004804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	4603      	mov	r3, r0
 800480c:	6039      	str	r1, [r7, #0]
 800480e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004814:	2b00      	cmp	r3, #0
 8004816:	db0a      	blt.n	800482e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	b2da      	uxtb	r2, r3
 800481c:	490c      	ldr	r1, [pc, #48]	; (8004850 <__NVIC_SetPriority+0x4c>)
 800481e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004822:	0112      	lsls	r2, r2, #4
 8004824:	b2d2      	uxtb	r2, r2
 8004826:	440b      	add	r3, r1
 8004828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800482c:	e00a      	b.n	8004844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	b2da      	uxtb	r2, r3
 8004832:	4908      	ldr	r1, [pc, #32]	; (8004854 <__NVIC_SetPriority+0x50>)
 8004834:	79fb      	ldrb	r3, [r7, #7]
 8004836:	f003 030f 	and.w	r3, r3, #15
 800483a:	3b04      	subs	r3, #4
 800483c:	0112      	lsls	r2, r2, #4
 800483e:	b2d2      	uxtb	r2, r2
 8004840:	440b      	add	r3, r1
 8004842:	761a      	strb	r2, [r3, #24]
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	e000e100 	.word	0xe000e100
 8004854:	e000ed00 	.word	0xe000ed00

08004858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004858:	b480      	push	{r7}
 800485a:	b089      	sub	sp, #36	; 0x24
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	f1c3 0307 	rsb	r3, r3, #7
 8004872:	2b04      	cmp	r3, #4
 8004874:	bf28      	it	cs
 8004876:	2304      	movcs	r3, #4
 8004878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	3304      	adds	r3, #4
 800487e:	2b06      	cmp	r3, #6
 8004880:	d902      	bls.n	8004888 <NVIC_EncodePriority+0x30>
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	3b03      	subs	r3, #3
 8004886:	e000      	b.n	800488a <NVIC_EncodePriority+0x32>
 8004888:	2300      	movs	r3, #0
 800488a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800488c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	fa02 f303 	lsl.w	r3, r2, r3
 8004896:	43da      	mvns	r2, r3
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	401a      	ands	r2, r3
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	fa01 f303 	lsl.w	r3, r1, r3
 80048aa:	43d9      	mvns	r1, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048b0:	4313      	orrs	r3, r2
         );
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3724      	adds	r7, #36	; 0x24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
	...

080048c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	3b01      	subs	r3, #1
 80048cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048d0:	d301      	bcc.n	80048d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048d2:	2301      	movs	r3, #1
 80048d4:	e00f      	b.n	80048f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048d6:	4a0a      	ldr	r2, [pc, #40]	; (8004900 <SysTick_Config+0x40>)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3b01      	subs	r3, #1
 80048dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048de:	210f      	movs	r1, #15
 80048e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048e4:	f7ff ff8e 	bl	8004804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048e8:	4b05      	ldr	r3, [pc, #20]	; (8004900 <SysTick_Config+0x40>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048ee:	4b04      	ldr	r3, [pc, #16]	; (8004900 <SysTick_Config+0x40>)
 80048f0:	2207      	movs	r2, #7
 80048f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	e000e010 	.word	0xe000e010

08004904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7ff ff29 	bl	8004764 <__NVIC_SetPriorityGrouping>
}
 8004912:	bf00      	nop
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b086      	sub	sp, #24
 800491e:	af00      	add	r7, sp, #0
 8004920:	4603      	mov	r3, r0
 8004922:	60b9      	str	r1, [r7, #8]
 8004924:	607a      	str	r2, [r7, #4]
 8004926:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004928:	2300      	movs	r3, #0
 800492a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800492c:	f7ff ff3e 	bl	80047ac <__NVIC_GetPriorityGrouping>
 8004930:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	68b9      	ldr	r1, [r7, #8]
 8004936:	6978      	ldr	r0, [r7, #20]
 8004938:	f7ff ff8e 	bl	8004858 <NVIC_EncodePriority>
 800493c:	4602      	mov	r2, r0
 800493e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004942:	4611      	mov	r1, r2
 8004944:	4618      	mov	r0, r3
 8004946:	f7ff ff5d 	bl	8004804 <__NVIC_SetPriority>
}
 800494a:	bf00      	nop
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b082      	sub	sp, #8
 8004956:	af00      	add	r7, sp, #0
 8004958:	4603      	mov	r3, r0
 800495a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800495c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff ff31 	bl	80047c8 <__NVIC_EnableIRQ>
}
 8004966:	bf00      	nop
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b082      	sub	sp, #8
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7ff ffa2 	bl	80048c0 <SysTick_Config>
 800497c:	4603      	mov	r3, r0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e098      	b.n	8004acc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	4b4d      	ldr	r3, [pc, #308]	; (8004ad8 <HAL_DMA_Init+0x150>)
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d80f      	bhi.n	80049c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	461a      	mov	r2, r3
 80049ac:	4b4b      	ldr	r3, [pc, #300]	; (8004adc <HAL_DMA_Init+0x154>)
 80049ae:	4413      	add	r3, r2
 80049b0:	4a4b      	ldr	r2, [pc, #300]	; (8004ae0 <HAL_DMA_Init+0x158>)
 80049b2:	fba2 2303 	umull	r2, r3, r2, r3
 80049b6:	091b      	lsrs	r3, r3, #4
 80049b8:	009a      	lsls	r2, r3, #2
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a48      	ldr	r2, [pc, #288]	; (8004ae4 <HAL_DMA_Init+0x15c>)
 80049c2:	641a      	str	r2, [r3, #64]	; 0x40
 80049c4:	e00e      	b.n	80049e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	461a      	mov	r2, r3
 80049cc:	4b46      	ldr	r3, [pc, #280]	; (8004ae8 <HAL_DMA_Init+0x160>)
 80049ce:	4413      	add	r3, r2
 80049d0:	4a43      	ldr	r2, [pc, #268]	; (8004ae0 <HAL_DMA_Init+0x158>)
 80049d2:	fba2 2303 	umull	r2, r3, r2, r3
 80049d6:	091b      	lsrs	r3, r3, #4
 80049d8:	009a      	lsls	r2, r3, #2
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a42      	ldr	r2, [pc, #264]	; (8004aec <HAL_DMA_Init+0x164>)
 80049e2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80049fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004a08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a3e:	d039      	beq.n	8004ab4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a44:	4a27      	ldr	r2, [pc, #156]	; (8004ae4 <HAL_DMA_Init+0x15c>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d11a      	bne.n	8004a80 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004a4a:	4b29      	ldr	r3, [pc, #164]	; (8004af0 <HAL_DMA_Init+0x168>)
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a52:	f003 031c 	and.w	r3, r3, #28
 8004a56:	210f      	movs	r1, #15
 8004a58:	fa01 f303 	lsl.w	r3, r1, r3
 8004a5c:	43db      	mvns	r3, r3
 8004a5e:	4924      	ldr	r1, [pc, #144]	; (8004af0 <HAL_DMA_Init+0x168>)
 8004a60:	4013      	ands	r3, r2
 8004a62:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004a64:	4b22      	ldr	r3, [pc, #136]	; (8004af0 <HAL_DMA_Init+0x168>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6859      	ldr	r1, [r3, #4]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a70:	f003 031c 	and.w	r3, r3, #28
 8004a74:	fa01 f303 	lsl.w	r3, r1, r3
 8004a78:	491d      	ldr	r1, [pc, #116]	; (8004af0 <HAL_DMA_Init+0x168>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	600b      	str	r3, [r1, #0]
 8004a7e:	e019      	b.n	8004ab4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004a80:	4b1c      	ldr	r3, [pc, #112]	; (8004af4 <HAL_DMA_Init+0x16c>)
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a88:	f003 031c 	and.w	r3, r3, #28
 8004a8c:	210f      	movs	r1, #15
 8004a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a92:	43db      	mvns	r3, r3
 8004a94:	4917      	ldr	r1, [pc, #92]	; (8004af4 <HAL_DMA_Init+0x16c>)
 8004a96:	4013      	ands	r3, r2
 8004a98:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004a9a:	4b16      	ldr	r3, [pc, #88]	; (8004af4 <HAL_DMA_Init+0x16c>)
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6859      	ldr	r1, [r3, #4]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa6:	f003 031c 	and.w	r3, r3, #28
 8004aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8004aae:	4911      	ldr	r1, [pc, #68]	; (8004af4 <HAL_DMA_Init+0x16c>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	40020407 	.word	0x40020407
 8004adc:	bffdfff8 	.word	0xbffdfff8
 8004ae0:	cccccccd 	.word	0xcccccccd
 8004ae4:	40020000 	.word	0x40020000
 8004ae8:	bffdfbf8 	.word	0xbffdfbf8
 8004aec:	40020400 	.word	0x40020400
 8004af0:	400200a8 	.word	0x400200a8
 8004af4:	400204a8 	.word	0x400204a8

08004af8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
 8004b04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b06:	2300      	movs	r3, #0
 8004b08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d101      	bne.n	8004b18 <HAL_DMA_Start_IT+0x20>
 8004b14:	2302      	movs	r3, #2
 8004b16:	e04b      	b.n	8004bb0 <HAL_DMA_Start_IT+0xb8>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d13a      	bne.n	8004ba2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 0201 	bic.w	r2, r2, #1
 8004b48:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	68b9      	ldr	r1, [r7, #8]
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 f92f 	bl	8004db4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d008      	beq.n	8004b70 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f042 020e 	orr.w	r2, r2, #14
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	e00f      	b.n	8004b90 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0204 	bic.w	r2, r2, #4
 8004b7e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f042 020a 	orr.w	r2, r2, #10
 8004b8e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f042 0201 	orr.w	r2, r2, #1
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	e005      	b.n	8004bae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004baa:	2302      	movs	r3, #2
 8004bac:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3718      	adds	r7, #24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d005      	beq.n	8004bdc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2204      	movs	r2, #4
 8004bd4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	73fb      	strb	r3, [r7, #15]
 8004bda:	e029      	b.n	8004c30 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 020e 	bic.w	r2, r2, #14
 8004bea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 0201 	bic.w	r2, r2, #1
 8004bfa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c00:	f003 021c 	and.w	r2, r3, #28
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c08:	2101      	movs	r1, #1
 8004c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c0e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d003      	beq.n	8004c30 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	4798      	blx	r3
    }
  }
  return status;
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b084      	sub	sp, #16
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c56:	f003 031c 	and.w	r3, r3, #28
 8004c5a:	2204      	movs	r2, #4
 8004c5c:	409a      	lsls	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	4013      	ands	r3, r2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d026      	beq.n	8004cb4 <HAL_DMA_IRQHandler+0x7a>
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d021      	beq.n	8004cb4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0320 	and.w	r3, r3, #32
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d107      	bne.n	8004c8e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 0204 	bic.w	r2, r2, #4
 8004c8c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c92:	f003 021c 	and.w	r2, r3, #28
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	2104      	movs	r1, #4
 8004c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8004ca0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d071      	beq.n	8004d8e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004cb2:	e06c      	b.n	8004d8e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb8:	f003 031c 	and.w	r3, r3, #28
 8004cbc:	2202      	movs	r2, #2
 8004cbe:	409a      	lsls	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d02e      	beq.n	8004d26 <HAL_DMA_IRQHandler+0xec>
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d029      	beq.n	8004d26 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0320 	and.w	r3, r3, #32
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10b      	bne.n	8004cf8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 020a 	bic.w	r2, r2, #10
 8004cee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfc:	f003 021c 	and.w	r2, r3, #28
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d04:	2102      	movs	r1, #2
 8004d06:	fa01 f202 	lsl.w	r2, r1, r2
 8004d0a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d038      	beq.n	8004d8e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004d24:	e033      	b.n	8004d8e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2a:	f003 031c 	and.w	r3, r3, #28
 8004d2e:	2208      	movs	r2, #8
 8004d30:	409a      	lsls	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	4013      	ands	r3, r2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d02a      	beq.n	8004d90 <HAL_DMA_IRQHandler+0x156>
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	f003 0308 	and.w	r3, r3, #8
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d025      	beq.n	8004d90 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 020e 	bic.w	r2, r2, #14
 8004d52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d58:	f003 021c 	and.w	r2, r3, #28
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d60:	2101      	movs	r1, #1
 8004d62:	fa01 f202 	lsl.w	r2, r1, r2
 8004d66:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d004      	beq.n	8004d90 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004d8e:	bf00      	nop
 8004d90:	bf00      	nop
}
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004da6:	b2db      	uxtb	r3, r3
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
 8004dc0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc6:	f003 021c 	and.w	r2, r3, #28
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	2101      	movs	r1, #1
 8004dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8004dd4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	2b10      	cmp	r3, #16
 8004de4:	d108      	bne.n	8004df8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004df6:	e007      	b.n	8004e08 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	60da      	str	r2, [r3, #12]
}
 8004e08:	bf00      	nop
 8004e0a:	3714      	adds	r7, #20
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e22:	e148      	b.n	80050b6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	2101      	movs	r1, #1
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e30:	4013      	ands	r3, r2
 8004e32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 813a 	beq.w	80050b0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d00b      	beq.n	8004e5c <HAL_GPIO_Init+0x48>
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d007      	beq.n	8004e5c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e50:	2b11      	cmp	r3, #17
 8004e52:	d003      	beq.n	8004e5c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2b12      	cmp	r3, #18
 8004e5a:	d130      	bne.n	8004ebe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	2203      	movs	r2, #3
 8004e68:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6c:	43db      	mvns	r3, r3
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	4013      	ands	r3, r2
 8004e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	68da      	ldr	r2, [r3, #12]
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e92:	2201      	movs	r2, #1
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	43db      	mvns	r3, r3
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	091b      	lsrs	r3, r3, #4
 8004ea8:	f003 0201 	and.w	r2, r3, #1
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	2203      	movs	r2, #3
 8004eca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ece:	43db      	mvns	r3, r3
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d003      	beq.n	8004efe <HAL_GPIO_Init+0xea>
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	2b12      	cmp	r3, #18
 8004efc:	d123      	bne.n	8004f46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	08da      	lsrs	r2, r3, #3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	3208      	adds	r2, #8
 8004f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f003 0307 	and.w	r3, r3, #7
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	220f      	movs	r2, #15
 8004f16:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1a:	43db      	mvns	r3, r3
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	691a      	ldr	r2, [r3, #16]
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f003 0307 	and.w	r3, r3, #7
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	08da      	lsrs	r2, r3, #3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	3208      	adds	r2, #8
 8004f40:	6939      	ldr	r1, [r7, #16]
 8004f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	005b      	lsls	r3, r3, #1
 8004f50:	2203      	movs	r2, #3
 8004f52:	fa02 f303 	lsl.w	r3, r2, r3
 8004f56:	43db      	mvns	r3, r3
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f003 0203 	and.w	r2, r3, #3
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 8094 	beq.w	80050b0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f88:	4b52      	ldr	r3, [pc, #328]	; (80050d4 <HAL_GPIO_Init+0x2c0>)
 8004f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f8c:	4a51      	ldr	r2, [pc, #324]	; (80050d4 <HAL_GPIO_Init+0x2c0>)
 8004f8e:	f043 0301 	orr.w	r3, r3, #1
 8004f92:	6613      	str	r3, [r2, #96]	; 0x60
 8004f94:	4b4f      	ldr	r3, [pc, #316]	; (80050d4 <HAL_GPIO_Init+0x2c0>)
 8004f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	60bb      	str	r3, [r7, #8]
 8004f9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004fa0:	4a4d      	ldr	r2, [pc, #308]	; (80050d8 <HAL_GPIO_Init+0x2c4>)
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	089b      	lsrs	r3, r3, #2
 8004fa6:	3302      	adds	r3, #2
 8004fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f003 0303 	and.w	r3, r3, #3
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	220f      	movs	r2, #15
 8004fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbc:	43db      	mvns	r3, r3
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004fca:	d00d      	beq.n	8004fe8 <HAL_GPIO_Init+0x1d4>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a43      	ldr	r2, [pc, #268]	; (80050dc <HAL_GPIO_Init+0x2c8>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d007      	beq.n	8004fe4 <HAL_GPIO_Init+0x1d0>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a42      	ldr	r2, [pc, #264]	; (80050e0 <HAL_GPIO_Init+0x2cc>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d101      	bne.n	8004fe0 <HAL_GPIO_Init+0x1cc>
 8004fdc:	2302      	movs	r3, #2
 8004fde:	e004      	b.n	8004fea <HAL_GPIO_Init+0x1d6>
 8004fe0:	2307      	movs	r3, #7
 8004fe2:	e002      	b.n	8004fea <HAL_GPIO_Init+0x1d6>
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e000      	b.n	8004fea <HAL_GPIO_Init+0x1d6>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	f002 0203 	and.w	r2, r2, #3
 8004ff0:	0092      	lsls	r2, r2, #2
 8004ff2:	4093      	lsls	r3, r2
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004ffa:	4937      	ldr	r1, [pc, #220]	; (80050d8 <HAL_GPIO_Init+0x2c4>)
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	089b      	lsrs	r3, r3, #2
 8005000:	3302      	adds	r3, #2
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005008:	4b36      	ldr	r3, [pc, #216]	; (80050e4 <HAL_GPIO_Init+0x2d0>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	43db      	mvns	r3, r3
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	4013      	ands	r3, r2
 8005016:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d003      	beq.n	800502c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	4313      	orrs	r3, r2
 800502a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800502c:	4a2d      	ldr	r2, [pc, #180]	; (80050e4 <HAL_GPIO_Init+0x2d0>)
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8005032:	4b2c      	ldr	r3, [pc, #176]	; (80050e4 <HAL_GPIO_Init+0x2d0>)
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	43db      	mvns	r3, r3
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	4013      	ands	r3, r2
 8005040:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	4313      	orrs	r3, r2
 8005054:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005056:	4a23      	ldr	r2, [pc, #140]	; (80050e4 <HAL_GPIO_Init+0x2d0>)
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800505c:	4b21      	ldr	r3, [pc, #132]	; (80050e4 <HAL_GPIO_Init+0x2d0>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	43db      	mvns	r3, r3
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	4013      	ands	r3, r2
 800506a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d003      	beq.n	8005080 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	4313      	orrs	r3, r2
 800507e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005080:	4a18      	ldr	r2, [pc, #96]	; (80050e4 <HAL_GPIO_Init+0x2d0>)
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005086:	4b17      	ldr	r3, [pc, #92]	; (80050e4 <HAL_GPIO_Init+0x2d0>)
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	43db      	mvns	r3, r3
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	4013      	ands	r3, r2
 8005094:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d003      	beq.n	80050aa <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80050aa:	4a0e      	ldr	r2, [pc, #56]	; (80050e4 <HAL_GPIO_Init+0x2d0>)
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	3301      	adds	r3, #1
 80050b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	fa22 f303 	lsr.w	r3, r2, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f47f aeaf 	bne.w	8004e24 <HAL_GPIO_Init+0x10>
  }
}
 80050c6:	bf00      	nop
 80050c8:	bf00      	nop
 80050ca:	371c      	adds	r7, #28
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr
 80050d4:	40021000 	.word	0x40021000
 80050d8:	40010000 	.word	0x40010000
 80050dc:	48000400 	.word	0x48000400
 80050e0:	48000800 	.word	0x48000800
 80050e4:	40010400 	.word	0x40010400

080050e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	460b      	mov	r3, r1
 80050f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	691a      	ldr	r2, [r3, #16]
 80050f8:	887b      	ldrh	r3, [r7, #2]
 80050fa:	4013      	ands	r3, r2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d002      	beq.n	8005106 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005100:	2301      	movs	r3, #1
 8005102:	73fb      	strb	r3, [r7, #15]
 8005104:	e001      	b.n	800510a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005106:	2300      	movs	r3, #0
 8005108:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800510a:	7bfb      	ldrb	r3, [r7, #15]
}
 800510c:	4618      	mov	r0, r3
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	460b      	mov	r3, r1
 8005122:	807b      	strh	r3, [r7, #2]
 8005124:	4613      	mov	r3, r2
 8005126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005128:	787b      	ldrb	r3, [r7, #1]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800512e:	887a      	ldrh	r2, [r7, #2]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005134:	e002      	b.n	800513c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005136:	887a      	ldrh	r2, [r7, #2]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	4603      	mov	r3, r0
 8005150:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005152:	4b08      	ldr	r3, [pc, #32]	; (8005174 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005154:	695a      	ldr	r2, [r3, #20]
 8005156:	88fb      	ldrh	r3, [r7, #6]
 8005158:	4013      	ands	r3, r2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d006      	beq.n	800516c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800515e:	4a05      	ldr	r2, [pc, #20]	; (8005174 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005160:	88fb      	ldrh	r3, [r7, #6]
 8005162:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005164:	88fb      	ldrh	r3, [r7, #6]
 8005166:	4618      	mov	r0, r3
 8005168:	f000 f806 	bl	8005178 <HAL_GPIO_EXTI_Callback>
  }
}
 800516c:	bf00      	nop
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	40010400 	.word	0x40010400

08005178 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	4603      	mov	r3, r0
 8005180:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005182:	bf00      	nop
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b082      	sub	sp, #8
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e081      	b.n	80052a4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d106      	bne.n	80051ba <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f7fd fe23 	bl	8002e00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2224      	movs	r2, #36	; 0x24
 80051be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f022 0201 	bic.w	r2, r2, #1
 80051d0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80051de:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051ee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d107      	bne.n	8005208 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	689a      	ldr	r2, [r3, #8]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005204:	609a      	str	r2, [r3, #8]
 8005206:	e006      	b.n	8005216 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005214:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	2b02      	cmp	r3, #2
 800521c:	d104      	bne.n	8005228 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005226:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6812      	ldr	r2, [r2, #0]
 8005232:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800523a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68da      	ldr	r2, [r3, #12]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800524a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	691a      	ldr	r2, [r3, #16]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	ea42 0103 	orr.w	r1, r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	021a      	lsls	r2, r3, #8
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	69d9      	ldr	r1, [r3, #28]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1a      	ldr	r2, [r3, #32]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f042 0201 	orr.w	r2, r2, #1
 8005284:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2220      	movs	r2, #32
 8005290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b088      	sub	sp, #32
 80052b0:	af02      	add	r7, sp, #8
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	607a      	str	r2, [r7, #4]
 80052b6:	461a      	mov	r2, r3
 80052b8:	460b      	mov	r3, r1
 80052ba:	817b      	strh	r3, [r7, #10]
 80052bc:	4613      	mov	r3, r2
 80052be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b20      	cmp	r3, #32
 80052ca:	f040 80da 	bne.w	8005482 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d101      	bne.n	80052dc <HAL_I2C_Master_Transmit+0x30>
 80052d8:	2302      	movs	r3, #2
 80052da:	e0d3      	b.n	8005484 <HAL_I2C_Master_Transmit+0x1d8>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80052e4:	f7fe f8ce 	bl	8003484 <HAL_GetTick>
 80052e8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	2319      	movs	r3, #25
 80052f0:	2201      	movs	r2, #1
 80052f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f001 fafb 	bl	80068f2 <I2C_WaitOnFlagUntilTimeout>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e0be      	b.n	8005484 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2221      	movs	r2, #33	; 0x21
 800530a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2210      	movs	r2, #16
 8005312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	893a      	ldrh	r2, [r7, #8]
 8005326:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005332:	b29b      	uxth	r3, r3
 8005334:	2bff      	cmp	r3, #255	; 0xff
 8005336:	d90e      	bls.n	8005356 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	22ff      	movs	r2, #255	; 0xff
 800533c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005342:	b2da      	uxtb	r2, r3
 8005344:	8979      	ldrh	r1, [r7, #10]
 8005346:	4b51      	ldr	r3, [pc, #324]	; (800548c <HAL_I2C_Master_Transmit+0x1e0>)
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f001 fbf2 	bl	8006b38 <I2C_TransferConfig>
 8005354:	e06c      	b.n	8005430 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535a:	b29a      	uxth	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005364:	b2da      	uxtb	r2, r3
 8005366:	8979      	ldrh	r1, [r7, #10]
 8005368:	4b48      	ldr	r3, [pc, #288]	; (800548c <HAL_I2C_Master_Transmit+0x1e0>)
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f001 fbe1 	bl	8006b38 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005376:	e05b      	b.n	8005430 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	6a39      	ldr	r1, [r7, #32]
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f001 faf8 	bl	8006972 <I2C_WaitOnTXISFlagUntilTimeout>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d001      	beq.n	800538c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e07b      	b.n	8005484 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	781a      	ldrb	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	1c5a      	adds	r2, r3, #1
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	3b01      	subs	r3, #1
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d034      	beq.n	8005430 <HAL_I2C_Master_Transmit+0x184>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d130      	bne.n	8005430 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	9300      	str	r3, [sp, #0]
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	2200      	movs	r2, #0
 80053d6:	2180      	movs	r1, #128	; 0x80
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f001 fa8a 	bl	80068f2 <I2C_WaitOnFlagUntilTimeout>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d001      	beq.n	80053e8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e04d      	b.n	8005484 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	2bff      	cmp	r3, #255	; 0xff
 80053f0:	d90e      	bls.n	8005410 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	22ff      	movs	r2, #255	; 0xff
 80053f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	8979      	ldrh	r1, [r7, #10]
 8005400:	2300      	movs	r3, #0
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f001 fb95 	bl	8006b38 <I2C_TransferConfig>
 800540e:	e00f      	b.n	8005430 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005414:	b29a      	uxth	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800541e:	b2da      	uxtb	r2, r3
 8005420:	8979      	ldrh	r1, [r7, #10]
 8005422:	2300      	movs	r3, #0
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f001 fb84 	bl	8006b38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005434:	b29b      	uxth	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d19e      	bne.n	8005378 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	6a39      	ldr	r1, [r7, #32]
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f001 fad7 	bl	80069f2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e01a      	b.n	8005484 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2220      	movs	r2, #32
 8005454:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6859      	ldr	r1, [r3, #4]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	4b0b      	ldr	r3, [pc, #44]	; (8005490 <HAL_I2C_Master_Transmit+0x1e4>)
 8005462:	400b      	ands	r3, r1
 8005464:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2220      	movs	r2, #32
 800546a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800547e:	2300      	movs	r3, #0
 8005480:	e000      	b.n	8005484 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005482:	2302      	movs	r3, #2
  }
}
 8005484:	4618      	mov	r0, r3
 8005486:	3718      	adds	r7, #24
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	80002000 	.word	0x80002000
 8005490:	fe00e800 	.word	0xfe00e800

08005494 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b088      	sub	sp, #32
 8005498:	af02      	add	r7, sp, #8
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	607a      	str	r2, [r7, #4]
 800549e:	461a      	mov	r2, r3
 80054a0:	460b      	mov	r3, r1
 80054a2:	817b      	strh	r3, [r7, #10]
 80054a4:	4613      	mov	r3, r2
 80054a6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b20      	cmp	r3, #32
 80054b2:	d153      	bne.n	800555c <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054c2:	d101      	bne.n	80054c8 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 80054c4:	2302      	movs	r3, #2
 80054c6:	e04a      	b.n	800555e <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d101      	bne.n	80054d6 <HAL_I2C_Master_Transmit_IT+0x42>
 80054d2:	2302      	movs	r3, #2
 80054d4:	e043      	b.n	800555e <HAL_I2C_Master_Transmit_IT+0xca>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2221      	movs	r2, #33	; 0x21
 80054e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2210      	movs	r2, #16
 80054ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	893a      	ldrh	r2, [r7, #8]
 80054fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4a19      	ldr	r2, [pc, #100]	; (8005568 <HAL_I2C_Master_Transmit_IT+0xd4>)
 8005504:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	4a18      	ldr	r2, [pc, #96]	; (800556c <HAL_I2C_Master_Transmit_IT+0xd8>)
 800550a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005510:	b29b      	uxth	r3, r3
 8005512:	2bff      	cmp	r3, #255	; 0xff
 8005514:	d906      	bls.n	8005524 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	22ff      	movs	r2, #255	; 0xff
 800551a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800551c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005520:	617b      	str	r3, [r7, #20]
 8005522:	e007      	b.n	8005534 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005528:	b29a      	uxth	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800552e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005532:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005538:	b2da      	uxtb	r2, r3
 800553a:	8979      	ldrh	r1, [r7, #10]
 800553c:	4b0c      	ldr	r3, [pc, #48]	; (8005570 <HAL_I2C_Master_Transmit_IT+0xdc>)
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f001 faf8 	bl	8006b38 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005550:	2101      	movs	r1, #1
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f001 fb1e 	bl	8006b94 <I2C_Enable_IRQ>

    return HAL_OK;
 8005558:	2300      	movs	r3, #0
 800555a:	e000      	b.n	800555e <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 800555c:	2302      	movs	r3, #2
  }
}
 800555e:	4618      	mov	r0, r3
 8005560:	3718      	adds	r7, #24
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	ffff0000 	.word	0xffff0000
 800556c:	080057f3 	.word	0x080057f3
 8005570:	80002000 	.word	0x80002000

08005574 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af02      	add	r7, sp, #8
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	607a      	str	r2, [r7, #4]
 800557e:	461a      	mov	r2, r3
 8005580:	460b      	mov	r3, r1
 8005582:	817b      	strh	r3, [r7, #10]
 8005584:	4613      	mov	r3, r2
 8005586:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b20      	cmp	r3, #32
 8005592:	d153      	bne.n	800563c <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800559e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055a2:	d101      	bne.n	80055a8 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 80055a4:	2302      	movs	r3, #2
 80055a6:	e04a      	b.n	800563e <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d101      	bne.n	80055b6 <HAL_I2C_Master_Receive_IT+0x42>
 80055b2:	2302      	movs	r3, #2
 80055b4:	e043      	b.n	800563e <HAL_I2C_Master_Receive_IT+0xca>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2222      	movs	r2, #34	; 0x22
 80055c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2210      	movs	r2, #16
 80055ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	893a      	ldrh	r2, [r7, #8]
 80055de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4a19      	ldr	r2, [pc, #100]	; (8005648 <HAL_I2C_Master_Receive_IT+0xd4>)
 80055e4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	4a18      	ldr	r2, [pc, #96]	; (800564c <HAL_I2C_Master_Receive_IT+0xd8>)
 80055ea:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	2bff      	cmp	r3, #255	; 0xff
 80055f4:	d906      	bls.n	8005604 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	22ff      	movs	r2, #255	; 0xff
 80055fa:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80055fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	e007      	b.n	8005614 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005608:	b29a      	uxth	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800560e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005612:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005618:	b2da      	uxtb	r2, r3
 800561a:	8979      	ldrh	r1, [r7, #10]
 800561c:	4b0c      	ldr	r3, [pc, #48]	; (8005650 <HAL_I2C_Master_Receive_IT+0xdc>)
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f001 fa88 	bl	8006b38 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005630:	2102      	movs	r1, #2
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f001 faae 	bl	8006b94 <I2C_Enable_IRQ>

    return HAL_OK;
 8005638:	2300      	movs	r3, #0
 800563a:	e000      	b.n	800563e <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 800563c:	2302      	movs	r3, #2
  }
}
 800563e:	4618      	mov	r0, r3
 8005640:	3718      	adds	r7, #24
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	ffff0000 	.word	0xffff0000
 800564c:	080057f3 	.word	0x080057f3
 8005650:	80002400 	.word	0x80002400

08005654 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005670:	2b00      	cmp	r3, #0
 8005672:	d005      	beq.n	8005680 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	68f9      	ldr	r1, [r7, #12]
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	4798      	blx	r3
  }
}
 8005680:	bf00      	nop
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	0a1b      	lsrs	r3, r3, #8
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d010      	beq.n	80056ce <HAL_I2C_ER_IRQHandler+0x46>
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	09db      	lsrs	r3, r3, #7
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00a      	beq.n	80056ce <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056bc:	f043 0201 	orr.w	r2, r3, #1
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056cc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	0a9b      	lsrs	r3, r3, #10
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d010      	beq.n	80056fc <HAL_I2C_ER_IRQHandler+0x74>
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	09db      	lsrs	r3, r3, #7
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ea:	f043 0208 	orr.w	r2, r3, #8
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056fa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	0a5b      	lsrs	r3, r3, #9
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	2b00      	cmp	r3, #0
 8005706:	d010      	beq.n	800572a <HAL_I2C_ER_IRQHandler+0xa2>
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	09db      	lsrs	r3, r3, #7
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00a      	beq.n	800572a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005718:	f043 0202 	orr.w	r2, r3, #2
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005728:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800572e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f003 030b 	and.w	r3, r3, #11
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800573a:	68f9      	ldr	r1, [r7, #12]
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 ff9f 	bl	8006680 <I2C_ITError>
  }
}
 8005742:	bf00      	nop
 8005744:	3718      	adds	r7, #24
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800574a:	b480      	push	{r7}
 800574c:	b083      	sub	sp, #12
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005752:	bf00      	nop
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800575e:	b480      	push	{r7}
 8005760:	b083      	sub	sp, #12
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005766:	bf00      	nop
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005772:	b480      	push	{r7}
 8005774:	b083      	sub	sp, #12
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	460b      	mov	r3, r1
 800577c:	70fb      	strb	r3, [r7, #3]
 800577e:	4613      	mov	r3, r2
 8005780:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005782:	bf00      	nop
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800578e:	b480      	push	{r7}
 8005790:	b083      	sub	sp, #12
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005796:	bf00      	nop
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b083      	sub	sp, #12
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80057aa:	bf00      	nop
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b083      	sub	sp, #12
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80057be:	bf00      	nop
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b083      	sub	sp, #12
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80057d2:	bf00      	nop
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80057e6:	bf00      	nop
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b088      	sub	sp, #32
 80057f6:	af02      	add	r7, sp, #8
 80057f8:	60f8      	str	r0, [r7, #12]
 80057fa:	60b9      	str	r1, [r7, #8]
 80057fc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005808:	2b01      	cmp	r3, #1
 800580a:	d101      	bne.n	8005810 <I2C_Master_ISR_IT+0x1e>
 800580c:	2302      	movs	r3, #2
 800580e:	e114      	b.n	8005a3a <I2C_Master_ISR_IT+0x248>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	091b      	lsrs	r3, r3, #4
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b00      	cmp	r3, #0
 8005822:	d013      	beq.n	800584c <I2C_Master_ISR_IT+0x5a>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	091b      	lsrs	r3, r3, #4
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00d      	beq.n	800584c <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2210      	movs	r2, #16
 8005836:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800583c:	f043 0204 	orr.w	r2, r3, #4
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f001 f812 	bl	800686e <I2C_Flush_TXDR>
 800584a:	e0e1      	b.n	8005a10 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	089b      	lsrs	r3, r3, #2
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	2b00      	cmp	r3, #0
 8005856:	d023      	beq.n	80058a0 <I2C_Master_ISR_IT+0xae>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	089b      	lsrs	r3, r3, #2
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	2b00      	cmp	r3, #0
 8005862:	d01d      	beq.n	80058a0 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f023 0304 	bic.w	r3, r3, #4
 800586a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	b2d2      	uxtb	r2, r2
 8005878:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587e:	1c5a      	adds	r2, r3, #1
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005888:	3b01      	subs	r3, #1
 800588a:	b29a      	uxth	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005894:	b29b      	uxth	r3, r3
 8005896:	3b01      	subs	r3, #1
 8005898:	b29a      	uxth	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800589e:	e0b7      	b.n	8005a10 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	085b      	lsrs	r3, r3, #1
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d01e      	beq.n	80058ea <I2C_Master_ISR_IT+0xf8>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	085b      	lsrs	r3, r3, #1
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d018      	beq.n	80058ea <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	781a      	ldrb	r2, [r3, #0]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c8:	1c5a      	adds	r2, r3, #1
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058d2:	3b01      	subs	r3, #1
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058de:	b29b      	uxth	r3, r3
 80058e0:	3b01      	subs	r3, #1
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058e8:	e092      	b.n	8005a10 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	09db      	lsrs	r3, r3, #7
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d05d      	beq.n	80059b2 <I2C_Master_ISR_IT+0x1c0>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	099b      	lsrs	r3, r3, #6
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d057      	beq.n	80059b2 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005906:	b29b      	uxth	r3, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	d040      	beq.n	800598e <I2C_Master_ISR_IT+0x19c>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005910:	2b00      	cmp	r3, #0
 8005912:	d13c      	bne.n	800598e <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	b29b      	uxth	r3, r3
 800591c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005920:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005926:	b29b      	uxth	r3, r3
 8005928:	2bff      	cmp	r3, #255	; 0xff
 800592a:	d90e      	bls.n	800594a <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	22ff      	movs	r2, #255	; 0xff
 8005930:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005936:	b2da      	uxtb	r2, r3
 8005938:	8a79      	ldrh	r1, [r7, #18]
 800593a:	2300      	movs	r3, #0
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f001 f8f8 	bl	8006b38 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005948:	e032      	b.n	80059b0 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800594e:	b29a      	uxth	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005958:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800595c:	d00b      	beq.n	8005976 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005962:	b2da      	uxtb	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005968:	8a79      	ldrh	r1, [r7, #18]
 800596a:	2000      	movs	r0, #0
 800596c:	9000      	str	r0, [sp, #0]
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f001 f8e2 	bl	8006b38 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005974:	e01c      	b.n	80059b0 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800597a:	b2da      	uxtb	r2, r3
 800597c:	8a79      	ldrh	r1, [r7, #18]
 800597e:	2300      	movs	r3, #0
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f001 f8d6 	bl	8006b38 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800598c:	e010      	b.n	80059b0 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005998:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800599c:	d003      	beq.n	80059a6 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f000 fba9 	bl	80060f6 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059a4:	e034      	b.n	8005a10 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80059a6:	2140      	movs	r1, #64	; 0x40
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 fe69 	bl	8006680 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059ae:	e02f      	b.n	8005a10 <I2C_Master_ISR_IT+0x21e>
 80059b0:	e02e      	b.n	8005a10 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	099b      	lsrs	r3, r3, #6
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d028      	beq.n	8005a10 <I2C_Master_ISR_IT+0x21e>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	099b      	lsrs	r3, r3, #6
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d022      	beq.n	8005a10 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d119      	bne.n	8005a08 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059e2:	d015      	beq.n	8005a10 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059ec:	d108      	bne.n	8005a00 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059fc:	605a      	str	r2, [r3, #4]
 80059fe:	e007      	b.n	8005a10 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f000 fb78 	bl	80060f6 <I2C_ITMasterSeqCplt>
 8005a06:	e003      	b.n	8005a10 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005a08:	2140      	movs	r1, #64	; 0x40
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f000 fe38 	bl	8006680 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	095b      	lsrs	r3, r3, #5
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d009      	beq.n	8005a30 <I2C_Master_ISR_IT+0x23e>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	095b      	lsrs	r3, r3, #5
 8005a20:	f003 0301 	and.w	r3, r3, #1
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d003      	beq.n	8005a30 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005a28:	6979      	ldr	r1, [r7, #20]
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 fbfe 	bl	800622c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3718      	adds	r7, #24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b086      	sub	sp, #24
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	60f8      	str	r0, [r7, #12]
 8005a4a:	60b9      	str	r1, [r7, #8]
 8005a4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a52:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d101      	bne.n	8005a66 <I2C_Slave_ISR_IT+0x24>
 8005a62:	2302      	movs	r3, #2
 8005a64:	e0ec      	b.n	8005c40 <I2C_Slave_ISR_IT+0x1fe>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	095b      	lsrs	r3, r3, #5
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d009      	beq.n	8005a8e <I2C_Slave_ISR_IT+0x4c>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	095b      	lsrs	r3, r3, #5
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005a86:	6939      	ldr	r1, [r7, #16]
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f000 fc99 	bl	80063c0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	091b      	lsrs	r3, r3, #4
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d04d      	beq.n	8005b36 <I2C_Slave_ISR_IT+0xf4>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	091b      	lsrs	r3, r3, #4
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d047      	beq.n	8005b36 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d128      	bne.n	8005b02 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b28      	cmp	r3, #40	; 0x28
 8005aba:	d108      	bne.n	8005ace <I2C_Slave_ISR_IT+0x8c>
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ac2:	d104      	bne.n	8005ace <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005ac4:	6939      	ldr	r1, [r7, #16]
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 fd84 	bl	80065d4 <I2C_ITListenCplt>
 8005acc:	e032      	b.n	8005b34 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b29      	cmp	r3, #41	; 0x29
 8005ad8:	d10e      	bne.n	8005af8 <I2C_Slave_ISR_IT+0xb6>
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ae0:	d00a      	beq.n	8005af8 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2210      	movs	r2, #16
 8005ae8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f000 febf 	bl	800686e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f000 fb3d 	bl	8006170 <I2C_ITSlaveSeqCplt>
 8005af6:	e01d      	b.n	8005b34 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2210      	movs	r2, #16
 8005afe:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005b00:	e096      	b.n	8005c30 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2210      	movs	r2, #16
 8005b08:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b0e:	f043 0204 	orr.w	r2, r3, #4
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d004      	beq.n	8005b26 <I2C_Slave_ISR_IT+0xe4>
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b22:	f040 8085 	bne.w	8005c30 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 fda7 	bl	8006680 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005b32:	e07d      	b.n	8005c30 <I2C_Slave_ISR_IT+0x1ee>
 8005b34:	e07c      	b.n	8005c30 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	089b      	lsrs	r3, r3, #2
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d030      	beq.n	8005ba4 <I2C_Slave_ISR_IT+0x162>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	089b      	lsrs	r3, r3, #2
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d02a      	beq.n	8005ba4 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d018      	beq.n	8005b8a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b62:	b2d2      	uxtb	r2, r2
 8005b64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6a:	1c5a      	adds	r2, r3, #1
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b74:	3b01      	subs	r3, #1
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	3b01      	subs	r3, #1
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d14f      	bne.n	8005c34 <I2C_Slave_ISR_IT+0x1f2>
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b9a:	d04b      	beq.n	8005c34 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f000 fae7 	bl	8006170 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005ba2:	e047      	b.n	8005c34 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	08db      	lsrs	r3, r3, #3
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00a      	beq.n	8005bc6 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	08db      	lsrs	r3, r3, #3
 8005bb4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d004      	beq.n	8005bc6 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005bbc:	6939      	ldr	r1, [r7, #16]
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f000 fa15 	bl	8005fee <I2C_ITAddrCplt>
 8005bc4:	e037      	b.n	8005c36 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	085b      	lsrs	r3, r3, #1
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d031      	beq.n	8005c36 <I2C_Slave_ISR_IT+0x1f4>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	085b      	lsrs	r3, r3, #1
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d02b      	beq.n	8005c36 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d018      	beq.n	8005c1a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	781a      	ldrb	r2, [r3, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf8:	1c5a      	adds	r2, r3, #1
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	3b01      	subs	r3, #1
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c10:	3b01      	subs	r3, #1
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	851a      	strh	r2, [r3, #40]	; 0x28
 8005c18:	e00d      	b.n	8005c36 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c20:	d002      	beq.n	8005c28 <I2C_Slave_ISR_IT+0x1e6>
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d106      	bne.n	8005c36 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f000 faa1 	bl	8006170 <I2C_ITSlaveSeqCplt>
 8005c2e:	e002      	b.n	8005c36 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8005c30:	bf00      	nop
 8005c32:	e000      	b.n	8005c36 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8005c34:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b088      	sub	sp, #32
 8005c4c:	af02      	add	r7, sp, #8
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d101      	bne.n	8005c62 <I2C_Master_ISR_DMA+0x1a>
 8005c5e:	2302      	movs	r3, #2
 8005c60:	e0e1      	b.n	8005e26 <I2C_Master_ISR_DMA+0x1de>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	091b      	lsrs	r3, r3, #4
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d017      	beq.n	8005ca6 <I2C_Master_ISR_DMA+0x5e>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	091b      	lsrs	r3, r3, #4
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d011      	beq.n	8005ca6 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2210      	movs	r2, #16
 8005c88:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c8e:	f043 0204 	orr.w	r2, r3, #4
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005c96:	2120      	movs	r1, #32
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f000 ff7b 	bl	8006b94 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f000 fde5 	bl	800686e <I2C_Flush_TXDR>
 8005ca4:	e0ba      	b.n	8005e1c <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	09db      	lsrs	r3, r3, #7
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d072      	beq.n	8005d98 <I2C_Master_ISR_DMA+0x150>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	099b      	lsrs	r3, r3, #6
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d06c      	beq.n	8005d98 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ccc:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d04e      	beq.n	8005d76 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ce4:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	2bff      	cmp	r3, #255	; 0xff
 8005cee:	d906      	bls.n	8005cfe <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	22ff      	movs	r2, #255	; 0xff
 8005cf4:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8005cf6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005cfa:	617b      	str	r3, [r7, #20]
 8005cfc:	e010      	b.n	8005d20 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d10:	d003      	beq.n	8005d1a <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d16:	617b      	str	r3, [r7, #20]
 8005d18:	e002      	b.n	8005d20 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005d1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d1e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	8a79      	ldrh	r1, [r7, #18]
 8005d28:	2300      	movs	r3, #0
 8005d2a:	9300      	str	r3, [sp, #0]
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f000 ff02 	bl	8006b38 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b22      	cmp	r3, #34	; 0x22
 8005d50:	d108      	bne.n	8005d64 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d60:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005d62:	e05b      	b.n	8005e1c <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d72:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005d74:	e052      	b.n	8005e1c <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d84:	d003      	beq.n	8005d8e <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 f9b5 	bl	80060f6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005d8c:	e046      	b.n	8005e1c <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005d8e:	2140      	movs	r1, #64	; 0x40
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f000 fc75 	bl	8006680 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005d96:	e041      	b.n	8005e1c <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	099b      	lsrs	r3, r3, #6
 8005d9c:	f003 0301 	and.w	r3, r3, #1
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d029      	beq.n	8005df8 <I2C_Master_ISR_DMA+0x1b0>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	099b      	lsrs	r3, r3, #6
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d023      	beq.n	8005df8 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d119      	bne.n	8005dee <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005dc8:	d027      	beq.n	8005e1a <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005dd2:	d108      	bne.n	8005de6 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005de2:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005de4:	e019      	b.n	8005e1a <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f000 f985 	bl	80060f6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005dec:	e015      	b.n	8005e1a <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005dee:	2140      	movs	r1, #64	; 0x40
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 fc45 	bl	8006680 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005df6:	e010      	b.n	8005e1a <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	095b      	lsrs	r3, r3, #5
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00b      	beq.n	8005e1c <I2C_Master_ISR_DMA+0x1d4>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	095b      	lsrs	r3, r3, #5
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d005      	beq.n	8005e1c <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005e10:	68b9      	ldr	r1, [r7, #8]
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f000 fa0a 	bl	800622c <I2C_ITMasterCplt>
 8005e18:	e000      	b.n	8005e1c <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8005e1a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3718      	adds	r7, #24
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b088      	sub	sp, #32
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	60f8      	str	r0, [r7, #12]
 8005e36:	60b9      	str	r1, [r7, #8]
 8005e38:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3e:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005e40:	2300      	movs	r3, #0
 8005e42:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d101      	bne.n	8005e52 <I2C_Slave_ISR_DMA+0x24>
 8005e4e:	2302      	movs	r3, #2
 8005e50:	e0c9      	b.n	8005fe6 <I2C_Slave_ISR_DMA+0x1b8>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	095b      	lsrs	r3, r3, #5
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d009      	beq.n	8005e7a <I2C_Slave_ISR_DMA+0x4c>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	095b      	lsrs	r3, r3, #5
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005e72:	68b9      	ldr	r1, [r7, #8]
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f000 faa3 	bl	80063c0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	091b      	lsrs	r3, r3, #4
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f000 809a 	beq.w	8005fbc <I2C_Slave_ISR_DMA+0x18e>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	091b      	lsrs	r3, r3, #4
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 8093 	beq.w	8005fbc <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	0b9b      	lsrs	r3, r3, #14
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d105      	bne.n	8005eae <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	0bdb      	lsrs	r3, r3, #15
 8005ea6:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d07f      	beq.n	8005fae <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00d      	beq.n	8005ed2 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	0bdb      	lsrs	r3, r3, #15
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d007      	beq.n	8005ed2 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00d      	beq.n	8005ef6 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	0b9b      	lsrs	r3, r3, #14
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d007      	beq.n	8005ef6 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d128      	bne.n	8005f4e <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b28      	cmp	r3, #40	; 0x28
 8005f06:	d108      	bne.n	8005f1a <I2C_Slave_ISR_DMA+0xec>
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f0e:	d104      	bne.n	8005f1a <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005f10:	68b9      	ldr	r1, [r7, #8]
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f000 fb5e 	bl	80065d4 <I2C_ITListenCplt>
 8005f18:	e048      	b.n	8005fac <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b29      	cmp	r3, #41	; 0x29
 8005f24:	d10e      	bne.n	8005f44 <I2C_Slave_ISR_DMA+0x116>
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f2c:	d00a      	beq.n	8005f44 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2210      	movs	r2, #16
 8005f34:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 fc99 	bl	800686e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f000 f917 	bl	8006170 <I2C_ITSlaveSeqCplt>
 8005f42:	e033      	b.n	8005fac <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2210      	movs	r2, #16
 8005f4a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005f4c:	e034      	b.n	8005fb8 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2210      	movs	r2, #16
 8005f54:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f5a:	f043 0204 	orr.w	r2, r3, #4
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f68:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d003      	beq.n	8005f78 <I2C_Slave_ISR_DMA+0x14a>
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f76:	d11f      	bne.n	8005fb8 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005f78:	7dfb      	ldrb	r3, [r7, #23]
 8005f7a:	2b21      	cmp	r3, #33	; 0x21
 8005f7c:	d002      	beq.n	8005f84 <I2C_Slave_ISR_DMA+0x156>
 8005f7e:	7dfb      	ldrb	r3, [r7, #23]
 8005f80:	2b29      	cmp	r3, #41	; 0x29
 8005f82:	d103      	bne.n	8005f8c <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2221      	movs	r2, #33	; 0x21
 8005f88:	631a      	str	r2, [r3, #48]	; 0x30
 8005f8a:	e008      	b.n	8005f9e <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005f8c:	7dfb      	ldrb	r3, [r7, #23]
 8005f8e:	2b22      	cmp	r3, #34	; 0x22
 8005f90:	d002      	beq.n	8005f98 <I2C_Slave_ISR_DMA+0x16a>
 8005f92:	7dfb      	ldrb	r3, [r7, #23]
 8005f94:	2b2a      	cmp	r3, #42	; 0x2a
 8005f96:	d102      	bne.n	8005f9e <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2222      	movs	r2, #34	; 0x22
 8005f9c:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f000 fb6b 	bl	8006680 <I2C_ITError>
      if (treatdmanack == 1U)
 8005faa:	e005      	b.n	8005fb8 <I2C_Slave_ISR_DMA+0x18a>
 8005fac:	e004      	b.n	8005fb8 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2210      	movs	r2, #16
 8005fb4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005fb6:	e011      	b.n	8005fdc <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8005fb8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005fba:	e00f      	b.n	8005fdc <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	08db      	lsrs	r3, r3, #3
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d009      	beq.n	8005fdc <I2C_Slave_ISR_DMA+0x1ae>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	08db      	lsrs	r3, r3, #3
 8005fcc:	f003 0301 	and.w	r3, r3, #1
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d003      	beq.n	8005fdc <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8005fd4:	68b9      	ldr	r1, [r7, #8]
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f000 f809 	bl	8005fee <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3720      	adds	r7, #32
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b084      	sub	sp, #16
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
 8005ff6:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006004:	2b28      	cmp	r3, #40	; 0x28
 8006006:	d16a      	bne.n	80060de <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	0c1b      	lsrs	r3, r3, #16
 8006010:	b2db      	uxtb	r3, r3
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	0c1b      	lsrs	r3, r3, #16
 8006020:	b29b      	uxth	r3, r3
 8006022:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006026:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	b29b      	uxth	r3, r3
 8006030:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006034:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	b29b      	uxth	r3, r3
 800603e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006042:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	2b02      	cmp	r3, #2
 800604a:	d138      	bne.n	80060be <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800604c:	897b      	ldrh	r3, [r7, #10]
 800604e:	09db      	lsrs	r3, r3, #7
 8006050:	b29a      	uxth	r2, r3
 8006052:	89bb      	ldrh	r3, [r7, #12]
 8006054:	4053      	eors	r3, r2
 8006056:	b29b      	uxth	r3, r3
 8006058:	f003 0306 	and.w	r3, r3, #6
 800605c:	2b00      	cmp	r3, #0
 800605e:	d11c      	bne.n	800609a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006060:	897b      	ldrh	r3, [r7, #10]
 8006062:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006068:	1c5a      	adds	r2, r3, #1
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006072:	2b02      	cmp	r3, #2
 8006074:	d13b      	bne.n	80060ee <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2208      	movs	r2, #8
 8006082:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800608c:	89ba      	ldrh	r2, [r7, #12]
 800608e:	7bfb      	ldrb	r3, [r7, #15]
 8006090:	4619      	mov	r1, r3
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7ff fb6d 	bl	8005772 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006098:	e029      	b.n	80060ee <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800609a:	893b      	ldrh	r3, [r7, #8]
 800609c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800609e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fdda 	bl	8006c5c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80060b0:	89ba      	ldrh	r2, [r7, #12]
 80060b2:	7bfb      	ldrb	r3, [r7, #15]
 80060b4:	4619      	mov	r1, r3
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7ff fb5b 	bl	8005772 <HAL_I2C_AddrCallback>
}
 80060bc:	e017      	b.n	80060ee <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80060be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 fdca 	bl	8006c5c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80060d0:	89ba      	ldrh	r2, [r7, #12]
 80060d2:	7bfb      	ldrb	r3, [r7, #15]
 80060d4:	4619      	mov	r1, r3
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7ff fb4b 	bl	8005772 <HAL_I2C_AddrCallback>
}
 80060dc:	e007      	b.n	80060ee <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2208      	movs	r2, #8
 80060e4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80060ee:	bf00      	nop
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b082      	sub	sp, #8
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b21      	cmp	r3, #33	; 0x21
 8006110:	d115      	bne.n	800613e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2220      	movs	r2, #32
 8006116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2211      	movs	r2, #17
 800611e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006126:	2101      	movs	r1, #1
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 fd97 	bl	8006c5c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f7fc fbfe 	bl	8002938 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800613c:	e014      	b.n	8006168 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2220      	movs	r2, #32
 8006142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2212      	movs	r2, #18
 800614a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006152:	2102      	movs	r1, #2
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 fd81 	bl	8006c5c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f7fc fc14 	bl	8002990 <HAL_I2C_MasterRxCpltCallback>
}
 8006168:	bf00      	nop
 800616a:	3708      	adds	r7, #8
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	0b9b      	lsrs	r3, r3, #14
 800618c:	f003 0301 	and.w	r3, r3, #1
 8006190:	2b00      	cmp	r3, #0
 8006192:	d008      	beq.n	80061a6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80061a2:	601a      	str	r2, [r3, #0]
 80061a4:	e00d      	b.n	80061c2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	0bdb      	lsrs	r3, r3, #15
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d007      	beq.n	80061c2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061c0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	2b29      	cmp	r3, #41	; 0x29
 80061cc:	d112      	bne.n	80061f4 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2228      	movs	r2, #40	; 0x28
 80061d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2221      	movs	r2, #33	; 0x21
 80061da:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80061dc:	2101      	movs	r1, #1
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 fd3c 	bl	8006c5c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7ff faac 	bl	800574a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80061f2:	e017      	b.n	8006224 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b2a      	cmp	r3, #42	; 0x2a
 80061fe:	d111      	bne.n	8006224 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2228      	movs	r2, #40	; 0x28
 8006204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2222      	movs	r2, #34	; 0x22
 800620c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800620e:	2102      	movs	r1, #2
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 fd23 	bl	8006c5c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7ff fa9d 	bl	800575e <HAL_I2C_SlaveRxCpltCallback>
}
 8006224:	bf00      	nop
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2220      	movs	r2, #32
 8006240:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b21      	cmp	r3, #33	; 0x21
 800624c:	d107      	bne.n	800625e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800624e:	2101      	movs	r1, #1
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fd03 	bl	8006c5c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2211      	movs	r2, #17
 800625a:	631a      	str	r2, [r3, #48]	; 0x30
 800625c:	e00c      	b.n	8006278 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b22      	cmp	r3, #34	; 0x22
 8006268:	d106      	bne.n	8006278 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800626a:	2102      	movs	r1, #2
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 fcf5 	bl	8006c5c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2212      	movs	r2, #18
 8006276:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6859      	ldr	r1, [r3, #4]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	4b4d      	ldr	r3, [pc, #308]	; (80063b8 <I2C_ITMasterCplt+0x18c>)
 8006284:	400b      	ands	r3, r1
 8006286:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a4a      	ldr	r2, [pc, #296]	; (80063bc <I2C_ITMasterCplt+0x190>)
 8006292:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	091b      	lsrs	r3, r3, #4
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	2b00      	cmp	r3, #0
 800629e:	d009      	beq.n	80062b4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2210      	movs	r2, #16
 80062a6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ac:	f043 0204 	orr.w	r2, r3, #4
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b60      	cmp	r3, #96	; 0x60
 80062be:	d10b      	bne.n	80062d8 <I2C_ITMasterCplt+0xac>
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	089b      	lsrs	r3, r3, #2
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d005      	beq.n	80062d8 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80062d6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 fac8 	bl	800686e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	2b60      	cmp	r3, #96	; 0x60
 80062ee:	d002      	beq.n	80062f6 <I2C_ITMasterCplt+0xca>
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d006      	beq.n	8006304 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062fa:	4619      	mov	r1, r3
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f9bf 	bl	8006680 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006302:	e054      	b.n	80063ae <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800630a:	b2db      	uxtb	r3, r3
 800630c:	2b21      	cmp	r3, #33	; 0x21
 800630e:	d124      	bne.n	800635a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2220      	movs	r2, #32
 8006314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b40      	cmp	r3, #64	; 0x40
 8006328:	d10b      	bne.n	8006342 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7ff fa31 	bl	80057a2 <HAL_I2C_MemTxCpltCallback>
}
 8006340:	e035      	b.n	80063ae <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f7fc faf0 	bl	8002938 <HAL_I2C_MasterTxCpltCallback>
}
 8006358:	e029      	b.n	80063ae <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b22      	cmp	r3, #34	; 0x22
 8006364:	d123      	bne.n	80063ae <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2220      	movs	r2, #32
 800636a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b40      	cmp	r3, #64	; 0x40
 800637e:	d10b      	bne.n	8006398 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f7ff fa10 	bl	80057b6 <HAL_I2C_MemRxCpltCallback>
}
 8006396:	e00a      	b.n	80063ae <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f7fc faf1 	bl	8002990 <HAL_I2C_MasterRxCpltCallback>
}
 80063ae:	bf00      	nop
 80063b0:	3718      	adds	r7, #24
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	fe00e800 	.word	0xfe00e800
 80063bc:	ffff0000 	.word	0xffff0000

080063c0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063dc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2220      	movs	r2, #32
 80063e4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80063e6:	7bfb      	ldrb	r3, [r7, #15]
 80063e8:	2b21      	cmp	r3, #33	; 0x21
 80063ea:	d002      	beq.n	80063f2 <I2C_ITSlaveCplt+0x32>
 80063ec:	7bfb      	ldrb	r3, [r7, #15]
 80063ee:	2b29      	cmp	r3, #41	; 0x29
 80063f0:	d108      	bne.n	8006404 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80063f2:	f248 0101 	movw	r1, #32769	; 0x8001
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 fc30 	bl	8006c5c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2221      	movs	r2, #33	; 0x21
 8006400:	631a      	str	r2, [r3, #48]	; 0x30
 8006402:	e00d      	b.n	8006420 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006404:	7bfb      	ldrb	r3, [r7, #15]
 8006406:	2b22      	cmp	r3, #34	; 0x22
 8006408:	d002      	beq.n	8006410 <I2C_ITSlaveCplt+0x50>
 800640a:	7bfb      	ldrb	r3, [r7, #15]
 800640c:	2b2a      	cmp	r3, #42	; 0x2a
 800640e:	d107      	bne.n	8006420 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006410:	f248 0102 	movw	r1, #32770	; 0x8002
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 fc21 	bl	8006c5c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2222      	movs	r2, #34	; 0x22
 800641e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	685a      	ldr	r2, [r3, #4]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800642e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6859      	ldr	r1, [r3, #4]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	4b64      	ldr	r3, [pc, #400]	; (80065cc <I2C_ITSlaveCplt+0x20c>)
 800643c:	400b      	ands	r3, r1
 800643e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fa14 	bl	800686e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	0b9b      	lsrs	r3, r3, #14
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	2b00      	cmp	r3, #0
 8006450:	d013      	beq.n	800647a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006460:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006466:	2b00      	cmp	r3, #0
 8006468:	d020      	beq.n	80064ac <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	b29a      	uxth	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006478:	e018      	b.n	80064ac <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	0bdb      	lsrs	r3, r3, #15
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	2b00      	cmp	r3, #0
 8006484:	d012      	beq.n	80064ac <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006494:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800649a:	2b00      	cmp	r3, #0
 800649c:	d006      	beq.n	80064ac <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	089b      	lsrs	r3, r3, #2
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d020      	beq.n	80064fa <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	f023 0304 	bic.w	r3, r3, #4
 80064be:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ca:	b2d2      	uxtb	r2, r2
 80064cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d2:	1c5a      	adds	r2, r3, #1
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00c      	beq.n	80064fa <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064e4:	3b01      	subs	r3, #1
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	3b01      	subs	r3, #1
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064fe:	b29b      	uxth	r3, r3
 8006500:	2b00      	cmp	r3, #0
 8006502:	d005      	beq.n	8006510 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006508:	f043 0204 	orr.w	r2, r3, #4
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006522:	2b00      	cmp	r3, #0
 8006524:	d010      	beq.n	8006548 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800652a:	4619      	mov	r1, r3
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 f8a7 	bl	8006680 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b28      	cmp	r3, #40	; 0x28
 800653c:	d141      	bne.n	80065c2 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800653e:	6979      	ldr	r1, [r7, #20]
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 f847 	bl	80065d4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006546:	e03c      	b.n	80065c2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006550:	d014      	beq.n	800657c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7ff fe0c 	bl	8006170 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a1d      	ldr	r2, [pc, #116]	; (80065d0 <I2C_ITSlaveCplt+0x210>)
 800655c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2220      	movs	r2, #32
 8006562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f7ff f90a 	bl	800578e <HAL_I2C_ListenCpltCallback>
}
 800657a:	e022      	b.n	80065c2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b22      	cmp	r3, #34	; 0x22
 8006586:	d10e      	bne.n	80065a6 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2220      	movs	r2, #32
 800658c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f7ff f8dd 	bl	800575e <HAL_I2C_SlaveRxCpltCallback>
}
 80065a4:	e00d      	b.n	80065c2 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2220      	movs	r2, #32
 80065aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f7ff f8c4 	bl	800574a <HAL_I2C_SlaveTxCpltCallback>
}
 80065c2:	bf00      	nop
 80065c4:	3718      	adds	r7, #24
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	fe00e800 	.word	0xfe00e800
 80065d0:	ffff0000 	.word	0xffff0000

080065d4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a26      	ldr	r2, [pc, #152]	; (800667c <I2C_ITListenCplt+0xa8>)
 80065e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2220      	movs	r2, #32
 80065ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	089b      	lsrs	r3, r3, #2
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	2b00      	cmp	r3, #0
 800660a:	d022      	beq.n	8006652 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006616:	b2d2      	uxtb	r2, r2
 8006618:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661e:	1c5a      	adds	r2, r3, #1
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006628:	2b00      	cmp	r3, #0
 800662a:	d012      	beq.n	8006652 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006630:	3b01      	subs	r3, #1
 8006632:	b29a      	uxth	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663c:	b29b      	uxth	r3, r3
 800663e:	3b01      	subs	r3, #1
 8006640:	b29a      	uxth	r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800664a:	f043 0204 	orr.w	r2, r3, #4
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006652:	f248 0103 	movw	r1, #32771	; 0x8003
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fb00 	bl	8006c5c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2210      	movs	r2, #16
 8006662:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f7ff f88e 	bl	800578e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006672:	bf00      	nop
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	ffff0000 	.word	0xffff0000

08006680 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006690:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a5d      	ldr	r2, [pc, #372]	; (8006814 <I2C_ITError+0x194>)
 800669e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	431a      	orrs	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80066b2:	7bfb      	ldrb	r3, [r7, #15]
 80066b4:	2b28      	cmp	r3, #40	; 0x28
 80066b6:	d005      	beq.n	80066c4 <I2C_ITError+0x44>
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
 80066ba:	2b29      	cmp	r3, #41	; 0x29
 80066bc:	d002      	beq.n	80066c4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80066be:	7bfb      	ldrb	r3, [r7, #15]
 80066c0:	2b2a      	cmp	r3, #42	; 0x2a
 80066c2:	d10b      	bne.n	80066dc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80066c4:	2103      	movs	r1, #3
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 fac8 	bl	8006c5c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2228      	movs	r2, #40	; 0x28
 80066d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a50      	ldr	r2, [pc, #320]	; (8006818 <I2C_ITError+0x198>)
 80066d8:	635a      	str	r2, [r3, #52]	; 0x34
 80066da:	e011      	b.n	8006700 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80066dc:	f248 0103 	movw	r1, #32771	; 0x8003
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fabb 	bl	8006c5c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b60      	cmp	r3, #96	; 0x60
 80066f0:	d003      	beq.n	80066fa <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2220      	movs	r2, #32
 80066f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006704:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670a:	2b00      	cmp	r3, #0
 800670c:	d039      	beq.n	8006782 <I2C_ITError+0x102>
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	2b11      	cmp	r3, #17
 8006712:	d002      	beq.n	800671a <I2C_ITError+0x9a>
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	2b21      	cmp	r3, #33	; 0x21
 8006718:	d133      	bne.n	8006782 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006724:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006728:	d107      	bne.n	800673a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006738:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673e:	4618      	mov	r0, r3
 8006740:	f7fe fb2a 	bl	8004d98 <HAL_DMA_GetState>
 8006744:	4603      	mov	r3, r0
 8006746:	2b01      	cmp	r3, #1
 8006748:	d017      	beq.n	800677a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674e:	4a33      	ldr	r2, [pc, #204]	; (800681c <I2C_ITError+0x19c>)
 8006750:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675e:	4618      	mov	r0, r3
 8006760:	f7fe fa2a 	bl	8004bb8 <HAL_DMA_Abort_IT>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d04d      	beq.n	8006806 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006774:	4610      	mov	r0, r2
 8006776:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006778:	e045      	b.n	8006806 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f850 	bl	8006820 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006780:	e041      	b.n	8006806 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006786:	2b00      	cmp	r3, #0
 8006788:	d039      	beq.n	80067fe <I2C_ITError+0x17e>
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	2b12      	cmp	r3, #18
 800678e:	d002      	beq.n	8006796 <I2C_ITError+0x116>
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	2b22      	cmp	r3, #34	; 0x22
 8006794:	d133      	bne.n	80067fe <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067a4:	d107      	bne.n	80067b6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067b4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7fe faec 	bl	8004d98 <HAL_DMA_GetState>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d017      	beq.n	80067f6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ca:	4a14      	ldr	r2, [pc, #80]	; (800681c <I2C_ITError+0x19c>)
 80067cc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fe f9ec 	bl	8004bb8 <HAL_DMA_Abort_IT>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d011      	beq.n	800680a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80067f0:	4610      	mov	r0, r2
 80067f2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80067f4:	e009      	b.n	800680a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f812 	bl	8006820 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80067fc:	e005      	b.n	800680a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f80e 	bl	8006820 <I2C_TreatErrorCallback>
  }
}
 8006804:	e002      	b.n	800680c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006806:	bf00      	nop
 8006808:	e000      	b.n	800680c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800680a:	bf00      	nop
}
 800680c:	bf00      	nop
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	ffff0000 	.word	0xffff0000
 8006818:	08005a43 	.word	0x08005a43
 800681c:	080068b7 	.word	0x080068b7

08006820 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b60      	cmp	r3, #96	; 0x60
 8006832:	d10e      	bne.n	8006852 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2220      	movs	r2, #32
 8006838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f7fe ffc7 	bl	80057de <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006850:	e009      	b.n	8006866 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f7fe ffb2 	bl	80057ca <HAL_I2C_ErrorCallback>
}
 8006866:	bf00      	nop
 8006868:	3708      	adds	r7, #8
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800686e:	b480      	push	{r7}
 8006870:	b083      	sub	sp, #12
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b02      	cmp	r3, #2
 8006882:	d103      	bne.n	800688c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2200      	movs	r2, #0
 800688a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	f003 0301 	and.w	r3, r3, #1
 8006896:	2b01      	cmp	r3, #1
 8006898:	d007      	beq.n	80068aa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	699a      	ldr	r2, [r3, #24]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f042 0201 	orr.w	r2, r2, #1
 80068a8:	619a      	str	r2, [r3, #24]
  }
}
 80068aa:	bf00      	nop
 80068ac:	370c      	adds	r7, #12
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b084      	sub	sp, #16
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d003      	beq.n	80068d4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d0:	2200      	movs	r2, #0
 80068d2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d003      	beq.n	80068e4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e0:	2200      	movs	r2, #0
 80068e2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f7ff ff9b 	bl	8006820 <I2C_TreatErrorCallback>
}
 80068ea:	bf00      	nop
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b084      	sub	sp, #16
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	60f8      	str	r0, [r7, #12]
 80068fa:	60b9      	str	r1, [r7, #8]
 80068fc:	603b      	str	r3, [r7, #0]
 80068fe:	4613      	mov	r3, r2
 8006900:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006902:	e022      	b.n	800694a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800690a:	d01e      	beq.n	800694a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800690c:	f7fc fdba 	bl	8003484 <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	683a      	ldr	r2, [r7, #0]
 8006918:	429a      	cmp	r2, r3
 800691a:	d302      	bcc.n	8006922 <I2C_WaitOnFlagUntilTimeout+0x30>
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d113      	bne.n	800694a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006926:	f043 0220 	orr.w	r2, r3, #32
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2220      	movs	r2, #32
 8006932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e00f      	b.n	800696a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	699a      	ldr	r2, [r3, #24]
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	4013      	ands	r3, r2
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	429a      	cmp	r2, r3
 8006958:	bf0c      	ite	eq
 800695a:	2301      	moveq	r3, #1
 800695c:	2300      	movne	r3, #0
 800695e:	b2db      	uxtb	r3, r3
 8006960:	461a      	mov	r2, r3
 8006962:	79fb      	ldrb	r3, [r7, #7]
 8006964:	429a      	cmp	r2, r3
 8006966:	d0cd      	beq.n	8006904 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b084      	sub	sp, #16
 8006976:	af00      	add	r7, sp, #0
 8006978:	60f8      	str	r0, [r7, #12]
 800697a:	60b9      	str	r1, [r7, #8]
 800697c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800697e:	e02c      	b.n	80069da <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	68b9      	ldr	r1, [r7, #8]
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f000 f871 	bl	8006a6c <I2C_IsAcknowledgeFailed>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d001      	beq.n	8006994 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e02a      	b.n	80069ea <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800699a:	d01e      	beq.n	80069da <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800699c:	f7fc fd72 	bl	8003484 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d302      	bcc.n	80069b2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d113      	bne.n	80069da <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b6:	f043 0220 	orr.w	r2, r3, #32
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2220      	movs	r2, #32
 80069c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e007      	b.n	80069ea <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	f003 0302 	and.w	r3, r3, #2
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	d1cb      	bne.n	8006980 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b084      	sub	sp, #16
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	60f8      	str	r0, [r7, #12]
 80069fa:	60b9      	str	r1, [r7, #8]
 80069fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069fe:	e028      	b.n	8006a52 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	68b9      	ldr	r1, [r7, #8]
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f000 f831 	bl	8006a6c <I2C_IsAcknowledgeFailed>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e026      	b.n	8006a62 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a14:	f7fc fd36 	bl	8003484 <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d302      	bcc.n	8006a2a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d113      	bne.n	8006a52 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a2e:	f043 0220 	orr.w	r2, r3, #32
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2220      	movs	r2, #32
 8006a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e007      	b.n	8006a62 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	f003 0320 	and.w	r3, r3, #32
 8006a5c:	2b20      	cmp	r3, #32
 8006a5e:	d1cf      	bne.n	8006a00 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
	...

08006a6c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	f003 0310 	and.w	r3, r3, #16
 8006a82:	2b10      	cmp	r3, #16
 8006a84:	d151      	bne.n	8006b2a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a86:	e022      	b.n	8006ace <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a8e:	d01e      	beq.n	8006ace <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a90:	f7fc fcf8 	bl	8003484 <HAL_GetTick>
 8006a94:	4602      	mov	r2, r0
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d302      	bcc.n	8006aa6 <I2C_IsAcknowledgeFailed+0x3a>
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d113      	bne.n	8006ace <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aaa:	f043 0220 	orr.w	r2, r3, #32
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2220      	movs	r2, #32
 8006ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e02e      	b.n	8006b2c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	f003 0320 	and.w	r3, r3, #32
 8006ad8:	2b20      	cmp	r3, #32
 8006ada:	d1d5      	bne.n	8006a88 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2210      	movs	r2, #16
 8006ae2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2220      	movs	r2, #32
 8006aea:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f7ff febe 	bl	800686e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	6859      	ldr	r1, [r3, #4]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	4b0d      	ldr	r3, [pc, #52]	; (8006b34 <I2C_IsAcknowledgeFailed+0xc8>)
 8006afe:	400b      	ands	r3, r1
 8006b00:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b06:	f043 0204 	orr.w	r2, r3, #4
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2220      	movs	r2, #32
 8006b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e000      	b.n	8006b2c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	fe00e800 	.word	0xfe00e800

08006b38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	607b      	str	r3, [r7, #4]
 8006b42:	460b      	mov	r3, r1
 8006b44:	817b      	strh	r3, [r7, #10]
 8006b46:	4613      	mov	r3, r2
 8006b48:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	685a      	ldr	r2, [r3, #4]
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	0d5b      	lsrs	r3, r3, #21
 8006b54:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006b58:	4b0d      	ldr	r3, [pc, #52]	; (8006b90 <I2C_TransferConfig+0x58>)
 8006b5a:	430b      	orrs	r3, r1
 8006b5c:	43db      	mvns	r3, r3
 8006b5e:	ea02 0103 	and.w	r1, r2, r3
 8006b62:	897b      	ldrh	r3, [r7, #10]
 8006b64:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006b68:	7a7b      	ldrb	r3, [r7, #9]
 8006b6a:	041b      	lsls	r3, r3, #16
 8006b6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006b70:	431a      	orrs	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	431a      	orrs	r2, r3
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	431a      	orrs	r2, r3
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	430a      	orrs	r2, r1
 8006b80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006b82:	bf00      	nop
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	03ff63ff 	.word	0x03ff63ff

08006b94 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba8:	4a2a      	ldr	r2, [pc, #168]	; (8006c54 <I2C_Enable_IRQ+0xc0>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d004      	beq.n	8006bb8 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006bb2:	4a29      	ldr	r2, [pc, #164]	; (8006c58 <I2C_Enable_IRQ+0xc4>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d11d      	bne.n	8006bf4 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006bb8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	da03      	bge.n	8006bc8 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006bc6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006bc8:	887b      	ldrh	r3, [r7, #2]
 8006bca:	2b10      	cmp	r3, #16
 8006bcc:	d103      	bne.n	8006bd6 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006bd4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006bd6:	887b      	ldrh	r3, [r7, #2]
 8006bd8:	2b20      	cmp	r3, #32
 8006bda:	d103      	bne.n	8006be4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006be2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006be4:	887b      	ldrh	r3, [r7, #2]
 8006be6:	2b40      	cmp	r3, #64	; 0x40
 8006be8:	d125      	bne.n	8006c36 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bf0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006bf2:	e020      	b.n	8006c36 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006bf4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	da03      	bge.n	8006c04 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006c02:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006c04:	887b      	ldrh	r3, [r7, #2]
 8006c06:	f003 0301 	and.w	r3, r3, #1
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d003      	beq.n	8006c16 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8006c14:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006c16:	887b      	ldrh	r3, [r7, #2]
 8006c18:	f003 0302 	and.w	r3, r3, #2
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d003      	beq.n	8006c28 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8006c26:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006c28:	887b      	ldrh	r3, [r7, #2]
 8006c2a:	2b20      	cmp	r3, #32
 8006c2c:	d103      	bne.n	8006c36 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f043 0320 	orr.w	r3, r3, #32
 8006c34:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	6819      	ldr	r1, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	430a      	orrs	r2, r1
 8006c44:	601a      	str	r2, [r3, #0]
}
 8006c46:	bf00      	nop
 8006c48:	3714      	adds	r7, #20
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	08005c49 	.word	0x08005c49
 8006c58:	08005e2f 	.word	0x08005e2f

08006c5c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	460b      	mov	r3, r1
 8006c66:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006c6c:	887b      	ldrh	r3, [r7, #2]
 8006c6e:	f003 0301 	and.w	r3, r3, #1
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00f      	beq.n	8006c96 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8006c7c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006c8a:	2b28      	cmp	r3, #40	; 0x28
 8006c8c:	d003      	beq.n	8006c96 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006c94:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006c96:	887b      	ldrh	r3, [r7, #2]
 8006c98:	f003 0302 	and.w	r3, r3, #2
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00f      	beq.n	8006cc0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8006ca6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006cb4:	2b28      	cmp	r3, #40	; 0x28
 8006cb6:	d003      	beq.n	8006cc0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006cbe:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006cc0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	da03      	bge.n	8006cd0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006cce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006cd0:	887b      	ldrh	r3, [r7, #2]
 8006cd2:	2b10      	cmp	r3, #16
 8006cd4:	d103      	bne.n	8006cde <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006cdc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006cde:	887b      	ldrh	r3, [r7, #2]
 8006ce0:	2b20      	cmp	r3, #32
 8006ce2:	d103      	bne.n	8006cec <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f043 0320 	orr.w	r3, r3, #32
 8006cea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006cec:	887b      	ldrh	r3, [r7, #2]
 8006cee:	2b40      	cmp	r3, #64	; 0x40
 8006cf0:	d103      	bne.n	8006cfa <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cf8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	6819      	ldr	r1, [r3, #0]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	43da      	mvns	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	400a      	ands	r2, r1
 8006d0a:	601a      	str	r2, [r3, #0]
}
 8006d0c:	bf00      	nop
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	2b20      	cmp	r3, #32
 8006d2c:	d138      	bne.n	8006da0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d101      	bne.n	8006d3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006d38:	2302      	movs	r3, #2
 8006d3a:	e032      	b.n	8006da2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2224      	movs	r2, #36	; 0x24
 8006d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f022 0201 	bic.w	r2, r2, #1
 8006d5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6819      	ldr	r1, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f042 0201 	orr.w	r2, r2, #1
 8006d8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2220      	movs	r2, #32
 8006d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	e000      	b.n	8006da2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006da0:	2302      	movs	r3, #2
  }
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	370c      	adds	r7, #12
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr

08006dae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006dae:	b480      	push	{r7}
 8006db0:	b085      	sub	sp, #20
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
 8006db6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	2b20      	cmp	r3, #32
 8006dc2:	d139      	bne.n	8006e38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d101      	bne.n	8006dd2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006dce:	2302      	movs	r3, #2
 8006dd0:	e033      	b.n	8006e3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2224      	movs	r2, #36	; 0x24
 8006dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f022 0201 	bic.w	r2, r2, #1
 8006df0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006e00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	021b      	lsls	r3, r3, #8
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f042 0201 	orr.w	r2, r2, #1
 8006e22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2220      	movs	r2, #32
 8006e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e34:	2300      	movs	r3, #0
 8006e36:	e000      	b.n	8006e3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006e38:	2302      	movs	r3, #2
  }
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
	...

08006e48 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006e4c:	4b04      	ldr	r3, [pc, #16]	; (8006e60 <HAL_PWREx_GetVoltageRange+0x18>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	40007000 	.word	0x40007000

08006e64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e72:	d130      	bne.n	8006ed6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e74:	4b23      	ldr	r3, [pc, #140]	; (8006f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e80:	d038      	beq.n	8006ef4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e82:	4b20      	ldr	r3, [pc, #128]	; (8006f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006e8a:	4a1e      	ldr	r2, [pc, #120]	; (8006f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e90:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006e92:	4b1d      	ldr	r3, [pc, #116]	; (8006f08 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2232      	movs	r2, #50	; 0x32
 8006e98:	fb02 f303 	mul.w	r3, r2, r3
 8006e9c:	4a1b      	ldr	r2, [pc, #108]	; (8006f0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea2:	0c9b      	lsrs	r3, r3, #18
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ea8:	e002      	b.n	8006eb0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	3b01      	subs	r3, #1
 8006eae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006eb0:	4b14      	ldr	r3, [pc, #80]	; (8006f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006eb2:	695b      	ldr	r3, [r3, #20]
 8006eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ebc:	d102      	bne.n	8006ec4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1f2      	bne.n	8006eaa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006ec4:	4b0f      	ldr	r3, [pc, #60]	; (8006f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ec6:	695b      	ldr	r3, [r3, #20]
 8006ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ed0:	d110      	bne.n	8006ef4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e00f      	b.n	8006ef6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006ed6:	4b0b      	ldr	r3, [pc, #44]	; (8006f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ee2:	d007      	beq.n	8006ef4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006ee4:	4b07      	ldr	r3, [pc, #28]	; (8006f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006eec:	4a05      	ldr	r2, [pc, #20]	; (8006f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006eee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ef2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	40007000 	.word	0x40007000
 8006f08:	20000024 	.word	0x20000024
 8006f0c:	431bde83 	.word	0x431bde83

08006f10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b088      	sub	sp, #32
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d102      	bne.n	8006f24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	f000 bc11 	b.w	8007746 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f24:	4ba0      	ldr	r3, [pc, #640]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	f003 030c 	and.w	r3, r3, #12
 8006f2c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f2e:	4b9e      	ldr	r3, [pc, #632]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	f003 0303 	and.w	r3, r3, #3
 8006f36:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0310 	and.w	r3, r3, #16
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f000 80e4 	beq.w	800710e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d007      	beq.n	8006f5c <HAL_RCC_OscConfig+0x4c>
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	2b0c      	cmp	r3, #12
 8006f50:	f040 808b 	bne.w	800706a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	f040 8087 	bne.w	800706a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006f5c:	4b92      	ldr	r3, [pc, #584]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 0302 	and.w	r3, r3, #2
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d005      	beq.n	8006f74 <HAL_RCC_OscConfig+0x64>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	699b      	ldr	r3, [r3, #24]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d101      	bne.n	8006f74 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e3e8      	b.n	8007746 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a1a      	ldr	r2, [r3, #32]
 8006f78:	4b8b      	ldr	r3, [pc, #556]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0308 	and.w	r3, r3, #8
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d004      	beq.n	8006f8e <HAL_RCC_OscConfig+0x7e>
 8006f84:	4b88      	ldr	r3, [pc, #544]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f8c:	e005      	b.n	8006f9a <HAL_RCC_OscConfig+0x8a>
 8006f8e:	4b86      	ldr	r3, [pc, #536]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 8006f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f94:	091b      	lsrs	r3, r3, #4
 8006f96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d223      	bcs.n	8006fe6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f000 fd7a 	bl	8007a9c <RCC_SetFlashLatencyFromMSIRange>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d001      	beq.n	8006fb2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e3c9      	b.n	8007746 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006fb2:	4b7d      	ldr	r3, [pc, #500]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a7c      	ldr	r2, [pc, #496]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 8006fb8:	f043 0308 	orr.w	r3, r3, #8
 8006fbc:	6013      	str	r3, [r2, #0]
 8006fbe:	4b7a      	ldr	r3, [pc, #488]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a1b      	ldr	r3, [r3, #32]
 8006fca:	4977      	ldr	r1, [pc, #476]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006fd0:	4b75      	ldr	r3, [pc, #468]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	69db      	ldr	r3, [r3, #28]
 8006fdc:	021b      	lsls	r3, r3, #8
 8006fde:	4972      	ldr	r1, [pc, #456]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	604b      	str	r3, [r1, #4]
 8006fe4:	e025      	b.n	8007032 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006fe6:	4b70      	ldr	r3, [pc, #448]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a6f      	ldr	r2, [pc, #444]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 8006fec:	f043 0308 	orr.w	r3, r3, #8
 8006ff0:	6013      	str	r3, [r2, #0]
 8006ff2:	4b6d      	ldr	r3, [pc, #436]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	496a      	ldr	r1, [pc, #424]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 8007000:	4313      	orrs	r3, r2
 8007002:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007004:	4b68      	ldr	r3, [pc, #416]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	69db      	ldr	r3, [r3, #28]
 8007010:	021b      	lsls	r3, r3, #8
 8007012:	4965      	ldr	r1, [pc, #404]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 8007014:	4313      	orrs	r3, r2
 8007016:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d109      	bne.n	8007032 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	4618      	mov	r0, r3
 8007024:	f000 fd3a 	bl	8007a9c <RCC_SetFlashLatencyFromMSIRange>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d001      	beq.n	8007032 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e389      	b.n	8007746 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007032:	f000 fc6f 	bl	8007914 <HAL_RCC_GetSysClockFreq>
 8007036:	4602      	mov	r2, r0
 8007038:	4b5b      	ldr	r3, [pc, #364]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	091b      	lsrs	r3, r3, #4
 800703e:	f003 030f 	and.w	r3, r3, #15
 8007042:	495a      	ldr	r1, [pc, #360]	; (80071ac <HAL_RCC_OscConfig+0x29c>)
 8007044:	5ccb      	ldrb	r3, [r1, r3]
 8007046:	f003 031f 	and.w	r3, r3, #31
 800704a:	fa22 f303 	lsr.w	r3, r2, r3
 800704e:	4a58      	ldr	r2, [pc, #352]	; (80071b0 <HAL_RCC_OscConfig+0x2a0>)
 8007050:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007052:	4b58      	ldr	r3, [pc, #352]	; (80071b4 <HAL_RCC_OscConfig+0x2a4>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4618      	mov	r0, r3
 8007058:	f7fc f9c4 	bl	80033e4 <HAL_InitTick>
 800705c:	4603      	mov	r3, r0
 800705e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007060:	7bfb      	ldrb	r3, [r7, #15]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d052      	beq.n	800710c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8007066:	7bfb      	ldrb	r3, [r7, #15]
 8007068:	e36d      	b.n	8007746 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d032      	beq.n	80070d8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007072:	4b4d      	ldr	r3, [pc, #308]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a4c      	ldr	r2, [pc, #304]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 8007078:	f043 0301 	orr.w	r3, r3, #1
 800707c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800707e:	f7fc fa01 	bl	8003484 <HAL_GetTick>
 8007082:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007084:	e008      	b.n	8007098 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007086:	f7fc f9fd 	bl	8003484 <HAL_GetTick>
 800708a:	4602      	mov	r2, r0
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	2b02      	cmp	r3, #2
 8007092:	d901      	bls.n	8007098 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	e356      	b.n	8007746 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007098:	4b43      	ldr	r3, [pc, #268]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0302 	and.w	r3, r3, #2
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d0f0      	beq.n	8007086 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80070a4:	4b40      	ldr	r3, [pc, #256]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a3f      	ldr	r2, [pc, #252]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 80070aa:	f043 0308 	orr.w	r3, r3, #8
 80070ae:	6013      	str	r3, [r2, #0]
 80070b0:	4b3d      	ldr	r3, [pc, #244]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a1b      	ldr	r3, [r3, #32]
 80070bc:	493a      	ldr	r1, [pc, #232]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 80070be:	4313      	orrs	r3, r2
 80070c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80070c2:	4b39      	ldr	r3, [pc, #228]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	69db      	ldr	r3, [r3, #28]
 80070ce:	021b      	lsls	r3, r3, #8
 80070d0:	4935      	ldr	r1, [pc, #212]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 80070d2:	4313      	orrs	r3, r2
 80070d4:	604b      	str	r3, [r1, #4]
 80070d6:	e01a      	b.n	800710e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80070d8:	4b33      	ldr	r3, [pc, #204]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a32      	ldr	r2, [pc, #200]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 80070de:	f023 0301 	bic.w	r3, r3, #1
 80070e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80070e4:	f7fc f9ce 	bl	8003484 <HAL_GetTick>
 80070e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80070ea:	e008      	b.n	80070fe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80070ec:	f7fc f9ca 	bl	8003484 <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d901      	bls.n	80070fe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e323      	b.n	8007746 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80070fe:	4b2a      	ldr	r3, [pc, #168]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 0302 	and.w	r3, r3, #2
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1f0      	bne.n	80070ec <HAL_RCC_OscConfig+0x1dc>
 800710a:	e000      	b.n	800710e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800710c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0301 	and.w	r3, r3, #1
 8007116:	2b00      	cmp	r3, #0
 8007118:	d073      	beq.n	8007202 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	2b08      	cmp	r3, #8
 800711e:	d005      	beq.n	800712c <HAL_RCC_OscConfig+0x21c>
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	2b0c      	cmp	r3, #12
 8007124:	d10e      	bne.n	8007144 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	2b03      	cmp	r3, #3
 800712a:	d10b      	bne.n	8007144 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800712c:	4b1e      	ldr	r3, [pc, #120]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007134:	2b00      	cmp	r3, #0
 8007136:	d063      	beq.n	8007200 <HAL_RCC_OscConfig+0x2f0>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d15f      	bne.n	8007200 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e300      	b.n	8007746 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800714c:	d106      	bne.n	800715c <HAL_RCC_OscConfig+0x24c>
 800714e:	4b16      	ldr	r3, [pc, #88]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a15      	ldr	r2, [pc, #84]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 8007154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007158:	6013      	str	r3, [r2, #0]
 800715a:	e01d      	b.n	8007198 <HAL_RCC_OscConfig+0x288>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007164:	d10c      	bne.n	8007180 <HAL_RCC_OscConfig+0x270>
 8007166:	4b10      	ldr	r3, [pc, #64]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a0f      	ldr	r2, [pc, #60]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 800716c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007170:	6013      	str	r3, [r2, #0]
 8007172:	4b0d      	ldr	r3, [pc, #52]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a0c      	ldr	r2, [pc, #48]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 8007178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800717c:	6013      	str	r3, [r2, #0]
 800717e:	e00b      	b.n	8007198 <HAL_RCC_OscConfig+0x288>
 8007180:	4b09      	ldr	r3, [pc, #36]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a08      	ldr	r2, [pc, #32]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 8007186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800718a:	6013      	str	r3, [r2, #0]
 800718c:	4b06      	ldr	r3, [pc, #24]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a05      	ldr	r2, [pc, #20]	; (80071a8 <HAL_RCC_OscConfig+0x298>)
 8007192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d01b      	beq.n	80071d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071a0:	f7fc f970 	bl	8003484 <HAL_GetTick>
 80071a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80071a6:	e010      	b.n	80071ca <HAL_RCC_OscConfig+0x2ba>
 80071a8:	40021000 	.word	0x40021000
 80071ac:	0800b124 	.word	0x0800b124
 80071b0:	20000024 	.word	0x20000024
 80071b4:	20000028 	.word	0x20000028
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071b8:	f7fc f964 	bl	8003484 <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	2b64      	cmp	r3, #100	; 0x64
 80071c4:	d901      	bls.n	80071ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e2bd      	b.n	8007746 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80071ca:	4baf      	ldr	r3, [pc, #700]	; (8007488 <HAL_RCC_OscConfig+0x578>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d0f0      	beq.n	80071b8 <HAL_RCC_OscConfig+0x2a8>
 80071d6:	e014      	b.n	8007202 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071d8:	f7fc f954 	bl	8003484 <HAL_GetTick>
 80071dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80071de:	e008      	b.n	80071f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071e0:	f7fc f950 	bl	8003484 <HAL_GetTick>
 80071e4:	4602      	mov	r2, r0
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	2b64      	cmp	r3, #100	; 0x64
 80071ec:	d901      	bls.n	80071f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80071ee:	2303      	movs	r3, #3
 80071f0:	e2a9      	b.n	8007746 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80071f2:	4ba5      	ldr	r3, [pc, #660]	; (8007488 <HAL_RCC_OscConfig+0x578>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1f0      	bne.n	80071e0 <HAL_RCC_OscConfig+0x2d0>
 80071fe:	e000      	b.n	8007202 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f003 0302 	and.w	r3, r3, #2
 800720a:	2b00      	cmp	r3, #0
 800720c:	d060      	beq.n	80072d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	2b04      	cmp	r3, #4
 8007212:	d005      	beq.n	8007220 <HAL_RCC_OscConfig+0x310>
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	2b0c      	cmp	r3, #12
 8007218:	d119      	bne.n	800724e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	2b02      	cmp	r3, #2
 800721e:	d116      	bne.n	800724e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007220:	4b99      	ldr	r3, [pc, #612]	; (8007488 <HAL_RCC_OscConfig+0x578>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007228:	2b00      	cmp	r3, #0
 800722a:	d005      	beq.n	8007238 <HAL_RCC_OscConfig+0x328>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d101      	bne.n	8007238 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e286      	b.n	8007746 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007238:	4b93      	ldr	r3, [pc, #588]	; (8007488 <HAL_RCC_OscConfig+0x578>)
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	061b      	lsls	r3, r3, #24
 8007246:	4990      	ldr	r1, [pc, #576]	; (8007488 <HAL_RCC_OscConfig+0x578>)
 8007248:	4313      	orrs	r3, r2
 800724a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800724c:	e040      	b.n	80072d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d023      	beq.n	800729e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007256:	4b8c      	ldr	r3, [pc, #560]	; (8007488 <HAL_RCC_OscConfig+0x578>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a8b      	ldr	r2, [pc, #556]	; (8007488 <HAL_RCC_OscConfig+0x578>)
 800725c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007260:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007262:	f7fc f90f 	bl	8003484 <HAL_GetTick>
 8007266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007268:	e008      	b.n	800727c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800726a:	f7fc f90b 	bl	8003484 <HAL_GetTick>
 800726e:	4602      	mov	r2, r0
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	2b02      	cmp	r3, #2
 8007276:	d901      	bls.n	800727c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	e264      	b.n	8007746 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800727c:	4b82      	ldr	r3, [pc, #520]	; (8007488 <HAL_RCC_OscConfig+0x578>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007284:	2b00      	cmp	r3, #0
 8007286:	d0f0      	beq.n	800726a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007288:	4b7f      	ldr	r3, [pc, #508]	; (8007488 <HAL_RCC_OscConfig+0x578>)
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	061b      	lsls	r3, r3, #24
 8007296:	497c      	ldr	r1, [pc, #496]	; (8007488 <HAL_RCC_OscConfig+0x578>)
 8007298:	4313      	orrs	r3, r2
 800729a:	604b      	str	r3, [r1, #4]
 800729c:	e018      	b.n	80072d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800729e:	4b7a      	ldr	r3, [pc, #488]	; (8007488 <HAL_RCC_OscConfig+0x578>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a79      	ldr	r2, [pc, #484]	; (8007488 <HAL_RCC_OscConfig+0x578>)
 80072a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072aa:	f7fc f8eb 	bl	8003484 <HAL_GetTick>
 80072ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80072b0:	e008      	b.n	80072c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072b2:	f7fc f8e7 	bl	8003484 <HAL_GetTick>
 80072b6:	4602      	mov	r2, r0
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d901      	bls.n	80072c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e240      	b.n	8007746 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80072c4:	4b70      	ldr	r3, [pc, #448]	; (8007488 <HAL_RCC_OscConfig+0x578>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1f0      	bne.n	80072b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0308 	and.w	r3, r3, #8
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d03c      	beq.n	8007356 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	695b      	ldr	r3, [r3, #20]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d01c      	beq.n	800731e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072e4:	4b68      	ldr	r3, [pc, #416]	; (8007488 <HAL_RCC_OscConfig+0x578>)
 80072e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072ea:	4a67      	ldr	r2, [pc, #412]	; (8007488 <HAL_RCC_OscConfig+0x578>)
 80072ec:	f043 0301 	orr.w	r3, r3, #1
 80072f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072f4:	f7fc f8c6 	bl	8003484 <HAL_GetTick>
 80072f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80072fa:	e008      	b.n	800730e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072fc:	f7fc f8c2 	bl	8003484 <HAL_GetTick>
 8007300:	4602      	mov	r2, r0
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	2b02      	cmp	r3, #2
 8007308:	d901      	bls.n	800730e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e21b      	b.n	8007746 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800730e:	4b5e      	ldr	r3, [pc, #376]	; (8007488 <HAL_RCC_OscConfig+0x578>)
 8007310:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007314:	f003 0302 	and.w	r3, r3, #2
 8007318:	2b00      	cmp	r3, #0
 800731a:	d0ef      	beq.n	80072fc <HAL_RCC_OscConfig+0x3ec>
 800731c:	e01b      	b.n	8007356 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800731e:	4b5a      	ldr	r3, [pc, #360]	; (8007488 <HAL_RCC_OscConfig+0x578>)
 8007320:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007324:	4a58      	ldr	r2, [pc, #352]	; (8007488 <HAL_RCC_OscConfig+0x578>)
 8007326:	f023 0301 	bic.w	r3, r3, #1
 800732a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800732e:	f7fc f8a9 	bl	8003484 <HAL_GetTick>
 8007332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007334:	e008      	b.n	8007348 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007336:	f7fc f8a5 	bl	8003484 <HAL_GetTick>
 800733a:	4602      	mov	r2, r0
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	2b02      	cmp	r3, #2
 8007342:	d901      	bls.n	8007348 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	e1fe      	b.n	8007746 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007348:	4b4f      	ldr	r3, [pc, #316]	; (8007488 <HAL_RCC_OscConfig+0x578>)
 800734a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800734e:	f003 0302 	and.w	r3, r3, #2
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1ef      	bne.n	8007336 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 0304 	and.w	r3, r3, #4
 800735e:	2b00      	cmp	r3, #0
 8007360:	f000 80a6 	beq.w	80074b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007364:	2300      	movs	r3, #0
 8007366:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007368:	4b47      	ldr	r3, [pc, #284]	; (8007488 <HAL_RCC_OscConfig+0x578>)
 800736a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800736c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007370:	2b00      	cmp	r3, #0
 8007372:	d10d      	bne.n	8007390 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007374:	4b44      	ldr	r3, [pc, #272]	; (8007488 <HAL_RCC_OscConfig+0x578>)
 8007376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007378:	4a43      	ldr	r2, [pc, #268]	; (8007488 <HAL_RCC_OscConfig+0x578>)
 800737a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800737e:	6593      	str	r3, [r2, #88]	; 0x58
 8007380:	4b41      	ldr	r3, [pc, #260]	; (8007488 <HAL_RCC_OscConfig+0x578>)
 8007382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007388:	60bb      	str	r3, [r7, #8]
 800738a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800738c:	2301      	movs	r3, #1
 800738e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007390:	4b3e      	ldr	r3, [pc, #248]	; (800748c <HAL_RCC_OscConfig+0x57c>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007398:	2b00      	cmp	r3, #0
 800739a:	d118      	bne.n	80073ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800739c:	4b3b      	ldr	r3, [pc, #236]	; (800748c <HAL_RCC_OscConfig+0x57c>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a3a      	ldr	r2, [pc, #232]	; (800748c <HAL_RCC_OscConfig+0x57c>)
 80073a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073a8:	f7fc f86c 	bl	8003484 <HAL_GetTick>
 80073ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073ae:	e008      	b.n	80073c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073b0:	f7fc f868 	bl	8003484 <HAL_GetTick>
 80073b4:	4602      	mov	r2, r0
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d901      	bls.n	80073c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e1c1      	b.n	8007746 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073c2:	4b32      	ldr	r3, [pc, #200]	; (800748c <HAL_RCC_OscConfig+0x57c>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d0f0      	beq.n	80073b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d108      	bne.n	80073e8 <HAL_RCC_OscConfig+0x4d8>
 80073d6:	4b2c      	ldr	r3, [pc, #176]	; (8007488 <HAL_RCC_OscConfig+0x578>)
 80073d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073dc:	4a2a      	ldr	r2, [pc, #168]	; (8007488 <HAL_RCC_OscConfig+0x578>)
 80073de:	f043 0301 	orr.w	r3, r3, #1
 80073e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80073e6:	e024      	b.n	8007432 <HAL_RCC_OscConfig+0x522>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	2b05      	cmp	r3, #5
 80073ee:	d110      	bne.n	8007412 <HAL_RCC_OscConfig+0x502>
 80073f0:	4b25      	ldr	r3, [pc, #148]	; (8007488 <HAL_RCC_OscConfig+0x578>)
 80073f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073f6:	4a24      	ldr	r2, [pc, #144]	; (8007488 <HAL_RCC_OscConfig+0x578>)
 80073f8:	f043 0304 	orr.w	r3, r3, #4
 80073fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007400:	4b21      	ldr	r3, [pc, #132]	; (8007488 <HAL_RCC_OscConfig+0x578>)
 8007402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007406:	4a20      	ldr	r2, [pc, #128]	; (8007488 <HAL_RCC_OscConfig+0x578>)
 8007408:	f043 0301 	orr.w	r3, r3, #1
 800740c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007410:	e00f      	b.n	8007432 <HAL_RCC_OscConfig+0x522>
 8007412:	4b1d      	ldr	r3, [pc, #116]	; (8007488 <HAL_RCC_OscConfig+0x578>)
 8007414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007418:	4a1b      	ldr	r2, [pc, #108]	; (8007488 <HAL_RCC_OscConfig+0x578>)
 800741a:	f023 0301 	bic.w	r3, r3, #1
 800741e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007422:	4b19      	ldr	r3, [pc, #100]	; (8007488 <HAL_RCC_OscConfig+0x578>)
 8007424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007428:	4a17      	ldr	r2, [pc, #92]	; (8007488 <HAL_RCC_OscConfig+0x578>)
 800742a:	f023 0304 	bic.w	r3, r3, #4
 800742e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d016      	beq.n	8007468 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800743a:	f7fc f823 	bl	8003484 <HAL_GetTick>
 800743e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007440:	e00a      	b.n	8007458 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007442:	f7fc f81f 	bl	8003484 <HAL_GetTick>
 8007446:	4602      	mov	r2, r0
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007450:	4293      	cmp	r3, r2
 8007452:	d901      	bls.n	8007458 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8007454:	2303      	movs	r3, #3
 8007456:	e176      	b.n	8007746 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007458:	4b0b      	ldr	r3, [pc, #44]	; (8007488 <HAL_RCC_OscConfig+0x578>)
 800745a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800745e:	f003 0302 	and.w	r3, r3, #2
 8007462:	2b00      	cmp	r3, #0
 8007464:	d0ed      	beq.n	8007442 <HAL_RCC_OscConfig+0x532>
 8007466:	e01a      	b.n	800749e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007468:	f7fc f80c 	bl	8003484 <HAL_GetTick>
 800746c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800746e:	e00f      	b.n	8007490 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007470:	f7fc f808 	bl	8003484 <HAL_GetTick>
 8007474:	4602      	mov	r2, r0
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	f241 3288 	movw	r2, #5000	; 0x1388
 800747e:	4293      	cmp	r3, r2
 8007480:	d906      	bls.n	8007490 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	e15f      	b.n	8007746 <HAL_RCC_OscConfig+0x836>
 8007486:	bf00      	nop
 8007488:	40021000 	.word	0x40021000
 800748c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007490:	4baa      	ldr	r3, [pc, #680]	; (800773c <HAL_RCC_OscConfig+0x82c>)
 8007492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007496:	f003 0302 	and.w	r3, r3, #2
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1e8      	bne.n	8007470 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800749e:	7ffb      	ldrb	r3, [r7, #31]
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d105      	bne.n	80074b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074a4:	4ba5      	ldr	r3, [pc, #660]	; (800773c <HAL_RCC_OscConfig+0x82c>)
 80074a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074a8:	4aa4      	ldr	r2, [pc, #656]	; (800773c <HAL_RCC_OscConfig+0x82c>)
 80074aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0320 	and.w	r3, r3, #32
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d03c      	beq.n	8007536 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d01c      	beq.n	80074fe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80074c4:	4b9d      	ldr	r3, [pc, #628]	; (800773c <HAL_RCC_OscConfig+0x82c>)
 80074c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80074ca:	4a9c      	ldr	r2, [pc, #624]	; (800773c <HAL_RCC_OscConfig+0x82c>)
 80074cc:	f043 0301 	orr.w	r3, r3, #1
 80074d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074d4:	f7fb ffd6 	bl	8003484 <HAL_GetTick>
 80074d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80074da:	e008      	b.n	80074ee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80074dc:	f7fb ffd2 	bl	8003484 <HAL_GetTick>
 80074e0:	4602      	mov	r2, r0
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d901      	bls.n	80074ee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80074ea:	2303      	movs	r3, #3
 80074ec:	e12b      	b.n	8007746 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80074ee:	4b93      	ldr	r3, [pc, #588]	; (800773c <HAL_RCC_OscConfig+0x82c>)
 80074f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80074f4:	f003 0302 	and.w	r3, r3, #2
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d0ef      	beq.n	80074dc <HAL_RCC_OscConfig+0x5cc>
 80074fc:	e01b      	b.n	8007536 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80074fe:	4b8f      	ldr	r3, [pc, #572]	; (800773c <HAL_RCC_OscConfig+0x82c>)
 8007500:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007504:	4a8d      	ldr	r2, [pc, #564]	; (800773c <HAL_RCC_OscConfig+0x82c>)
 8007506:	f023 0301 	bic.w	r3, r3, #1
 800750a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800750e:	f7fb ffb9 	bl	8003484 <HAL_GetTick>
 8007512:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007514:	e008      	b.n	8007528 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007516:	f7fb ffb5 	bl	8003484 <HAL_GetTick>
 800751a:	4602      	mov	r2, r0
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	2b02      	cmp	r3, #2
 8007522:	d901      	bls.n	8007528 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007524:	2303      	movs	r3, #3
 8007526:	e10e      	b.n	8007746 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007528:	4b84      	ldr	r3, [pc, #528]	; (800773c <HAL_RCC_OscConfig+0x82c>)
 800752a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800752e:	f003 0302 	and.w	r3, r3, #2
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1ef      	bne.n	8007516 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753a:	2b00      	cmp	r3, #0
 800753c:	f000 8102 	beq.w	8007744 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007544:	2b02      	cmp	r3, #2
 8007546:	f040 80c5 	bne.w	80076d4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800754a:	4b7c      	ldr	r3, [pc, #496]	; (800773c <HAL_RCC_OscConfig+0x82c>)
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	f003 0203 	and.w	r2, r3, #3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755a:	429a      	cmp	r2, r3
 800755c:	d12c      	bne.n	80075b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007568:	3b01      	subs	r3, #1
 800756a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800756c:	429a      	cmp	r2, r3
 800756e:	d123      	bne.n	80075b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800757a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800757c:	429a      	cmp	r2, r3
 800757e:	d11b      	bne.n	80075b8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800758c:	429a      	cmp	r2, r3
 800758e:	d113      	bne.n	80075b8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800759a:	085b      	lsrs	r3, r3, #1
 800759c:	3b01      	subs	r3, #1
 800759e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d109      	bne.n	80075b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ae:	085b      	lsrs	r3, r3, #1
 80075b0:	3b01      	subs	r3, #1
 80075b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d067      	beq.n	8007688 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	2b0c      	cmp	r3, #12
 80075bc:	d062      	beq.n	8007684 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80075be:	4b5f      	ldr	r3, [pc, #380]	; (800773c <HAL_RCC_OscConfig+0x82c>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d001      	beq.n	80075ce <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e0bb      	b.n	8007746 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80075ce:	4b5b      	ldr	r3, [pc, #364]	; (800773c <HAL_RCC_OscConfig+0x82c>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a5a      	ldr	r2, [pc, #360]	; (800773c <HAL_RCC_OscConfig+0x82c>)
 80075d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075d8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80075da:	f7fb ff53 	bl	8003484 <HAL_GetTick>
 80075de:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075e0:	e008      	b.n	80075f4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075e2:	f7fb ff4f 	bl	8003484 <HAL_GetTick>
 80075e6:	4602      	mov	r2, r0
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d901      	bls.n	80075f4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80075f0:	2303      	movs	r3, #3
 80075f2:	e0a8      	b.n	8007746 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075f4:	4b51      	ldr	r3, [pc, #324]	; (800773c <HAL_RCC_OscConfig+0x82c>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1f0      	bne.n	80075e2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007600:	4b4e      	ldr	r3, [pc, #312]	; (800773c <HAL_RCC_OscConfig+0x82c>)
 8007602:	68da      	ldr	r2, [r3, #12]
 8007604:	4b4e      	ldr	r3, [pc, #312]	; (8007740 <HAL_RCC_OscConfig+0x830>)
 8007606:	4013      	ands	r3, r2
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007610:	3a01      	subs	r2, #1
 8007612:	0112      	lsls	r2, r2, #4
 8007614:	4311      	orrs	r1, r2
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800761a:	0212      	lsls	r2, r2, #8
 800761c:	4311      	orrs	r1, r2
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007622:	0852      	lsrs	r2, r2, #1
 8007624:	3a01      	subs	r2, #1
 8007626:	0552      	lsls	r2, r2, #21
 8007628:	4311      	orrs	r1, r2
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800762e:	0852      	lsrs	r2, r2, #1
 8007630:	3a01      	subs	r2, #1
 8007632:	0652      	lsls	r2, r2, #25
 8007634:	4311      	orrs	r1, r2
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800763a:	06d2      	lsls	r2, r2, #27
 800763c:	430a      	orrs	r2, r1
 800763e:	493f      	ldr	r1, [pc, #252]	; (800773c <HAL_RCC_OscConfig+0x82c>)
 8007640:	4313      	orrs	r3, r2
 8007642:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007644:	4b3d      	ldr	r3, [pc, #244]	; (800773c <HAL_RCC_OscConfig+0x82c>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a3c      	ldr	r2, [pc, #240]	; (800773c <HAL_RCC_OscConfig+0x82c>)
 800764a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800764e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007650:	4b3a      	ldr	r3, [pc, #232]	; (800773c <HAL_RCC_OscConfig+0x82c>)
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	4a39      	ldr	r2, [pc, #228]	; (800773c <HAL_RCC_OscConfig+0x82c>)
 8007656:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800765a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800765c:	f7fb ff12 	bl	8003484 <HAL_GetTick>
 8007660:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007662:	e008      	b.n	8007676 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007664:	f7fb ff0e 	bl	8003484 <HAL_GetTick>
 8007668:	4602      	mov	r2, r0
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	2b02      	cmp	r3, #2
 8007670:	d901      	bls.n	8007676 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e067      	b.n	8007746 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007676:	4b31      	ldr	r3, [pc, #196]	; (800773c <HAL_RCC_OscConfig+0x82c>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800767e:	2b00      	cmp	r3, #0
 8007680:	d0f0      	beq.n	8007664 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007682:	e05f      	b.n	8007744 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	e05e      	b.n	8007746 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007688:	4b2c      	ldr	r3, [pc, #176]	; (800773c <HAL_RCC_OscConfig+0x82c>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d157      	bne.n	8007744 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007694:	4b29      	ldr	r3, [pc, #164]	; (800773c <HAL_RCC_OscConfig+0x82c>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a28      	ldr	r2, [pc, #160]	; (800773c <HAL_RCC_OscConfig+0x82c>)
 800769a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800769e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80076a0:	4b26      	ldr	r3, [pc, #152]	; (800773c <HAL_RCC_OscConfig+0x82c>)
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	4a25      	ldr	r2, [pc, #148]	; (800773c <HAL_RCC_OscConfig+0x82c>)
 80076a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80076ac:	f7fb feea 	bl	8003484 <HAL_GetTick>
 80076b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076b2:	e008      	b.n	80076c6 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076b4:	f7fb fee6 	bl	8003484 <HAL_GetTick>
 80076b8:	4602      	mov	r2, r0
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	2b02      	cmp	r3, #2
 80076c0:	d901      	bls.n	80076c6 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80076c2:	2303      	movs	r3, #3
 80076c4:	e03f      	b.n	8007746 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076c6:	4b1d      	ldr	r3, [pc, #116]	; (800773c <HAL_RCC_OscConfig+0x82c>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d0f0      	beq.n	80076b4 <HAL_RCC_OscConfig+0x7a4>
 80076d2:	e037      	b.n	8007744 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	2b0c      	cmp	r3, #12
 80076d8:	d02d      	beq.n	8007736 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076da:	4b18      	ldr	r3, [pc, #96]	; (800773c <HAL_RCC_OscConfig+0x82c>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a17      	ldr	r2, [pc, #92]	; (800773c <HAL_RCC_OscConfig+0x82c>)
 80076e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076e4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80076e6:	4b15      	ldr	r3, [pc, #84]	; (800773c <HAL_RCC_OscConfig+0x82c>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d105      	bne.n	80076fe <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80076f2:	4b12      	ldr	r3, [pc, #72]	; (800773c <HAL_RCC_OscConfig+0x82c>)
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	4a11      	ldr	r2, [pc, #68]	; (800773c <HAL_RCC_OscConfig+0x82c>)
 80076f8:	f023 0303 	bic.w	r3, r3, #3
 80076fc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80076fe:	4b0f      	ldr	r3, [pc, #60]	; (800773c <HAL_RCC_OscConfig+0x82c>)
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	4a0e      	ldr	r2, [pc, #56]	; (800773c <HAL_RCC_OscConfig+0x82c>)
 8007704:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800770c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800770e:	f7fb feb9 	bl	8003484 <HAL_GetTick>
 8007712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007714:	e008      	b.n	8007728 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007716:	f7fb feb5 	bl	8003484 <HAL_GetTick>
 800771a:	4602      	mov	r2, r0
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	2b02      	cmp	r3, #2
 8007722:	d901      	bls.n	8007728 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8007724:	2303      	movs	r3, #3
 8007726:	e00e      	b.n	8007746 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007728:	4b04      	ldr	r3, [pc, #16]	; (800773c <HAL_RCC_OscConfig+0x82c>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007730:	2b00      	cmp	r3, #0
 8007732:	d1f0      	bne.n	8007716 <HAL_RCC_OscConfig+0x806>
 8007734:	e006      	b.n	8007744 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e005      	b.n	8007746 <HAL_RCC_OscConfig+0x836>
 800773a:	bf00      	nop
 800773c:	40021000 	.word	0x40021000
 8007740:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3720      	adds	r7, #32
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop

08007750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d101      	bne.n	8007764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e0c8      	b.n	80078f6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007764:	4b66      	ldr	r3, [pc, #408]	; (8007900 <HAL_RCC_ClockConfig+0x1b0>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 0307 	and.w	r3, r3, #7
 800776c:	683a      	ldr	r2, [r7, #0]
 800776e:	429a      	cmp	r2, r3
 8007770:	d910      	bls.n	8007794 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007772:	4b63      	ldr	r3, [pc, #396]	; (8007900 <HAL_RCC_ClockConfig+0x1b0>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f023 0207 	bic.w	r2, r3, #7
 800777a:	4961      	ldr	r1, [pc, #388]	; (8007900 <HAL_RCC_ClockConfig+0x1b0>)
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	4313      	orrs	r3, r2
 8007780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007782:	4b5f      	ldr	r3, [pc, #380]	; (8007900 <HAL_RCC_ClockConfig+0x1b0>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0307 	and.w	r3, r3, #7
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	429a      	cmp	r2, r3
 800778e:	d001      	beq.n	8007794 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	e0b0      	b.n	80078f6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 0301 	and.w	r3, r3, #1
 800779c:	2b00      	cmp	r3, #0
 800779e:	d04c      	beq.n	800783a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	2b03      	cmp	r3, #3
 80077a6:	d107      	bne.n	80077b8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80077a8:	4b56      	ldr	r3, [pc, #344]	; (8007904 <HAL_RCC_ClockConfig+0x1b4>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d121      	bne.n	80077f8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	e09e      	b.n	80078f6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d107      	bne.n	80077d0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80077c0:	4b50      	ldr	r3, [pc, #320]	; (8007904 <HAL_RCC_ClockConfig+0x1b4>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d115      	bne.n	80077f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e092      	b.n	80078f6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d107      	bne.n	80077e8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80077d8:	4b4a      	ldr	r3, [pc, #296]	; (8007904 <HAL_RCC_ClockConfig+0x1b4>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 0302 	and.w	r3, r3, #2
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d109      	bne.n	80077f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	e086      	b.n	80078f6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80077e8:	4b46      	ldr	r3, [pc, #280]	; (8007904 <HAL_RCC_ClockConfig+0x1b4>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d101      	bne.n	80077f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	e07e      	b.n	80078f6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80077f8:	4b42      	ldr	r3, [pc, #264]	; (8007904 <HAL_RCC_ClockConfig+0x1b4>)
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	f023 0203 	bic.w	r2, r3, #3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	493f      	ldr	r1, [pc, #252]	; (8007904 <HAL_RCC_ClockConfig+0x1b4>)
 8007806:	4313      	orrs	r3, r2
 8007808:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800780a:	f7fb fe3b 	bl	8003484 <HAL_GetTick>
 800780e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007810:	e00a      	b.n	8007828 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007812:	f7fb fe37 	bl	8003484 <HAL_GetTick>
 8007816:	4602      	mov	r2, r0
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	1ad3      	subs	r3, r2, r3
 800781c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007820:	4293      	cmp	r3, r2
 8007822:	d901      	bls.n	8007828 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e066      	b.n	80078f6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007828:	4b36      	ldr	r3, [pc, #216]	; (8007904 <HAL_RCC_ClockConfig+0x1b4>)
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	f003 020c 	and.w	r2, r3, #12
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	429a      	cmp	r2, r3
 8007838:	d1eb      	bne.n	8007812 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 0302 	and.w	r3, r3, #2
 8007842:	2b00      	cmp	r3, #0
 8007844:	d008      	beq.n	8007858 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007846:	4b2f      	ldr	r3, [pc, #188]	; (8007904 <HAL_RCC_ClockConfig+0x1b4>)
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	492c      	ldr	r1, [pc, #176]	; (8007904 <HAL_RCC_ClockConfig+0x1b4>)
 8007854:	4313      	orrs	r3, r2
 8007856:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007858:	4b29      	ldr	r3, [pc, #164]	; (8007900 <HAL_RCC_ClockConfig+0x1b0>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 0307 	and.w	r3, r3, #7
 8007860:	683a      	ldr	r2, [r7, #0]
 8007862:	429a      	cmp	r2, r3
 8007864:	d210      	bcs.n	8007888 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007866:	4b26      	ldr	r3, [pc, #152]	; (8007900 <HAL_RCC_ClockConfig+0x1b0>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f023 0207 	bic.w	r2, r3, #7
 800786e:	4924      	ldr	r1, [pc, #144]	; (8007900 <HAL_RCC_ClockConfig+0x1b0>)
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	4313      	orrs	r3, r2
 8007874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007876:	4b22      	ldr	r3, [pc, #136]	; (8007900 <HAL_RCC_ClockConfig+0x1b0>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 0307 	and.w	r3, r3, #7
 800787e:	683a      	ldr	r2, [r7, #0]
 8007880:	429a      	cmp	r2, r3
 8007882:	d001      	beq.n	8007888 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	e036      	b.n	80078f6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0304 	and.w	r3, r3, #4
 8007890:	2b00      	cmp	r3, #0
 8007892:	d008      	beq.n	80078a6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007894:	4b1b      	ldr	r3, [pc, #108]	; (8007904 <HAL_RCC_ClockConfig+0x1b4>)
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	4918      	ldr	r1, [pc, #96]	; (8007904 <HAL_RCC_ClockConfig+0x1b4>)
 80078a2:	4313      	orrs	r3, r2
 80078a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 0308 	and.w	r3, r3, #8
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d009      	beq.n	80078c6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80078b2:	4b14      	ldr	r3, [pc, #80]	; (8007904 <HAL_RCC_ClockConfig+0x1b4>)
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	00db      	lsls	r3, r3, #3
 80078c0:	4910      	ldr	r1, [pc, #64]	; (8007904 <HAL_RCC_ClockConfig+0x1b4>)
 80078c2:	4313      	orrs	r3, r2
 80078c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80078c6:	f000 f825 	bl	8007914 <HAL_RCC_GetSysClockFreq>
 80078ca:	4602      	mov	r2, r0
 80078cc:	4b0d      	ldr	r3, [pc, #52]	; (8007904 <HAL_RCC_ClockConfig+0x1b4>)
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	091b      	lsrs	r3, r3, #4
 80078d2:	f003 030f 	and.w	r3, r3, #15
 80078d6:	490c      	ldr	r1, [pc, #48]	; (8007908 <HAL_RCC_ClockConfig+0x1b8>)
 80078d8:	5ccb      	ldrb	r3, [r1, r3]
 80078da:	f003 031f 	and.w	r3, r3, #31
 80078de:	fa22 f303 	lsr.w	r3, r2, r3
 80078e2:	4a0a      	ldr	r2, [pc, #40]	; (800790c <HAL_RCC_ClockConfig+0x1bc>)
 80078e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80078e6:	4b0a      	ldr	r3, [pc, #40]	; (8007910 <HAL_RCC_ClockConfig+0x1c0>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7fb fd7a 	bl	80033e4 <HAL_InitTick>
 80078f0:	4603      	mov	r3, r0
 80078f2:	72fb      	strb	r3, [r7, #11]

  return status;
 80078f4:	7afb      	ldrb	r3, [r7, #11]
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	40022000 	.word	0x40022000
 8007904:	40021000 	.word	0x40021000
 8007908:	0800b124 	.word	0x0800b124
 800790c:	20000024 	.word	0x20000024
 8007910:	20000028 	.word	0x20000028

08007914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007914:	b480      	push	{r7}
 8007916:	b089      	sub	sp, #36	; 0x24
 8007918:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800791a:	2300      	movs	r3, #0
 800791c:	61fb      	str	r3, [r7, #28]
 800791e:	2300      	movs	r3, #0
 8007920:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007922:	4b3e      	ldr	r3, [pc, #248]	; (8007a1c <HAL_RCC_GetSysClockFreq+0x108>)
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	f003 030c 	and.w	r3, r3, #12
 800792a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800792c:	4b3b      	ldr	r3, [pc, #236]	; (8007a1c <HAL_RCC_GetSysClockFreq+0x108>)
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	f003 0303 	and.w	r3, r3, #3
 8007934:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d005      	beq.n	8007948 <HAL_RCC_GetSysClockFreq+0x34>
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	2b0c      	cmp	r3, #12
 8007940:	d121      	bne.n	8007986 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2b01      	cmp	r3, #1
 8007946:	d11e      	bne.n	8007986 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007948:	4b34      	ldr	r3, [pc, #208]	; (8007a1c <HAL_RCC_GetSysClockFreq+0x108>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 0308 	and.w	r3, r3, #8
 8007950:	2b00      	cmp	r3, #0
 8007952:	d107      	bne.n	8007964 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007954:	4b31      	ldr	r3, [pc, #196]	; (8007a1c <HAL_RCC_GetSysClockFreq+0x108>)
 8007956:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800795a:	0a1b      	lsrs	r3, r3, #8
 800795c:	f003 030f 	and.w	r3, r3, #15
 8007960:	61fb      	str	r3, [r7, #28]
 8007962:	e005      	b.n	8007970 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007964:	4b2d      	ldr	r3, [pc, #180]	; (8007a1c <HAL_RCC_GetSysClockFreq+0x108>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	091b      	lsrs	r3, r3, #4
 800796a:	f003 030f 	and.w	r3, r3, #15
 800796e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007970:	4a2b      	ldr	r2, [pc, #172]	; (8007a20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007978:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10d      	bne.n	800799c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007984:	e00a      	b.n	800799c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	2b04      	cmp	r3, #4
 800798a:	d102      	bne.n	8007992 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800798c:	4b25      	ldr	r3, [pc, #148]	; (8007a24 <HAL_RCC_GetSysClockFreq+0x110>)
 800798e:	61bb      	str	r3, [r7, #24]
 8007990:	e004      	b.n	800799c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	2b08      	cmp	r3, #8
 8007996:	d101      	bne.n	800799c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007998:	4b23      	ldr	r3, [pc, #140]	; (8007a28 <HAL_RCC_GetSysClockFreq+0x114>)
 800799a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	2b0c      	cmp	r3, #12
 80079a0:	d134      	bne.n	8007a0c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80079a2:	4b1e      	ldr	r3, [pc, #120]	; (8007a1c <HAL_RCC_GetSysClockFreq+0x108>)
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	f003 0303 	and.w	r3, r3, #3
 80079aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d003      	beq.n	80079ba <HAL_RCC_GetSysClockFreq+0xa6>
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	2b03      	cmp	r3, #3
 80079b6:	d003      	beq.n	80079c0 <HAL_RCC_GetSysClockFreq+0xac>
 80079b8:	e005      	b.n	80079c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80079ba:	4b1a      	ldr	r3, [pc, #104]	; (8007a24 <HAL_RCC_GetSysClockFreq+0x110>)
 80079bc:	617b      	str	r3, [r7, #20]
      break;
 80079be:	e005      	b.n	80079cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80079c0:	4b19      	ldr	r3, [pc, #100]	; (8007a28 <HAL_RCC_GetSysClockFreq+0x114>)
 80079c2:	617b      	str	r3, [r7, #20]
      break;
 80079c4:	e002      	b.n	80079cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	617b      	str	r3, [r7, #20]
      break;
 80079ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80079cc:	4b13      	ldr	r3, [pc, #76]	; (8007a1c <HAL_RCC_GetSysClockFreq+0x108>)
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	091b      	lsrs	r3, r3, #4
 80079d2:	f003 0307 	and.w	r3, r3, #7
 80079d6:	3301      	adds	r3, #1
 80079d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80079da:	4b10      	ldr	r3, [pc, #64]	; (8007a1c <HAL_RCC_GetSysClockFreq+0x108>)
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	0a1b      	lsrs	r3, r3, #8
 80079e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	fb02 f203 	mul.w	r2, r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80079f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80079f2:	4b0a      	ldr	r3, [pc, #40]	; (8007a1c <HAL_RCC_GetSysClockFreq+0x108>)
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	0e5b      	lsrs	r3, r3, #25
 80079f8:	f003 0303 	and.w	r3, r3, #3
 80079fc:	3301      	adds	r3, #1
 80079fe:	005b      	lsls	r3, r3, #1
 8007a00:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a0a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007a0c:	69bb      	ldr	r3, [r7, #24]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3724      	adds	r7, #36	; 0x24
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	40021000 	.word	0x40021000
 8007a20:	0800b13c 	.word	0x0800b13c
 8007a24:	00f42400 	.word	0x00f42400
 8007a28:	007a1200 	.word	0x007a1200

08007a2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a30:	4b03      	ldr	r3, [pc, #12]	; (8007a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a32:	681b      	ldr	r3, [r3, #0]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	20000024 	.word	0x20000024

08007a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007a48:	f7ff fff0 	bl	8007a2c <HAL_RCC_GetHCLKFreq>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	4b06      	ldr	r3, [pc, #24]	; (8007a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	0a1b      	lsrs	r3, r3, #8
 8007a54:	f003 0307 	and.w	r3, r3, #7
 8007a58:	4904      	ldr	r1, [pc, #16]	; (8007a6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a5a:	5ccb      	ldrb	r3, [r1, r3]
 8007a5c:	f003 031f 	and.w	r3, r3, #31
 8007a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	40021000 	.word	0x40021000
 8007a6c:	0800b134 	.word	0x0800b134

08007a70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007a74:	f7ff ffda 	bl	8007a2c <HAL_RCC_GetHCLKFreq>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	4b06      	ldr	r3, [pc, #24]	; (8007a94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	0adb      	lsrs	r3, r3, #11
 8007a80:	f003 0307 	and.w	r3, r3, #7
 8007a84:	4904      	ldr	r1, [pc, #16]	; (8007a98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a86:	5ccb      	ldrb	r3, [r1, r3]
 8007a88:	f003 031f 	and.w	r3, r3, #31
 8007a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	40021000 	.word	0x40021000
 8007a98:	0800b134 	.word	0x0800b134

08007a9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b086      	sub	sp, #24
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007aa8:	4b2a      	ldr	r3, [pc, #168]	; (8007b54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d003      	beq.n	8007abc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007ab4:	f7ff f9c8 	bl	8006e48 <HAL_PWREx_GetVoltageRange>
 8007ab8:	6178      	str	r0, [r7, #20]
 8007aba:	e014      	b.n	8007ae6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007abc:	4b25      	ldr	r3, [pc, #148]	; (8007b54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ac0:	4a24      	ldr	r2, [pc, #144]	; (8007b54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ac6:	6593      	str	r3, [r2, #88]	; 0x58
 8007ac8:	4b22      	ldr	r3, [pc, #136]	; (8007b54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ad0:	60fb      	str	r3, [r7, #12]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007ad4:	f7ff f9b8 	bl	8006e48 <HAL_PWREx_GetVoltageRange>
 8007ad8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007ada:	4b1e      	ldr	r3, [pc, #120]	; (8007b54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ade:	4a1d      	ldr	r2, [pc, #116]	; (8007b54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ae4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007aec:	d10b      	bne.n	8007b06 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2b80      	cmp	r3, #128	; 0x80
 8007af2:	d919      	bls.n	8007b28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2ba0      	cmp	r3, #160	; 0xa0
 8007af8:	d902      	bls.n	8007b00 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007afa:	2302      	movs	r3, #2
 8007afc:	613b      	str	r3, [r7, #16]
 8007afe:	e013      	b.n	8007b28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007b00:	2301      	movs	r3, #1
 8007b02:	613b      	str	r3, [r7, #16]
 8007b04:	e010      	b.n	8007b28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2b80      	cmp	r3, #128	; 0x80
 8007b0a:	d902      	bls.n	8007b12 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007b0c:	2303      	movs	r3, #3
 8007b0e:	613b      	str	r3, [r7, #16]
 8007b10:	e00a      	b.n	8007b28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2b80      	cmp	r3, #128	; 0x80
 8007b16:	d102      	bne.n	8007b1e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007b18:	2302      	movs	r3, #2
 8007b1a:	613b      	str	r3, [r7, #16]
 8007b1c:	e004      	b.n	8007b28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2b70      	cmp	r3, #112	; 0x70
 8007b22:	d101      	bne.n	8007b28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007b24:	2301      	movs	r3, #1
 8007b26:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007b28:	4b0b      	ldr	r3, [pc, #44]	; (8007b58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f023 0207 	bic.w	r2, r3, #7
 8007b30:	4909      	ldr	r1, [pc, #36]	; (8007b58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007b38:	4b07      	ldr	r3, [pc, #28]	; (8007b58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f003 0307 	and.w	r3, r3, #7
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d001      	beq.n	8007b4a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e000      	b.n	8007b4c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3718      	adds	r7, #24
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	40021000 	.word	0x40021000
 8007b58:	40022000 	.word	0x40022000

08007b5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b086      	sub	sp, #24
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007b64:	2300      	movs	r3, #0
 8007b66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007b68:	2300      	movs	r3, #0
 8007b6a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d031      	beq.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b7c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007b80:	d01a      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007b82:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007b86:	d814      	bhi.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d009      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007b8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b90:	d10f      	bne.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007b92:	4bac      	ldr	r3, [pc, #688]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	4aab      	ldr	r2, [pc, #684]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b9c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007b9e:	e00c      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	3304      	adds	r3, #4
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f000 f9cc 	bl	8007f44 <RCCEx_PLLSAI1_Config>
 8007bac:	4603      	mov	r3, r0
 8007bae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007bb0:	e003      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	74fb      	strb	r3, [r7, #19]
      break;
 8007bb6:	e000      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007bb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bba:	7cfb      	ldrb	r3, [r7, #19]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10b      	bne.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007bc0:	4ba0      	ldr	r3, [pc, #640]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bce:	499d      	ldr	r1, [pc, #628]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007bd6:	e001      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bd8:	7cfb      	ldrb	r3, [r7, #19]
 8007bda:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f000 8099 	beq.w	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007bea:	2300      	movs	r3, #0
 8007bec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007bee:	4b95      	ldr	r3, [pc, #596]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d101      	bne.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e000      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007bfe:	2300      	movs	r3, #0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00d      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c04:	4b8f      	ldr	r3, [pc, #572]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c08:	4a8e      	ldr	r2, [pc, #568]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c0e:	6593      	str	r3, [r2, #88]	; 0x58
 8007c10:	4b8c      	ldr	r3, [pc, #560]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c18:	60bb      	str	r3, [r7, #8]
 8007c1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c20:	4b89      	ldr	r3, [pc, #548]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a88      	ldr	r2, [pc, #544]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c2c:	f7fb fc2a 	bl	8003484 <HAL_GetTick>
 8007c30:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007c32:	e009      	b.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c34:	f7fb fc26 	bl	8003484 <HAL_GetTick>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	1ad3      	subs	r3, r2, r3
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	d902      	bls.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8007c42:	2303      	movs	r3, #3
 8007c44:	74fb      	strb	r3, [r7, #19]
        break;
 8007c46:	e005      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007c48:	4b7f      	ldr	r3, [pc, #508]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d0ef      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007c54:	7cfb      	ldrb	r3, [r7, #19]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d155      	bne.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007c5a:	4b7a      	ldr	r3, [pc, #488]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c64:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d01e      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c70:	697a      	ldr	r2, [r7, #20]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d019      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007c76:	4b73      	ldr	r3, [pc, #460]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c80:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007c82:	4b70      	ldr	r3, [pc, #448]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c88:	4a6e      	ldr	r2, [pc, #440]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007c8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007c92:	4b6c      	ldr	r3, [pc, #432]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c98:	4a6a      	ldr	r2, [pc, #424]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007ca2:	4a68      	ldr	r2, [pc, #416]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d016      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cb4:	f7fb fbe6 	bl	8003484 <HAL_GetTick>
 8007cb8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007cba:	e00b      	b.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cbc:	f7fb fbe2 	bl	8003484 <HAL_GetTick>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d902      	bls.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	74fb      	strb	r3, [r7, #19]
            break;
 8007cd2:	e006      	b.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007cd4:	4b5b      	ldr	r3, [pc, #364]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cda:	f003 0302 	and.w	r3, r3, #2
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d0ec      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007ce2:	7cfb      	ldrb	r3, [r7, #19]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10b      	bne.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ce8:	4b56      	ldr	r3, [pc, #344]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cf6:	4953      	ldr	r1, [pc, #332]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007cfe:	e004      	b.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007d00:	7cfb      	ldrb	r3, [r7, #19]
 8007d02:	74bb      	strb	r3, [r7, #18]
 8007d04:	e001      	b.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d06:	7cfb      	ldrb	r3, [r7, #19]
 8007d08:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d0a:	7c7b      	ldrb	r3, [r7, #17]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d105      	bne.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d10:	4b4c      	ldr	r3, [pc, #304]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d14:	4a4b      	ldr	r2, [pc, #300]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007d16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d1a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 0301 	and.w	r3, r3, #1
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00a      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007d28:	4b46      	ldr	r3, [pc, #280]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d2e:	f023 0203 	bic.w	r2, r3, #3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a1b      	ldr	r3, [r3, #32]
 8007d36:	4943      	ldr	r1, [pc, #268]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 0302 	and.w	r3, r3, #2
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00a      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007d4a:	4b3e      	ldr	r3, [pc, #248]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d50:	f023 020c 	bic.w	r2, r3, #12
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d58:	493a      	ldr	r1, [pc, #232]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 0320 	and.w	r3, r3, #32
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00a      	beq.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d6c:	4b35      	ldr	r3, [pc, #212]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d7a:	4932      	ldr	r1, [pc, #200]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00a      	beq.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d8e:	4b2d      	ldr	r3, [pc, #180]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d9c:	4929      	ldr	r1, [pc, #164]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00a      	beq.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007db0:	4b24      	ldr	r3, [pc, #144]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007db6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dbe:	4921      	ldr	r1, [pc, #132]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00a      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007dd2:	4b1c      	ldr	r3, [pc, #112]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dd8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de0:	4918      	ldr	r1, [pc, #96]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007de2:	4313      	orrs	r3, r2
 8007de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00a      	beq.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007df4:	4b13      	ldr	r3, [pc, #76]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dfa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e02:	4910      	ldr	r1, [pc, #64]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007e04:	4313      	orrs	r3, r2
 8007e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d02c      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e16:	4b0b      	ldr	r3, [pc, #44]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e1c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e24:	4907      	ldr	r1, [pc, #28]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e34:	d10a      	bne.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e36:	4b03      	ldr	r3, [pc, #12]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	4a02      	ldr	r2, [pc, #8]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007e3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e40:	60d3      	str	r3, [r2, #12]
 8007e42:	e015      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8007e44:	40021000 	.word	0x40021000
 8007e48:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e54:	d10c      	bne.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	3304      	adds	r3, #4
 8007e5a:	2101      	movs	r1, #1
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f000 f871 	bl	8007f44 <RCCEx_PLLSAI1_Config>
 8007e62:	4603      	mov	r3, r0
 8007e64:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007e66:	7cfb      	ldrb	r3, [r7, #19]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d001      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8007e6c:	7cfb      	ldrb	r3, [r7, #19]
 8007e6e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d028      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e7c:	4b30      	ldr	r3, [pc, #192]	; (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e8a:	492d      	ldr	r1, [pc, #180]	; (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e9a:	d106      	bne.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e9c:	4b28      	ldr	r3, [pc, #160]	; (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	4a27      	ldr	r2, [pc, #156]	; (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007ea2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ea6:	60d3      	str	r3, [r2, #12]
 8007ea8:	e011      	b.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007eb2:	d10c      	bne.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	3304      	adds	r3, #4
 8007eb8:	2101      	movs	r1, #1
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f000 f842 	bl	8007f44 <RCCEx_PLLSAI1_Config>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007ec4:	7cfb      	ldrb	r3, [r7, #19]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d001      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8007eca:	7cfb      	ldrb	r3, [r7, #19]
 8007ecc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d01c      	beq.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007eda:	4b19      	ldr	r3, [pc, #100]	; (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ee0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ee8:	4915      	ldr	r1, [pc, #84]	; (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ef4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ef8:	d10c      	bne.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	3304      	adds	r3, #4
 8007efe:	2102      	movs	r1, #2
 8007f00:	4618      	mov	r0, r3
 8007f02:	f000 f81f 	bl	8007f44 <RCCEx_PLLSAI1_Config>
 8007f06:	4603      	mov	r3, r0
 8007f08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007f0a:	7cfb      	ldrb	r3, [r7, #19]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d001      	beq.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8007f10:	7cfb      	ldrb	r3, [r7, #19]
 8007f12:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00a      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007f20:	4b07      	ldr	r3, [pc, #28]	; (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f26:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f2e:	4904      	ldr	r1, [pc, #16]	; (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f30:	4313      	orrs	r3, r2
 8007f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007f36:	7cbb      	ldrb	r3, [r7, #18]
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3718      	adds	r7, #24
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	40021000 	.word	0x40021000

08007f44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007f52:	4b74      	ldr	r3, [pc, #464]	; (8008124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	f003 0303 	and.w	r3, r3, #3
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d018      	beq.n	8007f90 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007f5e:	4b71      	ldr	r3, [pc, #452]	; (8008124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	f003 0203 	and.w	r2, r3, #3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d10d      	bne.n	8007f8a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
       ||
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d009      	beq.n	8007f8a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007f76:	4b6b      	ldr	r3, [pc, #428]	; (8008124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	091b      	lsrs	r3, r3, #4
 8007f7c:	f003 0307 	and.w	r3, r3, #7
 8007f80:	1c5a      	adds	r2, r3, #1
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	685b      	ldr	r3, [r3, #4]
       ||
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d047      	beq.n	800801a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	73fb      	strb	r3, [r7, #15]
 8007f8e:	e044      	b.n	800801a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2b03      	cmp	r3, #3
 8007f96:	d018      	beq.n	8007fca <RCCEx_PLLSAI1_Config+0x86>
 8007f98:	2b03      	cmp	r3, #3
 8007f9a:	d825      	bhi.n	8007fe8 <RCCEx_PLLSAI1_Config+0xa4>
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d002      	beq.n	8007fa6 <RCCEx_PLLSAI1_Config+0x62>
 8007fa0:	2b02      	cmp	r3, #2
 8007fa2:	d009      	beq.n	8007fb8 <RCCEx_PLLSAI1_Config+0x74>
 8007fa4:	e020      	b.n	8007fe8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007fa6:	4b5f      	ldr	r3, [pc, #380]	; (8008124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 0302 	and.w	r3, r3, #2
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d11d      	bne.n	8007fee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007fb6:	e01a      	b.n	8007fee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007fb8:	4b5a      	ldr	r3, [pc, #360]	; (8008124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d116      	bne.n	8007ff2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007fc8:	e013      	b.n	8007ff2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007fca:	4b56      	ldr	r3, [pc, #344]	; (8008124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d10f      	bne.n	8007ff6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007fd6:	4b53      	ldr	r3, [pc, #332]	; (8008124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d109      	bne.n	8007ff6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007fe6:	e006      	b.n	8007ff6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	73fb      	strb	r3, [r7, #15]
      break;
 8007fec:	e004      	b.n	8007ff8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007fee:	bf00      	nop
 8007ff0:	e002      	b.n	8007ff8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007ff2:	bf00      	nop
 8007ff4:	e000      	b.n	8007ff8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007ff6:	bf00      	nop
    }

    if(status == HAL_OK)
 8007ff8:	7bfb      	ldrb	r3, [r7, #15]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d10d      	bne.n	800801a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007ffe:	4b49      	ldr	r3, [pc, #292]	; (8008124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6819      	ldr	r1, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	3b01      	subs	r3, #1
 8008010:	011b      	lsls	r3, r3, #4
 8008012:	430b      	orrs	r3, r1
 8008014:	4943      	ldr	r1, [pc, #268]	; (8008124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008016:	4313      	orrs	r3, r2
 8008018:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800801a:	7bfb      	ldrb	r3, [r7, #15]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d17c      	bne.n	800811a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008020:	4b40      	ldr	r3, [pc, #256]	; (8008124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a3f      	ldr	r2, [pc, #252]	; (8008124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008026:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800802a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800802c:	f7fb fa2a 	bl	8003484 <HAL_GetTick>
 8008030:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008032:	e009      	b.n	8008048 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008034:	f7fb fa26 	bl	8003484 <HAL_GetTick>
 8008038:	4602      	mov	r2, r0
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	2b02      	cmp	r3, #2
 8008040:	d902      	bls.n	8008048 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008042:	2303      	movs	r3, #3
 8008044:	73fb      	strb	r3, [r7, #15]
        break;
 8008046:	e005      	b.n	8008054 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008048:	4b36      	ldr	r3, [pc, #216]	; (8008124 <RCCEx_PLLSAI1_Config+0x1e0>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008050:	2b00      	cmp	r3, #0
 8008052:	d1ef      	bne.n	8008034 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008054:	7bfb      	ldrb	r3, [r7, #15]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d15f      	bne.n	800811a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d110      	bne.n	8008082 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008060:	4b30      	ldr	r3, [pc, #192]	; (8008124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008068:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	6892      	ldr	r2, [r2, #8]
 8008070:	0211      	lsls	r1, r2, #8
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	68d2      	ldr	r2, [r2, #12]
 8008076:	06d2      	lsls	r2, r2, #27
 8008078:	430a      	orrs	r2, r1
 800807a:	492a      	ldr	r1, [pc, #168]	; (8008124 <RCCEx_PLLSAI1_Config+0x1e0>)
 800807c:	4313      	orrs	r3, r2
 800807e:	610b      	str	r3, [r1, #16]
 8008080:	e027      	b.n	80080d2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	2b01      	cmp	r3, #1
 8008086:	d112      	bne.n	80080ae <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008088:	4b26      	ldr	r3, [pc, #152]	; (8008124 <RCCEx_PLLSAI1_Config+0x1e0>)
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008090:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	6892      	ldr	r2, [r2, #8]
 8008098:	0211      	lsls	r1, r2, #8
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	6912      	ldr	r2, [r2, #16]
 800809e:	0852      	lsrs	r2, r2, #1
 80080a0:	3a01      	subs	r2, #1
 80080a2:	0552      	lsls	r2, r2, #21
 80080a4:	430a      	orrs	r2, r1
 80080a6:	491f      	ldr	r1, [pc, #124]	; (8008124 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080a8:	4313      	orrs	r3, r2
 80080aa:	610b      	str	r3, [r1, #16]
 80080ac:	e011      	b.n	80080d2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80080ae:	4b1d      	ldr	r3, [pc, #116]	; (8008124 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80080b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	6892      	ldr	r2, [r2, #8]
 80080be:	0211      	lsls	r1, r2, #8
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	6952      	ldr	r2, [r2, #20]
 80080c4:	0852      	lsrs	r2, r2, #1
 80080c6:	3a01      	subs	r2, #1
 80080c8:	0652      	lsls	r2, r2, #25
 80080ca:	430a      	orrs	r2, r1
 80080cc:	4915      	ldr	r1, [pc, #84]	; (8008124 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080ce:	4313      	orrs	r3, r2
 80080d0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80080d2:	4b14      	ldr	r3, [pc, #80]	; (8008124 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a13      	ldr	r2, [pc, #76]	; (8008124 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80080dc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080de:	f7fb f9d1 	bl	8003484 <HAL_GetTick>
 80080e2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80080e4:	e009      	b.n	80080fa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80080e6:	f7fb f9cd 	bl	8003484 <HAL_GetTick>
 80080ea:	4602      	mov	r2, r0
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	1ad3      	subs	r3, r2, r3
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d902      	bls.n	80080fa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80080f4:	2303      	movs	r3, #3
 80080f6:	73fb      	strb	r3, [r7, #15]
          break;
 80080f8:	e005      	b.n	8008106 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80080fa:	4b0a      	ldr	r3, [pc, #40]	; (8008124 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008102:	2b00      	cmp	r3, #0
 8008104:	d0ef      	beq.n	80080e6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8008106:	7bfb      	ldrb	r3, [r7, #15]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d106      	bne.n	800811a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800810c:	4b05      	ldr	r3, [pc, #20]	; (8008124 <RCCEx_PLLSAI1_Config+0x1e0>)
 800810e:	691a      	ldr	r2, [r3, #16]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	4903      	ldr	r1, [pc, #12]	; (8008124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008116:	4313      	orrs	r3, r2
 8008118:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800811a:	7bfb      	ldrb	r3, [r7, #15]
}
 800811c:	4618      	mov	r0, r3
 800811e:	3710      	adds	r7, #16
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	40021000 	.word	0x40021000

08008128 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d101      	bne.n	800813a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	e049      	b.n	80081ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008140:	b2db      	uxtb	r3, r3
 8008142:	2b00      	cmp	r3, #0
 8008144:	d106      	bne.n	8008154 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f7fa ff20 	bl	8002f94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2202      	movs	r2, #2
 8008158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	3304      	adds	r3, #4
 8008164:	4619      	mov	r1, r3
 8008166:	4610      	mov	r0, r2
 8008168:	f000 fcee 	bl	8008b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3708      	adds	r7, #8
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
	...

080081d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d001      	beq.n	80081f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e03b      	b.n	8008268 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2202      	movs	r2, #2
 80081f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68da      	ldr	r2, [r3, #12]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f042 0201 	orr.w	r2, r2, #1
 8008206:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a19      	ldr	r2, [pc, #100]	; (8008274 <HAL_TIM_Base_Start_IT+0x9c>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d009      	beq.n	8008226 <HAL_TIM_Base_Start_IT+0x4e>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800821a:	d004      	beq.n	8008226 <HAL_TIM_Base_Start_IT+0x4e>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a15      	ldr	r2, [pc, #84]	; (8008278 <HAL_TIM_Base_Start_IT+0xa0>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d115      	bne.n	8008252 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	689a      	ldr	r2, [r3, #8]
 800822c:	4b13      	ldr	r3, [pc, #76]	; (800827c <HAL_TIM_Base_Start_IT+0xa4>)
 800822e:	4013      	ands	r3, r2
 8008230:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2b06      	cmp	r3, #6
 8008236:	d015      	beq.n	8008264 <HAL_TIM_Base_Start_IT+0x8c>
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800823e:	d011      	beq.n	8008264 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f042 0201 	orr.w	r2, r2, #1
 800824e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008250:	e008      	b.n	8008264 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f042 0201 	orr.w	r2, r2, #1
 8008260:	601a      	str	r2, [r3, #0]
 8008262:	e000      	b.n	8008266 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008264:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3714      	adds	r7, #20
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr
 8008274:	40012c00 	.word	0x40012c00
 8008278:	40014000 	.word	0x40014000
 800827c:	00010007 	.word	0x00010007

08008280 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d101      	bne.n	8008292 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e049      	b.n	8008326 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008298:	b2db      	uxtb	r3, r3
 800829a:	2b00      	cmp	r3, #0
 800829c:	d106      	bne.n	80082ac <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f7fa fe50 	bl	8002f4c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2202      	movs	r2, #2
 80082b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	3304      	adds	r3, #4
 80082bc:	4619      	mov	r1, r3
 80082be:	4610      	mov	r0, r2
 80082c0:	f000 fc42 	bl	8008b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b082      	sub	sp, #8
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d101      	bne.n	8008340 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	e049      	b.n	80083d4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008346:	b2db      	uxtb	r3, r3
 8008348:	2b00      	cmp	r3, #0
 800834a:	d106      	bne.n	800835a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f7fa fdd9 	bl	8002f0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2202      	movs	r2, #2
 800835e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	3304      	adds	r3, #4
 800836a:	4619      	mov	r1, r3
 800836c:	4610      	mov	r0, r2
 800836e:	f000 fbeb 	bl	8008b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2201      	movs	r2, #1
 8008376:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2201      	movs	r2, #1
 800837e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2201      	movs	r2, #1
 8008386:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2201      	movs	r2, #1
 800838e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2201      	movs	r2, #1
 8008396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2201      	movs	r2, #1
 800839e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2201      	movs	r2, #1
 80083a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2201      	movs	r2, #1
 80083ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2201      	movs	r2, #1
 80083b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2201      	movs	r2, #1
 80083be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2201      	movs	r2, #1
 80083c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2201      	movs	r2, #1
 80083ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d109      	bne.n	8008400 <HAL_TIM_PWM_Start+0x24>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	bf14      	ite	ne
 80083f8:	2301      	movne	r3, #1
 80083fa:	2300      	moveq	r3, #0
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	e03c      	b.n	800847a <HAL_TIM_PWM_Start+0x9e>
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	2b04      	cmp	r3, #4
 8008404:	d109      	bne.n	800841a <HAL_TIM_PWM_Start+0x3e>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800840c:	b2db      	uxtb	r3, r3
 800840e:	2b01      	cmp	r3, #1
 8008410:	bf14      	ite	ne
 8008412:	2301      	movne	r3, #1
 8008414:	2300      	moveq	r3, #0
 8008416:	b2db      	uxtb	r3, r3
 8008418:	e02f      	b.n	800847a <HAL_TIM_PWM_Start+0x9e>
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	2b08      	cmp	r3, #8
 800841e:	d109      	bne.n	8008434 <HAL_TIM_PWM_Start+0x58>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008426:	b2db      	uxtb	r3, r3
 8008428:	2b01      	cmp	r3, #1
 800842a:	bf14      	ite	ne
 800842c:	2301      	movne	r3, #1
 800842e:	2300      	moveq	r3, #0
 8008430:	b2db      	uxtb	r3, r3
 8008432:	e022      	b.n	800847a <HAL_TIM_PWM_Start+0x9e>
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	2b0c      	cmp	r3, #12
 8008438:	d109      	bne.n	800844e <HAL_TIM_PWM_Start+0x72>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008440:	b2db      	uxtb	r3, r3
 8008442:	2b01      	cmp	r3, #1
 8008444:	bf14      	ite	ne
 8008446:	2301      	movne	r3, #1
 8008448:	2300      	moveq	r3, #0
 800844a:	b2db      	uxtb	r3, r3
 800844c:	e015      	b.n	800847a <HAL_TIM_PWM_Start+0x9e>
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	2b10      	cmp	r3, #16
 8008452:	d109      	bne.n	8008468 <HAL_TIM_PWM_Start+0x8c>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800845a:	b2db      	uxtb	r3, r3
 800845c:	2b01      	cmp	r3, #1
 800845e:	bf14      	ite	ne
 8008460:	2301      	movne	r3, #1
 8008462:	2300      	moveq	r3, #0
 8008464:	b2db      	uxtb	r3, r3
 8008466:	e008      	b.n	800847a <HAL_TIM_PWM_Start+0x9e>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800846e:	b2db      	uxtb	r3, r3
 8008470:	2b01      	cmp	r3, #1
 8008472:	bf14      	ite	ne
 8008474:	2301      	movne	r3, #1
 8008476:	2300      	moveq	r3, #0
 8008478:	b2db      	uxtb	r3, r3
 800847a:	2b00      	cmp	r3, #0
 800847c:	d001      	beq.n	8008482 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e07e      	b.n	8008580 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d104      	bne.n	8008492 <HAL_TIM_PWM_Start+0xb6>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2202      	movs	r2, #2
 800848c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008490:	e023      	b.n	80084da <HAL_TIM_PWM_Start+0xfe>
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	2b04      	cmp	r3, #4
 8008496:	d104      	bne.n	80084a2 <HAL_TIM_PWM_Start+0xc6>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2202      	movs	r2, #2
 800849c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084a0:	e01b      	b.n	80084da <HAL_TIM_PWM_Start+0xfe>
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	2b08      	cmp	r3, #8
 80084a6:	d104      	bne.n	80084b2 <HAL_TIM_PWM_Start+0xd6>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2202      	movs	r2, #2
 80084ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084b0:	e013      	b.n	80084da <HAL_TIM_PWM_Start+0xfe>
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	2b0c      	cmp	r3, #12
 80084b6:	d104      	bne.n	80084c2 <HAL_TIM_PWM_Start+0xe6>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2202      	movs	r2, #2
 80084bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80084c0:	e00b      	b.n	80084da <HAL_TIM_PWM_Start+0xfe>
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	2b10      	cmp	r3, #16
 80084c6:	d104      	bne.n	80084d2 <HAL_TIM_PWM_Start+0xf6>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2202      	movs	r2, #2
 80084cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084d0:	e003      	b.n	80084da <HAL_TIM_PWM_Start+0xfe>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2202      	movs	r2, #2
 80084d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	2201      	movs	r2, #1
 80084e0:	6839      	ldr	r1, [r7, #0]
 80084e2:	4618      	mov	r0, r3
 80084e4:	f000 fe12 	bl	800910c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a26      	ldr	r2, [pc, #152]	; (8008588 <HAL_TIM_PWM_Start+0x1ac>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d009      	beq.n	8008506 <HAL_TIM_PWM_Start+0x12a>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a25      	ldr	r2, [pc, #148]	; (800858c <HAL_TIM_PWM_Start+0x1b0>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d004      	beq.n	8008506 <HAL_TIM_PWM_Start+0x12a>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a23      	ldr	r2, [pc, #140]	; (8008590 <HAL_TIM_PWM_Start+0x1b4>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d101      	bne.n	800850a <HAL_TIM_PWM_Start+0x12e>
 8008506:	2301      	movs	r3, #1
 8008508:	e000      	b.n	800850c <HAL_TIM_PWM_Start+0x130>
 800850a:	2300      	movs	r3, #0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d007      	beq.n	8008520 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800851e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a18      	ldr	r2, [pc, #96]	; (8008588 <HAL_TIM_PWM_Start+0x1ac>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d009      	beq.n	800853e <HAL_TIM_PWM_Start+0x162>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008532:	d004      	beq.n	800853e <HAL_TIM_PWM_Start+0x162>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a14      	ldr	r2, [pc, #80]	; (800858c <HAL_TIM_PWM_Start+0x1b0>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d115      	bne.n	800856a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	689a      	ldr	r2, [r3, #8]
 8008544:	4b13      	ldr	r3, [pc, #76]	; (8008594 <HAL_TIM_PWM_Start+0x1b8>)
 8008546:	4013      	ands	r3, r2
 8008548:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2b06      	cmp	r3, #6
 800854e:	d015      	beq.n	800857c <HAL_TIM_PWM_Start+0x1a0>
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008556:	d011      	beq.n	800857c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f042 0201 	orr.w	r2, r2, #1
 8008566:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008568:	e008      	b.n	800857c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f042 0201 	orr.w	r2, r2, #1
 8008578:	601a      	str	r2, [r3, #0]
 800857a:	e000      	b.n	800857e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800857c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800857e:	2300      	movs	r3, #0
}
 8008580:	4618      	mov	r0, r3
 8008582:	3710      	adds	r7, #16
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}
 8008588:	40012c00 	.word	0x40012c00
 800858c:	40014000 	.word	0x40014000
 8008590:	40014400 	.word	0x40014400
 8008594:	00010007 	.word	0x00010007

08008598 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	f003 0302 	and.w	r3, r3, #2
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	d122      	bne.n	80085f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	f003 0302 	and.w	r3, r3, #2
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d11b      	bne.n	80085f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f06f 0202 	mvn.w	r2, #2
 80085c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	f003 0303 	and.w	r3, r3, #3
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d003      	beq.n	80085e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 fa96 	bl	8008b0c <HAL_TIM_IC_CaptureCallback>
 80085e0:	e005      	b.n	80085ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 fa88 	bl	8008af8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 fa99 	bl	8008b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	f003 0304 	and.w	r3, r3, #4
 80085fe:	2b04      	cmp	r3, #4
 8008600:	d122      	bne.n	8008648 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	f003 0304 	and.w	r3, r3, #4
 800860c:	2b04      	cmp	r3, #4
 800860e:	d11b      	bne.n	8008648 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f06f 0204 	mvn.w	r2, #4
 8008618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2202      	movs	r2, #2
 800861e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	699b      	ldr	r3, [r3, #24]
 8008626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800862a:	2b00      	cmp	r3, #0
 800862c:	d003      	beq.n	8008636 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fa6c 	bl	8008b0c <HAL_TIM_IC_CaptureCallback>
 8008634:	e005      	b.n	8008642 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 fa5e 	bl	8008af8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 fa6f 	bl	8008b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	f003 0308 	and.w	r3, r3, #8
 8008652:	2b08      	cmp	r3, #8
 8008654:	d122      	bne.n	800869c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	f003 0308 	and.w	r3, r3, #8
 8008660:	2b08      	cmp	r3, #8
 8008662:	d11b      	bne.n	800869c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f06f 0208 	mvn.w	r2, #8
 800866c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2204      	movs	r2, #4
 8008672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	69db      	ldr	r3, [r3, #28]
 800867a:	f003 0303 	and.w	r3, r3, #3
 800867e:	2b00      	cmp	r3, #0
 8008680:	d003      	beq.n	800868a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 fa42 	bl	8008b0c <HAL_TIM_IC_CaptureCallback>
 8008688:	e005      	b.n	8008696 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 fa34 	bl	8008af8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 fa45 	bl	8008b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	f003 0310 	and.w	r3, r3, #16
 80086a6:	2b10      	cmp	r3, #16
 80086a8:	d122      	bne.n	80086f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	f003 0310 	and.w	r3, r3, #16
 80086b4:	2b10      	cmp	r3, #16
 80086b6:	d11b      	bne.n	80086f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f06f 0210 	mvn.w	r2, #16
 80086c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2208      	movs	r2, #8
 80086c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	69db      	ldr	r3, [r3, #28]
 80086ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d003      	beq.n	80086de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 fa18 	bl	8008b0c <HAL_TIM_IC_CaptureCallback>
 80086dc:	e005      	b.n	80086ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 fa0a 	bl	8008af8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 fa1b 	bl	8008b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d10e      	bne.n	800871c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	f003 0301 	and.w	r3, r3, #1
 8008708:	2b01      	cmp	r3, #1
 800870a:	d107      	bne.n	800871c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f06f 0201 	mvn.w	r2, #1
 8008714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 f9e4 	bl	8008ae4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008726:	2b80      	cmp	r3, #128	; 0x80
 8008728:	d10e      	bne.n	8008748 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008734:	2b80      	cmp	r3, #128	; 0x80
 8008736:	d107      	bne.n	8008748 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fdf0 	bl	8009328 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008756:	d10e      	bne.n	8008776 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008762:	2b80      	cmp	r3, #128	; 0x80
 8008764:	d107      	bne.n	8008776 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800876e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 fde3 	bl	800933c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008780:	2b40      	cmp	r3, #64	; 0x40
 8008782:	d10e      	bne.n	80087a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800878e:	2b40      	cmp	r3, #64	; 0x40
 8008790:	d107      	bne.n	80087a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800879a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 f9c9 	bl	8008b34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	f003 0320 	and.w	r3, r3, #32
 80087ac:	2b20      	cmp	r3, #32
 80087ae:	d10e      	bne.n	80087ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	f003 0320 	and.w	r3, r3, #32
 80087ba:	2b20      	cmp	r3, #32
 80087bc:	d107      	bne.n	80087ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f06f 0220 	mvn.w	r2, #32
 80087c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 fda3 	bl	8009314 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80087ce:	bf00      	nop
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
	...

080087d8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d101      	bne.n	80087f2 <HAL_TIM_OC_ConfigChannel+0x1a>
 80087ee:	2302      	movs	r3, #2
 80087f0:	e064      	b.n	80088bc <HAL_TIM_OC_ConfigChannel+0xe4>
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2201      	movs	r2, #1
 80087f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2b14      	cmp	r3, #20
 80087fe:	d857      	bhi.n	80088b0 <HAL_TIM_OC_ConfigChannel+0xd8>
 8008800:	a201      	add	r2, pc, #4	; (adr r2, 8008808 <HAL_TIM_OC_ConfigChannel+0x30>)
 8008802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008806:	bf00      	nop
 8008808:	0800885d 	.word	0x0800885d
 800880c:	080088b1 	.word	0x080088b1
 8008810:	080088b1 	.word	0x080088b1
 8008814:	080088b1 	.word	0x080088b1
 8008818:	0800886b 	.word	0x0800886b
 800881c:	080088b1 	.word	0x080088b1
 8008820:	080088b1 	.word	0x080088b1
 8008824:	080088b1 	.word	0x080088b1
 8008828:	08008879 	.word	0x08008879
 800882c:	080088b1 	.word	0x080088b1
 8008830:	080088b1 	.word	0x080088b1
 8008834:	080088b1 	.word	0x080088b1
 8008838:	08008887 	.word	0x08008887
 800883c:	080088b1 	.word	0x080088b1
 8008840:	080088b1 	.word	0x080088b1
 8008844:	080088b1 	.word	0x080088b1
 8008848:	08008895 	.word	0x08008895
 800884c:	080088b1 	.word	0x080088b1
 8008850:	080088b1 	.word	0x080088b1
 8008854:	080088b1 	.word	0x080088b1
 8008858:	080088a3 	.word	0x080088a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	68b9      	ldr	r1, [r7, #8]
 8008862:	4618      	mov	r0, r3
 8008864:	f000 f9d4 	bl	8008c10 <TIM_OC1_SetConfig>
      break;
 8008868:	e023      	b.n	80088b2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68b9      	ldr	r1, [r7, #8]
 8008870:	4618      	mov	r0, r3
 8008872:	f000 fa49 	bl	8008d08 <TIM_OC2_SetConfig>
      break;
 8008876:	e01c      	b.n	80088b2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	68b9      	ldr	r1, [r7, #8]
 800887e:	4618      	mov	r0, r3
 8008880:	f000 fabc 	bl	8008dfc <TIM_OC3_SetConfig>
      break;
 8008884:	e015      	b.n	80088b2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	68b9      	ldr	r1, [r7, #8]
 800888c:	4618      	mov	r0, r3
 800888e:	f000 fb2d 	bl	8008eec <TIM_OC4_SetConfig>
      break;
 8008892:	e00e      	b.n	80088b2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	68b9      	ldr	r1, [r7, #8]
 800889a:	4618      	mov	r0, r3
 800889c:	f000 fb84 	bl	8008fa8 <TIM_OC5_SetConfig>
      break;
 80088a0:	e007      	b.n	80088b2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68b9      	ldr	r1, [r7, #8]
 80088a8:	4618      	mov	r0, r3
 80088aa:	f000 fbd5 	bl	8009058 <TIM_OC6_SetConfig>
      break;
 80088ae:	e000      	b.n	80088b2 <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 80088b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3710      	adds	r7, #16
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d101      	bne.n	80088de <HAL_TIM_PWM_ConfigChannel+0x1a>
 80088da:	2302      	movs	r3, #2
 80088dc:	e0fd      	b.n	8008ada <HAL_TIM_PWM_ConfigChannel+0x216>
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2201      	movs	r2, #1
 80088e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2b14      	cmp	r3, #20
 80088ea:	f200 80f0 	bhi.w	8008ace <HAL_TIM_PWM_ConfigChannel+0x20a>
 80088ee:	a201      	add	r2, pc, #4	; (adr r2, 80088f4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80088f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f4:	08008949 	.word	0x08008949
 80088f8:	08008acf 	.word	0x08008acf
 80088fc:	08008acf 	.word	0x08008acf
 8008900:	08008acf 	.word	0x08008acf
 8008904:	08008989 	.word	0x08008989
 8008908:	08008acf 	.word	0x08008acf
 800890c:	08008acf 	.word	0x08008acf
 8008910:	08008acf 	.word	0x08008acf
 8008914:	080089cb 	.word	0x080089cb
 8008918:	08008acf 	.word	0x08008acf
 800891c:	08008acf 	.word	0x08008acf
 8008920:	08008acf 	.word	0x08008acf
 8008924:	08008a0b 	.word	0x08008a0b
 8008928:	08008acf 	.word	0x08008acf
 800892c:	08008acf 	.word	0x08008acf
 8008930:	08008acf 	.word	0x08008acf
 8008934:	08008a4d 	.word	0x08008a4d
 8008938:	08008acf 	.word	0x08008acf
 800893c:	08008acf 	.word	0x08008acf
 8008940:	08008acf 	.word	0x08008acf
 8008944:	08008a8d 	.word	0x08008a8d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	68b9      	ldr	r1, [r7, #8]
 800894e:	4618      	mov	r0, r3
 8008950:	f000 f95e 	bl	8008c10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	699a      	ldr	r2, [r3, #24]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f042 0208 	orr.w	r2, r2, #8
 8008962:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	699a      	ldr	r2, [r3, #24]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f022 0204 	bic.w	r2, r2, #4
 8008972:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	6999      	ldr	r1, [r3, #24]
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	691a      	ldr	r2, [r3, #16]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	430a      	orrs	r2, r1
 8008984:	619a      	str	r2, [r3, #24]
      break;
 8008986:	e0a3      	b.n	8008ad0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	68b9      	ldr	r1, [r7, #8]
 800898e:	4618      	mov	r0, r3
 8008990:	f000 f9ba 	bl	8008d08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	699a      	ldr	r2, [r3, #24]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	699a      	ldr	r2, [r3, #24]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	6999      	ldr	r1, [r3, #24]
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	691b      	ldr	r3, [r3, #16]
 80089be:	021a      	lsls	r2, r3, #8
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	430a      	orrs	r2, r1
 80089c6:	619a      	str	r2, [r3, #24]
      break;
 80089c8:	e082      	b.n	8008ad0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	68b9      	ldr	r1, [r7, #8]
 80089d0:	4618      	mov	r0, r3
 80089d2:	f000 fa13 	bl	8008dfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	69da      	ldr	r2, [r3, #28]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f042 0208 	orr.w	r2, r2, #8
 80089e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	69da      	ldr	r2, [r3, #28]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f022 0204 	bic.w	r2, r2, #4
 80089f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	69d9      	ldr	r1, [r3, #28]
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	691a      	ldr	r2, [r3, #16]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	430a      	orrs	r2, r1
 8008a06:	61da      	str	r2, [r3, #28]
      break;
 8008a08:	e062      	b.n	8008ad0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	68b9      	ldr	r1, [r7, #8]
 8008a10:	4618      	mov	r0, r3
 8008a12:	f000 fa6b 	bl	8008eec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	69da      	ldr	r2, [r3, #28]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	69da      	ldr	r2, [r3, #28]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	69d9      	ldr	r1, [r3, #28]
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	021a      	lsls	r2, r3, #8
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	430a      	orrs	r2, r1
 8008a48:	61da      	str	r2, [r3, #28]
      break;
 8008a4a:	e041      	b.n	8008ad0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	68b9      	ldr	r1, [r7, #8]
 8008a52:	4618      	mov	r0, r3
 8008a54:	f000 faa8 	bl	8008fa8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f042 0208 	orr.w	r2, r2, #8
 8008a66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f022 0204 	bic.w	r2, r2, #4
 8008a76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	691a      	ldr	r2, [r3, #16]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	430a      	orrs	r2, r1
 8008a88:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008a8a:	e021      	b.n	8008ad0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	68b9      	ldr	r1, [r7, #8]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f000 fae0 	bl	8009058 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008aa6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ab6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	021a      	lsls	r2, r3, #8
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	430a      	orrs	r2, r1
 8008aca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008acc:	e000      	b.n	8008ad0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8008ace:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3710      	adds	r7, #16
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop

08008ae4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008aec:	bf00      	nop
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b00:	bf00      	nop
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b14:	bf00      	nop
 8008b16:	370c      	adds	r7, #12
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b28:	bf00      	nop
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b3c:	bf00      	nop
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4a2a      	ldr	r2, [pc, #168]	; (8008c04 <TIM_Base_SetConfig+0xbc>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d003      	beq.n	8008b68 <TIM_Base_SetConfig+0x20>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b66:	d108      	bne.n	8008b7a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a21      	ldr	r2, [pc, #132]	; (8008c04 <TIM_Base_SetConfig+0xbc>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d00b      	beq.n	8008b9a <TIM_Base_SetConfig+0x52>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b88:	d007      	beq.n	8008b9a <TIM_Base_SetConfig+0x52>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a1e      	ldr	r2, [pc, #120]	; (8008c08 <TIM_Base_SetConfig+0xc0>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d003      	beq.n	8008b9a <TIM_Base_SetConfig+0x52>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a1d      	ldr	r2, [pc, #116]	; (8008c0c <TIM_Base_SetConfig+0xc4>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d108      	bne.n	8008bac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	695b      	ldr	r3, [r3, #20]
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	68fa      	ldr	r2, [r7, #12]
 8008bbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	689a      	ldr	r2, [r3, #8]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4a0c      	ldr	r2, [pc, #48]	; (8008c04 <TIM_Base_SetConfig+0xbc>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d007      	beq.n	8008be8 <TIM_Base_SetConfig+0xa0>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a0b      	ldr	r2, [pc, #44]	; (8008c08 <TIM_Base_SetConfig+0xc0>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d003      	beq.n	8008be8 <TIM_Base_SetConfig+0xa0>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a0a      	ldr	r2, [pc, #40]	; (8008c0c <TIM_Base_SetConfig+0xc4>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d103      	bne.n	8008bf0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	691a      	ldr	r2, [r3, #16]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	615a      	str	r2, [r3, #20]
}
 8008bf6:	bf00      	nop
 8008bf8:	3714      	adds	r7, #20
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	40012c00 	.word	0x40012c00
 8008c08:	40014000 	.word	0x40014000
 8008c0c:	40014400 	.word	0x40014400

08008c10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b087      	sub	sp, #28
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a1b      	ldr	r3, [r3, #32]
 8008c1e:	f023 0201 	bic.w	r2, r3, #1
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a1b      	ldr	r3, [r3, #32]
 8008c2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	699b      	ldr	r3, [r3, #24]
 8008c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f023 0303 	bic.w	r3, r3, #3
 8008c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	f023 0302 	bic.w	r3, r3, #2
 8008c5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	697a      	ldr	r2, [r7, #20]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	4a24      	ldr	r2, [pc, #144]	; (8008cfc <TIM_OC1_SetConfig+0xec>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d007      	beq.n	8008c80 <TIM_OC1_SetConfig+0x70>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4a23      	ldr	r2, [pc, #140]	; (8008d00 <TIM_OC1_SetConfig+0xf0>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d003      	beq.n	8008c80 <TIM_OC1_SetConfig+0x70>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	4a22      	ldr	r2, [pc, #136]	; (8008d04 <TIM_OC1_SetConfig+0xf4>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d10c      	bne.n	8008c9a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	f023 0308 	bic.w	r3, r3, #8
 8008c86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	697a      	ldr	r2, [r7, #20]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	f023 0304 	bic.w	r3, r3, #4
 8008c98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4a17      	ldr	r2, [pc, #92]	; (8008cfc <TIM_OC1_SetConfig+0xec>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d007      	beq.n	8008cb2 <TIM_OC1_SetConfig+0xa2>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	4a16      	ldr	r2, [pc, #88]	; (8008d00 <TIM_OC1_SetConfig+0xf0>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d003      	beq.n	8008cb2 <TIM_OC1_SetConfig+0xa2>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4a15      	ldr	r2, [pc, #84]	; (8008d04 <TIM_OC1_SetConfig+0xf4>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d111      	bne.n	8008cd6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	695b      	ldr	r3, [r3, #20]
 8008cc6:	693a      	ldr	r2, [r7, #16]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	699b      	ldr	r3, [r3, #24]
 8008cd0:	693a      	ldr	r2, [r7, #16]
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	693a      	ldr	r2, [r7, #16]
 8008cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	68fa      	ldr	r2, [r7, #12]
 8008ce0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	685a      	ldr	r2, [r3, #4]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	697a      	ldr	r2, [r7, #20]
 8008cee:	621a      	str	r2, [r3, #32]
}
 8008cf0:	bf00      	nop
 8008cf2:	371c      	adds	r7, #28
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr
 8008cfc:	40012c00 	.word	0x40012c00
 8008d00:	40014000 	.word	0x40014000
 8008d04:	40014400 	.word	0x40014400

08008d08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b087      	sub	sp, #28
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a1b      	ldr	r3, [r3, #32]
 8008d16:	f023 0210 	bic.w	r2, r3, #16
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6a1b      	ldr	r3, [r3, #32]
 8008d22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	699b      	ldr	r3, [r3, #24]
 8008d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	021b      	lsls	r3, r3, #8
 8008d4a:	68fa      	ldr	r2, [r7, #12]
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	f023 0320 	bic.w	r3, r3, #32
 8008d56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	011b      	lsls	r3, r3, #4
 8008d5e:	697a      	ldr	r2, [r7, #20]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	4a22      	ldr	r2, [pc, #136]	; (8008df0 <TIM_OC2_SetConfig+0xe8>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d10d      	bne.n	8008d88 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	011b      	lsls	r3, r3, #4
 8008d7a:	697a      	ldr	r2, [r7, #20]
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4a19      	ldr	r2, [pc, #100]	; (8008df0 <TIM_OC2_SetConfig+0xe8>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d007      	beq.n	8008da0 <TIM_OC2_SetConfig+0x98>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a18      	ldr	r2, [pc, #96]	; (8008df4 <TIM_OC2_SetConfig+0xec>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d003      	beq.n	8008da0 <TIM_OC2_SetConfig+0x98>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a17      	ldr	r2, [pc, #92]	; (8008df8 <TIM_OC2_SetConfig+0xf0>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d113      	bne.n	8008dc8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008da6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008dae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	695b      	ldr	r3, [r3, #20]
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	693a      	ldr	r2, [r7, #16]
 8008db8:	4313      	orrs	r3, r2
 8008dba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	699b      	ldr	r3, [r3, #24]
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	693a      	ldr	r2, [r7, #16]
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	693a      	ldr	r2, [r7, #16]
 8008dcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	68fa      	ldr	r2, [r7, #12]
 8008dd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	685a      	ldr	r2, [r3, #4]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	697a      	ldr	r2, [r7, #20]
 8008de0:	621a      	str	r2, [r3, #32]
}
 8008de2:	bf00      	nop
 8008de4:	371c      	adds	r7, #28
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	40012c00 	.word	0x40012c00
 8008df4:	40014000 	.word	0x40014000
 8008df8:	40014400 	.word	0x40014400

08008dfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b087      	sub	sp, #28
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6a1b      	ldr	r3, [r3, #32]
 8008e0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a1b      	ldr	r3, [r3, #32]
 8008e16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	69db      	ldr	r3, [r3, #28]
 8008e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f023 0303 	bic.w	r3, r3, #3
 8008e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	68fa      	ldr	r2, [r7, #12]
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	021b      	lsls	r3, r3, #8
 8008e50:	697a      	ldr	r2, [r7, #20]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4a21      	ldr	r2, [pc, #132]	; (8008ee0 <TIM_OC3_SetConfig+0xe4>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d10d      	bne.n	8008e7a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	68db      	ldr	r3, [r3, #12]
 8008e6a:	021b      	lsls	r3, r3, #8
 8008e6c:	697a      	ldr	r2, [r7, #20]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4a18      	ldr	r2, [pc, #96]	; (8008ee0 <TIM_OC3_SetConfig+0xe4>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d007      	beq.n	8008e92 <TIM_OC3_SetConfig+0x96>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4a17      	ldr	r2, [pc, #92]	; (8008ee4 <TIM_OC3_SetConfig+0xe8>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d003      	beq.n	8008e92 <TIM_OC3_SetConfig+0x96>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4a16      	ldr	r2, [pc, #88]	; (8008ee8 <TIM_OC3_SetConfig+0xec>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d113      	bne.n	8008eba <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	695b      	ldr	r3, [r3, #20]
 8008ea6:	011b      	lsls	r3, r3, #4
 8008ea8:	693a      	ldr	r2, [r7, #16]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	699b      	ldr	r3, [r3, #24]
 8008eb2:	011b      	lsls	r3, r3, #4
 8008eb4:	693a      	ldr	r2, [r7, #16]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	693a      	ldr	r2, [r7, #16]
 8008ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	68fa      	ldr	r2, [r7, #12]
 8008ec4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	685a      	ldr	r2, [r3, #4]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	697a      	ldr	r2, [r7, #20]
 8008ed2:	621a      	str	r2, [r3, #32]
}
 8008ed4:	bf00      	nop
 8008ed6:	371c      	adds	r7, #28
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr
 8008ee0:	40012c00 	.word	0x40012c00
 8008ee4:	40014000 	.word	0x40014000
 8008ee8:	40014400 	.word	0x40014400

08008eec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b087      	sub	sp, #28
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a1b      	ldr	r3, [r3, #32]
 8008efa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a1b      	ldr	r3, [r3, #32]
 8008f06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	69db      	ldr	r3, [r3, #28]
 8008f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	021b      	lsls	r3, r3, #8
 8008f2e:	68fa      	ldr	r2, [r7, #12]
 8008f30:	4313      	orrs	r3, r2
 8008f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	031b      	lsls	r3, r3, #12
 8008f42:	693a      	ldr	r2, [r7, #16]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4a14      	ldr	r2, [pc, #80]	; (8008f9c <TIM_OC4_SetConfig+0xb0>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d007      	beq.n	8008f60 <TIM_OC4_SetConfig+0x74>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4a13      	ldr	r2, [pc, #76]	; (8008fa0 <TIM_OC4_SetConfig+0xb4>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d003      	beq.n	8008f60 <TIM_OC4_SetConfig+0x74>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4a12      	ldr	r2, [pc, #72]	; (8008fa4 <TIM_OC4_SetConfig+0xb8>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d109      	bne.n	8008f74 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	695b      	ldr	r3, [r3, #20]
 8008f6c:	019b      	lsls	r3, r3, #6
 8008f6e:	697a      	ldr	r2, [r7, #20]
 8008f70:	4313      	orrs	r3, r2
 8008f72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	697a      	ldr	r2, [r7, #20]
 8008f78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	685a      	ldr	r2, [r3, #4]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	693a      	ldr	r2, [r7, #16]
 8008f8c:	621a      	str	r2, [r3, #32]
}
 8008f8e:	bf00      	nop
 8008f90:	371c      	adds	r7, #28
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop
 8008f9c:	40012c00 	.word	0x40012c00
 8008fa0:	40014000 	.word	0x40014000
 8008fa4:	40014400 	.word	0x40014400

08008fa8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b087      	sub	sp, #28
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a1b      	ldr	r3, [r3, #32]
 8008fb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a1b      	ldr	r3, [r3, #32]
 8008fc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	68fa      	ldr	r2, [r7, #12]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008fec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	041b      	lsls	r3, r3, #16
 8008ff4:	693a      	ldr	r2, [r7, #16]
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4a13      	ldr	r2, [pc, #76]	; (800904c <TIM_OC5_SetConfig+0xa4>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d007      	beq.n	8009012 <TIM_OC5_SetConfig+0x6a>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4a12      	ldr	r2, [pc, #72]	; (8009050 <TIM_OC5_SetConfig+0xa8>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d003      	beq.n	8009012 <TIM_OC5_SetConfig+0x6a>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4a11      	ldr	r2, [pc, #68]	; (8009054 <TIM_OC5_SetConfig+0xac>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d109      	bne.n	8009026 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009018:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	695b      	ldr	r3, [r3, #20]
 800901e:	021b      	lsls	r3, r3, #8
 8009020:	697a      	ldr	r2, [r7, #20]
 8009022:	4313      	orrs	r3, r2
 8009024:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	697a      	ldr	r2, [r7, #20]
 800902a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	685a      	ldr	r2, [r3, #4]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	693a      	ldr	r2, [r7, #16]
 800903e:	621a      	str	r2, [r3, #32]
}
 8009040:	bf00      	nop
 8009042:	371c      	adds	r7, #28
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr
 800904c:	40012c00 	.word	0x40012c00
 8009050:	40014000 	.word	0x40014000
 8009054:	40014400 	.word	0x40014400

08009058 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009058:	b480      	push	{r7}
 800905a:	b087      	sub	sp, #28
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a1b      	ldr	r3, [r3, #32]
 8009066:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a1b      	ldr	r3, [r3, #32]
 8009072:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800907e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800908a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	021b      	lsls	r3, r3, #8
 8009092:	68fa      	ldr	r2, [r7, #12]
 8009094:	4313      	orrs	r3, r2
 8009096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800909e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	051b      	lsls	r3, r3, #20
 80090a6:	693a      	ldr	r2, [r7, #16]
 80090a8:	4313      	orrs	r3, r2
 80090aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4a14      	ldr	r2, [pc, #80]	; (8009100 <TIM_OC6_SetConfig+0xa8>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d007      	beq.n	80090c4 <TIM_OC6_SetConfig+0x6c>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	4a13      	ldr	r2, [pc, #76]	; (8009104 <TIM_OC6_SetConfig+0xac>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d003      	beq.n	80090c4 <TIM_OC6_SetConfig+0x6c>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	4a12      	ldr	r2, [pc, #72]	; (8009108 <TIM_OC6_SetConfig+0xb0>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d109      	bne.n	80090d8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80090ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	695b      	ldr	r3, [r3, #20]
 80090d0:	029b      	lsls	r3, r3, #10
 80090d2:	697a      	ldr	r2, [r7, #20]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	697a      	ldr	r2, [r7, #20]
 80090dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	68fa      	ldr	r2, [r7, #12]
 80090e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	685a      	ldr	r2, [r3, #4]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	693a      	ldr	r2, [r7, #16]
 80090f0:	621a      	str	r2, [r3, #32]
}
 80090f2:	bf00      	nop
 80090f4:	371c      	adds	r7, #28
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	40012c00 	.word	0x40012c00
 8009104:	40014000 	.word	0x40014000
 8009108:	40014400 	.word	0x40014400

0800910c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800910c:	b480      	push	{r7}
 800910e:	b087      	sub	sp, #28
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	f003 031f 	and.w	r3, r3, #31
 800911e:	2201      	movs	r2, #1
 8009120:	fa02 f303 	lsl.w	r3, r2, r3
 8009124:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	6a1a      	ldr	r2, [r3, #32]
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	43db      	mvns	r3, r3
 800912e:	401a      	ands	r2, r3
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6a1a      	ldr	r2, [r3, #32]
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	f003 031f 	and.w	r3, r3, #31
 800913e:	6879      	ldr	r1, [r7, #4]
 8009140:	fa01 f303 	lsl.w	r3, r1, r3
 8009144:	431a      	orrs	r2, r3
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	621a      	str	r2, [r3, #32]
}
 800914a:	bf00      	nop
 800914c:	371c      	adds	r7, #28
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr
	...

08009158 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009158:	b480      	push	{r7}
 800915a:	b085      	sub	sp, #20
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009168:	2b01      	cmp	r3, #1
 800916a:	d101      	bne.n	8009170 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800916c:	2302      	movs	r3, #2
 800916e:	e04f      	b.n	8009210 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2202      	movs	r2, #2
 800917c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a21      	ldr	r2, [pc, #132]	; (800921c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d108      	bne.n	80091ac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80091a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	68fa      	ldr	r2, [r7, #12]
 80091a8:	4313      	orrs	r3, r2
 80091aa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	4313      	orrs	r3, r2
 80091bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68fa      	ldr	r2, [r7, #12]
 80091c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a14      	ldr	r2, [pc, #80]	; (800921c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d009      	beq.n	80091e4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091d8:	d004      	beq.n	80091e4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a10      	ldr	r2, [pc, #64]	; (8009220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d10c      	bne.n	80091fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	68ba      	ldr	r2, [r7, #8]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	68ba      	ldr	r2, [r7, #8]
 80091fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2201      	movs	r2, #1
 8009202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800920e:	2300      	movs	r3, #0
}
 8009210:	4618      	mov	r0, r3
 8009212:	3714      	adds	r7, #20
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr
 800921c:	40012c00 	.word	0x40012c00
 8009220:	40014000 	.word	0x40014000

08009224 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009224:	b480      	push	{r7}
 8009226:	b085      	sub	sp, #20
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800922e:	2300      	movs	r3, #0
 8009230:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009238:	2b01      	cmp	r3, #1
 800923a:	d101      	bne.n	8009240 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800923c:	2302      	movs	r3, #2
 800923e:	e060      	b.n	8009302 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	4313      	orrs	r3, r2
 8009254:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	4313      	orrs	r3, r2
 8009262:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	4313      	orrs	r3, r2
 8009270:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4313      	orrs	r3, r2
 800927e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	4313      	orrs	r3, r2
 800928c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	695b      	ldr	r3, [r3, #20]
 8009298:	4313      	orrs	r3, r2
 800929a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a6:	4313      	orrs	r3, r2
 80092a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	699b      	ldr	r3, [r3, #24]
 80092b4:	041b      	lsls	r3, r3, #16
 80092b6:	4313      	orrs	r3, r2
 80092b8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a14      	ldr	r2, [pc, #80]	; (8009310 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d115      	bne.n	80092f0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ce:	051b      	lsls	r3, r3, #20
 80092d0:	4313      	orrs	r3, r2
 80092d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	69db      	ldr	r3, [r3, #28]
 80092de:	4313      	orrs	r3, r2
 80092e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	6a1b      	ldr	r3, [r3, #32]
 80092ec:	4313      	orrs	r3, r2
 80092ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68fa      	ldr	r2, [r7, #12]
 80092f6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	3714      	adds	r7, #20
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop
 8009310:	40012c00 	.word	0x40012c00

08009314 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009314:	b480      	push	{r7}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800931c:	bf00      	nop
 800931e:	370c      	adds	r7, #12
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009330:	bf00      	nop
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009344:	bf00      	nop
 8009346:	370c      	adds	r7, #12
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d101      	bne.n	8009362 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e040      	b.n	80093e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009366:	2b00      	cmp	r3, #0
 8009368:	d106      	bne.n	8009378 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f7f9 fe88 	bl	8003088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2224      	movs	r2, #36	; 0x24
 800937c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f022 0201 	bic.w	r2, r2, #1
 800938c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 f92e 	bl	80095f0 <UART_SetConfig>
 8009394:	4603      	mov	r3, r0
 8009396:	2b01      	cmp	r3, #1
 8009398:	d101      	bne.n	800939e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	e022      	b.n	80093e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d002      	beq.n	80093ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 fb2e 	bl	8009a08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	685a      	ldr	r2, [r3, #4]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80093ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	689a      	ldr	r2, [r3, #8]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80093ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f042 0201 	orr.w	r2, r2, #1
 80093da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 fbb5 	bl	8009b4c <UART_CheckIdleState>
 80093e2:	4603      	mov	r3, r0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b08a      	sub	sp, #40	; 0x28
 80093f0:	af02      	add	r7, sp, #8
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	603b      	str	r3, [r7, #0]
 80093f8:	4613      	mov	r3, r2
 80093fa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009400:	2b20      	cmp	r3, #32
 8009402:	f040 8082 	bne.w	800950a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d002      	beq.n	8009412 <HAL_UART_Transmit+0x26>
 800940c:	88fb      	ldrh	r3, [r7, #6]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d101      	bne.n	8009416 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	e07a      	b.n	800950c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800941c:	2b01      	cmp	r3, #1
 800941e:	d101      	bne.n	8009424 <HAL_UART_Transmit+0x38>
 8009420:	2302      	movs	r3, #2
 8009422:	e073      	b.n	800950c <HAL_UART_Transmit+0x120>
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2201      	movs	r2, #1
 8009428:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2200      	movs	r2, #0
 8009430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2221      	movs	r2, #33	; 0x21
 8009438:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800943a:	f7fa f823 	bl	8003484 <HAL_GetTick>
 800943e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	88fa      	ldrh	r2, [r7, #6]
 8009444:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	88fa      	ldrh	r2, [r7, #6]
 800944c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009458:	d108      	bne.n	800946c <HAL_UART_Transmit+0x80>
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d104      	bne.n	800946c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009462:	2300      	movs	r3, #0
 8009464:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	61bb      	str	r3, [r7, #24]
 800946a:	e003      	b.n	8009474 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009470:	2300      	movs	r3, #0
 8009472:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2200      	movs	r2, #0
 8009478:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800947c:	e02d      	b.n	80094da <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	9300      	str	r3, [sp, #0]
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	2200      	movs	r2, #0
 8009486:	2180      	movs	r1, #128	; 0x80
 8009488:	68f8      	ldr	r0, [r7, #12]
 800948a:	f000 fba8 	bl	8009bde <UART_WaitOnFlagUntilTimeout>
 800948e:	4603      	mov	r3, r0
 8009490:	2b00      	cmp	r3, #0
 8009492:	d001      	beq.n	8009498 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009494:	2303      	movs	r3, #3
 8009496:	e039      	b.n	800950c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d10b      	bne.n	80094b6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	881a      	ldrh	r2, [r3, #0]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80094aa:	b292      	uxth	r2, r2
 80094ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	3302      	adds	r3, #2
 80094b2:	61bb      	str	r3, [r7, #24]
 80094b4:	e008      	b.n	80094c8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80094b6:	69fb      	ldr	r3, [r7, #28]
 80094b8:	781a      	ldrb	r2, [r3, #0]
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	b292      	uxth	r2, r2
 80094c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80094c2:	69fb      	ldr	r3, [r7, #28]
 80094c4:	3301      	adds	r3, #1
 80094c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	3b01      	subs	r3, #1
 80094d2:	b29a      	uxth	r2, r3
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d1cb      	bne.n	800947e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	9300      	str	r3, [sp, #0]
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	2200      	movs	r2, #0
 80094ee:	2140      	movs	r1, #64	; 0x40
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f000 fb74 	bl	8009bde <UART_WaitOnFlagUntilTimeout>
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d001      	beq.n	8009500 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80094fc:	2303      	movs	r3, #3
 80094fe:	e005      	b.n	800950c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2220      	movs	r2, #32
 8009504:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009506:	2300      	movs	r3, #0
 8009508:	e000      	b.n	800950c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800950a:	2302      	movs	r3, #2
  }
}
 800950c:	4618      	mov	r0, r3
 800950e:	3720      	adds	r7, #32
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	4613      	mov	r3, r2
 8009520:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009526:	2b20      	cmp	r3, #32
 8009528:	d131      	bne.n	800958e <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d002      	beq.n	8009536 <HAL_UART_Receive_DMA+0x22>
 8009530:	88fb      	ldrh	r3, [r7, #6]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d101      	bne.n	800953a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8009536:	2301      	movs	r3, #1
 8009538:	e02a      	b.n	8009590 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009540:	2b01      	cmp	r3, #1
 8009542:	d101      	bne.n	8009548 <HAL_UART_Receive_DMA+0x34>
 8009544:	2302      	movs	r3, #2
 8009546:	e023      	b.n	8009590 <HAL_UART_Receive_DMA+0x7c>
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2201      	movs	r2, #1
 800954c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2200      	movs	r2, #0
 8009554:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a0f      	ldr	r2, [pc, #60]	; (8009598 <HAL_UART_Receive_DMA+0x84>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d00e      	beq.n	800957e <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800956a:	2b00      	cmp	r3, #0
 800956c:	d007      	beq.n	800957e <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800957c:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800957e:	88fb      	ldrh	r3, [r7, #6]
 8009580:	461a      	mov	r2, r3
 8009582:	68b9      	ldr	r1, [r7, #8]
 8009584:	68f8      	ldr	r0, [r7, #12]
 8009586:	f000 fba7 	bl	8009cd8 <UART_Start_Receive_DMA>
 800958a:	4603      	mov	r3, r0
 800958c:	e000      	b.n	8009590 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 800958e:	2302      	movs	r3, #2
  }
}
 8009590:	4618      	mov	r0, r3
 8009592:	3710      	adds	r7, #16
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	40008000 	.word	0x40008000

0800959c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80095a4:	bf00      	nop
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80095b8:	bf00      	nop
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80095cc:	bf00      	nop
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	460b      	mov	r3, r1
 80095e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80095e4:	bf00      	nop
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095f0:	b5b0      	push	{r4, r5, r7, lr}
 80095f2:	b088      	sub	sp, #32
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80095f8:	2300      	movs	r3, #0
 80095fa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	689a      	ldr	r2, [r3, #8]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	691b      	ldr	r3, [r3, #16]
 8009604:	431a      	orrs	r2, r3
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	695b      	ldr	r3, [r3, #20]
 800960a:	431a      	orrs	r2, r3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	69db      	ldr	r3, [r3, #28]
 8009610:	4313      	orrs	r3, r2
 8009612:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	4baf      	ldr	r3, [pc, #700]	; (80098d8 <UART_SetConfig+0x2e8>)
 800961c:	4013      	ands	r3, r2
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	6812      	ldr	r2, [r2, #0]
 8009622:	69f9      	ldr	r1, [r7, #28]
 8009624:	430b      	orrs	r3, r1
 8009626:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	68da      	ldr	r2, [r3, #12]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	430a      	orrs	r2, r1
 800963c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	699b      	ldr	r3, [r3, #24]
 8009642:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4aa4      	ldr	r2, [pc, #656]	; (80098dc <UART_SetConfig+0x2ec>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d004      	beq.n	8009658 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a1b      	ldr	r3, [r3, #32]
 8009652:	69fa      	ldr	r2, [r7, #28]
 8009654:	4313      	orrs	r3, r2
 8009656:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	69fa      	ldr	r2, [r7, #28]
 8009668:	430a      	orrs	r2, r1
 800966a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a9b      	ldr	r2, [pc, #620]	; (80098e0 <UART_SetConfig+0x2f0>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d121      	bne.n	80096ba <UART_SetConfig+0xca>
 8009676:	4b9b      	ldr	r3, [pc, #620]	; (80098e4 <UART_SetConfig+0x2f4>)
 8009678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800967c:	f003 0303 	and.w	r3, r3, #3
 8009680:	2b03      	cmp	r3, #3
 8009682:	d817      	bhi.n	80096b4 <UART_SetConfig+0xc4>
 8009684:	a201      	add	r2, pc, #4	; (adr r2, 800968c <UART_SetConfig+0x9c>)
 8009686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800968a:	bf00      	nop
 800968c:	0800969d 	.word	0x0800969d
 8009690:	080096a9 	.word	0x080096a9
 8009694:	080096a3 	.word	0x080096a3
 8009698:	080096af 	.word	0x080096af
 800969c:	2301      	movs	r3, #1
 800969e:	76fb      	strb	r3, [r7, #27]
 80096a0:	e070      	b.n	8009784 <UART_SetConfig+0x194>
 80096a2:	2302      	movs	r3, #2
 80096a4:	76fb      	strb	r3, [r7, #27]
 80096a6:	e06d      	b.n	8009784 <UART_SetConfig+0x194>
 80096a8:	2304      	movs	r3, #4
 80096aa:	76fb      	strb	r3, [r7, #27]
 80096ac:	e06a      	b.n	8009784 <UART_SetConfig+0x194>
 80096ae:	2308      	movs	r3, #8
 80096b0:	76fb      	strb	r3, [r7, #27]
 80096b2:	e067      	b.n	8009784 <UART_SetConfig+0x194>
 80096b4:	2310      	movs	r3, #16
 80096b6:	76fb      	strb	r3, [r7, #27]
 80096b8:	e064      	b.n	8009784 <UART_SetConfig+0x194>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a8a      	ldr	r2, [pc, #552]	; (80098e8 <UART_SetConfig+0x2f8>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d132      	bne.n	800972a <UART_SetConfig+0x13a>
 80096c4:	4b87      	ldr	r3, [pc, #540]	; (80098e4 <UART_SetConfig+0x2f4>)
 80096c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096ca:	f003 030c 	and.w	r3, r3, #12
 80096ce:	2b0c      	cmp	r3, #12
 80096d0:	d828      	bhi.n	8009724 <UART_SetConfig+0x134>
 80096d2:	a201      	add	r2, pc, #4	; (adr r2, 80096d8 <UART_SetConfig+0xe8>)
 80096d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d8:	0800970d 	.word	0x0800970d
 80096dc:	08009725 	.word	0x08009725
 80096e0:	08009725 	.word	0x08009725
 80096e4:	08009725 	.word	0x08009725
 80096e8:	08009719 	.word	0x08009719
 80096ec:	08009725 	.word	0x08009725
 80096f0:	08009725 	.word	0x08009725
 80096f4:	08009725 	.word	0x08009725
 80096f8:	08009713 	.word	0x08009713
 80096fc:	08009725 	.word	0x08009725
 8009700:	08009725 	.word	0x08009725
 8009704:	08009725 	.word	0x08009725
 8009708:	0800971f 	.word	0x0800971f
 800970c:	2300      	movs	r3, #0
 800970e:	76fb      	strb	r3, [r7, #27]
 8009710:	e038      	b.n	8009784 <UART_SetConfig+0x194>
 8009712:	2302      	movs	r3, #2
 8009714:	76fb      	strb	r3, [r7, #27]
 8009716:	e035      	b.n	8009784 <UART_SetConfig+0x194>
 8009718:	2304      	movs	r3, #4
 800971a:	76fb      	strb	r3, [r7, #27]
 800971c:	e032      	b.n	8009784 <UART_SetConfig+0x194>
 800971e:	2308      	movs	r3, #8
 8009720:	76fb      	strb	r3, [r7, #27]
 8009722:	e02f      	b.n	8009784 <UART_SetConfig+0x194>
 8009724:	2310      	movs	r3, #16
 8009726:	76fb      	strb	r3, [r7, #27]
 8009728:	e02c      	b.n	8009784 <UART_SetConfig+0x194>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a6b      	ldr	r2, [pc, #428]	; (80098dc <UART_SetConfig+0x2ec>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d125      	bne.n	8009780 <UART_SetConfig+0x190>
 8009734:	4b6b      	ldr	r3, [pc, #428]	; (80098e4 <UART_SetConfig+0x2f4>)
 8009736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800973a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800973e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009742:	d017      	beq.n	8009774 <UART_SetConfig+0x184>
 8009744:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009748:	d817      	bhi.n	800977a <UART_SetConfig+0x18a>
 800974a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800974e:	d00b      	beq.n	8009768 <UART_SetConfig+0x178>
 8009750:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009754:	d811      	bhi.n	800977a <UART_SetConfig+0x18a>
 8009756:	2b00      	cmp	r3, #0
 8009758:	d003      	beq.n	8009762 <UART_SetConfig+0x172>
 800975a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800975e:	d006      	beq.n	800976e <UART_SetConfig+0x17e>
 8009760:	e00b      	b.n	800977a <UART_SetConfig+0x18a>
 8009762:	2300      	movs	r3, #0
 8009764:	76fb      	strb	r3, [r7, #27]
 8009766:	e00d      	b.n	8009784 <UART_SetConfig+0x194>
 8009768:	2302      	movs	r3, #2
 800976a:	76fb      	strb	r3, [r7, #27]
 800976c:	e00a      	b.n	8009784 <UART_SetConfig+0x194>
 800976e:	2304      	movs	r3, #4
 8009770:	76fb      	strb	r3, [r7, #27]
 8009772:	e007      	b.n	8009784 <UART_SetConfig+0x194>
 8009774:	2308      	movs	r3, #8
 8009776:	76fb      	strb	r3, [r7, #27]
 8009778:	e004      	b.n	8009784 <UART_SetConfig+0x194>
 800977a:	2310      	movs	r3, #16
 800977c:	76fb      	strb	r3, [r7, #27]
 800977e:	e001      	b.n	8009784 <UART_SetConfig+0x194>
 8009780:	2310      	movs	r3, #16
 8009782:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a54      	ldr	r2, [pc, #336]	; (80098dc <UART_SetConfig+0x2ec>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d173      	bne.n	8009876 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800978e:	7efb      	ldrb	r3, [r7, #27]
 8009790:	2b08      	cmp	r3, #8
 8009792:	d824      	bhi.n	80097de <UART_SetConfig+0x1ee>
 8009794:	a201      	add	r2, pc, #4	; (adr r2, 800979c <UART_SetConfig+0x1ac>)
 8009796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800979a:	bf00      	nop
 800979c:	080097c1 	.word	0x080097c1
 80097a0:	080097df 	.word	0x080097df
 80097a4:	080097c9 	.word	0x080097c9
 80097a8:	080097df 	.word	0x080097df
 80097ac:	080097cf 	.word	0x080097cf
 80097b0:	080097df 	.word	0x080097df
 80097b4:	080097df 	.word	0x080097df
 80097b8:	080097df 	.word	0x080097df
 80097bc:	080097d7 	.word	0x080097d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097c0:	f7fe f940 	bl	8007a44 <HAL_RCC_GetPCLK1Freq>
 80097c4:	6178      	str	r0, [r7, #20]
        break;
 80097c6:	e00f      	b.n	80097e8 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80097c8:	4b48      	ldr	r3, [pc, #288]	; (80098ec <UART_SetConfig+0x2fc>)
 80097ca:	617b      	str	r3, [r7, #20]
        break;
 80097cc:	e00c      	b.n	80097e8 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80097ce:	f7fe f8a1 	bl	8007914 <HAL_RCC_GetSysClockFreq>
 80097d2:	6178      	str	r0, [r7, #20]
        break;
 80097d4:	e008      	b.n	80097e8 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097da:	617b      	str	r3, [r7, #20]
        break;
 80097dc:	e004      	b.n	80097e8 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 80097de:	2300      	movs	r3, #0
 80097e0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80097e2:	2301      	movs	r3, #1
 80097e4:	76bb      	strb	r3, [r7, #26]
        break;
 80097e6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	f000 80fe 	beq.w	80099ec <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	685a      	ldr	r2, [r3, #4]
 80097f4:	4613      	mov	r3, r2
 80097f6:	005b      	lsls	r3, r3, #1
 80097f8:	4413      	add	r3, r2
 80097fa:	697a      	ldr	r2, [r7, #20]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d305      	bcc.n	800980c <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009806:	697a      	ldr	r2, [r7, #20]
 8009808:	429a      	cmp	r2, r3
 800980a:	d902      	bls.n	8009812 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 800980c:	2301      	movs	r3, #1
 800980e:	76bb      	strb	r3, [r7, #26]
 8009810:	e0ec      	b.n	80099ec <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	4618      	mov	r0, r3
 8009816:	f04f 0100 	mov.w	r1, #0
 800981a:	f04f 0200 	mov.w	r2, #0
 800981e:	f04f 0300 	mov.w	r3, #0
 8009822:	020b      	lsls	r3, r1, #8
 8009824:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009828:	0202      	lsls	r2, r0, #8
 800982a:	6879      	ldr	r1, [r7, #4]
 800982c:	6849      	ldr	r1, [r1, #4]
 800982e:	0849      	lsrs	r1, r1, #1
 8009830:	4608      	mov	r0, r1
 8009832:	f04f 0100 	mov.w	r1, #0
 8009836:	1814      	adds	r4, r2, r0
 8009838:	eb43 0501 	adc.w	r5, r3, r1
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	461a      	mov	r2, r3
 8009842:	f04f 0300 	mov.w	r3, #0
 8009846:	4620      	mov	r0, r4
 8009848:	4629      	mov	r1, r5
 800984a:	f7f7 f98f 	bl	8000b6c <__aeabi_uldivmod>
 800984e:	4602      	mov	r2, r0
 8009850:	460b      	mov	r3, r1
 8009852:	4613      	mov	r3, r2
 8009854:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800985c:	d308      	bcc.n	8009870 <UART_SetConfig+0x280>
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009864:	d204      	bcs.n	8009870 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	693a      	ldr	r2, [r7, #16]
 800986c:	60da      	str	r2, [r3, #12]
 800986e:	e0bd      	b.n	80099ec <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8009870:	2301      	movs	r3, #1
 8009872:	76bb      	strb	r3, [r7, #26]
 8009874:	e0ba      	b.n	80099ec <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	69db      	ldr	r3, [r3, #28]
 800987a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800987e:	d168      	bne.n	8009952 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8009880:	7efb      	ldrb	r3, [r7, #27]
 8009882:	2b08      	cmp	r3, #8
 8009884:	d834      	bhi.n	80098f0 <UART_SetConfig+0x300>
 8009886:	a201      	add	r2, pc, #4	; (adr r2, 800988c <UART_SetConfig+0x29c>)
 8009888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800988c:	080098b1 	.word	0x080098b1
 8009890:	080098b9 	.word	0x080098b9
 8009894:	080098c1 	.word	0x080098c1
 8009898:	080098f1 	.word	0x080098f1
 800989c:	080098c7 	.word	0x080098c7
 80098a0:	080098f1 	.word	0x080098f1
 80098a4:	080098f1 	.word	0x080098f1
 80098a8:	080098f1 	.word	0x080098f1
 80098ac:	080098cf 	.word	0x080098cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098b0:	f7fe f8c8 	bl	8007a44 <HAL_RCC_GetPCLK1Freq>
 80098b4:	6178      	str	r0, [r7, #20]
        break;
 80098b6:	e020      	b.n	80098fa <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098b8:	f7fe f8da 	bl	8007a70 <HAL_RCC_GetPCLK2Freq>
 80098bc:	6178      	str	r0, [r7, #20]
        break;
 80098be:	e01c      	b.n	80098fa <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80098c0:	4b0a      	ldr	r3, [pc, #40]	; (80098ec <UART_SetConfig+0x2fc>)
 80098c2:	617b      	str	r3, [r7, #20]
        break;
 80098c4:	e019      	b.n	80098fa <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80098c6:	f7fe f825 	bl	8007914 <HAL_RCC_GetSysClockFreq>
 80098ca:	6178      	str	r0, [r7, #20]
        break;
 80098cc:	e015      	b.n	80098fa <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098d2:	617b      	str	r3, [r7, #20]
        break;
 80098d4:	e011      	b.n	80098fa <UART_SetConfig+0x30a>
 80098d6:	bf00      	nop
 80098d8:	efff69f3 	.word	0xefff69f3
 80098dc:	40008000 	.word	0x40008000
 80098e0:	40013800 	.word	0x40013800
 80098e4:	40021000 	.word	0x40021000
 80098e8:	40004400 	.word	0x40004400
 80098ec:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80098f0:	2300      	movs	r3, #0
 80098f2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80098f4:	2301      	movs	r3, #1
 80098f6:	76bb      	strb	r3, [r7, #26]
        break;
 80098f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d075      	beq.n	80099ec <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	005a      	lsls	r2, r3, #1
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	085b      	lsrs	r3, r3, #1
 800990a:	441a      	add	r2, r3
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	fbb2 f3f3 	udiv	r3, r2, r3
 8009914:	b29b      	uxth	r3, r3
 8009916:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	2b0f      	cmp	r3, #15
 800991c:	d916      	bls.n	800994c <UART_SetConfig+0x35c>
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009924:	d212      	bcs.n	800994c <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	b29b      	uxth	r3, r3
 800992a:	f023 030f 	bic.w	r3, r3, #15
 800992e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	085b      	lsrs	r3, r3, #1
 8009934:	b29b      	uxth	r3, r3
 8009936:	f003 0307 	and.w	r3, r3, #7
 800993a:	b29a      	uxth	r2, r3
 800993c:	89fb      	ldrh	r3, [r7, #14]
 800993e:	4313      	orrs	r3, r2
 8009940:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	89fa      	ldrh	r2, [r7, #14]
 8009948:	60da      	str	r2, [r3, #12]
 800994a:	e04f      	b.n	80099ec <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	76bb      	strb	r3, [r7, #26]
 8009950:	e04c      	b.n	80099ec <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009952:	7efb      	ldrb	r3, [r7, #27]
 8009954:	2b08      	cmp	r3, #8
 8009956:	d828      	bhi.n	80099aa <UART_SetConfig+0x3ba>
 8009958:	a201      	add	r2, pc, #4	; (adr r2, 8009960 <UART_SetConfig+0x370>)
 800995a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800995e:	bf00      	nop
 8009960:	08009985 	.word	0x08009985
 8009964:	0800998d 	.word	0x0800998d
 8009968:	08009995 	.word	0x08009995
 800996c:	080099ab 	.word	0x080099ab
 8009970:	0800999b 	.word	0x0800999b
 8009974:	080099ab 	.word	0x080099ab
 8009978:	080099ab 	.word	0x080099ab
 800997c:	080099ab 	.word	0x080099ab
 8009980:	080099a3 	.word	0x080099a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009984:	f7fe f85e 	bl	8007a44 <HAL_RCC_GetPCLK1Freq>
 8009988:	6178      	str	r0, [r7, #20]
        break;
 800998a:	e013      	b.n	80099b4 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800998c:	f7fe f870 	bl	8007a70 <HAL_RCC_GetPCLK2Freq>
 8009990:	6178      	str	r0, [r7, #20]
        break;
 8009992:	e00f      	b.n	80099b4 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009994:	4b1b      	ldr	r3, [pc, #108]	; (8009a04 <UART_SetConfig+0x414>)
 8009996:	617b      	str	r3, [r7, #20]
        break;
 8009998:	e00c      	b.n	80099b4 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800999a:	f7fd ffbb 	bl	8007914 <HAL_RCC_GetSysClockFreq>
 800999e:	6178      	str	r0, [r7, #20]
        break;
 80099a0:	e008      	b.n	80099b4 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099a6:	617b      	str	r3, [r7, #20]
        break;
 80099a8:	e004      	b.n	80099b4 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 80099aa:	2300      	movs	r3, #0
 80099ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	76bb      	strb	r3, [r7, #26]
        break;
 80099b2:	bf00      	nop
    }

    if (pclk != 0U)
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d018      	beq.n	80099ec <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	085a      	lsrs	r2, r3, #1
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	441a      	add	r2, r3
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	2b0f      	cmp	r3, #15
 80099d4:	d908      	bls.n	80099e8 <UART_SetConfig+0x3f8>
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099dc:	d204      	bcs.n	80099e8 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	693a      	ldr	r2, [r7, #16]
 80099e4:	60da      	str	r2, [r3, #12]
 80099e6:	e001      	b.n	80099ec <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80099e8:	2301      	movs	r3, #1
 80099ea:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80099f8:	7ebb      	ldrb	r3, [r7, #26]
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3720      	adds	r7, #32
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bdb0      	pop	{r4, r5, r7, pc}
 8009a02:	bf00      	nop
 8009a04:	00f42400 	.word	0x00f42400

08009a08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a14:	f003 0301 	and.w	r3, r3, #1
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d00a      	beq.n	8009a32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	430a      	orrs	r2, r1
 8009a30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a36:	f003 0302 	and.w	r3, r3, #2
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d00a      	beq.n	8009a54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	430a      	orrs	r2, r1
 8009a52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a58:	f003 0304 	and.w	r3, r3, #4
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d00a      	beq.n	8009a76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	430a      	orrs	r2, r1
 8009a74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a7a:	f003 0308 	and.w	r3, r3, #8
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d00a      	beq.n	8009a98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	430a      	orrs	r2, r1
 8009a96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9c:	f003 0310 	and.w	r3, r3, #16
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00a      	beq.n	8009aba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	430a      	orrs	r2, r1
 8009ab8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009abe:	f003 0320 	and.w	r3, r3, #32
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d00a      	beq.n	8009adc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	430a      	orrs	r2, r1
 8009ada:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d01a      	beq.n	8009b1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	430a      	orrs	r2, r1
 8009afc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b06:	d10a      	bne.n	8009b1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	685b      	ldr	r3, [r3, #4]
 8009b0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	430a      	orrs	r2, r1
 8009b1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00a      	beq.n	8009b40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	430a      	orrs	r2, r1
 8009b3e:	605a      	str	r2, [r3, #4]
  }
}
 8009b40:	bf00      	nop
 8009b42:	370c      	adds	r7, #12
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b086      	sub	sp, #24
 8009b50:	af02      	add	r7, sp, #8
 8009b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b5c:	f7f9 fc92 	bl	8003484 <HAL_GetTick>
 8009b60:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f003 0308 	and.w	r3, r3, #8
 8009b6c:	2b08      	cmp	r3, #8
 8009b6e:	d10e      	bne.n	8009b8e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b74:	9300      	str	r3, [sp, #0]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 f82d 	bl	8009bde <UART_WaitOnFlagUntilTimeout>
 8009b84:	4603      	mov	r3, r0
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d001      	beq.n	8009b8e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b8a:	2303      	movs	r3, #3
 8009b8c:	e023      	b.n	8009bd6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f003 0304 	and.w	r3, r3, #4
 8009b98:	2b04      	cmp	r3, #4
 8009b9a:	d10e      	bne.n	8009bba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ba0:	9300      	str	r3, [sp, #0]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 f817 	bl	8009bde <UART_WaitOnFlagUntilTimeout>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d001      	beq.n	8009bba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009bb6:	2303      	movs	r3, #3
 8009bb8:	e00d      	b.n	8009bd6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2220      	movs	r2, #32
 8009bbe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2220      	movs	r2, #32
 8009bc4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009bd4:	2300      	movs	r3, #0
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3710      	adds	r7, #16
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009bde:	b580      	push	{r7, lr}
 8009be0:	b084      	sub	sp, #16
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	60f8      	str	r0, [r7, #12]
 8009be6:	60b9      	str	r1, [r7, #8]
 8009be8:	603b      	str	r3, [r7, #0]
 8009bea:	4613      	mov	r3, r2
 8009bec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bee:	e05e      	b.n	8009cae <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bf6:	d05a      	beq.n	8009cae <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bf8:	f7f9 fc44 	bl	8003484 <HAL_GetTick>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	1ad3      	subs	r3, r2, r3
 8009c02:	69ba      	ldr	r2, [r7, #24]
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d302      	bcc.n	8009c0e <UART_WaitOnFlagUntilTimeout+0x30>
 8009c08:	69bb      	ldr	r3, [r7, #24]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d11b      	bne.n	8009c46 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009c1c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	689a      	ldr	r2, [r3, #8]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f022 0201 	bic.w	r2, r2, #1
 8009c2c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2220      	movs	r2, #32
 8009c32:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2220      	movs	r2, #32
 8009c38:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009c42:	2303      	movs	r3, #3
 8009c44:	e043      	b.n	8009cce <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f003 0304 	and.w	r3, r3, #4
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d02c      	beq.n	8009cae <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	69db      	ldr	r3, [r3, #28]
 8009c5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c62:	d124      	bne.n	8009cae <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c6c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009c7c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	689a      	ldr	r2, [r3, #8]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f022 0201 	bic.w	r2, r2, #1
 8009c8c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2220      	movs	r2, #32
 8009c92:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2220      	movs	r2, #32
 8009c98:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2220      	movs	r2, #32
 8009c9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009caa:	2303      	movs	r3, #3
 8009cac:	e00f      	b.n	8009cce <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	69da      	ldr	r2, [r3, #28]
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	4013      	ands	r3, r2
 8009cb8:	68ba      	ldr	r2, [r7, #8]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	bf0c      	ite	eq
 8009cbe:	2301      	moveq	r3, #1
 8009cc0:	2300      	movne	r3, #0
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	79fb      	ldrb	r3, [r7, #7]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d091      	beq.n	8009bf0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ccc:	2300      	movs	r3, #0
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
	...

08009cd8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	60f8      	str	r0, [r7, #12]
 8009ce0:	60b9      	str	r1, [r7, #8]
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	68ba      	ldr	r2, [r7, #8]
 8009cea:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	88fa      	ldrh	r2, [r7, #6]
 8009cf0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2222      	movs	r2, #34	; 0x22
 8009d00:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d02b      	beq.n	8009d62 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d0e:	4a25      	ldr	r2, [pc, #148]	; (8009da4 <UART_Start_Receive_DMA+0xcc>)
 8009d10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d16:	4a24      	ldr	r2, [pc, #144]	; (8009da8 <UART_Start_Receive_DMA+0xd0>)
 8009d18:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d1e:	4a23      	ldr	r2, [pc, #140]	; (8009dac <UART_Start_Receive_DMA+0xd4>)
 8009d20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d26:	2200      	movs	r2, #0
 8009d28:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	3324      	adds	r3, #36	; 0x24
 8009d34:	4619      	mov	r1, r3
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	88fb      	ldrh	r3, [r7, #6]
 8009d3e:	f7fa fedb 	bl	8004af8 <HAL_DMA_Start_IT>
 8009d42:	4603      	mov	r3, r0
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d00c      	beq.n	8009d62 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2210      	movs	r2, #16
 8009d4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2220      	movs	r2, #32
 8009d5c:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	e01c      	b.n	8009d9c <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2200      	movs	r2, #0
 8009d66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	681a      	ldr	r2, [r3, #0]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d78:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	689a      	ldr	r2, [r3, #8]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f042 0201 	orr.w	r2, r2, #1
 8009d88:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	689a      	ldr	r2, [r3, #8]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d98:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8009d9a:	2300      	movs	r3, #0
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3710      	adds	r7, #16
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	08009e39 	.word	0x08009e39
 8009da8:	08009ed1 	.word	0x08009ed1
 8009dac:	08009f09 	.word	0x08009f09

08009db0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	681a      	ldr	r2, [r3, #0]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009dc6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2220      	movs	r2, #32
 8009dcc:	679a      	str	r2, [r3, #120]	; 0x78
}
 8009dce:	bf00      	nop
 8009dd0:	370c      	adds	r7, #12
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr

08009dda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009dda:	b480      	push	{r7}
 8009ddc:	b083      	sub	sp, #12
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009df0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	689a      	ldr	r2, [r3, #8]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f022 0201 	bic.w	r2, r2, #1
 8009e00:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d107      	bne.n	8009e1a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f022 0210 	bic.w	r2, r2, #16
 8009e18:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2220      	movs	r2, #32
 8009e1e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2200      	movs	r2, #0
 8009e24:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009e2c:	bf00      	nop
 8009e2e:	370c      	adds	r7, #12
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr

08009e38 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e44:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f003 0320 	and.w	r3, r3, #32
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d12a      	bne.n	8009eaa <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2200      	movs	r2, #0
 8009e58:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e6a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	689a      	ldr	r2, [r3, #8]
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f022 0201 	bic.w	r2, r2, #1
 8009e7a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	689a      	ldr	r2, [r3, #8]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e8a:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2220      	movs	r2, #32
 8009e90:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d107      	bne.n	8009eaa <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f022 0210 	bic.w	r2, r2, #16
 8009ea8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d107      	bne.n	8009ec2 <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009eb8:	4619      	mov	r1, r3
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	f7ff fb8c 	bl	80095d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009ec0:	e002      	b.n	8009ec8 <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 8009ec2:	68f8      	ldr	r0, [r7, #12]
 8009ec4:	f7ff fb6a 	bl	800959c <HAL_UART_RxCpltCallback>
}
 8009ec8:	bf00      	nop
 8009eca:	3710      	adds	r7, #16
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009edc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d109      	bne.n	8009efa <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009eec:	085b      	lsrs	r3, r3, #1
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	68f8      	ldr	r0, [r7, #12]
 8009ef4:	f7ff fb70 	bl	80095d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009ef8:	e002      	b.n	8009f00 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8009efa:	68f8      	ldr	r0, [r7, #12]
 8009efc:	f7ff fb58 	bl	80095b0 <HAL_UART_RxHalfCpltCallback>
}
 8009f00:	bf00      	nop
 8009f02:	3710      	adds	r7, #16
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b086      	sub	sp, #24
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f14:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f1a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f20:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f2c:	2b80      	cmp	r3, #128	; 0x80
 8009f2e:	d109      	bne.n	8009f44 <UART_DMAError+0x3c>
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	2b21      	cmp	r3, #33	; 0x21
 8009f34:	d106      	bne.n	8009f44 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8009f3e:	6978      	ldr	r0, [r7, #20]
 8009f40:	f7ff ff36 	bl	8009db0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	689b      	ldr	r3, [r3, #8]
 8009f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f4e:	2b40      	cmp	r3, #64	; 0x40
 8009f50:	d109      	bne.n	8009f66 <UART_DMAError+0x5e>
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2b22      	cmp	r3, #34	; 0x22
 8009f56:	d106      	bne.n	8009f66 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8009f60:	6978      	ldr	r0, [r7, #20]
 8009f62:	f7ff ff3a 	bl	8009dda <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f6c:	f043 0210 	orr.w	r2, r3, #16
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f76:	6978      	ldr	r0, [r7, #20]
 8009f78:	f7ff fb24 	bl	80095c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f7c:	bf00      	nop
 8009f7e:	3718      	adds	r7, #24
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <__libc_init_array>:
 8009f84:	b570      	push	{r4, r5, r6, lr}
 8009f86:	4d0d      	ldr	r5, [pc, #52]	; (8009fbc <__libc_init_array+0x38>)
 8009f88:	4c0d      	ldr	r4, [pc, #52]	; (8009fc0 <__libc_init_array+0x3c>)
 8009f8a:	1b64      	subs	r4, r4, r5
 8009f8c:	10a4      	asrs	r4, r4, #2
 8009f8e:	2600      	movs	r6, #0
 8009f90:	42a6      	cmp	r6, r4
 8009f92:	d109      	bne.n	8009fa8 <__libc_init_array+0x24>
 8009f94:	4d0b      	ldr	r5, [pc, #44]	; (8009fc4 <__libc_init_array+0x40>)
 8009f96:	4c0c      	ldr	r4, [pc, #48]	; (8009fc8 <__libc_init_array+0x44>)
 8009f98:	f001 f8b4 	bl	800b104 <_init>
 8009f9c:	1b64      	subs	r4, r4, r5
 8009f9e:	10a4      	asrs	r4, r4, #2
 8009fa0:	2600      	movs	r6, #0
 8009fa2:	42a6      	cmp	r6, r4
 8009fa4:	d105      	bne.n	8009fb2 <__libc_init_array+0x2e>
 8009fa6:	bd70      	pop	{r4, r5, r6, pc}
 8009fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fac:	4798      	blx	r3
 8009fae:	3601      	adds	r6, #1
 8009fb0:	e7ee      	b.n	8009f90 <__libc_init_array+0xc>
 8009fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fb6:	4798      	blx	r3
 8009fb8:	3601      	adds	r6, #1
 8009fba:	e7f2      	b.n	8009fa2 <__libc_init_array+0x1e>
 8009fbc:	0800b350 	.word	0x0800b350
 8009fc0:	0800b350 	.word	0x0800b350
 8009fc4:	0800b350 	.word	0x0800b350
 8009fc8:	0800b354 	.word	0x0800b354

08009fcc <memcpy>:
 8009fcc:	440a      	add	r2, r1
 8009fce:	4291      	cmp	r1, r2
 8009fd0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009fd4:	d100      	bne.n	8009fd8 <memcpy+0xc>
 8009fd6:	4770      	bx	lr
 8009fd8:	b510      	push	{r4, lr}
 8009fda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fe2:	4291      	cmp	r1, r2
 8009fe4:	d1f9      	bne.n	8009fda <memcpy+0xe>
 8009fe6:	bd10      	pop	{r4, pc}

08009fe8 <memset>:
 8009fe8:	4402      	add	r2, r0
 8009fea:	4603      	mov	r3, r0
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d100      	bne.n	8009ff2 <memset+0xa>
 8009ff0:	4770      	bx	lr
 8009ff2:	f803 1b01 	strb.w	r1, [r3], #1
 8009ff6:	e7f9      	b.n	8009fec <memset+0x4>

08009ff8 <cos>:
 8009ff8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ffa:	ec53 2b10 	vmov	r2, r3, d0
 8009ffe:	4824      	ldr	r0, [pc, #144]	; (800a090 <cos+0x98>)
 800a000:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a004:	4281      	cmp	r1, r0
 800a006:	dc06      	bgt.n	800a016 <cos+0x1e>
 800a008:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800a088 <cos+0x90>
 800a00c:	f000 faa4 	bl	800a558 <__kernel_cos>
 800a010:	ec51 0b10 	vmov	r0, r1, d0
 800a014:	e007      	b.n	800a026 <cos+0x2e>
 800a016:	481f      	ldr	r0, [pc, #124]	; (800a094 <cos+0x9c>)
 800a018:	4281      	cmp	r1, r0
 800a01a:	dd09      	ble.n	800a030 <cos+0x38>
 800a01c:	ee10 0a10 	vmov	r0, s0
 800a020:	4619      	mov	r1, r3
 800a022:	f7f6 f8d9 	bl	80001d8 <__aeabi_dsub>
 800a026:	ec41 0b10 	vmov	d0, r0, r1
 800a02a:	b005      	add	sp, #20
 800a02c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a030:	4668      	mov	r0, sp
 800a032:	f000 f885 	bl	800a140 <__ieee754_rem_pio2>
 800a036:	f000 0003 	and.w	r0, r0, #3
 800a03a:	2801      	cmp	r0, #1
 800a03c:	d007      	beq.n	800a04e <cos+0x56>
 800a03e:	2802      	cmp	r0, #2
 800a040:	d012      	beq.n	800a068 <cos+0x70>
 800a042:	b9c0      	cbnz	r0, 800a076 <cos+0x7e>
 800a044:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a048:	ed9d 0b00 	vldr	d0, [sp]
 800a04c:	e7de      	b.n	800a00c <cos+0x14>
 800a04e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a052:	ed9d 0b00 	vldr	d0, [sp]
 800a056:	f000 fe87 	bl	800ad68 <__kernel_sin>
 800a05a:	ec53 2b10 	vmov	r2, r3, d0
 800a05e:	ee10 0a10 	vmov	r0, s0
 800a062:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a066:	e7de      	b.n	800a026 <cos+0x2e>
 800a068:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a06c:	ed9d 0b00 	vldr	d0, [sp]
 800a070:	f000 fa72 	bl	800a558 <__kernel_cos>
 800a074:	e7f1      	b.n	800a05a <cos+0x62>
 800a076:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a07a:	ed9d 0b00 	vldr	d0, [sp]
 800a07e:	2001      	movs	r0, #1
 800a080:	f000 fe72 	bl	800ad68 <__kernel_sin>
 800a084:	e7c4      	b.n	800a010 <cos+0x18>
 800a086:	bf00      	nop
	...
 800a090:	3fe921fb 	.word	0x3fe921fb
 800a094:	7fefffff 	.word	0x7fefffff

0800a098 <sin>:
 800a098:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a09a:	ec53 2b10 	vmov	r2, r3, d0
 800a09e:	4826      	ldr	r0, [pc, #152]	; (800a138 <sin+0xa0>)
 800a0a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a0a4:	4281      	cmp	r1, r0
 800a0a6:	dc07      	bgt.n	800a0b8 <sin+0x20>
 800a0a8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a130 <sin+0x98>
 800a0ac:	2000      	movs	r0, #0
 800a0ae:	f000 fe5b 	bl	800ad68 <__kernel_sin>
 800a0b2:	ec51 0b10 	vmov	r0, r1, d0
 800a0b6:	e007      	b.n	800a0c8 <sin+0x30>
 800a0b8:	4820      	ldr	r0, [pc, #128]	; (800a13c <sin+0xa4>)
 800a0ba:	4281      	cmp	r1, r0
 800a0bc:	dd09      	ble.n	800a0d2 <sin+0x3a>
 800a0be:	ee10 0a10 	vmov	r0, s0
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	f7f6 f888 	bl	80001d8 <__aeabi_dsub>
 800a0c8:	ec41 0b10 	vmov	d0, r0, r1
 800a0cc:	b005      	add	sp, #20
 800a0ce:	f85d fb04 	ldr.w	pc, [sp], #4
 800a0d2:	4668      	mov	r0, sp
 800a0d4:	f000 f834 	bl	800a140 <__ieee754_rem_pio2>
 800a0d8:	f000 0003 	and.w	r0, r0, #3
 800a0dc:	2801      	cmp	r0, #1
 800a0de:	d008      	beq.n	800a0f2 <sin+0x5a>
 800a0e0:	2802      	cmp	r0, #2
 800a0e2:	d00d      	beq.n	800a100 <sin+0x68>
 800a0e4:	b9d0      	cbnz	r0, 800a11c <sin+0x84>
 800a0e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a0ea:	ed9d 0b00 	vldr	d0, [sp]
 800a0ee:	2001      	movs	r0, #1
 800a0f0:	e7dd      	b.n	800a0ae <sin+0x16>
 800a0f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a0f6:	ed9d 0b00 	vldr	d0, [sp]
 800a0fa:	f000 fa2d 	bl	800a558 <__kernel_cos>
 800a0fe:	e7d8      	b.n	800a0b2 <sin+0x1a>
 800a100:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a104:	ed9d 0b00 	vldr	d0, [sp]
 800a108:	2001      	movs	r0, #1
 800a10a:	f000 fe2d 	bl	800ad68 <__kernel_sin>
 800a10e:	ec53 2b10 	vmov	r2, r3, d0
 800a112:	ee10 0a10 	vmov	r0, s0
 800a116:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a11a:	e7d5      	b.n	800a0c8 <sin+0x30>
 800a11c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a120:	ed9d 0b00 	vldr	d0, [sp]
 800a124:	f000 fa18 	bl	800a558 <__kernel_cos>
 800a128:	e7f1      	b.n	800a10e <sin+0x76>
 800a12a:	bf00      	nop
 800a12c:	f3af 8000 	nop.w
	...
 800a138:	3fe921fb 	.word	0x3fe921fb
 800a13c:	7fefffff 	.word	0x7fefffff

0800a140 <__ieee754_rem_pio2>:
 800a140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a144:	ed2d 8b02 	vpush	{d8}
 800a148:	ec55 4b10 	vmov	r4, r5, d0
 800a14c:	4bca      	ldr	r3, [pc, #808]	; (800a478 <__ieee754_rem_pio2+0x338>)
 800a14e:	b08b      	sub	sp, #44	; 0x2c
 800a150:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a154:	4598      	cmp	r8, r3
 800a156:	4682      	mov	sl, r0
 800a158:	9502      	str	r5, [sp, #8]
 800a15a:	dc08      	bgt.n	800a16e <__ieee754_rem_pio2+0x2e>
 800a15c:	2200      	movs	r2, #0
 800a15e:	2300      	movs	r3, #0
 800a160:	ed80 0b00 	vstr	d0, [r0]
 800a164:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a168:	f04f 0b00 	mov.w	fp, #0
 800a16c:	e028      	b.n	800a1c0 <__ieee754_rem_pio2+0x80>
 800a16e:	4bc3      	ldr	r3, [pc, #780]	; (800a47c <__ieee754_rem_pio2+0x33c>)
 800a170:	4598      	cmp	r8, r3
 800a172:	dc78      	bgt.n	800a266 <__ieee754_rem_pio2+0x126>
 800a174:	9b02      	ldr	r3, [sp, #8]
 800a176:	4ec2      	ldr	r6, [pc, #776]	; (800a480 <__ieee754_rem_pio2+0x340>)
 800a178:	2b00      	cmp	r3, #0
 800a17a:	ee10 0a10 	vmov	r0, s0
 800a17e:	a3b0      	add	r3, pc, #704	; (adr r3, 800a440 <__ieee754_rem_pio2+0x300>)
 800a180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a184:	4629      	mov	r1, r5
 800a186:	dd39      	ble.n	800a1fc <__ieee754_rem_pio2+0xbc>
 800a188:	f7f6 f826 	bl	80001d8 <__aeabi_dsub>
 800a18c:	45b0      	cmp	r8, r6
 800a18e:	4604      	mov	r4, r0
 800a190:	460d      	mov	r5, r1
 800a192:	d01b      	beq.n	800a1cc <__ieee754_rem_pio2+0x8c>
 800a194:	a3ac      	add	r3, pc, #688	; (adr r3, 800a448 <__ieee754_rem_pio2+0x308>)
 800a196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19a:	f7f6 f81d 	bl	80001d8 <__aeabi_dsub>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	e9ca 2300 	strd	r2, r3, [sl]
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	4629      	mov	r1, r5
 800a1aa:	f7f6 f815 	bl	80001d8 <__aeabi_dsub>
 800a1ae:	a3a6      	add	r3, pc, #664	; (adr r3, 800a448 <__ieee754_rem_pio2+0x308>)
 800a1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b4:	f7f6 f810 	bl	80001d8 <__aeabi_dsub>
 800a1b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a1bc:	f04f 0b01 	mov.w	fp, #1
 800a1c0:	4658      	mov	r0, fp
 800a1c2:	b00b      	add	sp, #44	; 0x2c
 800a1c4:	ecbd 8b02 	vpop	{d8}
 800a1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1cc:	a3a0      	add	r3, pc, #640	; (adr r3, 800a450 <__ieee754_rem_pio2+0x310>)
 800a1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d2:	f7f6 f801 	bl	80001d8 <__aeabi_dsub>
 800a1d6:	a3a0      	add	r3, pc, #640	; (adr r3, 800a458 <__ieee754_rem_pio2+0x318>)
 800a1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1dc:	4604      	mov	r4, r0
 800a1de:	460d      	mov	r5, r1
 800a1e0:	f7f5 fffa 	bl	80001d8 <__aeabi_dsub>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	e9ca 2300 	strd	r2, r3, [sl]
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	4629      	mov	r1, r5
 800a1f0:	f7f5 fff2 	bl	80001d8 <__aeabi_dsub>
 800a1f4:	a398      	add	r3, pc, #608	; (adr r3, 800a458 <__ieee754_rem_pio2+0x318>)
 800a1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fa:	e7db      	b.n	800a1b4 <__ieee754_rem_pio2+0x74>
 800a1fc:	f7f5 ffee 	bl	80001dc <__adddf3>
 800a200:	45b0      	cmp	r8, r6
 800a202:	4604      	mov	r4, r0
 800a204:	460d      	mov	r5, r1
 800a206:	d016      	beq.n	800a236 <__ieee754_rem_pio2+0xf6>
 800a208:	a38f      	add	r3, pc, #572	; (adr r3, 800a448 <__ieee754_rem_pio2+0x308>)
 800a20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20e:	f7f5 ffe5 	bl	80001dc <__adddf3>
 800a212:	4602      	mov	r2, r0
 800a214:	460b      	mov	r3, r1
 800a216:	e9ca 2300 	strd	r2, r3, [sl]
 800a21a:	4620      	mov	r0, r4
 800a21c:	4629      	mov	r1, r5
 800a21e:	f7f5 ffdb 	bl	80001d8 <__aeabi_dsub>
 800a222:	a389      	add	r3, pc, #548	; (adr r3, 800a448 <__ieee754_rem_pio2+0x308>)
 800a224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a228:	f7f5 ffd8 	bl	80001dc <__adddf3>
 800a22c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800a230:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a234:	e7c4      	b.n	800a1c0 <__ieee754_rem_pio2+0x80>
 800a236:	a386      	add	r3, pc, #536	; (adr r3, 800a450 <__ieee754_rem_pio2+0x310>)
 800a238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23c:	f7f5 ffce 	bl	80001dc <__adddf3>
 800a240:	a385      	add	r3, pc, #532	; (adr r3, 800a458 <__ieee754_rem_pio2+0x318>)
 800a242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a246:	4604      	mov	r4, r0
 800a248:	460d      	mov	r5, r1
 800a24a:	f7f5 ffc7 	bl	80001dc <__adddf3>
 800a24e:	4602      	mov	r2, r0
 800a250:	460b      	mov	r3, r1
 800a252:	e9ca 2300 	strd	r2, r3, [sl]
 800a256:	4620      	mov	r0, r4
 800a258:	4629      	mov	r1, r5
 800a25a:	f7f5 ffbd 	bl	80001d8 <__aeabi_dsub>
 800a25e:	a37e      	add	r3, pc, #504	; (adr r3, 800a458 <__ieee754_rem_pio2+0x318>)
 800a260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a264:	e7e0      	b.n	800a228 <__ieee754_rem_pio2+0xe8>
 800a266:	4b87      	ldr	r3, [pc, #540]	; (800a484 <__ieee754_rem_pio2+0x344>)
 800a268:	4598      	cmp	r8, r3
 800a26a:	f300 80d9 	bgt.w	800a420 <__ieee754_rem_pio2+0x2e0>
 800a26e:	f000 fe39 	bl	800aee4 <fabs>
 800a272:	ec55 4b10 	vmov	r4, r5, d0
 800a276:	ee10 0a10 	vmov	r0, s0
 800a27a:	a379      	add	r3, pc, #484	; (adr r3, 800a460 <__ieee754_rem_pio2+0x320>)
 800a27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a280:	4629      	mov	r1, r5
 800a282:	f7f6 f961 	bl	8000548 <__aeabi_dmul>
 800a286:	4b80      	ldr	r3, [pc, #512]	; (800a488 <__ieee754_rem_pio2+0x348>)
 800a288:	2200      	movs	r2, #0
 800a28a:	f7f5 ffa7 	bl	80001dc <__adddf3>
 800a28e:	f7f6 fbf5 	bl	8000a7c <__aeabi_d2iz>
 800a292:	4683      	mov	fp, r0
 800a294:	f7f6 f8ee 	bl	8000474 <__aeabi_i2d>
 800a298:	4602      	mov	r2, r0
 800a29a:	460b      	mov	r3, r1
 800a29c:	ec43 2b18 	vmov	d8, r2, r3
 800a2a0:	a367      	add	r3, pc, #412	; (adr r3, 800a440 <__ieee754_rem_pio2+0x300>)
 800a2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a6:	f7f6 f94f 	bl	8000548 <__aeabi_dmul>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	4629      	mov	r1, r5
 800a2b2:	f7f5 ff91 	bl	80001d8 <__aeabi_dsub>
 800a2b6:	a364      	add	r3, pc, #400	; (adr r3, 800a448 <__ieee754_rem_pio2+0x308>)
 800a2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2bc:	4606      	mov	r6, r0
 800a2be:	460f      	mov	r7, r1
 800a2c0:	ec51 0b18 	vmov	r0, r1, d8
 800a2c4:	f7f6 f940 	bl	8000548 <__aeabi_dmul>
 800a2c8:	f1bb 0f1f 	cmp.w	fp, #31
 800a2cc:	4604      	mov	r4, r0
 800a2ce:	460d      	mov	r5, r1
 800a2d0:	dc0d      	bgt.n	800a2ee <__ieee754_rem_pio2+0x1ae>
 800a2d2:	4b6e      	ldr	r3, [pc, #440]	; (800a48c <__ieee754_rem_pio2+0x34c>)
 800a2d4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800a2d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2dc:	4543      	cmp	r3, r8
 800a2de:	d006      	beq.n	800a2ee <__ieee754_rem_pio2+0x1ae>
 800a2e0:	4622      	mov	r2, r4
 800a2e2:	462b      	mov	r3, r5
 800a2e4:	4630      	mov	r0, r6
 800a2e6:	4639      	mov	r1, r7
 800a2e8:	f7f5 ff76 	bl	80001d8 <__aeabi_dsub>
 800a2ec:	e00f      	b.n	800a30e <__ieee754_rem_pio2+0x1ce>
 800a2ee:	462b      	mov	r3, r5
 800a2f0:	4622      	mov	r2, r4
 800a2f2:	4630      	mov	r0, r6
 800a2f4:	4639      	mov	r1, r7
 800a2f6:	f7f5 ff6f 	bl	80001d8 <__aeabi_dsub>
 800a2fa:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a2fe:	9303      	str	r3, [sp, #12]
 800a300:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a304:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a308:	f1b8 0f10 	cmp.w	r8, #16
 800a30c:	dc02      	bgt.n	800a314 <__ieee754_rem_pio2+0x1d4>
 800a30e:	e9ca 0100 	strd	r0, r1, [sl]
 800a312:	e039      	b.n	800a388 <__ieee754_rem_pio2+0x248>
 800a314:	a34e      	add	r3, pc, #312	; (adr r3, 800a450 <__ieee754_rem_pio2+0x310>)
 800a316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31a:	ec51 0b18 	vmov	r0, r1, d8
 800a31e:	f7f6 f913 	bl	8000548 <__aeabi_dmul>
 800a322:	4604      	mov	r4, r0
 800a324:	460d      	mov	r5, r1
 800a326:	4602      	mov	r2, r0
 800a328:	460b      	mov	r3, r1
 800a32a:	4630      	mov	r0, r6
 800a32c:	4639      	mov	r1, r7
 800a32e:	f7f5 ff53 	bl	80001d8 <__aeabi_dsub>
 800a332:	4602      	mov	r2, r0
 800a334:	460b      	mov	r3, r1
 800a336:	4680      	mov	r8, r0
 800a338:	4689      	mov	r9, r1
 800a33a:	4630      	mov	r0, r6
 800a33c:	4639      	mov	r1, r7
 800a33e:	f7f5 ff4b 	bl	80001d8 <__aeabi_dsub>
 800a342:	4622      	mov	r2, r4
 800a344:	462b      	mov	r3, r5
 800a346:	f7f5 ff47 	bl	80001d8 <__aeabi_dsub>
 800a34a:	a343      	add	r3, pc, #268	; (adr r3, 800a458 <__ieee754_rem_pio2+0x318>)
 800a34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a350:	4604      	mov	r4, r0
 800a352:	460d      	mov	r5, r1
 800a354:	ec51 0b18 	vmov	r0, r1, d8
 800a358:	f7f6 f8f6 	bl	8000548 <__aeabi_dmul>
 800a35c:	4622      	mov	r2, r4
 800a35e:	462b      	mov	r3, r5
 800a360:	f7f5 ff3a 	bl	80001d8 <__aeabi_dsub>
 800a364:	4602      	mov	r2, r0
 800a366:	460b      	mov	r3, r1
 800a368:	4604      	mov	r4, r0
 800a36a:	460d      	mov	r5, r1
 800a36c:	4640      	mov	r0, r8
 800a36e:	4649      	mov	r1, r9
 800a370:	f7f5 ff32 	bl	80001d8 <__aeabi_dsub>
 800a374:	9a03      	ldr	r2, [sp, #12]
 800a376:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a37a:	1ad3      	subs	r3, r2, r3
 800a37c:	2b31      	cmp	r3, #49	; 0x31
 800a37e:	dc24      	bgt.n	800a3ca <__ieee754_rem_pio2+0x28a>
 800a380:	e9ca 0100 	strd	r0, r1, [sl]
 800a384:	4646      	mov	r6, r8
 800a386:	464f      	mov	r7, r9
 800a388:	e9da 8900 	ldrd	r8, r9, [sl]
 800a38c:	4630      	mov	r0, r6
 800a38e:	4642      	mov	r2, r8
 800a390:	464b      	mov	r3, r9
 800a392:	4639      	mov	r1, r7
 800a394:	f7f5 ff20 	bl	80001d8 <__aeabi_dsub>
 800a398:	462b      	mov	r3, r5
 800a39a:	4622      	mov	r2, r4
 800a39c:	f7f5 ff1c 	bl	80001d8 <__aeabi_dsub>
 800a3a0:	9b02      	ldr	r3, [sp, #8]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a3a8:	f6bf af0a 	bge.w	800a1c0 <__ieee754_rem_pio2+0x80>
 800a3ac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a3b0:	f8ca 3004 	str.w	r3, [sl, #4]
 800a3b4:	f8ca 8000 	str.w	r8, [sl]
 800a3b8:	f8ca 0008 	str.w	r0, [sl, #8]
 800a3bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3c0:	f8ca 300c 	str.w	r3, [sl, #12]
 800a3c4:	f1cb 0b00 	rsb	fp, fp, #0
 800a3c8:	e6fa      	b.n	800a1c0 <__ieee754_rem_pio2+0x80>
 800a3ca:	a327      	add	r3, pc, #156	; (adr r3, 800a468 <__ieee754_rem_pio2+0x328>)
 800a3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d0:	ec51 0b18 	vmov	r0, r1, d8
 800a3d4:	f7f6 f8b8 	bl	8000548 <__aeabi_dmul>
 800a3d8:	4604      	mov	r4, r0
 800a3da:	460d      	mov	r5, r1
 800a3dc:	4602      	mov	r2, r0
 800a3de:	460b      	mov	r3, r1
 800a3e0:	4640      	mov	r0, r8
 800a3e2:	4649      	mov	r1, r9
 800a3e4:	f7f5 fef8 	bl	80001d8 <__aeabi_dsub>
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	4606      	mov	r6, r0
 800a3ee:	460f      	mov	r7, r1
 800a3f0:	4640      	mov	r0, r8
 800a3f2:	4649      	mov	r1, r9
 800a3f4:	f7f5 fef0 	bl	80001d8 <__aeabi_dsub>
 800a3f8:	4622      	mov	r2, r4
 800a3fa:	462b      	mov	r3, r5
 800a3fc:	f7f5 feec 	bl	80001d8 <__aeabi_dsub>
 800a400:	a31b      	add	r3, pc, #108	; (adr r3, 800a470 <__ieee754_rem_pio2+0x330>)
 800a402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a406:	4604      	mov	r4, r0
 800a408:	460d      	mov	r5, r1
 800a40a:	ec51 0b18 	vmov	r0, r1, d8
 800a40e:	f7f6 f89b 	bl	8000548 <__aeabi_dmul>
 800a412:	4622      	mov	r2, r4
 800a414:	462b      	mov	r3, r5
 800a416:	f7f5 fedf 	bl	80001d8 <__aeabi_dsub>
 800a41a:	4604      	mov	r4, r0
 800a41c:	460d      	mov	r5, r1
 800a41e:	e75f      	b.n	800a2e0 <__ieee754_rem_pio2+0x1a0>
 800a420:	4b1b      	ldr	r3, [pc, #108]	; (800a490 <__ieee754_rem_pio2+0x350>)
 800a422:	4598      	cmp	r8, r3
 800a424:	dd36      	ble.n	800a494 <__ieee754_rem_pio2+0x354>
 800a426:	ee10 2a10 	vmov	r2, s0
 800a42a:	462b      	mov	r3, r5
 800a42c:	4620      	mov	r0, r4
 800a42e:	4629      	mov	r1, r5
 800a430:	f7f5 fed2 	bl	80001d8 <__aeabi_dsub>
 800a434:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a438:	e9ca 0100 	strd	r0, r1, [sl]
 800a43c:	e694      	b.n	800a168 <__ieee754_rem_pio2+0x28>
 800a43e:	bf00      	nop
 800a440:	54400000 	.word	0x54400000
 800a444:	3ff921fb 	.word	0x3ff921fb
 800a448:	1a626331 	.word	0x1a626331
 800a44c:	3dd0b461 	.word	0x3dd0b461
 800a450:	1a600000 	.word	0x1a600000
 800a454:	3dd0b461 	.word	0x3dd0b461
 800a458:	2e037073 	.word	0x2e037073
 800a45c:	3ba3198a 	.word	0x3ba3198a
 800a460:	6dc9c883 	.word	0x6dc9c883
 800a464:	3fe45f30 	.word	0x3fe45f30
 800a468:	2e000000 	.word	0x2e000000
 800a46c:	3ba3198a 	.word	0x3ba3198a
 800a470:	252049c1 	.word	0x252049c1
 800a474:	397b839a 	.word	0x397b839a
 800a478:	3fe921fb 	.word	0x3fe921fb
 800a47c:	4002d97b 	.word	0x4002d97b
 800a480:	3ff921fb 	.word	0x3ff921fb
 800a484:	413921fb 	.word	0x413921fb
 800a488:	3fe00000 	.word	0x3fe00000
 800a48c:	0800b16c 	.word	0x0800b16c
 800a490:	7fefffff 	.word	0x7fefffff
 800a494:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a498:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a49c:	ee10 0a10 	vmov	r0, s0
 800a4a0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a4a4:	ee10 6a10 	vmov	r6, s0
 800a4a8:	460f      	mov	r7, r1
 800a4aa:	f7f6 fae7 	bl	8000a7c <__aeabi_d2iz>
 800a4ae:	f7f5 ffe1 	bl	8000474 <__aeabi_i2d>
 800a4b2:	4602      	mov	r2, r0
 800a4b4:	460b      	mov	r3, r1
 800a4b6:	4630      	mov	r0, r6
 800a4b8:	4639      	mov	r1, r7
 800a4ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a4be:	f7f5 fe8b 	bl	80001d8 <__aeabi_dsub>
 800a4c2:	4b22      	ldr	r3, [pc, #136]	; (800a54c <__ieee754_rem_pio2+0x40c>)
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f7f6 f83f 	bl	8000548 <__aeabi_dmul>
 800a4ca:	460f      	mov	r7, r1
 800a4cc:	4606      	mov	r6, r0
 800a4ce:	f7f6 fad5 	bl	8000a7c <__aeabi_d2iz>
 800a4d2:	f7f5 ffcf 	bl	8000474 <__aeabi_i2d>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	460b      	mov	r3, r1
 800a4da:	4630      	mov	r0, r6
 800a4dc:	4639      	mov	r1, r7
 800a4de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a4e2:	f7f5 fe79 	bl	80001d8 <__aeabi_dsub>
 800a4e6:	4b19      	ldr	r3, [pc, #100]	; (800a54c <__ieee754_rem_pio2+0x40c>)
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f7f6 f82d 	bl	8000548 <__aeabi_dmul>
 800a4ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a4f2:	ad04      	add	r5, sp, #16
 800a4f4:	f04f 0803 	mov.w	r8, #3
 800a4f8:	46a9      	mov	r9, r5
 800a4fa:	2600      	movs	r6, #0
 800a4fc:	2700      	movs	r7, #0
 800a4fe:	4632      	mov	r2, r6
 800a500:	463b      	mov	r3, r7
 800a502:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a506:	46c3      	mov	fp, r8
 800a508:	3d08      	subs	r5, #8
 800a50a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a50e:	f7f6 fa83 	bl	8000a18 <__aeabi_dcmpeq>
 800a512:	2800      	cmp	r0, #0
 800a514:	d1f3      	bne.n	800a4fe <__ieee754_rem_pio2+0x3be>
 800a516:	4b0e      	ldr	r3, [pc, #56]	; (800a550 <__ieee754_rem_pio2+0x410>)
 800a518:	9301      	str	r3, [sp, #4]
 800a51a:	2302      	movs	r3, #2
 800a51c:	9300      	str	r3, [sp, #0]
 800a51e:	4622      	mov	r2, r4
 800a520:	465b      	mov	r3, fp
 800a522:	4651      	mov	r1, sl
 800a524:	4648      	mov	r0, r9
 800a526:	f000 f8df 	bl	800a6e8 <__kernel_rem_pio2>
 800a52a:	9b02      	ldr	r3, [sp, #8]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	4683      	mov	fp, r0
 800a530:	f6bf ae46 	bge.w	800a1c0 <__ieee754_rem_pio2+0x80>
 800a534:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a538:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a53c:	f8ca 3004 	str.w	r3, [sl, #4]
 800a540:	f8da 300c 	ldr.w	r3, [sl, #12]
 800a544:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a548:	e73a      	b.n	800a3c0 <__ieee754_rem_pio2+0x280>
 800a54a:	bf00      	nop
 800a54c:	41700000 	.word	0x41700000
 800a550:	0800b1ec 	.word	0x0800b1ec
 800a554:	00000000 	.word	0x00000000

0800a558 <__kernel_cos>:
 800a558:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a55c:	ec57 6b10 	vmov	r6, r7, d0
 800a560:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a564:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a568:	ed8d 1b00 	vstr	d1, [sp]
 800a56c:	da07      	bge.n	800a57e <__kernel_cos+0x26>
 800a56e:	ee10 0a10 	vmov	r0, s0
 800a572:	4639      	mov	r1, r7
 800a574:	f7f6 fa82 	bl	8000a7c <__aeabi_d2iz>
 800a578:	2800      	cmp	r0, #0
 800a57a:	f000 8088 	beq.w	800a68e <__kernel_cos+0x136>
 800a57e:	4632      	mov	r2, r6
 800a580:	463b      	mov	r3, r7
 800a582:	4630      	mov	r0, r6
 800a584:	4639      	mov	r1, r7
 800a586:	f7f5 ffdf 	bl	8000548 <__aeabi_dmul>
 800a58a:	4b51      	ldr	r3, [pc, #324]	; (800a6d0 <__kernel_cos+0x178>)
 800a58c:	2200      	movs	r2, #0
 800a58e:	4604      	mov	r4, r0
 800a590:	460d      	mov	r5, r1
 800a592:	f7f5 ffd9 	bl	8000548 <__aeabi_dmul>
 800a596:	a340      	add	r3, pc, #256	; (adr r3, 800a698 <__kernel_cos+0x140>)
 800a598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59c:	4682      	mov	sl, r0
 800a59e:	468b      	mov	fp, r1
 800a5a0:	4620      	mov	r0, r4
 800a5a2:	4629      	mov	r1, r5
 800a5a4:	f7f5 ffd0 	bl	8000548 <__aeabi_dmul>
 800a5a8:	a33d      	add	r3, pc, #244	; (adr r3, 800a6a0 <__kernel_cos+0x148>)
 800a5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ae:	f7f5 fe15 	bl	80001dc <__adddf3>
 800a5b2:	4622      	mov	r2, r4
 800a5b4:	462b      	mov	r3, r5
 800a5b6:	f7f5 ffc7 	bl	8000548 <__aeabi_dmul>
 800a5ba:	a33b      	add	r3, pc, #236	; (adr r3, 800a6a8 <__kernel_cos+0x150>)
 800a5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c0:	f7f5 fe0a 	bl	80001d8 <__aeabi_dsub>
 800a5c4:	4622      	mov	r2, r4
 800a5c6:	462b      	mov	r3, r5
 800a5c8:	f7f5 ffbe 	bl	8000548 <__aeabi_dmul>
 800a5cc:	a338      	add	r3, pc, #224	; (adr r3, 800a6b0 <__kernel_cos+0x158>)
 800a5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d2:	f7f5 fe03 	bl	80001dc <__adddf3>
 800a5d6:	4622      	mov	r2, r4
 800a5d8:	462b      	mov	r3, r5
 800a5da:	f7f5 ffb5 	bl	8000548 <__aeabi_dmul>
 800a5de:	a336      	add	r3, pc, #216	; (adr r3, 800a6b8 <__kernel_cos+0x160>)
 800a5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e4:	f7f5 fdf8 	bl	80001d8 <__aeabi_dsub>
 800a5e8:	4622      	mov	r2, r4
 800a5ea:	462b      	mov	r3, r5
 800a5ec:	f7f5 ffac 	bl	8000548 <__aeabi_dmul>
 800a5f0:	a333      	add	r3, pc, #204	; (adr r3, 800a6c0 <__kernel_cos+0x168>)
 800a5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f6:	f7f5 fdf1 	bl	80001dc <__adddf3>
 800a5fa:	4622      	mov	r2, r4
 800a5fc:	462b      	mov	r3, r5
 800a5fe:	f7f5 ffa3 	bl	8000548 <__aeabi_dmul>
 800a602:	4622      	mov	r2, r4
 800a604:	462b      	mov	r3, r5
 800a606:	f7f5 ff9f 	bl	8000548 <__aeabi_dmul>
 800a60a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a60e:	4604      	mov	r4, r0
 800a610:	460d      	mov	r5, r1
 800a612:	4630      	mov	r0, r6
 800a614:	4639      	mov	r1, r7
 800a616:	f7f5 ff97 	bl	8000548 <__aeabi_dmul>
 800a61a:	460b      	mov	r3, r1
 800a61c:	4602      	mov	r2, r0
 800a61e:	4629      	mov	r1, r5
 800a620:	4620      	mov	r0, r4
 800a622:	f7f5 fdd9 	bl	80001d8 <__aeabi_dsub>
 800a626:	4b2b      	ldr	r3, [pc, #172]	; (800a6d4 <__kernel_cos+0x17c>)
 800a628:	4598      	cmp	r8, r3
 800a62a:	4606      	mov	r6, r0
 800a62c:	460f      	mov	r7, r1
 800a62e:	dc10      	bgt.n	800a652 <__kernel_cos+0xfa>
 800a630:	4602      	mov	r2, r0
 800a632:	460b      	mov	r3, r1
 800a634:	4650      	mov	r0, sl
 800a636:	4659      	mov	r1, fp
 800a638:	f7f5 fdce 	bl	80001d8 <__aeabi_dsub>
 800a63c:	460b      	mov	r3, r1
 800a63e:	4926      	ldr	r1, [pc, #152]	; (800a6d8 <__kernel_cos+0x180>)
 800a640:	4602      	mov	r2, r0
 800a642:	2000      	movs	r0, #0
 800a644:	f7f5 fdc8 	bl	80001d8 <__aeabi_dsub>
 800a648:	ec41 0b10 	vmov	d0, r0, r1
 800a64c:	b003      	add	sp, #12
 800a64e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a652:	4b22      	ldr	r3, [pc, #136]	; (800a6dc <__kernel_cos+0x184>)
 800a654:	4920      	ldr	r1, [pc, #128]	; (800a6d8 <__kernel_cos+0x180>)
 800a656:	4598      	cmp	r8, r3
 800a658:	bfcc      	ite	gt
 800a65a:	4d21      	ldrgt	r5, [pc, #132]	; (800a6e0 <__kernel_cos+0x188>)
 800a65c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a660:	2400      	movs	r4, #0
 800a662:	4622      	mov	r2, r4
 800a664:	462b      	mov	r3, r5
 800a666:	2000      	movs	r0, #0
 800a668:	f7f5 fdb6 	bl	80001d8 <__aeabi_dsub>
 800a66c:	4622      	mov	r2, r4
 800a66e:	4680      	mov	r8, r0
 800a670:	4689      	mov	r9, r1
 800a672:	462b      	mov	r3, r5
 800a674:	4650      	mov	r0, sl
 800a676:	4659      	mov	r1, fp
 800a678:	f7f5 fdae 	bl	80001d8 <__aeabi_dsub>
 800a67c:	4632      	mov	r2, r6
 800a67e:	463b      	mov	r3, r7
 800a680:	f7f5 fdaa 	bl	80001d8 <__aeabi_dsub>
 800a684:	4602      	mov	r2, r0
 800a686:	460b      	mov	r3, r1
 800a688:	4640      	mov	r0, r8
 800a68a:	4649      	mov	r1, r9
 800a68c:	e7da      	b.n	800a644 <__kernel_cos+0xec>
 800a68e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a6c8 <__kernel_cos+0x170>
 800a692:	e7db      	b.n	800a64c <__kernel_cos+0xf4>
 800a694:	f3af 8000 	nop.w
 800a698:	be8838d4 	.word	0xbe8838d4
 800a69c:	bda8fae9 	.word	0xbda8fae9
 800a6a0:	bdb4b1c4 	.word	0xbdb4b1c4
 800a6a4:	3e21ee9e 	.word	0x3e21ee9e
 800a6a8:	809c52ad 	.word	0x809c52ad
 800a6ac:	3e927e4f 	.word	0x3e927e4f
 800a6b0:	19cb1590 	.word	0x19cb1590
 800a6b4:	3efa01a0 	.word	0x3efa01a0
 800a6b8:	16c15177 	.word	0x16c15177
 800a6bc:	3f56c16c 	.word	0x3f56c16c
 800a6c0:	5555554c 	.word	0x5555554c
 800a6c4:	3fa55555 	.word	0x3fa55555
 800a6c8:	00000000 	.word	0x00000000
 800a6cc:	3ff00000 	.word	0x3ff00000
 800a6d0:	3fe00000 	.word	0x3fe00000
 800a6d4:	3fd33332 	.word	0x3fd33332
 800a6d8:	3ff00000 	.word	0x3ff00000
 800a6dc:	3fe90000 	.word	0x3fe90000
 800a6e0:	3fd20000 	.word	0x3fd20000
 800a6e4:	00000000 	.word	0x00000000

0800a6e8 <__kernel_rem_pio2>:
 800a6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ec:	ed2d 8b02 	vpush	{d8}
 800a6f0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800a6f4:	f112 0f14 	cmn.w	r2, #20
 800a6f8:	9308      	str	r3, [sp, #32]
 800a6fa:	9101      	str	r1, [sp, #4]
 800a6fc:	4bc6      	ldr	r3, [pc, #792]	; (800aa18 <__kernel_rem_pio2+0x330>)
 800a6fe:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800a700:	9009      	str	r0, [sp, #36]	; 0x24
 800a702:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a706:	9304      	str	r3, [sp, #16]
 800a708:	9b08      	ldr	r3, [sp, #32]
 800a70a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a70e:	bfa8      	it	ge
 800a710:	1ed4      	subge	r4, r2, #3
 800a712:	9306      	str	r3, [sp, #24]
 800a714:	bfb2      	itee	lt
 800a716:	2400      	movlt	r4, #0
 800a718:	2318      	movge	r3, #24
 800a71a:	fb94 f4f3 	sdivge	r4, r4, r3
 800a71e:	f06f 0317 	mvn.w	r3, #23
 800a722:	fb04 3303 	mla	r3, r4, r3, r3
 800a726:	eb03 0a02 	add.w	sl, r3, r2
 800a72a:	9b04      	ldr	r3, [sp, #16]
 800a72c:	9a06      	ldr	r2, [sp, #24]
 800a72e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800aa08 <__kernel_rem_pio2+0x320>
 800a732:	eb03 0802 	add.w	r8, r3, r2
 800a736:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a738:	1aa7      	subs	r7, r4, r2
 800a73a:	ae20      	add	r6, sp, #128	; 0x80
 800a73c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a740:	2500      	movs	r5, #0
 800a742:	4545      	cmp	r5, r8
 800a744:	dd18      	ble.n	800a778 <__kernel_rem_pio2+0x90>
 800a746:	9b08      	ldr	r3, [sp, #32]
 800a748:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800a74c:	aa20      	add	r2, sp, #128	; 0x80
 800a74e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800aa08 <__kernel_rem_pio2+0x320>
 800a752:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a756:	f1c3 0301 	rsb	r3, r3, #1
 800a75a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800a75e:	9307      	str	r3, [sp, #28]
 800a760:	9b07      	ldr	r3, [sp, #28]
 800a762:	9a04      	ldr	r2, [sp, #16]
 800a764:	4443      	add	r3, r8
 800a766:	429a      	cmp	r2, r3
 800a768:	db2f      	blt.n	800a7ca <__kernel_rem_pio2+0xe2>
 800a76a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a76e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a772:	462f      	mov	r7, r5
 800a774:	2600      	movs	r6, #0
 800a776:	e01b      	b.n	800a7b0 <__kernel_rem_pio2+0xc8>
 800a778:	42ef      	cmn	r7, r5
 800a77a:	d407      	bmi.n	800a78c <__kernel_rem_pio2+0xa4>
 800a77c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a780:	f7f5 fe78 	bl	8000474 <__aeabi_i2d>
 800a784:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a788:	3501      	adds	r5, #1
 800a78a:	e7da      	b.n	800a742 <__kernel_rem_pio2+0x5a>
 800a78c:	ec51 0b18 	vmov	r0, r1, d8
 800a790:	e7f8      	b.n	800a784 <__kernel_rem_pio2+0x9c>
 800a792:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a796:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a79a:	f7f5 fed5 	bl	8000548 <__aeabi_dmul>
 800a79e:	4602      	mov	r2, r0
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7a6:	f7f5 fd19 	bl	80001dc <__adddf3>
 800a7aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7ae:	3601      	adds	r6, #1
 800a7b0:	9b06      	ldr	r3, [sp, #24]
 800a7b2:	429e      	cmp	r6, r3
 800a7b4:	f1a7 0708 	sub.w	r7, r7, #8
 800a7b8:	ddeb      	ble.n	800a792 <__kernel_rem_pio2+0xaa>
 800a7ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a7be:	3508      	adds	r5, #8
 800a7c0:	ecab 7b02 	vstmia	fp!, {d7}
 800a7c4:	f108 0801 	add.w	r8, r8, #1
 800a7c8:	e7ca      	b.n	800a760 <__kernel_rem_pio2+0x78>
 800a7ca:	9b04      	ldr	r3, [sp, #16]
 800a7cc:	aa0c      	add	r2, sp, #48	; 0x30
 800a7ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a7d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7d4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a7d6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a7da:	9c04      	ldr	r4, [sp, #16]
 800a7dc:	930a      	str	r3, [sp, #40]	; 0x28
 800a7de:	ab98      	add	r3, sp, #608	; 0x260
 800a7e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a7e4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a7e8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800a7ec:	f8cd b008 	str.w	fp, [sp, #8]
 800a7f0:	4625      	mov	r5, r4
 800a7f2:	2d00      	cmp	r5, #0
 800a7f4:	dc78      	bgt.n	800a8e8 <__kernel_rem_pio2+0x200>
 800a7f6:	ec47 6b10 	vmov	d0, r6, r7
 800a7fa:	4650      	mov	r0, sl
 800a7fc:	f000 fbfc 	bl	800aff8 <scalbn>
 800a800:	ec57 6b10 	vmov	r6, r7, d0
 800a804:	2200      	movs	r2, #0
 800a806:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a80a:	ee10 0a10 	vmov	r0, s0
 800a80e:	4639      	mov	r1, r7
 800a810:	f7f5 fe9a 	bl	8000548 <__aeabi_dmul>
 800a814:	ec41 0b10 	vmov	d0, r0, r1
 800a818:	f000 fb6e 	bl	800aef8 <floor>
 800a81c:	4b7f      	ldr	r3, [pc, #508]	; (800aa1c <__kernel_rem_pio2+0x334>)
 800a81e:	ec51 0b10 	vmov	r0, r1, d0
 800a822:	2200      	movs	r2, #0
 800a824:	f7f5 fe90 	bl	8000548 <__aeabi_dmul>
 800a828:	4602      	mov	r2, r0
 800a82a:	460b      	mov	r3, r1
 800a82c:	4630      	mov	r0, r6
 800a82e:	4639      	mov	r1, r7
 800a830:	f7f5 fcd2 	bl	80001d8 <__aeabi_dsub>
 800a834:	460f      	mov	r7, r1
 800a836:	4606      	mov	r6, r0
 800a838:	f7f6 f920 	bl	8000a7c <__aeabi_d2iz>
 800a83c:	9007      	str	r0, [sp, #28]
 800a83e:	f7f5 fe19 	bl	8000474 <__aeabi_i2d>
 800a842:	4602      	mov	r2, r0
 800a844:	460b      	mov	r3, r1
 800a846:	4630      	mov	r0, r6
 800a848:	4639      	mov	r1, r7
 800a84a:	f7f5 fcc5 	bl	80001d8 <__aeabi_dsub>
 800a84e:	f1ba 0f00 	cmp.w	sl, #0
 800a852:	4606      	mov	r6, r0
 800a854:	460f      	mov	r7, r1
 800a856:	dd70      	ble.n	800a93a <__kernel_rem_pio2+0x252>
 800a858:	1e62      	subs	r2, r4, #1
 800a85a:	ab0c      	add	r3, sp, #48	; 0x30
 800a85c:	9d07      	ldr	r5, [sp, #28]
 800a85e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a862:	f1ca 0118 	rsb	r1, sl, #24
 800a866:	fa40 f301 	asr.w	r3, r0, r1
 800a86a:	441d      	add	r5, r3
 800a86c:	408b      	lsls	r3, r1
 800a86e:	1ac0      	subs	r0, r0, r3
 800a870:	ab0c      	add	r3, sp, #48	; 0x30
 800a872:	9507      	str	r5, [sp, #28]
 800a874:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a878:	f1ca 0317 	rsb	r3, sl, #23
 800a87c:	fa40 f303 	asr.w	r3, r0, r3
 800a880:	9302      	str	r3, [sp, #8]
 800a882:	9b02      	ldr	r3, [sp, #8]
 800a884:	2b00      	cmp	r3, #0
 800a886:	dd66      	ble.n	800a956 <__kernel_rem_pio2+0x26e>
 800a888:	9b07      	ldr	r3, [sp, #28]
 800a88a:	2200      	movs	r2, #0
 800a88c:	3301      	adds	r3, #1
 800a88e:	9307      	str	r3, [sp, #28]
 800a890:	4615      	mov	r5, r2
 800a892:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a896:	4294      	cmp	r4, r2
 800a898:	f300 8099 	bgt.w	800a9ce <__kernel_rem_pio2+0x2e6>
 800a89c:	f1ba 0f00 	cmp.w	sl, #0
 800a8a0:	dd07      	ble.n	800a8b2 <__kernel_rem_pio2+0x1ca>
 800a8a2:	f1ba 0f01 	cmp.w	sl, #1
 800a8a6:	f000 80a5 	beq.w	800a9f4 <__kernel_rem_pio2+0x30c>
 800a8aa:	f1ba 0f02 	cmp.w	sl, #2
 800a8ae:	f000 80c1 	beq.w	800aa34 <__kernel_rem_pio2+0x34c>
 800a8b2:	9b02      	ldr	r3, [sp, #8]
 800a8b4:	2b02      	cmp	r3, #2
 800a8b6:	d14e      	bne.n	800a956 <__kernel_rem_pio2+0x26e>
 800a8b8:	4632      	mov	r2, r6
 800a8ba:	463b      	mov	r3, r7
 800a8bc:	4958      	ldr	r1, [pc, #352]	; (800aa20 <__kernel_rem_pio2+0x338>)
 800a8be:	2000      	movs	r0, #0
 800a8c0:	f7f5 fc8a 	bl	80001d8 <__aeabi_dsub>
 800a8c4:	4606      	mov	r6, r0
 800a8c6:	460f      	mov	r7, r1
 800a8c8:	2d00      	cmp	r5, #0
 800a8ca:	d044      	beq.n	800a956 <__kernel_rem_pio2+0x26e>
 800a8cc:	4650      	mov	r0, sl
 800a8ce:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800aa10 <__kernel_rem_pio2+0x328>
 800a8d2:	f000 fb91 	bl	800aff8 <scalbn>
 800a8d6:	4630      	mov	r0, r6
 800a8d8:	4639      	mov	r1, r7
 800a8da:	ec53 2b10 	vmov	r2, r3, d0
 800a8de:	f7f5 fc7b 	bl	80001d8 <__aeabi_dsub>
 800a8e2:	4606      	mov	r6, r0
 800a8e4:	460f      	mov	r7, r1
 800a8e6:	e036      	b.n	800a956 <__kernel_rem_pio2+0x26e>
 800a8e8:	4b4e      	ldr	r3, [pc, #312]	; (800aa24 <__kernel_rem_pio2+0x33c>)
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	4630      	mov	r0, r6
 800a8ee:	4639      	mov	r1, r7
 800a8f0:	f7f5 fe2a 	bl	8000548 <__aeabi_dmul>
 800a8f4:	f7f6 f8c2 	bl	8000a7c <__aeabi_d2iz>
 800a8f8:	f7f5 fdbc 	bl	8000474 <__aeabi_i2d>
 800a8fc:	4b4a      	ldr	r3, [pc, #296]	; (800aa28 <__kernel_rem_pio2+0x340>)
 800a8fe:	2200      	movs	r2, #0
 800a900:	4680      	mov	r8, r0
 800a902:	4689      	mov	r9, r1
 800a904:	f7f5 fe20 	bl	8000548 <__aeabi_dmul>
 800a908:	4602      	mov	r2, r0
 800a90a:	460b      	mov	r3, r1
 800a90c:	4630      	mov	r0, r6
 800a90e:	4639      	mov	r1, r7
 800a910:	f7f5 fc62 	bl	80001d8 <__aeabi_dsub>
 800a914:	f7f6 f8b2 	bl	8000a7c <__aeabi_d2iz>
 800a918:	9b02      	ldr	r3, [sp, #8]
 800a91a:	f843 0b04 	str.w	r0, [r3], #4
 800a91e:	3d01      	subs	r5, #1
 800a920:	9302      	str	r3, [sp, #8]
 800a922:	ab70      	add	r3, sp, #448	; 0x1c0
 800a924:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92c:	4640      	mov	r0, r8
 800a92e:	4649      	mov	r1, r9
 800a930:	f7f5 fc54 	bl	80001dc <__adddf3>
 800a934:	4606      	mov	r6, r0
 800a936:	460f      	mov	r7, r1
 800a938:	e75b      	b.n	800a7f2 <__kernel_rem_pio2+0x10a>
 800a93a:	d105      	bne.n	800a948 <__kernel_rem_pio2+0x260>
 800a93c:	1e63      	subs	r3, r4, #1
 800a93e:	aa0c      	add	r2, sp, #48	; 0x30
 800a940:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a944:	15c3      	asrs	r3, r0, #23
 800a946:	e79b      	b.n	800a880 <__kernel_rem_pio2+0x198>
 800a948:	4b38      	ldr	r3, [pc, #224]	; (800aa2c <__kernel_rem_pio2+0x344>)
 800a94a:	2200      	movs	r2, #0
 800a94c:	f7f6 f882 	bl	8000a54 <__aeabi_dcmpge>
 800a950:	2800      	cmp	r0, #0
 800a952:	d139      	bne.n	800a9c8 <__kernel_rem_pio2+0x2e0>
 800a954:	9002      	str	r0, [sp, #8]
 800a956:	2200      	movs	r2, #0
 800a958:	2300      	movs	r3, #0
 800a95a:	4630      	mov	r0, r6
 800a95c:	4639      	mov	r1, r7
 800a95e:	f7f6 f85b 	bl	8000a18 <__aeabi_dcmpeq>
 800a962:	2800      	cmp	r0, #0
 800a964:	f000 80b4 	beq.w	800aad0 <__kernel_rem_pio2+0x3e8>
 800a968:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800a96c:	465b      	mov	r3, fp
 800a96e:	2200      	movs	r2, #0
 800a970:	9904      	ldr	r1, [sp, #16]
 800a972:	428b      	cmp	r3, r1
 800a974:	da65      	bge.n	800aa42 <__kernel_rem_pio2+0x35a>
 800a976:	2a00      	cmp	r2, #0
 800a978:	d07b      	beq.n	800aa72 <__kernel_rem_pio2+0x38a>
 800a97a:	ab0c      	add	r3, sp, #48	; 0x30
 800a97c:	f1aa 0a18 	sub.w	sl, sl, #24
 800a980:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800a984:	2b00      	cmp	r3, #0
 800a986:	f000 80a0 	beq.w	800aaca <__kernel_rem_pio2+0x3e2>
 800a98a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800aa10 <__kernel_rem_pio2+0x328>
 800a98e:	4650      	mov	r0, sl
 800a990:	f000 fb32 	bl	800aff8 <scalbn>
 800a994:	4f23      	ldr	r7, [pc, #140]	; (800aa24 <__kernel_rem_pio2+0x33c>)
 800a996:	ec55 4b10 	vmov	r4, r5, d0
 800a99a:	46d8      	mov	r8, fp
 800a99c:	2600      	movs	r6, #0
 800a99e:	f1b8 0f00 	cmp.w	r8, #0
 800a9a2:	f280 80cf 	bge.w	800ab44 <__kernel_rem_pio2+0x45c>
 800a9a6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800aa08 <__kernel_rem_pio2+0x320>
 800a9aa:	465f      	mov	r7, fp
 800a9ac:	f04f 0800 	mov.w	r8, #0
 800a9b0:	2f00      	cmp	r7, #0
 800a9b2:	f2c0 80fd 	blt.w	800abb0 <__kernel_rem_pio2+0x4c8>
 800a9b6:	ab70      	add	r3, sp, #448	; 0x1c0
 800a9b8:	f8df a074 	ldr.w	sl, [pc, #116]	; 800aa30 <__kernel_rem_pio2+0x348>
 800a9bc:	ec55 4b18 	vmov	r4, r5, d8
 800a9c0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800a9c4:	2600      	movs	r6, #0
 800a9c6:	e0e5      	b.n	800ab94 <__kernel_rem_pio2+0x4ac>
 800a9c8:	2302      	movs	r3, #2
 800a9ca:	9302      	str	r3, [sp, #8]
 800a9cc:	e75c      	b.n	800a888 <__kernel_rem_pio2+0x1a0>
 800a9ce:	f8db 3000 	ldr.w	r3, [fp]
 800a9d2:	b955      	cbnz	r5, 800a9ea <__kernel_rem_pio2+0x302>
 800a9d4:	b123      	cbz	r3, 800a9e0 <__kernel_rem_pio2+0x2f8>
 800a9d6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a9da:	f8cb 3000 	str.w	r3, [fp]
 800a9de:	2301      	movs	r3, #1
 800a9e0:	3201      	adds	r2, #1
 800a9e2:	f10b 0b04 	add.w	fp, fp, #4
 800a9e6:	461d      	mov	r5, r3
 800a9e8:	e755      	b.n	800a896 <__kernel_rem_pio2+0x1ae>
 800a9ea:	1acb      	subs	r3, r1, r3
 800a9ec:	f8cb 3000 	str.w	r3, [fp]
 800a9f0:	462b      	mov	r3, r5
 800a9f2:	e7f5      	b.n	800a9e0 <__kernel_rem_pio2+0x2f8>
 800a9f4:	1e62      	subs	r2, r4, #1
 800a9f6:	ab0c      	add	r3, sp, #48	; 0x30
 800a9f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9fc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800aa00:	a90c      	add	r1, sp, #48	; 0x30
 800aa02:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800aa06:	e754      	b.n	800a8b2 <__kernel_rem_pio2+0x1ca>
	...
 800aa14:	3ff00000 	.word	0x3ff00000
 800aa18:	0800b338 	.word	0x0800b338
 800aa1c:	40200000 	.word	0x40200000
 800aa20:	3ff00000 	.word	0x3ff00000
 800aa24:	3e700000 	.word	0x3e700000
 800aa28:	41700000 	.word	0x41700000
 800aa2c:	3fe00000 	.word	0x3fe00000
 800aa30:	0800b2f8 	.word	0x0800b2f8
 800aa34:	1e62      	subs	r2, r4, #1
 800aa36:	ab0c      	add	r3, sp, #48	; 0x30
 800aa38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa3c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800aa40:	e7de      	b.n	800aa00 <__kernel_rem_pio2+0x318>
 800aa42:	a90c      	add	r1, sp, #48	; 0x30
 800aa44:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800aa48:	3b01      	subs	r3, #1
 800aa4a:	430a      	orrs	r2, r1
 800aa4c:	e790      	b.n	800a970 <__kernel_rem_pio2+0x288>
 800aa4e:	3301      	adds	r3, #1
 800aa50:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800aa54:	2900      	cmp	r1, #0
 800aa56:	d0fa      	beq.n	800aa4e <__kernel_rem_pio2+0x366>
 800aa58:	9a08      	ldr	r2, [sp, #32]
 800aa5a:	18e3      	adds	r3, r4, r3
 800aa5c:	18a6      	adds	r6, r4, r2
 800aa5e:	aa20      	add	r2, sp, #128	; 0x80
 800aa60:	1c65      	adds	r5, r4, #1
 800aa62:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800aa66:	9302      	str	r3, [sp, #8]
 800aa68:	9b02      	ldr	r3, [sp, #8]
 800aa6a:	42ab      	cmp	r3, r5
 800aa6c:	da04      	bge.n	800aa78 <__kernel_rem_pio2+0x390>
 800aa6e:	461c      	mov	r4, r3
 800aa70:	e6b5      	b.n	800a7de <__kernel_rem_pio2+0xf6>
 800aa72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aa74:	2301      	movs	r3, #1
 800aa76:	e7eb      	b.n	800aa50 <__kernel_rem_pio2+0x368>
 800aa78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa7e:	f7f5 fcf9 	bl	8000474 <__aeabi_i2d>
 800aa82:	e8e6 0102 	strd	r0, r1, [r6], #8
 800aa86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa88:	46b3      	mov	fp, r6
 800aa8a:	461c      	mov	r4, r3
 800aa8c:	2700      	movs	r7, #0
 800aa8e:	f04f 0800 	mov.w	r8, #0
 800aa92:	f04f 0900 	mov.w	r9, #0
 800aa96:	9b06      	ldr	r3, [sp, #24]
 800aa98:	429f      	cmp	r7, r3
 800aa9a:	dd06      	ble.n	800aaaa <__kernel_rem_pio2+0x3c2>
 800aa9c:	ab70      	add	r3, sp, #448	; 0x1c0
 800aa9e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800aaa2:	e9c3 8900 	strd	r8, r9, [r3]
 800aaa6:	3501      	adds	r5, #1
 800aaa8:	e7de      	b.n	800aa68 <__kernel_rem_pio2+0x380>
 800aaaa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800aaae:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800aab2:	f7f5 fd49 	bl	8000548 <__aeabi_dmul>
 800aab6:	4602      	mov	r2, r0
 800aab8:	460b      	mov	r3, r1
 800aaba:	4640      	mov	r0, r8
 800aabc:	4649      	mov	r1, r9
 800aabe:	f7f5 fb8d 	bl	80001dc <__adddf3>
 800aac2:	3701      	adds	r7, #1
 800aac4:	4680      	mov	r8, r0
 800aac6:	4689      	mov	r9, r1
 800aac8:	e7e5      	b.n	800aa96 <__kernel_rem_pio2+0x3ae>
 800aaca:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800aace:	e754      	b.n	800a97a <__kernel_rem_pio2+0x292>
 800aad0:	ec47 6b10 	vmov	d0, r6, r7
 800aad4:	f1ca 0000 	rsb	r0, sl, #0
 800aad8:	f000 fa8e 	bl	800aff8 <scalbn>
 800aadc:	ec57 6b10 	vmov	r6, r7, d0
 800aae0:	4b9f      	ldr	r3, [pc, #636]	; (800ad60 <__kernel_rem_pio2+0x678>)
 800aae2:	ee10 0a10 	vmov	r0, s0
 800aae6:	2200      	movs	r2, #0
 800aae8:	4639      	mov	r1, r7
 800aaea:	f7f5 ffb3 	bl	8000a54 <__aeabi_dcmpge>
 800aaee:	b300      	cbz	r0, 800ab32 <__kernel_rem_pio2+0x44a>
 800aaf0:	4b9c      	ldr	r3, [pc, #624]	; (800ad64 <__kernel_rem_pio2+0x67c>)
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	4630      	mov	r0, r6
 800aaf6:	4639      	mov	r1, r7
 800aaf8:	f7f5 fd26 	bl	8000548 <__aeabi_dmul>
 800aafc:	f7f5 ffbe 	bl	8000a7c <__aeabi_d2iz>
 800ab00:	4605      	mov	r5, r0
 800ab02:	f7f5 fcb7 	bl	8000474 <__aeabi_i2d>
 800ab06:	4b96      	ldr	r3, [pc, #600]	; (800ad60 <__kernel_rem_pio2+0x678>)
 800ab08:	2200      	movs	r2, #0
 800ab0a:	f7f5 fd1d 	bl	8000548 <__aeabi_dmul>
 800ab0e:	460b      	mov	r3, r1
 800ab10:	4602      	mov	r2, r0
 800ab12:	4639      	mov	r1, r7
 800ab14:	4630      	mov	r0, r6
 800ab16:	f7f5 fb5f 	bl	80001d8 <__aeabi_dsub>
 800ab1a:	f7f5 ffaf 	bl	8000a7c <__aeabi_d2iz>
 800ab1e:	f104 0b01 	add.w	fp, r4, #1
 800ab22:	ab0c      	add	r3, sp, #48	; 0x30
 800ab24:	f10a 0a18 	add.w	sl, sl, #24
 800ab28:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ab2c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800ab30:	e72b      	b.n	800a98a <__kernel_rem_pio2+0x2a2>
 800ab32:	4630      	mov	r0, r6
 800ab34:	4639      	mov	r1, r7
 800ab36:	f7f5 ffa1 	bl	8000a7c <__aeabi_d2iz>
 800ab3a:	ab0c      	add	r3, sp, #48	; 0x30
 800ab3c:	46a3      	mov	fp, r4
 800ab3e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ab42:	e722      	b.n	800a98a <__kernel_rem_pio2+0x2a2>
 800ab44:	ab70      	add	r3, sp, #448	; 0x1c0
 800ab46:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800ab4a:	ab0c      	add	r3, sp, #48	; 0x30
 800ab4c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ab50:	f7f5 fc90 	bl	8000474 <__aeabi_i2d>
 800ab54:	4622      	mov	r2, r4
 800ab56:	462b      	mov	r3, r5
 800ab58:	f7f5 fcf6 	bl	8000548 <__aeabi_dmul>
 800ab5c:	4632      	mov	r2, r6
 800ab5e:	e9c9 0100 	strd	r0, r1, [r9]
 800ab62:	463b      	mov	r3, r7
 800ab64:	4620      	mov	r0, r4
 800ab66:	4629      	mov	r1, r5
 800ab68:	f7f5 fcee 	bl	8000548 <__aeabi_dmul>
 800ab6c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ab70:	4604      	mov	r4, r0
 800ab72:	460d      	mov	r5, r1
 800ab74:	e713      	b.n	800a99e <__kernel_rem_pio2+0x2b6>
 800ab76:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ab7a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800ab7e:	f7f5 fce3 	bl	8000548 <__aeabi_dmul>
 800ab82:	4602      	mov	r2, r0
 800ab84:	460b      	mov	r3, r1
 800ab86:	4620      	mov	r0, r4
 800ab88:	4629      	mov	r1, r5
 800ab8a:	f7f5 fb27 	bl	80001dc <__adddf3>
 800ab8e:	3601      	adds	r6, #1
 800ab90:	4604      	mov	r4, r0
 800ab92:	460d      	mov	r5, r1
 800ab94:	9b04      	ldr	r3, [sp, #16]
 800ab96:	429e      	cmp	r6, r3
 800ab98:	dc01      	bgt.n	800ab9e <__kernel_rem_pio2+0x4b6>
 800ab9a:	45b0      	cmp	r8, r6
 800ab9c:	daeb      	bge.n	800ab76 <__kernel_rem_pio2+0x48e>
 800ab9e:	ab48      	add	r3, sp, #288	; 0x120
 800aba0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800aba4:	e9c3 4500 	strd	r4, r5, [r3]
 800aba8:	3f01      	subs	r7, #1
 800abaa:	f108 0801 	add.w	r8, r8, #1
 800abae:	e6ff      	b.n	800a9b0 <__kernel_rem_pio2+0x2c8>
 800abb0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800abb2:	2b02      	cmp	r3, #2
 800abb4:	dc0b      	bgt.n	800abce <__kernel_rem_pio2+0x4e6>
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	dc6e      	bgt.n	800ac98 <__kernel_rem_pio2+0x5b0>
 800abba:	d045      	beq.n	800ac48 <__kernel_rem_pio2+0x560>
 800abbc:	9b07      	ldr	r3, [sp, #28]
 800abbe:	f003 0007 	and.w	r0, r3, #7
 800abc2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800abc6:	ecbd 8b02 	vpop	{d8}
 800abca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abce:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800abd0:	2b03      	cmp	r3, #3
 800abd2:	d1f3      	bne.n	800abbc <__kernel_rem_pio2+0x4d4>
 800abd4:	ab48      	add	r3, sp, #288	; 0x120
 800abd6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800abda:	46d0      	mov	r8, sl
 800abdc:	46d9      	mov	r9, fp
 800abde:	f1b9 0f00 	cmp.w	r9, #0
 800abe2:	f1a8 0808 	sub.w	r8, r8, #8
 800abe6:	dc64      	bgt.n	800acb2 <__kernel_rem_pio2+0x5ca>
 800abe8:	465c      	mov	r4, fp
 800abea:	2c01      	cmp	r4, #1
 800abec:	f1aa 0a08 	sub.w	sl, sl, #8
 800abf0:	dc7e      	bgt.n	800acf0 <__kernel_rem_pio2+0x608>
 800abf2:	2000      	movs	r0, #0
 800abf4:	2100      	movs	r1, #0
 800abf6:	f1bb 0f01 	cmp.w	fp, #1
 800abfa:	f300 8097 	bgt.w	800ad2c <__kernel_rem_pio2+0x644>
 800abfe:	9b02      	ldr	r3, [sp, #8]
 800ac00:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800ac04:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	f040 8099 	bne.w	800ad40 <__kernel_rem_pio2+0x658>
 800ac0e:	9b01      	ldr	r3, [sp, #4]
 800ac10:	e9c3 5600 	strd	r5, r6, [r3]
 800ac14:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800ac18:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ac1c:	e7ce      	b.n	800abbc <__kernel_rem_pio2+0x4d4>
 800ac1e:	ab48      	add	r3, sp, #288	; 0x120
 800ac20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ac24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac28:	f7f5 fad8 	bl	80001dc <__adddf3>
 800ac2c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ac30:	f1bb 0f00 	cmp.w	fp, #0
 800ac34:	daf3      	bge.n	800ac1e <__kernel_rem_pio2+0x536>
 800ac36:	9b02      	ldr	r3, [sp, #8]
 800ac38:	b113      	cbz	r3, 800ac40 <__kernel_rem_pio2+0x558>
 800ac3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac3e:	4619      	mov	r1, r3
 800ac40:	9b01      	ldr	r3, [sp, #4]
 800ac42:	e9c3 0100 	strd	r0, r1, [r3]
 800ac46:	e7b9      	b.n	800abbc <__kernel_rem_pio2+0x4d4>
 800ac48:	2000      	movs	r0, #0
 800ac4a:	2100      	movs	r1, #0
 800ac4c:	e7f0      	b.n	800ac30 <__kernel_rem_pio2+0x548>
 800ac4e:	ab48      	add	r3, sp, #288	; 0x120
 800ac50:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac58:	f7f5 fac0 	bl	80001dc <__adddf3>
 800ac5c:	3c01      	subs	r4, #1
 800ac5e:	2c00      	cmp	r4, #0
 800ac60:	daf5      	bge.n	800ac4e <__kernel_rem_pio2+0x566>
 800ac62:	9b02      	ldr	r3, [sp, #8]
 800ac64:	b1e3      	cbz	r3, 800aca0 <__kernel_rem_pio2+0x5b8>
 800ac66:	4602      	mov	r2, r0
 800ac68:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac6c:	9c01      	ldr	r4, [sp, #4]
 800ac6e:	e9c4 2300 	strd	r2, r3, [r4]
 800ac72:	4602      	mov	r2, r0
 800ac74:	460b      	mov	r3, r1
 800ac76:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800ac7a:	f7f5 faad 	bl	80001d8 <__aeabi_dsub>
 800ac7e:	ad4a      	add	r5, sp, #296	; 0x128
 800ac80:	2401      	movs	r4, #1
 800ac82:	45a3      	cmp	fp, r4
 800ac84:	da0f      	bge.n	800aca6 <__kernel_rem_pio2+0x5be>
 800ac86:	9b02      	ldr	r3, [sp, #8]
 800ac88:	b113      	cbz	r3, 800ac90 <__kernel_rem_pio2+0x5a8>
 800ac8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac8e:	4619      	mov	r1, r3
 800ac90:	9b01      	ldr	r3, [sp, #4]
 800ac92:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ac96:	e791      	b.n	800abbc <__kernel_rem_pio2+0x4d4>
 800ac98:	465c      	mov	r4, fp
 800ac9a:	2000      	movs	r0, #0
 800ac9c:	2100      	movs	r1, #0
 800ac9e:	e7de      	b.n	800ac5e <__kernel_rem_pio2+0x576>
 800aca0:	4602      	mov	r2, r0
 800aca2:	460b      	mov	r3, r1
 800aca4:	e7e2      	b.n	800ac6c <__kernel_rem_pio2+0x584>
 800aca6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800acaa:	f7f5 fa97 	bl	80001dc <__adddf3>
 800acae:	3401      	adds	r4, #1
 800acb0:	e7e7      	b.n	800ac82 <__kernel_rem_pio2+0x59a>
 800acb2:	e9d8 4500 	ldrd	r4, r5, [r8]
 800acb6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800acba:	4620      	mov	r0, r4
 800acbc:	4632      	mov	r2, r6
 800acbe:	463b      	mov	r3, r7
 800acc0:	4629      	mov	r1, r5
 800acc2:	f7f5 fa8b 	bl	80001dc <__adddf3>
 800acc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800acca:	4602      	mov	r2, r0
 800accc:	460b      	mov	r3, r1
 800acce:	4620      	mov	r0, r4
 800acd0:	4629      	mov	r1, r5
 800acd2:	f7f5 fa81 	bl	80001d8 <__aeabi_dsub>
 800acd6:	4632      	mov	r2, r6
 800acd8:	463b      	mov	r3, r7
 800acda:	f7f5 fa7f 	bl	80001dc <__adddf3>
 800acde:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ace2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800ace6:	ed88 7b00 	vstr	d7, [r8]
 800acea:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800acee:	e776      	b.n	800abde <__kernel_rem_pio2+0x4f6>
 800acf0:	e9da 8900 	ldrd	r8, r9, [sl]
 800acf4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800acf8:	4640      	mov	r0, r8
 800acfa:	4632      	mov	r2, r6
 800acfc:	463b      	mov	r3, r7
 800acfe:	4649      	mov	r1, r9
 800ad00:	f7f5 fa6c 	bl	80001dc <__adddf3>
 800ad04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad08:	4602      	mov	r2, r0
 800ad0a:	460b      	mov	r3, r1
 800ad0c:	4640      	mov	r0, r8
 800ad0e:	4649      	mov	r1, r9
 800ad10:	f7f5 fa62 	bl	80001d8 <__aeabi_dsub>
 800ad14:	4632      	mov	r2, r6
 800ad16:	463b      	mov	r3, r7
 800ad18:	f7f5 fa60 	bl	80001dc <__adddf3>
 800ad1c:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ad20:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ad24:	ed8a 7b00 	vstr	d7, [sl]
 800ad28:	3c01      	subs	r4, #1
 800ad2a:	e75e      	b.n	800abea <__kernel_rem_pio2+0x502>
 800ad2c:	ab48      	add	r3, sp, #288	; 0x120
 800ad2e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ad32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad36:	f7f5 fa51 	bl	80001dc <__adddf3>
 800ad3a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ad3e:	e75a      	b.n	800abf6 <__kernel_rem_pio2+0x50e>
 800ad40:	9b01      	ldr	r3, [sp, #4]
 800ad42:	9a01      	ldr	r2, [sp, #4]
 800ad44:	601d      	str	r5, [r3, #0]
 800ad46:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800ad4a:	605c      	str	r4, [r3, #4]
 800ad4c:	609f      	str	r7, [r3, #8]
 800ad4e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800ad52:	60d3      	str	r3, [r2, #12]
 800ad54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad58:	6110      	str	r0, [r2, #16]
 800ad5a:	6153      	str	r3, [r2, #20]
 800ad5c:	e72e      	b.n	800abbc <__kernel_rem_pio2+0x4d4>
 800ad5e:	bf00      	nop
 800ad60:	41700000 	.word	0x41700000
 800ad64:	3e700000 	.word	0x3e700000

0800ad68 <__kernel_sin>:
 800ad68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad6c:	ed2d 8b04 	vpush	{d8-d9}
 800ad70:	eeb0 8a41 	vmov.f32	s16, s2
 800ad74:	eef0 8a61 	vmov.f32	s17, s3
 800ad78:	ec55 4b10 	vmov	r4, r5, d0
 800ad7c:	b083      	sub	sp, #12
 800ad7e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ad82:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ad86:	9001      	str	r0, [sp, #4]
 800ad88:	da06      	bge.n	800ad98 <__kernel_sin+0x30>
 800ad8a:	ee10 0a10 	vmov	r0, s0
 800ad8e:	4629      	mov	r1, r5
 800ad90:	f7f5 fe74 	bl	8000a7c <__aeabi_d2iz>
 800ad94:	2800      	cmp	r0, #0
 800ad96:	d051      	beq.n	800ae3c <__kernel_sin+0xd4>
 800ad98:	4622      	mov	r2, r4
 800ad9a:	462b      	mov	r3, r5
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	4629      	mov	r1, r5
 800ada0:	f7f5 fbd2 	bl	8000548 <__aeabi_dmul>
 800ada4:	4682      	mov	sl, r0
 800ada6:	468b      	mov	fp, r1
 800ada8:	4602      	mov	r2, r0
 800adaa:	460b      	mov	r3, r1
 800adac:	4620      	mov	r0, r4
 800adae:	4629      	mov	r1, r5
 800adb0:	f7f5 fbca 	bl	8000548 <__aeabi_dmul>
 800adb4:	a341      	add	r3, pc, #260	; (adr r3, 800aebc <__kernel_sin+0x154>)
 800adb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adba:	4680      	mov	r8, r0
 800adbc:	4689      	mov	r9, r1
 800adbe:	4650      	mov	r0, sl
 800adc0:	4659      	mov	r1, fp
 800adc2:	f7f5 fbc1 	bl	8000548 <__aeabi_dmul>
 800adc6:	a33f      	add	r3, pc, #252	; (adr r3, 800aec4 <__kernel_sin+0x15c>)
 800adc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adcc:	f7f5 fa04 	bl	80001d8 <__aeabi_dsub>
 800add0:	4652      	mov	r2, sl
 800add2:	465b      	mov	r3, fp
 800add4:	f7f5 fbb8 	bl	8000548 <__aeabi_dmul>
 800add8:	a33c      	add	r3, pc, #240	; (adr r3, 800aecc <__kernel_sin+0x164>)
 800adda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adde:	f7f5 f9fd 	bl	80001dc <__adddf3>
 800ade2:	4652      	mov	r2, sl
 800ade4:	465b      	mov	r3, fp
 800ade6:	f7f5 fbaf 	bl	8000548 <__aeabi_dmul>
 800adea:	a33a      	add	r3, pc, #232	; (adr r3, 800aed4 <__kernel_sin+0x16c>)
 800adec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf0:	f7f5 f9f2 	bl	80001d8 <__aeabi_dsub>
 800adf4:	4652      	mov	r2, sl
 800adf6:	465b      	mov	r3, fp
 800adf8:	f7f5 fba6 	bl	8000548 <__aeabi_dmul>
 800adfc:	a337      	add	r3, pc, #220	; (adr r3, 800aedc <__kernel_sin+0x174>)
 800adfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae02:	f7f5 f9eb 	bl	80001dc <__adddf3>
 800ae06:	9b01      	ldr	r3, [sp, #4]
 800ae08:	4606      	mov	r6, r0
 800ae0a:	460f      	mov	r7, r1
 800ae0c:	b9eb      	cbnz	r3, 800ae4a <__kernel_sin+0xe2>
 800ae0e:	4602      	mov	r2, r0
 800ae10:	460b      	mov	r3, r1
 800ae12:	4650      	mov	r0, sl
 800ae14:	4659      	mov	r1, fp
 800ae16:	f7f5 fb97 	bl	8000548 <__aeabi_dmul>
 800ae1a:	a325      	add	r3, pc, #148	; (adr r3, 800aeb0 <__kernel_sin+0x148>)
 800ae1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae20:	f7f5 f9da 	bl	80001d8 <__aeabi_dsub>
 800ae24:	4642      	mov	r2, r8
 800ae26:	464b      	mov	r3, r9
 800ae28:	f7f5 fb8e 	bl	8000548 <__aeabi_dmul>
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	460b      	mov	r3, r1
 800ae30:	4620      	mov	r0, r4
 800ae32:	4629      	mov	r1, r5
 800ae34:	f7f5 f9d2 	bl	80001dc <__adddf3>
 800ae38:	4604      	mov	r4, r0
 800ae3a:	460d      	mov	r5, r1
 800ae3c:	ec45 4b10 	vmov	d0, r4, r5
 800ae40:	b003      	add	sp, #12
 800ae42:	ecbd 8b04 	vpop	{d8-d9}
 800ae46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae4a:	4b1b      	ldr	r3, [pc, #108]	; (800aeb8 <__kernel_sin+0x150>)
 800ae4c:	ec51 0b18 	vmov	r0, r1, d8
 800ae50:	2200      	movs	r2, #0
 800ae52:	f7f5 fb79 	bl	8000548 <__aeabi_dmul>
 800ae56:	4632      	mov	r2, r6
 800ae58:	ec41 0b19 	vmov	d9, r0, r1
 800ae5c:	463b      	mov	r3, r7
 800ae5e:	4640      	mov	r0, r8
 800ae60:	4649      	mov	r1, r9
 800ae62:	f7f5 fb71 	bl	8000548 <__aeabi_dmul>
 800ae66:	4602      	mov	r2, r0
 800ae68:	460b      	mov	r3, r1
 800ae6a:	ec51 0b19 	vmov	r0, r1, d9
 800ae6e:	f7f5 f9b3 	bl	80001d8 <__aeabi_dsub>
 800ae72:	4652      	mov	r2, sl
 800ae74:	465b      	mov	r3, fp
 800ae76:	f7f5 fb67 	bl	8000548 <__aeabi_dmul>
 800ae7a:	ec53 2b18 	vmov	r2, r3, d8
 800ae7e:	f7f5 f9ab 	bl	80001d8 <__aeabi_dsub>
 800ae82:	a30b      	add	r3, pc, #44	; (adr r3, 800aeb0 <__kernel_sin+0x148>)
 800ae84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae88:	4606      	mov	r6, r0
 800ae8a:	460f      	mov	r7, r1
 800ae8c:	4640      	mov	r0, r8
 800ae8e:	4649      	mov	r1, r9
 800ae90:	f7f5 fb5a 	bl	8000548 <__aeabi_dmul>
 800ae94:	4602      	mov	r2, r0
 800ae96:	460b      	mov	r3, r1
 800ae98:	4630      	mov	r0, r6
 800ae9a:	4639      	mov	r1, r7
 800ae9c:	f7f5 f99e 	bl	80001dc <__adddf3>
 800aea0:	4602      	mov	r2, r0
 800aea2:	460b      	mov	r3, r1
 800aea4:	4620      	mov	r0, r4
 800aea6:	4629      	mov	r1, r5
 800aea8:	f7f5 f996 	bl	80001d8 <__aeabi_dsub>
 800aeac:	e7c4      	b.n	800ae38 <__kernel_sin+0xd0>
 800aeae:	bf00      	nop
 800aeb0:	55555549 	.word	0x55555549
 800aeb4:	3fc55555 	.word	0x3fc55555
 800aeb8:	3fe00000 	.word	0x3fe00000
 800aebc:	5acfd57c 	.word	0x5acfd57c
 800aec0:	3de5d93a 	.word	0x3de5d93a
 800aec4:	8a2b9ceb 	.word	0x8a2b9ceb
 800aec8:	3e5ae5e6 	.word	0x3e5ae5e6
 800aecc:	57b1fe7d 	.word	0x57b1fe7d
 800aed0:	3ec71de3 	.word	0x3ec71de3
 800aed4:	19c161d5 	.word	0x19c161d5
 800aed8:	3f2a01a0 	.word	0x3f2a01a0
 800aedc:	1110f8a6 	.word	0x1110f8a6
 800aee0:	3f811111 	.word	0x3f811111

0800aee4 <fabs>:
 800aee4:	ec51 0b10 	vmov	r0, r1, d0
 800aee8:	ee10 2a10 	vmov	r2, s0
 800aeec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aef0:	ec43 2b10 	vmov	d0, r2, r3
 800aef4:	4770      	bx	lr
	...

0800aef8 <floor>:
 800aef8:	ec51 0b10 	vmov	r0, r1, d0
 800aefc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af00:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800af04:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800af08:	2e13      	cmp	r6, #19
 800af0a:	ee10 5a10 	vmov	r5, s0
 800af0e:	ee10 8a10 	vmov	r8, s0
 800af12:	460c      	mov	r4, r1
 800af14:	dc32      	bgt.n	800af7c <floor+0x84>
 800af16:	2e00      	cmp	r6, #0
 800af18:	da14      	bge.n	800af44 <floor+0x4c>
 800af1a:	a333      	add	r3, pc, #204	; (adr r3, 800afe8 <floor+0xf0>)
 800af1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af20:	f7f5 f95c 	bl	80001dc <__adddf3>
 800af24:	2200      	movs	r2, #0
 800af26:	2300      	movs	r3, #0
 800af28:	f7f5 fd9e 	bl	8000a68 <__aeabi_dcmpgt>
 800af2c:	b138      	cbz	r0, 800af3e <floor+0x46>
 800af2e:	2c00      	cmp	r4, #0
 800af30:	da57      	bge.n	800afe2 <floor+0xea>
 800af32:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800af36:	431d      	orrs	r5, r3
 800af38:	d001      	beq.n	800af3e <floor+0x46>
 800af3a:	4c2d      	ldr	r4, [pc, #180]	; (800aff0 <floor+0xf8>)
 800af3c:	2500      	movs	r5, #0
 800af3e:	4621      	mov	r1, r4
 800af40:	4628      	mov	r0, r5
 800af42:	e025      	b.n	800af90 <floor+0x98>
 800af44:	4f2b      	ldr	r7, [pc, #172]	; (800aff4 <floor+0xfc>)
 800af46:	4137      	asrs	r7, r6
 800af48:	ea01 0307 	and.w	r3, r1, r7
 800af4c:	4303      	orrs	r3, r0
 800af4e:	d01f      	beq.n	800af90 <floor+0x98>
 800af50:	a325      	add	r3, pc, #148	; (adr r3, 800afe8 <floor+0xf0>)
 800af52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af56:	f7f5 f941 	bl	80001dc <__adddf3>
 800af5a:	2200      	movs	r2, #0
 800af5c:	2300      	movs	r3, #0
 800af5e:	f7f5 fd83 	bl	8000a68 <__aeabi_dcmpgt>
 800af62:	2800      	cmp	r0, #0
 800af64:	d0eb      	beq.n	800af3e <floor+0x46>
 800af66:	2c00      	cmp	r4, #0
 800af68:	bfbe      	ittt	lt
 800af6a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800af6e:	fa43 f606 	asrlt.w	r6, r3, r6
 800af72:	19a4      	addlt	r4, r4, r6
 800af74:	ea24 0407 	bic.w	r4, r4, r7
 800af78:	2500      	movs	r5, #0
 800af7a:	e7e0      	b.n	800af3e <floor+0x46>
 800af7c:	2e33      	cmp	r6, #51	; 0x33
 800af7e:	dd0b      	ble.n	800af98 <floor+0xa0>
 800af80:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800af84:	d104      	bne.n	800af90 <floor+0x98>
 800af86:	ee10 2a10 	vmov	r2, s0
 800af8a:	460b      	mov	r3, r1
 800af8c:	f7f5 f926 	bl	80001dc <__adddf3>
 800af90:	ec41 0b10 	vmov	d0, r0, r1
 800af94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af98:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800af9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800afa0:	fa23 f707 	lsr.w	r7, r3, r7
 800afa4:	4207      	tst	r7, r0
 800afa6:	d0f3      	beq.n	800af90 <floor+0x98>
 800afa8:	a30f      	add	r3, pc, #60	; (adr r3, 800afe8 <floor+0xf0>)
 800afaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afae:	f7f5 f915 	bl	80001dc <__adddf3>
 800afb2:	2200      	movs	r2, #0
 800afb4:	2300      	movs	r3, #0
 800afb6:	f7f5 fd57 	bl	8000a68 <__aeabi_dcmpgt>
 800afba:	2800      	cmp	r0, #0
 800afbc:	d0bf      	beq.n	800af3e <floor+0x46>
 800afbe:	2c00      	cmp	r4, #0
 800afc0:	da02      	bge.n	800afc8 <floor+0xd0>
 800afc2:	2e14      	cmp	r6, #20
 800afc4:	d103      	bne.n	800afce <floor+0xd6>
 800afc6:	3401      	adds	r4, #1
 800afc8:	ea25 0507 	bic.w	r5, r5, r7
 800afcc:	e7b7      	b.n	800af3e <floor+0x46>
 800afce:	2301      	movs	r3, #1
 800afd0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800afd4:	fa03 f606 	lsl.w	r6, r3, r6
 800afd8:	4435      	add	r5, r6
 800afda:	4545      	cmp	r5, r8
 800afdc:	bf38      	it	cc
 800afde:	18e4      	addcc	r4, r4, r3
 800afe0:	e7f2      	b.n	800afc8 <floor+0xd0>
 800afe2:	2500      	movs	r5, #0
 800afe4:	462c      	mov	r4, r5
 800afe6:	e7aa      	b.n	800af3e <floor+0x46>
 800afe8:	8800759c 	.word	0x8800759c
 800afec:	7e37e43c 	.word	0x7e37e43c
 800aff0:	bff00000 	.word	0xbff00000
 800aff4:	000fffff 	.word	0x000fffff

0800aff8 <scalbn>:
 800aff8:	b570      	push	{r4, r5, r6, lr}
 800affa:	ec55 4b10 	vmov	r4, r5, d0
 800affe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b002:	4606      	mov	r6, r0
 800b004:	462b      	mov	r3, r5
 800b006:	b99a      	cbnz	r2, 800b030 <scalbn+0x38>
 800b008:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b00c:	4323      	orrs	r3, r4
 800b00e:	d036      	beq.n	800b07e <scalbn+0x86>
 800b010:	4b39      	ldr	r3, [pc, #228]	; (800b0f8 <scalbn+0x100>)
 800b012:	4629      	mov	r1, r5
 800b014:	ee10 0a10 	vmov	r0, s0
 800b018:	2200      	movs	r2, #0
 800b01a:	f7f5 fa95 	bl	8000548 <__aeabi_dmul>
 800b01e:	4b37      	ldr	r3, [pc, #220]	; (800b0fc <scalbn+0x104>)
 800b020:	429e      	cmp	r6, r3
 800b022:	4604      	mov	r4, r0
 800b024:	460d      	mov	r5, r1
 800b026:	da10      	bge.n	800b04a <scalbn+0x52>
 800b028:	a32b      	add	r3, pc, #172	; (adr r3, 800b0d8 <scalbn+0xe0>)
 800b02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02e:	e03a      	b.n	800b0a6 <scalbn+0xae>
 800b030:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b034:	428a      	cmp	r2, r1
 800b036:	d10c      	bne.n	800b052 <scalbn+0x5a>
 800b038:	ee10 2a10 	vmov	r2, s0
 800b03c:	4620      	mov	r0, r4
 800b03e:	4629      	mov	r1, r5
 800b040:	f7f5 f8cc 	bl	80001dc <__adddf3>
 800b044:	4604      	mov	r4, r0
 800b046:	460d      	mov	r5, r1
 800b048:	e019      	b.n	800b07e <scalbn+0x86>
 800b04a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b04e:	460b      	mov	r3, r1
 800b050:	3a36      	subs	r2, #54	; 0x36
 800b052:	4432      	add	r2, r6
 800b054:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b058:	428a      	cmp	r2, r1
 800b05a:	dd08      	ble.n	800b06e <scalbn+0x76>
 800b05c:	2d00      	cmp	r5, #0
 800b05e:	a120      	add	r1, pc, #128	; (adr r1, 800b0e0 <scalbn+0xe8>)
 800b060:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b064:	da1c      	bge.n	800b0a0 <scalbn+0xa8>
 800b066:	a120      	add	r1, pc, #128	; (adr r1, 800b0e8 <scalbn+0xf0>)
 800b068:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b06c:	e018      	b.n	800b0a0 <scalbn+0xa8>
 800b06e:	2a00      	cmp	r2, #0
 800b070:	dd08      	ble.n	800b084 <scalbn+0x8c>
 800b072:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b076:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b07a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b07e:	ec45 4b10 	vmov	d0, r4, r5
 800b082:	bd70      	pop	{r4, r5, r6, pc}
 800b084:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b088:	da19      	bge.n	800b0be <scalbn+0xc6>
 800b08a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b08e:	429e      	cmp	r6, r3
 800b090:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b094:	dd0a      	ble.n	800b0ac <scalbn+0xb4>
 800b096:	a112      	add	r1, pc, #72	; (adr r1, 800b0e0 <scalbn+0xe8>)
 800b098:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d1e2      	bne.n	800b066 <scalbn+0x6e>
 800b0a0:	a30f      	add	r3, pc, #60	; (adr r3, 800b0e0 <scalbn+0xe8>)
 800b0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a6:	f7f5 fa4f 	bl	8000548 <__aeabi_dmul>
 800b0aa:	e7cb      	b.n	800b044 <scalbn+0x4c>
 800b0ac:	a10a      	add	r1, pc, #40	; (adr r1, 800b0d8 <scalbn+0xe0>)
 800b0ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d0b8      	beq.n	800b028 <scalbn+0x30>
 800b0b6:	a10e      	add	r1, pc, #56	; (adr r1, 800b0f0 <scalbn+0xf8>)
 800b0b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0bc:	e7b4      	b.n	800b028 <scalbn+0x30>
 800b0be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b0c2:	3236      	adds	r2, #54	; 0x36
 800b0c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b0c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	4b0c      	ldr	r3, [pc, #48]	; (800b100 <scalbn+0x108>)
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	e7e8      	b.n	800b0a6 <scalbn+0xae>
 800b0d4:	f3af 8000 	nop.w
 800b0d8:	c2f8f359 	.word	0xc2f8f359
 800b0dc:	01a56e1f 	.word	0x01a56e1f
 800b0e0:	8800759c 	.word	0x8800759c
 800b0e4:	7e37e43c 	.word	0x7e37e43c
 800b0e8:	8800759c 	.word	0x8800759c
 800b0ec:	fe37e43c 	.word	0xfe37e43c
 800b0f0:	c2f8f359 	.word	0xc2f8f359
 800b0f4:	81a56e1f 	.word	0x81a56e1f
 800b0f8:	43500000 	.word	0x43500000
 800b0fc:	ffff3cb0 	.word	0xffff3cb0
 800b100:	3c900000 	.word	0x3c900000

0800b104 <_init>:
 800b104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b106:	bf00      	nop
 800b108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b10a:	bc08      	pop	{r3}
 800b10c:	469e      	mov	lr, r3
 800b10e:	4770      	bx	lr

0800b110 <_fini>:
 800b110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b112:	bf00      	nop
 800b114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b116:	bc08      	pop	{r3}
 800b118:	469e      	mov	lr, r3
 800b11a:	4770      	bx	lr
