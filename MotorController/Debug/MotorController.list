
MotorController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025b4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002740  08002740  00012740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002780  08002780  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002780  08002780  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002780  08002780  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002780  08002780  00012780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002784  08002784  00012784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002788  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  08002794  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08002794  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b661  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001878  00000000  00000000  0002b69d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0002cf18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a28  00000000  00000000  0002da08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f64c  00000000  00000000  0002e430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b72d  00000000  00000000  0004da7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1b8d  00000000  00000000  000591a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011ad36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cf4  00000000  00000000  0011ad8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002728 	.word	0x08002728

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002728 	.word	0x08002728

080001cc <motor_init>:

TIM_HandleTypeDef *htim;
uint32_t right_channel = 0;
uint32_t left_channel = 0;

void motor_init(TIM_HandleTypeDef *htimer, uint32_t r_channel, uint32_t l_channel) {
 80001cc:	b480      	push	{r7}
 80001ce:	b085      	sub	sp, #20
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	60f8      	str	r0, [r7, #12]
 80001d4:	60b9      	str	r1, [r7, #8]
 80001d6:	607a      	str	r2, [r7, #4]
	htim = htimer;
 80001d8:	4a07      	ldr	r2, [pc, #28]	; (80001f8 <motor_init+0x2c>)
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	6013      	str	r3, [r2, #0]
	right_channel = r_channel;
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <motor_init+0x30>)
 80001e0:	68bb      	ldr	r3, [r7, #8]
 80001e2:	6013      	str	r3, [r2, #0]
	left_channel = l_channel;
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <motor_init+0x34>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	6013      	str	r3, [r2, #0]
}
 80001ea:	bf00      	nop
 80001ec:	3714      	adds	r7, #20
 80001ee:	46bd      	mov	sp, r7
 80001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	20000030 	.word	0x20000030
 80001fc:	20000028 	.word	0x20000028
 8000200:	2000002c 	.word	0x2000002c

08000204 <motor_setPWM>:

void motor_setPWM(char wheel, float dutycycle) {
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	ed87 0a00 	vstr	s0, [r7]
 8000210:	71fb      	strb	r3, [r7, #7]
	if (dutycycle > 1.0f)
 8000212:	edd7 7a00 	vldr	s15, [r7]
 8000216:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800021a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800021e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000222:	dd02      	ble.n	800022a <motor_setPWM+0x26>
		dutycycle = 1.0f;
 8000224:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000228:	603b      	str	r3, [r7, #0]
	if (wheel == 'R') {
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	2b52      	cmp	r3, #82	; 0x52
 800022e:	d114      	bne.n	800025a <motor_setPWM+0x56>
		htim->Instance->CCR1 = (uint32_t) ((htim->Instance->ARR) * dutycycle);
 8000230:	4b18      	ldr	r3, [pc, #96]	; (8000294 <motor_setPWM+0x90>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000238:	ee07 3a90 	vmov	s15, r3
 800023c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000240:	edd7 7a00 	vldr	s15, [r7]
 8000244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000248:	4b12      	ldr	r3, [pc, #72]	; (8000294 <motor_setPWM+0x90>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000252:	ee17 2a90 	vmov	r2, s15
 8000256:	635a      	str	r2, [r3, #52]	; 0x34
	} else if (wheel == 'L') {
		htim->Instance->CCR2 = (uint32_t) ((htim->Instance->ARR) * dutycycle);
	}
}
 8000258:	e016      	b.n	8000288 <motor_setPWM+0x84>
	} else if (wheel == 'L') {
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	2b4c      	cmp	r3, #76	; 0x4c
 800025e:	d113      	bne.n	8000288 <motor_setPWM+0x84>
		htim->Instance->CCR2 = (uint32_t) ((htim->Instance->ARR) * dutycycle);
 8000260:	4b0c      	ldr	r3, [pc, #48]	; (8000294 <motor_setPWM+0x90>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000268:	ee07 3a90 	vmov	s15, r3
 800026c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000270:	edd7 7a00 	vldr	s15, [r7]
 8000274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <motor_setPWM+0x90>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000282:	ee17 2a90 	vmov	r2, s15
 8000286:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000288:	bf00      	nop
 800028a:	370c      	adds	r7, #12
 800028c:	46bd      	mov	sp, r7
 800028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000292:	4770      	bx	lr
 8000294:	20000030 	.word	0x20000030

08000298 <motor_start>:

void motor_start(char wheel) {
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	71fb      	strb	r3, [r7, #7]
	motor_setPWM(wheel, 0.0);
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80002e4 <motor_start+0x4c>
 80002a8:	4618      	mov	r0, r3
 80002aa:	f7ff ffab 	bl	8000204 <motor_setPWM>
	if (wheel == 'R') {
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	2b52      	cmp	r3, #82	; 0x52
 80002b2:	d108      	bne.n	80002c6 <motor_start+0x2e>
		HAL_TIM_PWM_Start(htim, right_channel);
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <motor_start+0x50>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a0c      	ldr	r2, [pc, #48]	; (80002ec <motor_start+0x54>)
 80002ba:	6812      	ldr	r2, [r2, #0]
 80002bc:	4611      	mov	r1, r2
 80002be:	4618      	mov	r0, r3
 80002c0:	f001 fc32 	bl	8001b28 <HAL_TIM_PWM_Start>
	} else if (wheel == 'L') {
		HAL_TIM_PWM_Start(htim, left_channel);
	}
}
 80002c4:	e00a      	b.n	80002dc <motor_start+0x44>
	} else if (wheel == 'L') {
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	2b4c      	cmp	r3, #76	; 0x4c
 80002ca:	d107      	bne.n	80002dc <motor_start+0x44>
		HAL_TIM_PWM_Start(htim, left_channel);
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <motor_start+0x50>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a07      	ldr	r2, [pc, #28]	; (80002f0 <motor_start+0x58>)
 80002d2:	6812      	ldr	r2, [r2, #0]
 80002d4:	4611      	mov	r1, r2
 80002d6:	4618      	mov	r0, r3
 80002d8:	f001 fc26 	bl	8001b28 <HAL_TIM_PWM_Start>
}
 80002dc:	bf00      	nop
 80002de:	3708      	adds	r7, #8
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	20000030 	.word	0x20000030
 80002ec:	20000028 	.word	0x20000028
 80002f0:	2000002c 	.word	0x2000002c

080002f4 <motor_setDirection>:
		HAL_GPIO_WritePin(DIR_L2_GPIO_Port, DIR_L2_Pin, GPIO_PIN_SET);
	}

}

void motor_setDirection(char wheel, uint8_t dir) {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	460a      	mov	r2, r1
 80002fe:	71fb      	strb	r3, [r7, #7]
 8000300:	4613      	mov	r3, r2
 8000302:	71bb      	strb	r3, [r7, #6]
	if (wheel == 'R') {
 8000304:	79fb      	ldrb	r3, [r7, #7]
 8000306:	2b52      	cmp	r3, #82	; 0x52
 8000308:	d11e      	bne.n	8000348 <motor_setDirection+0x54>
		if (dir == 1) {
 800030a:	79bb      	ldrb	r3, [r7, #6]
 800030c:	2b01      	cmp	r3, #1
 800030e:	d10b      	bne.n	8000328 <motor_setDirection+0x34>
			HAL_GPIO_WritePin(DIR_R1_GPIO_Port, DIR_R1_Pin, GPIO_PIN_SET);
 8000310:	2201      	movs	r2, #1
 8000312:	2101      	movs	r1, #1
 8000314:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000318:	f000 fd44 	bl	8000da4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIR_R2_GPIO_Port, DIR_R2_Pin, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	2102      	movs	r1, #2
 8000320:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000324:	f000 fd3e 	bl	8000da4 <HAL_GPIO_WritePin>
		}
		if (dir == 0) {
 8000328:	79bb      	ldrb	r3, [r7, #6]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d12d      	bne.n	800038a <motor_setDirection+0x96>
			HAL_GPIO_WritePin(DIR_R2_GPIO_Port, DIR_R2_Pin, GPIO_PIN_SET);
 800032e:	2201      	movs	r2, #1
 8000330:	2102      	movs	r1, #2
 8000332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000336:	f000 fd35 	bl	8000da4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIR_R1_GPIO_Port, DIR_R1_Pin, GPIO_PIN_RESET);
 800033a:	2200      	movs	r2, #0
 800033c:	2101      	movs	r1, #1
 800033e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000342:	f000 fd2f 	bl	8000da4 <HAL_GPIO_WritePin>
		if (dir == 0) {
			HAL_GPIO_WritePin(DIR_L2_GPIO_Port, DIR_L2_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(DIR_L1_GPIO_Port, DIR_L1_Pin, GPIO_PIN_RESET);
		}
	}
}
 8000346:	e020      	b.n	800038a <motor_setDirection+0x96>
	} else if (wheel == 'L') {
 8000348:	79fb      	ldrb	r3, [r7, #7]
 800034a:	2b4c      	cmp	r3, #76	; 0x4c
 800034c:	d11d      	bne.n	800038a <motor_setDirection+0x96>
		if (dir == 1) {
 800034e:	79bb      	ldrb	r3, [r7, #6]
 8000350:	2b01      	cmp	r3, #1
 8000352:	d10b      	bne.n	800036c <motor_setDirection+0x78>
			HAL_GPIO_WritePin(DIR_L1_GPIO_Port, DIR_L1_Pin, GPIO_PIN_SET);
 8000354:	2201      	movs	r2, #1
 8000356:	2104      	movs	r1, #4
 8000358:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800035c:	f000 fd22 	bl	8000da4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIR_L2_GPIO_Port, DIR_L2_Pin, GPIO_PIN_RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	2108      	movs	r1, #8
 8000364:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000368:	f000 fd1c 	bl	8000da4 <HAL_GPIO_WritePin>
		if (dir == 0) {
 800036c:	79bb      	ldrb	r3, [r7, #6]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d10b      	bne.n	800038a <motor_setDirection+0x96>
			HAL_GPIO_WritePin(DIR_L2_GPIO_Port, DIR_L2_Pin, GPIO_PIN_SET);
 8000372:	2201      	movs	r2, #1
 8000374:	2108      	movs	r1, #8
 8000376:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800037a:	f000 fd13 	bl	8000da4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIR_L1_GPIO_Port, DIR_L1_Pin, GPIO_PIN_RESET);
 800037e:	2200      	movs	r2, #0
 8000380:	2104      	movs	r1, #4
 8000382:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000386:	f000 fd0d 	bl	8000da4 <HAL_GPIO_WritePin>
}
 800038a:	bf00      	nop
 800038c:	3708      	adds	r7, #8
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
	...

08000394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000398:	f000 fa3f 	bl	800081a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800039c:	f000 f818 	bl	80003d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003a0:	f000 f904 	bl	80005ac <MX_GPIO_Init>
  MX_TIM1_Init();
 80003a4:	f000 f866 	bl	8000474 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	motor_init(&htim1, RIGHT_MOTOR_CHANNEL, LEFT_MOTOR_CHANNEL);
 80003a8:	2204      	movs	r2, #4
 80003aa:	2100      	movs	r1, #0
 80003ac:	4807      	ldr	r0, [pc, #28]	; (80003cc <main+0x38>)
 80003ae:	f7ff ff0d 	bl	80001cc <motor_init>
	motor_start('R');
 80003b2:	2052      	movs	r0, #82	; 0x52
 80003b4:	f7ff ff70 	bl	8000298 <motor_start>
	motor_setDirection('R', 0);
 80003b8:	2100      	movs	r1, #0
 80003ba:	2052      	movs	r0, #82	; 0x52
 80003bc:	f7ff ff9a 	bl	80002f4 <motor_setDirection>
	motor_setPWM('R', 0.5);
 80003c0:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80003c4:	2052      	movs	r0, #82	; 0x52
 80003c6:	f7ff ff1d 	bl	8000204 <motor_setPWM>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80003ca:	e7fe      	b.n	80003ca <main+0x36>
 80003cc:	20000034 	.word	0x20000034

080003d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b096      	sub	sp, #88	; 0x58
 80003d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d6:	f107 0314 	add.w	r3, r7, #20
 80003da:	2244      	movs	r2, #68	; 0x44
 80003dc:	2100      	movs	r1, #0
 80003de:	4618      	mov	r0, r3
 80003e0:	f002 f99a 	bl	8002718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e4:	463b      	mov	r3, r7
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
 80003ee:	60da      	str	r2, [r3, #12]
 80003f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80003f2:	2310      	movs	r3, #16
 80003f4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003f6:	2301      	movs	r3, #1
 80003f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80003fe:	2360      	movs	r3, #96	; 0x60
 8000400:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000402:	2302      	movs	r3, #2
 8000404:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000406:	2301      	movs	r3, #1
 8000408:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800040a:	2301      	movs	r3, #1
 800040c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800040e:	2328      	movs	r3, #40	; 0x28
 8000410:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000412:	2307      	movs	r3, #7
 8000414:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000416:	2302      	movs	r3, #2
 8000418:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800041a:	2302      	movs	r3, #2
 800041c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800041e:	f107 0314 	add.w	r3, r7, #20
 8000422:	4618      	mov	r0, r3
 8000424:	f000 fd3a 	bl	8000e9c <HAL_RCC_OscConfig>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800042e:	f000 f8ed 	bl	800060c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000432:	230f      	movs	r3, #15
 8000434:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000436:	2303      	movs	r3, #3
 8000438:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800043a:	2300      	movs	r3, #0
 800043c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800043e:	2300      	movs	r3, #0
 8000440:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000442:	2300      	movs	r3, #0
 8000444:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000446:	463b      	mov	r3, r7
 8000448:	2104      	movs	r1, #4
 800044a:	4618      	mov	r0, r3
 800044c:	f001 f946 	bl	80016dc <HAL_RCC_ClockConfig>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000456:	f000 f8d9 	bl	800060c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800045a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800045e:	f000 fcc7 	bl	8000df0 <HAL_PWREx_ControlVoltageScaling>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000468:	f000 f8d0 	bl	800060c <Error_Handler>
  }
}
 800046c:	bf00      	nop
 800046e:	3758      	adds	r7, #88	; 0x58
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}

08000474 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b096      	sub	sp, #88	; 0x58
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800047a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000486:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	605a      	str	r2, [r3, #4]
 8000490:	609a      	str	r2, [r3, #8]
 8000492:	60da      	str	r2, [r3, #12]
 8000494:	611a      	str	r2, [r3, #16]
 8000496:	615a      	str	r2, [r3, #20]
 8000498:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	222c      	movs	r2, #44	; 0x2c
 800049e:	2100      	movs	r1, #0
 80004a0:	4618      	mov	r0, r3
 80004a2:	f002 f939 	bl	8002718 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004a6:	4b3f      	ldr	r3, [pc, #252]	; (80005a4 <MX_TIM1_Init+0x130>)
 80004a8:	4a3f      	ldr	r2, [pc, #252]	; (80005a8 <MX_TIM1_Init+0x134>)
 80004aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004ac:	4b3d      	ldr	r3, [pc, #244]	; (80005a4 <MX_TIM1_Init+0x130>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004b2:	4b3c      	ldr	r3, [pc, #240]	; (80005a4 <MX_TIM1_Init+0x130>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80004b8:	4b3a      	ldr	r3, [pc, #232]	; (80005a4 <MX_TIM1_Init+0x130>)
 80004ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004c0:	4b38      	ldr	r3, [pc, #224]	; (80005a4 <MX_TIM1_Init+0x130>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004c6:	4b37      	ldr	r3, [pc, #220]	; (80005a4 <MX_TIM1_Init+0x130>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004cc:	4b35      	ldr	r3, [pc, #212]	; (80005a4 <MX_TIM1_Init+0x130>)
 80004ce:	2280      	movs	r2, #128	; 0x80
 80004d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004d2:	4834      	ldr	r0, [pc, #208]	; (80005a4 <MX_TIM1_Init+0x130>)
 80004d4:	f001 fad0 	bl	8001a78 <HAL_TIM_PWM_Init>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80004de:	f000 f895 	bl	800060c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004e2:	2300      	movs	r3, #0
 80004e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004e6:	2300      	movs	r3, #0
 80004e8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ea:	2300      	movs	r3, #0
 80004ec:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80004f2:	4619      	mov	r1, r3
 80004f4:	482b      	ldr	r0, [pc, #172]	; (80005a4 <MX_TIM1_Init+0x130>)
 80004f6:	f002 f80d 	bl	8002514 <HAL_TIMEx_MasterConfigSynchronization>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000500:	f000 f884 	bl	800060c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000504:	2360      	movs	r3, #96	; 0x60
 8000506:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800050c:	2300      	movs	r3, #0
 800050e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000510:	2300      	movs	r3, #0
 8000512:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000514:	2300      	movs	r3, #0
 8000516:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000518:	2300      	movs	r3, #0
 800051a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800051c:	2300      	movs	r3, #0
 800051e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000520:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000524:	2200      	movs	r2, #0
 8000526:	4619      	mov	r1, r3
 8000528:	481e      	ldr	r0, [pc, #120]	; (80005a4 <MX_TIM1_Init+0x130>)
 800052a:	f001 fbdb 	bl	8001ce4 <HAL_TIM_PWM_ConfigChannel>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000534:	f000 f86a 	bl	800060c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000538:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800053c:	2204      	movs	r2, #4
 800053e:	4619      	mov	r1, r3
 8000540:	4818      	ldr	r0, [pc, #96]	; (80005a4 <MX_TIM1_Init+0x130>)
 8000542:	f001 fbcf 	bl	8001ce4 <HAL_TIM_PWM_ConfigChannel>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800054c:	f000 f85e 	bl	800060c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000558:	2300      	movs	r3, #0
 800055a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000560:	2300      	movs	r3, #0
 8000562:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000564:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000568:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800056e:	2300      	movs	r3, #0
 8000570:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000572:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000576:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800057c:	2300      	movs	r3, #0
 800057e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	4619      	mov	r1, r3
 8000584:	4807      	ldr	r0, [pc, #28]	; (80005a4 <MX_TIM1_Init+0x130>)
 8000586:	f002 f82b 	bl	80025e0 <HAL_TIMEx_ConfigBreakDeadTime>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8000590:	f000 f83c 	bl	800060c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <MX_TIM1_Init+0x130>)
 8000596:	f000 f883 	bl	80006a0 <HAL_TIM_MspPostInit>

}
 800059a:	bf00      	nop
 800059c:	3758      	adds	r7, #88	; 0x58
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000034 	.word	0x20000034
 80005a8:	40012c00 	.word	0x40012c00

080005ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c0:	4b11      	ldr	r3, [pc, #68]	; (8000608 <MX_GPIO_Init+0x5c>)
 80005c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c4:	4a10      	ldr	r2, [pc, #64]	; (8000608 <MX_GPIO_Init+0x5c>)
 80005c6:	f043 0301 	orr.w	r3, r3, #1
 80005ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005cc:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <MX_GPIO_Init+0x5c>)
 80005ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d0:	f003 0301 	and.w	r3, r3, #1
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_R1_Pin|DIR_R2_Pin|DIR_L1_Pin|DIR_L2_Pin, GPIO_PIN_RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	210f      	movs	r1, #15
 80005dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e0:	f000 fbe0 	bl	8000da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIR_R1_Pin DIR_R2_Pin DIR_L1_Pin DIR_L2_Pin */
  GPIO_InitStruct.Pin = DIR_R1_Pin|DIR_R2_Pin|DIR_L1_Pin|DIR_L2_Pin;
 80005e4:	230f      	movs	r3, #15
 80005e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e8:	2301      	movs	r3, #1
 80005ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f0:	2300      	movs	r3, #0
 80005f2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	4619      	mov	r1, r3
 80005f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fc:	f000 fa68 	bl	8000ad0 <HAL_GPIO_Init>

}
 8000600:	bf00      	nop
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40021000 	.word	0x40021000

0800060c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000610:	b672      	cpsid	i
}
 8000612:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000614:	e7fe      	b.n	8000614 <Error_Handler+0x8>
	...

08000618 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <HAL_MspInit+0x44>)
 8000620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000622:	4a0e      	ldr	r2, [pc, #56]	; (800065c <HAL_MspInit+0x44>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6613      	str	r3, [r2, #96]	; 0x60
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <HAL_MspInit+0x44>)
 800062c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <HAL_MspInit+0x44>)
 8000638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800063a:	4a08      	ldr	r2, [pc, #32]	; (800065c <HAL_MspInit+0x44>)
 800063c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000640:	6593      	str	r3, [r2, #88]	; 0x58
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <HAL_MspInit+0x44>)
 8000644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40021000 	.word	0x40021000

08000660 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a0a      	ldr	r2, [pc, #40]	; (8000698 <HAL_TIM_PWM_MspInit+0x38>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d10b      	bne.n	800068a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000672:	4b0a      	ldr	r3, [pc, #40]	; (800069c <HAL_TIM_PWM_MspInit+0x3c>)
 8000674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000676:	4a09      	ldr	r2, [pc, #36]	; (800069c <HAL_TIM_PWM_MspInit+0x3c>)
 8000678:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800067c:	6613      	str	r3, [r2, #96]	; 0x60
 800067e:	4b07      	ldr	r3, [pc, #28]	; (800069c <HAL_TIM_PWM_MspInit+0x3c>)
 8000680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000682:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800068a:	bf00      	nop
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	40012c00 	.word	0x40012c00
 800069c:	40021000 	.word	0x40021000

080006a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a12      	ldr	r2, [pc, #72]	; (8000708 <HAL_TIM_MspPostInit+0x68>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d11d      	bne.n	80006fe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	4b12      	ldr	r3, [pc, #72]	; (800070c <HAL_TIM_MspPostInit+0x6c>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	4a11      	ldr	r2, [pc, #68]	; (800070c <HAL_TIM_MspPostInit+0x6c>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ce:	4b0f      	ldr	r3, [pc, #60]	; (800070c <HAL_TIM_MspPostInit+0x6c>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_R_Pin|PWM_L_Pin;
 80006da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e0:	2302      	movs	r3, #2
 80006e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80006ec:	2301      	movs	r3, #1
 80006ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	4619      	mov	r1, r3
 80006f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fa:	f000 f9e9 	bl	8000ad0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80006fe:	bf00      	nop
 8000700:	3720      	adds	r7, #32
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40012c00 	.word	0x40012c00
 800070c:	40021000 	.word	0x40021000

08000710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <NMI_Handler+0x4>

08000716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800071a:	e7fe      	b.n	800071a <HardFault_Handler+0x4>

0800071c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <MemManage_Handler+0x4>

08000722 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000726:	e7fe      	b.n	8000726 <BusFault_Handler+0x4>

08000728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800072c:	e7fe      	b.n	800072c <UsageFault_Handler+0x4>

0800072e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr

0800074a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800075c:	f000 f8b2 	bl	80008c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}

08000764 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <SystemInit+0x5c>)
 800076a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800076e:	4a14      	ldr	r2, [pc, #80]	; (80007c0 <SystemInit+0x5c>)
 8000770:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000774:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <SystemInit+0x60>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a11      	ldr	r2, [pc, #68]	; (80007c4 <SystemInit+0x60>)
 800077e:	f043 0301 	orr.w	r3, r3, #1
 8000782:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <SystemInit+0x60>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <SystemInit+0x60>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a0d      	ldr	r2, [pc, #52]	; (80007c4 <SystemInit+0x60>)
 8000790:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000794:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000798:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800079a:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <SystemInit+0x60>)
 800079c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007a0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <SystemInit+0x60>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a07      	ldr	r2, [pc, #28]	; (80007c4 <SystemInit+0x60>)
 80007a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007ac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80007ae:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <SystemInit+0x60>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	e000ed00 	.word	0xe000ed00
 80007c4:	40021000 	.word	0x40021000

080007c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000800 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007cc:	f7ff ffca 	bl	8000764 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80007d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80007d2:	e003      	b.n	80007dc <LoopCopyDataInit>

080007d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80007d4:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80007d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80007d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80007da:	3104      	adds	r1, #4

080007dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80007dc:	480a      	ldr	r0, [pc, #40]	; (8000808 <LoopForever+0xa>)
	ldr	r3, =_edata
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <LoopForever+0xe>)
	adds	r2, r0, r1
 80007e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80007e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80007e4:	d3f6      	bcc.n	80007d4 <CopyDataInit>
	ldr	r2, =_sbss
 80007e6:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <LoopForever+0x12>)
	b	LoopFillZerobss
 80007e8:	e002      	b.n	80007f0 <LoopFillZerobss>

080007ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80007ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80007ec:	f842 3b04 	str.w	r3, [r2], #4

080007f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <LoopForever+0x16>)
	cmp	r2, r3
 80007f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80007f4:	d3f9      	bcc.n	80007ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007f6:	f001 ff6b 	bl	80026d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007fa:	f7ff fdcb 	bl	8000394 <main>

080007fe <LoopForever>:

LoopForever:
    b LoopForever
 80007fe:	e7fe      	b.n	80007fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000800:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000804:	08002788 	.word	0x08002788
	ldr	r0, =_sdata
 8000808:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800080c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000810:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000814:	20000084 	.word	0x20000084

08000818 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000818:	e7fe      	b.n	8000818 <ADC1_IRQHandler>

0800081a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000820:	2300      	movs	r3, #0
 8000822:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000824:	2003      	movs	r0, #3
 8000826:	f000 f91f 	bl	8000a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800082a:	2000      	movs	r0, #0
 800082c:	f000 f80e 	bl	800084c <HAL_InitTick>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d002      	beq.n	800083c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000836:	2301      	movs	r3, #1
 8000838:	71fb      	strb	r3, [r7, #7]
 800083a:	e001      	b.n	8000840 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800083c:	f7ff feec 	bl	8000618 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000840:	79fb      	ldrb	r3, [r7, #7]
}
 8000842:	4618      	mov	r0, r3
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000854:	2300      	movs	r3, #0
 8000856:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000858:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <HAL_InitTick+0x6c>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d023      	beq.n	80008a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000860:	4b16      	ldr	r3, [pc, #88]	; (80008bc <HAL_InitTick+0x70>)
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <HAL_InitTick+0x6c>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4619      	mov	r1, r3
 800086a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800086e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000872:	fbb2 f3f3 	udiv	r3, r2, r3
 8000876:	4618      	mov	r0, r3
 8000878:	f000 f91d 	bl	8000ab6 <HAL_SYSTICK_Config>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d10f      	bne.n	80008a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2b0f      	cmp	r3, #15
 8000886:	d809      	bhi.n	800089c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000888:	2200      	movs	r2, #0
 800088a:	6879      	ldr	r1, [r7, #4]
 800088c:	f04f 30ff 	mov.w	r0, #4294967295
 8000890:	f000 f8f5 	bl	8000a7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000894:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <HAL_InitTick+0x74>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6013      	str	r3, [r2, #0]
 800089a:	e007      	b.n	80008ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800089c:	2301      	movs	r3, #1
 800089e:	73fb      	strb	r3, [r7, #15]
 80008a0:	e004      	b.n	80008ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	73fb      	strb	r3, [r7, #15]
 80008a6:	e001      	b.n	80008ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008a8:	2301      	movs	r3, #1
 80008aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000008 	.word	0x20000008
 80008bc:	20000000 	.word	0x20000000
 80008c0:	20000004 	.word	0x20000004

080008c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_IncTick+0x20>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	461a      	mov	r2, r3
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <HAL_IncTick+0x24>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4413      	add	r3, r2
 80008d4:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <HAL_IncTick+0x24>)
 80008d6:	6013      	str	r3, [r2, #0]
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	20000008 	.word	0x20000008
 80008e8:	20000080 	.word	0x20000080

080008ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  return uwTick;
 80008f0:	4b03      	ldr	r3, [pc, #12]	; (8000900 <HAL_GetTick+0x14>)
 80008f2:	681b      	ldr	r3, [r3, #0]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	20000080 	.word	0x20000080

08000904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f003 0307 	and.w	r3, r3, #7
 8000912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <__NVIC_SetPriorityGrouping+0x44>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000920:	4013      	ands	r3, r2
 8000922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800092c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000936:	4a04      	ldr	r2, [pc, #16]	; (8000948 <__NVIC_SetPriorityGrouping+0x44>)
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	60d3      	str	r3, [r2, #12]
}
 800093c:	bf00      	nop
 800093e:	3714      	adds	r7, #20
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000950:	4b04      	ldr	r3, [pc, #16]	; (8000964 <__NVIC_GetPriorityGrouping+0x18>)
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	0a1b      	lsrs	r3, r3, #8
 8000956:	f003 0307 	and.w	r3, r3, #7
}
 800095a:	4618      	mov	r0, r3
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000978:	2b00      	cmp	r3, #0
 800097a:	db0a      	blt.n	8000992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	b2da      	uxtb	r2, r3
 8000980:	490c      	ldr	r1, [pc, #48]	; (80009b4 <__NVIC_SetPriority+0x4c>)
 8000982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000986:	0112      	lsls	r2, r2, #4
 8000988:	b2d2      	uxtb	r2, r2
 800098a:	440b      	add	r3, r1
 800098c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000990:	e00a      	b.n	80009a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4908      	ldr	r1, [pc, #32]	; (80009b8 <__NVIC_SetPriority+0x50>)
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	f003 030f 	and.w	r3, r3, #15
 800099e:	3b04      	subs	r3, #4
 80009a0:	0112      	lsls	r2, r2, #4
 80009a2:	b2d2      	uxtb	r2, r2
 80009a4:	440b      	add	r3, r1
 80009a6:	761a      	strb	r2, [r3, #24]
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	e000e100 	.word	0xe000e100
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009bc:	b480      	push	{r7}
 80009be:	b089      	sub	sp, #36	; 0x24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f003 0307 	and.w	r3, r3, #7
 80009ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	f1c3 0307 	rsb	r3, r3, #7
 80009d6:	2b04      	cmp	r3, #4
 80009d8:	bf28      	it	cs
 80009da:	2304      	movcs	r3, #4
 80009dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	3304      	adds	r3, #4
 80009e2:	2b06      	cmp	r3, #6
 80009e4:	d902      	bls.n	80009ec <NVIC_EncodePriority+0x30>
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	3b03      	subs	r3, #3
 80009ea:	e000      	b.n	80009ee <NVIC_EncodePriority+0x32>
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f0:	f04f 32ff 	mov.w	r2, #4294967295
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	43da      	mvns	r2, r3
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	401a      	ands	r2, r3
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a04:	f04f 31ff 	mov.w	r1, #4294967295
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0e:	43d9      	mvns	r1, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a14:	4313      	orrs	r3, r2
         );
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3724      	adds	r7, #36	; 0x24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
	...

08000a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a34:	d301      	bcc.n	8000a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a36:	2301      	movs	r3, #1
 8000a38:	e00f      	b.n	8000a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <SysTick_Config+0x40>)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a42:	210f      	movs	r1, #15
 8000a44:	f04f 30ff 	mov.w	r0, #4294967295
 8000a48:	f7ff ff8e 	bl	8000968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <SysTick_Config+0x40>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a52:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <SysTick_Config+0x40>)
 8000a54:	2207      	movs	r2, #7
 8000a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	e000e010 	.word	0xe000e010

08000a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f7ff ff47 	bl	8000904 <__NVIC_SetPriorityGrouping>
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b086      	sub	sp, #24
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	4603      	mov	r3, r0
 8000a86:	60b9      	str	r1, [r7, #8]
 8000a88:	607a      	str	r2, [r7, #4]
 8000a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a90:	f7ff ff5c 	bl	800094c <__NVIC_GetPriorityGrouping>
 8000a94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	68b9      	ldr	r1, [r7, #8]
 8000a9a:	6978      	ldr	r0, [r7, #20]
 8000a9c:	f7ff ff8e 	bl	80009bc <NVIC_EncodePriority>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ff5d 	bl	8000968 <__NVIC_SetPriority>
}
 8000aae:	bf00      	nop
 8000ab0:	3718      	adds	r7, #24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f7ff ffb0 	bl	8000a24 <SysTick_Config>
 8000ac4:	4603      	mov	r3, r0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b087      	sub	sp, #28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ade:	e148      	b.n	8000d72 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8000aec:	4013      	ands	r3, r2
 8000aee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	f000 813a 	beq.w	8000d6c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d00b      	beq.n	8000b18 <HAL_GPIO_Init+0x48>
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	d007      	beq.n	8000b18 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b0c:	2b11      	cmp	r3, #17
 8000b0e:	d003      	beq.n	8000b18 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	2b12      	cmp	r3, #18
 8000b16:	d130      	bne.n	8000b7a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	2203      	movs	r2, #3
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	68da      	ldr	r2, [r3, #12]
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b4e:	2201      	movs	r2, #1
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43db      	mvns	r3, r3
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	091b      	lsrs	r3, r3, #4
 8000b64:	f003 0201 	and.w	r2, r3, #1
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	68db      	ldr	r3, [r3, #12]
 8000b7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	2203      	movs	r2, #3
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	689a      	ldr	r2, [r3, #8]
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	d003      	beq.n	8000bba <HAL_GPIO_Init+0xea>
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	2b12      	cmp	r3, #18
 8000bb8:	d123      	bne.n	8000c02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	08da      	lsrs	r2, r3, #3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	3208      	adds	r2, #8
 8000bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	220f      	movs	r2, #15
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	691a      	ldr	r2, [r3, #16]
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	f003 0307 	and.w	r3, r3, #7
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	08da      	lsrs	r2, r3, #3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3208      	adds	r2, #8
 8000bfc:	6939      	ldr	r1, [r7, #16]
 8000bfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43db      	mvns	r3, r3
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	4013      	ands	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f003 0203 	and.w	r2, r3, #3
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	f000 8094 	beq.w	8000d6c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c44:	4b52      	ldr	r3, [pc, #328]	; (8000d90 <HAL_GPIO_Init+0x2c0>)
 8000c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c48:	4a51      	ldr	r2, [pc, #324]	; (8000d90 <HAL_GPIO_Init+0x2c0>)
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c50:	4b4f      	ldr	r3, [pc, #316]	; (8000d90 <HAL_GPIO_Init+0x2c0>)
 8000c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c5c:	4a4d      	ldr	r2, [pc, #308]	; (8000d94 <HAL_GPIO_Init+0x2c4>)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	089b      	lsrs	r3, r3, #2
 8000c62:	3302      	adds	r3, #2
 8000c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	f003 0303 	and.w	r3, r3, #3
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	220f      	movs	r2, #15
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c86:	d00d      	beq.n	8000ca4 <HAL_GPIO_Init+0x1d4>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a43      	ldr	r2, [pc, #268]	; (8000d98 <HAL_GPIO_Init+0x2c8>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d007      	beq.n	8000ca0 <HAL_GPIO_Init+0x1d0>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a42      	ldr	r2, [pc, #264]	; (8000d9c <HAL_GPIO_Init+0x2cc>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d101      	bne.n	8000c9c <HAL_GPIO_Init+0x1cc>
 8000c98:	2302      	movs	r3, #2
 8000c9a:	e004      	b.n	8000ca6 <HAL_GPIO_Init+0x1d6>
 8000c9c:	2307      	movs	r3, #7
 8000c9e:	e002      	b.n	8000ca6 <HAL_GPIO_Init+0x1d6>
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e000      	b.n	8000ca6 <HAL_GPIO_Init+0x1d6>
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	697a      	ldr	r2, [r7, #20]
 8000ca8:	f002 0203 	and.w	r2, r2, #3
 8000cac:	0092      	lsls	r2, r2, #2
 8000cae:	4093      	lsls	r3, r2
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cb6:	4937      	ldr	r1, [pc, #220]	; (8000d94 <HAL_GPIO_Init+0x2c4>)
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	089b      	lsrs	r3, r3, #2
 8000cbc:	3302      	adds	r3, #2
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000cc4:	4b36      	ldr	r3, [pc, #216]	; (8000da0 <HAL_GPIO_Init+0x2d0>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d003      	beq.n	8000ce8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ce8:	4a2d      	ldr	r2, [pc, #180]	; (8000da0 <HAL_GPIO_Init+0x2d0>)
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000cee:	4b2c      	ldr	r3, [pc, #176]	; (8000da0 <HAL_GPIO_Init+0x2d0>)
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d12:	4a23      	ldr	r2, [pc, #140]	; (8000da0 <HAL_GPIO_Init+0x2d0>)
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d18:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <HAL_GPIO_Init+0x2d0>)
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	43db      	mvns	r3, r3
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4013      	ands	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d003      	beq.n	8000d3c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d3c:	4a18      	ldr	r2, [pc, #96]	; (8000da0 <HAL_GPIO_Init+0x2d0>)
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d42:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <HAL_GPIO_Init+0x2d0>)
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d66:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <HAL_GPIO_Init+0x2d0>)
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	fa22 f303 	lsr.w	r3, r2, r3
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	f47f aeaf 	bne.w	8000ae0 <HAL_GPIO_Init+0x10>
  }
}
 8000d82:	bf00      	nop
 8000d84:	bf00      	nop
 8000d86:	371c      	adds	r7, #28
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40010000 	.word	0x40010000
 8000d98:	48000400 	.word	0x48000400
 8000d9c:	48000800 	.word	0x48000800
 8000da0:	40010400 	.word	0x40010400

08000da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	460b      	mov	r3, r1
 8000dae:	807b      	strh	r3, [r7, #2]
 8000db0:	4613      	mov	r3, r2
 8000db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000db4:	787b      	ldrb	r3, [r7, #1]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d003      	beq.n	8000dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dba:	887a      	ldrh	r2, [r7, #2]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dc0:	e002      	b.n	8000dc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dc2:	887a      	ldrh	r2, [r7, #2]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000dd8:	4b04      	ldr	r3, [pc, #16]	; (8000dec <HAL_PWREx_GetVoltageRange+0x18>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40007000 	.word	0x40007000

08000df0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dfe:	d130      	bne.n	8000e62 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e00:	4b23      	ldr	r3, [pc, #140]	; (8000e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e0c:	d038      	beq.n	8000e80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e0e:	4b20      	ldr	r3, [pc, #128]	; (8000e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e16:	4a1e      	ldr	r2, [pc, #120]	; (8000e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e1c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e1e:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2232      	movs	r2, #50	; 0x32
 8000e24:	fb02 f303 	mul.w	r3, r2, r3
 8000e28:	4a1b      	ldr	r2, [pc, #108]	; (8000e98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2e:	0c9b      	lsrs	r3, r3, #18
 8000e30:	3301      	adds	r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e34:	e002      	b.n	8000e3c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e3c:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e48:	d102      	bne.n	8000e50 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d1f2      	bne.n	8000e36 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e52:	695b      	ldr	r3, [r3, #20]
 8000e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e5c:	d110      	bne.n	8000e80 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e00f      	b.n	8000e82 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e62:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e6e:	d007      	beq.n	8000e80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e70:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e78:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e7e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	40007000 	.word	0x40007000
 8000e94:	20000000 	.word	0x20000000
 8000e98:	431bde83 	.word	0x431bde83

08000e9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d102      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	f000 bc11 	b.w	80016d2 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000eb0:	4ba0      	ldr	r3, [pc, #640]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	f003 030c 	and.w	r3, r3, #12
 8000eb8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000eba:	4b9e      	ldr	r3, [pc, #632]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	f003 0303 	and.w	r3, r3, #3
 8000ec2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f003 0310 	and.w	r3, r3, #16
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f000 80e4 	beq.w	800109a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d007      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x4c>
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	2b0c      	cmp	r3, #12
 8000edc:	f040 808b 	bne.w	8000ff6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	f040 8087 	bne.w	8000ff6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ee8:	4b92      	ldr	r3, [pc, #584]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d005      	beq.n	8000f00 <HAL_RCC_OscConfig+0x64>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d101      	bne.n	8000f00 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e3e8      	b.n	80016d2 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a1a      	ldr	r2, [r3, #32]
 8000f04:	4b8b      	ldr	r3, [pc, #556]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f003 0308 	and.w	r3, r3, #8
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d004      	beq.n	8000f1a <HAL_RCC_OscConfig+0x7e>
 8000f10:	4b88      	ldr	r3, [pc, #544]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f18:	e005      	b.n	8000f26 <HAL_RCC_OscConfig+0x8a>
 8000f1a:	4b86      	ldr	r3, [pc, #536]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 8000f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f20:	091b      	lsrs	r3, r3, #4
 8000f22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d223      	bcs.n	8000f72 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6a1b      	ldr	r3, [r3, #32]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 fd42 	bl	80019b8 <RCC_SetFlashLatencyFromMSIRange>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e3c9      	b.n	80016d2 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f3e:	4b7d      	ldr	r3, [pc, #500]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a7c      	ldr	r2, [pc, #496]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 8000f44:	f043 0308 	orr.w	r3, r3, #8
 8000f48:	6013      	str	r3, [r2, #0]
 8000f4a:	4b7a      	ldr	r3, [pc, #488]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6a1b      	ldr	r3, [r3, #32]
 8000f56:	4977      	ldr	r1, [pc, #476]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f5c:	4b75      	ldr	r3, [pc, #468]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	69db      	ldr	r3, [r3, #28]
 8000f68:	021b      	lsls	r3, r3, #8
 8000f6a:	4972      	ldr	r1, [pc, #456]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	604b      	str	r3, [r1, #4]
 8000f70:	e025      	b.n	8000fbe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f72:	4b70      	ldr	r3, [pc, #448]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a6f      	ldr	r2, [pc, #444]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 8000f78:	f043 0308 	orr.w	r3, r3, #8
 8000f7c:	6013      	str	r3, [r2, #0]
 8000f7e:	4b6d      	ldr	r3, [pc, #436]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a1b      	ldr	r3, [r3, #32]
 8000f8a:	496a      	ldr	r1, [pc, #424]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f90:	4b68      	ldr	r3, [pc, #416]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	69db      	ldr	r3, [r3, #28]
 8000f9c:	021b      	lsls	r3, r3, #8
 8000f9e:	4965      	ldr	r1, [pc, #404]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d109      	bne.n	8000fbe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6a1b      	ldr	r3, [r3, #32]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 fd02 	bl	80019b8 <RCC_SetFlashLatencyFromMSIRange>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e389      	b.n	80016d2 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000fbe:	f000 fc6f 	bl	80018a0 <HAL_RCC_GetSysClockFreq>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	4b5b      	ldr	r3, [pc, #364]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	091b      	lsrs	r3, r3, #4
 8000fca:	f003 030f 	and.w	r3, r3, #15
 8000fce:	495a      	ldr	r1, [pc, #360]	; (8001138 <HAL_RCC_OscConfig+0x29c>)
 8000fd0:	5ccb      	ldrb	r3, [r1, r3]
 8000fd2:	f003 031f 	and.w	r3, r3, #31
 8000fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8000fda:	4a58      	ldr	r2, [pc, #352]	; (800113c <HAL_RCC_OscConfig+0x2a0>)
 8000fdc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000fde:	4b58      	ldr	r3, [pc, #352]	; (8001140 <HAL_RCC_OscConfig+0x2a4>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fc32 	bl	800084c <HAL_InitTick>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d052      	beq.n	8001098 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	e36d      	b.n	80016d2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d032      	beq.n	8001064 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000ffe:	4b4d      	ldr	r3, [pc, #308]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a4c      	ldr	r2, [pc, #304]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800100a:	f7ff fc6f 	bl	80008ec <HAL_GetTick>
 800100e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001010:	e008      	b.n	8001024 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001012:	f7ff fc6b 	bl	80008ec <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d901      	bls.n	8001024 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e356      	b.n	80016d2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001024:	4b43      	ldr	r3, [pc, #268]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	2b00      	cmp	r3, #0
 800102e:	d0f0      	beq.n	8001012 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001030:	4b40      	ldr	r3, [pc, #256]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a3f      	ldr	r2, [pc, #252]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 8001036:	f043 0308 	orr.w	r3, r3, #8
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	4b3d      	ldr	r3, [pc, #244]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6a1b      	ldr	r3, [r3, #32]
 8001048:	493a      	ldr	r1, [pc, #232]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 800104a:	4313      	orrs	r3, r2
 800104c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800104e:	4b39      	ldr	r3, [pc, #228]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	4935      	ldr	r1, [pc, #212]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 800105e:	4313      	orrs	r3, r2
 8001060:	604b      	str	r3, [r1, #4]
 8001062:	e01a      	b.n	800109a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001064:	4b33      	ldr	r3, [pc, #204]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a32      	ldr	r2, [pc, #200]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 800106a:	f023 0301 	bic.w	r3, r3, #1
 800106e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001070:	f7ff fc3c 	bl	80008ec <HAL_GetTick>
 8001074:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001078:	f7ff fc38 	bl	80008ec <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e323      	b.n	80016d2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800108a:	4b2a      	ldr	r3, [pc, #168]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1f0      	bne.n	8001078 <HAL_RCC_OscConfig+0x1dc>
 8001096:	e000      	b.n	800109a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001098:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d073      	beq.n	800118e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	2b08      	cmp	r3, #8
 80010aa:	d005      	beq.n	80010b8 <HAL_RCC_OscConfig+0x21c>
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	2b0c      	cmp	r3, #12
 80010b0:	d10e      	bne.n	80010d0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	2b03      	cmp	r3, #3
 80010b6:	d10b      	bne.n	80010d0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b8:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d063      	beq.n	800118c <HAL_RCC_OscConfig+0x2f0>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d15f      	bne.n	800118c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e300      	b.n	80016d2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010d8:	d106      	bne.n	80010e8 <HAL_RCC_OscConfig+0x24c>
 80010da:	4b16      	ldr	r3, [pc, #88]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a15      	ldr	r2, [pc, #84]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 80010e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	e01d      	b.n	8001124 <HAL_RCC_OscConfig+0x288>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010f0:	d10c      	bne.n	800110c <HAL_RCC_OscConfig+0x270>
 80010f2:	4b10      	ldr	r3, [pc, #64]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a0f      	ldr	r2, [pc, #60]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 80010f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a0c      	ldr	r2, [pc, #48]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 8001104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	e00b      	b.n	8001124 <HAL_RCC_OscConfig+0x288>
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a08      	ldr	r2, [pc, #32]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 8001112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001116:	6013      	str	r3, [r2, #0]
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a05      	ldr	r2, [pc, #20]	; (8001134 <HAL_RCC_OscConfig+0x298>)
 800111e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001122:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d01b      	beq.n	8001164 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800112c:	f7ff fbde 	bl	80008ec <HAL_GetTick>
 8001130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001132:	e010      	b.n	8001156 <HAL_RCC_OscConfig+0x2ba>
 8001134:	40021000 	.word	0x40021000
 8001138:	08002740 	.word	0x08002740
 800113c:	20000000 	.word	0x20000000
 8001140:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001144:	f7ff fbd2 	bl	80008ec <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b64      	cmp	r3, #100	; 0x64
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e2bd      	b.n	80016d2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001156:	4baf      	ldr	r3, [pc, #700]	; (8001414 <HAL_RCC_OscConfig+0x578>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d0f0      	beq.n	8001144 <HAL_RCC_OscConfig+0x2a8>
 8001162:	e014      	b.n	800118e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001164:	f7ff fbc2 	bl	80008ec <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800116c:	f7ff fbbe 	bl	80008ec <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b64      	cmp	r3, #100	; 0x64
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e2a9      	b.n	80016d2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800117e:	4ba5      	ldr	r3, [pc, #660]	; (8001414 <HAL_RCC_OscConfig+0x578>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f0      	bne.n	800116c <HAL_RCC_OscConfig+0x2d0>
 800118a:	e000      	b.n	800118e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800118c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d060      	beq.n	800125c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	2b04      	cmp	r3, #4
 800119e:	d005      	beq.n	80011ac <HAL_RCC_OscConfig+0x310>
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	2b0c      	cmp	r3, #12
 80011a4:	d119      	bne.n	80011da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d116      	bne.n	80011da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011ac:	4b99      	ldr	r3, [pc, #612]	; (8001414 <HAL_RCC_OscConfig+0x578>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d005      	beq.n	80011c4 <HAL_RCC_OscConfig+0x328>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d101      	bne.n	80011c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e286      	b.n	80016d2 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c4:	4b93      	ldr	r3, [pc, #588]	; (8001414 <HAL_RCC_OscConfig+0x578>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	061b      	lsls	r3, r3, #24
 80011d2:	4990      	ldr	r1, [pc, #576]	; (8001414 <HAL_RCC_OscConfig+0x578>)
 80011d4:	4313      	orrs	r3, r2
 80011d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011d8:	e040      	b.n	800125c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d023      	beq.n	800122a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011e2:	4b8c      	ldr	r3, [pc, #560]	; (8001414 <HAL_RCC_OscConfig+0x578>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a8b      	ldr	r2, [pc, #556]	; (8001414 <HAL_RCC_OscConfig+0x578>)
 80011e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ee:	f7ff fb7d 	bl	80008ec <HAL_GetTick>
 80011f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011f4:	e008      	b.n	8001208 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011f6:	f7ff fb79 	bl	80008ec <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e264      	b.n	80016d2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001208:	4b82      	ldr	r3, [pc, #520]	; (8001414 <HAL_RCC_OscConfig+0x578>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0f0      	beq.n	80011f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001214:	4b7f      	ldr	r3, [pc, #508]	; (8001414 <HAL_RCC_OscConfig+0x578>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	061b      	lsls	r3, r3, #24
 8001222:	497c      	ldr	r1, [pc, #496]	; (8001414 <HAL_RCC_OscConfig+0x578>)
 8001224:	4313      	orrs	r3, r2
 8001226:	604b      	str	r3, [r1, #4]
 8001228:	e018      	b.n	800125c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800122a:	4b7a      	ldr	r3, [pc, #488]	; (8001414 <HAL_RCC_OscConfig+0x578>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a79      	ldr	r2, [pc, #484]	; (8001414 <HAL_RCC_OscConfig+0x578>)
 8001230:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001234:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001236:	f7ff fb59 	bl	80008ec <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800123c:	e008      	b.n	8001250 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800123e:	f7ff fb55 	bl	80008ec <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e240      	b.n	80016d2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001250:	4b70      	ldr	r3, [pc, #448]	; (8001414 <HAL_RCC_OscConfig+0x578>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1f0      	bne.n	800123e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0308 	and.w	r3, r3, #8
 8001264:	2b00      	cmp	r3, #0
 8001266:	d03c      	beq.n	80012e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d01c      	beq.n	80012aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001270:	4b68      	ldr	r3, [pc, #416]	; (8001414 <HAL_RCC_OscConfig+0x578>)
 8001272:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001276:	4a67      	ldr	r2, [pc, #412]	; (8001414 <HAL_RCC_OscConfig+0x578>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001280:	f7ff fb34 	bl	80008ec <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001288:	f7ff fb30 	bl	80008ec <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e21b      	b.n	80016d2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800129a:	4b5e      	ldr	r3, [pc, #376]	; (8001414 <HAL_RCC_OscConfig+0x578>)
 800129c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0ef      	beq.n	8001288 <HAL_RCC_OscConfig+0x3ec>
 80012a8:	e01b      	b.n	80012e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012aa:	4b5a      	ldr	r3, [pc, #360]	; (8001414 <HAL_RCC_OscConfig+0x578>)
 80012ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012b0:	4a58      	ldr	r2, [pc, #352]	; (8001414 <HAL_RCC_OscConfig+0x578>)
 80012b2:	f023 0301 	bic.w	r3, r3, #1
 80012b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ba:	f7ff fb17 	bl	80008ec <HAL_GetTick>
 80012be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012c0:	e008      	b.n	80012d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012c2:	f7ff fb13 	bl	80008ec <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e1fe      	b.n	80016d2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012d4:	4b4f      	ldr	r3, [pc, #316]	; (8001414 <HAL_RCC_OscConfig+0x578>)
 80012d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1ef      	bne.n	80012c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0304 	and.w	r3, r3, #4
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f000 80a6 	beq.w	800143c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012f0:	2300      	movs	r3, #0
 80012f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80012f4:	4b47      	ldr	r3, [pc, #284]	; (8001414 <HAL_RCC_OscConfig+0x578>)
 80012f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d10d      	bne.n	800131c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001300:	4b44      	ldr	r3, [pc, #272]	; (8001414 <HAL_RCC_OscConfig+0x578>)
 8001302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001304:	4a43      	ldr	r2, [pc, #268]	; (8001414 <HAL_RCC_OscConfig+0x578>)
 8001306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800130a:	6593      	str	r3, [r2, #88]	; 0x58
 800130c:	4b41      	ldr	r3, [pc, #260]	; (8001414 <HAL_RCC_OscConfig+0x578>)
 800130e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001318:	2301      	movs	r3, #1
 800131a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800131c:	4b3e      	ldr	r3, [pc, #248]	; (8001418 <HAL_RCC_OscConfig+0x57c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001324:	2b00      	cmp	r3, #0
 8001326:	d118      	bne.n	800135a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001328:	4b3b      	ldr	r3, [pc, #236]	; (8001418 <HAL_RCC_OscConfig+0x57c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a3a      	ldr	r2, [pc, #232]	; (8001418 <HAL_RCC_OscConfig+0x57c>)
 800132e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001332:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001334:	f7ff fada 	bl	80008ec <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800133c:	f7ff fad6 	bl	80008ec <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b02      	cmp	r3, #2
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e1c1      	b.n	80016d2 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800134e:	4b32      	ldr	r3, [pc, #200]	; (8001418 <HAL_RCC_OscConfig+0x57c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001356:	2b00      	cmp	r3, #0
 8001358:	d0f0      	beq.n	800133c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d108      	bne.n	8001374 <HAL_RCC_OscConfig+0x4d8>
 8001362:	4b2c      	ldr	r3, [pc, #176]	; (8001414 <HAL_RCC_OscConfig+0x578>)
 8001364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001368:	4a2a      	ldr	r2, [pc, #168]	; (8001414 <HAL_RCC_OscConfig+0x578>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001372:	e024      	b.n	80013be <HAL_RCC_OscConfig+0x522>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	2b05      	cmp	r3, #5
 800137a:	d110      	bne.n	800139e <HAL_RCC_OscConfig+0x502>
 800137c:	4b25      	ldr	r3, [pc, #148]	; (8001414 <HAL_RCC_OscConfig+0x578>)
 800137e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001382:	4a24      	ldr	r2, [pc, #144]	; (8001414 <HAL_RCC_OscConfig+0x578>)
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800138c:	4b21      	ldr	r3, [pc, #132]	; (8001414 <HAL_RCC_OscConfig+0x578>)
 800138e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001392:	4a20      	ldr	r2, [pc, #128]	; (8001414 <HAL_RCC_OscConfig+0x578>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800139c:	e00f      	b.n	80013be <HAL_RCC_OscConfig+0x522>
 800139e:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <HAL_RCC_OscConfig+0x578>)
 80013a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013a4:	4a1b      	ldr	r2, [pc, #108]	; (8001414 <HAL_RCC_OscConfig+0x578>)
 80013a6:	f023 0301 	bic.w	r3, r3, #1
 80013aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013ae:	4b19      	ldr	r3, [pc, #100]	; (8001414 <HAL_RCC_OscConfig+0x578>)
 80013b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013b4:	4a17      	ldr	r2, [pc, #92]	; (8001414 <HAL_RCC_OscConfig+0x578>)
 80013b6:	f023 0304 	bic.w	r3, r3, #4
 80013ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d016      	beq.n	80013f4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c6:	f7ff fa91 	bl	80008ec <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013cc:	e00a      	b.n	80013e4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ce:	f7ff fa8d 	bl	80008ec <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013dc:	4293      	cmp	r3, r2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e176      	b.n	80016d2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013e4:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <HAL_RCC_OscConfig+0x578>)
 80013e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0ed      	beq.n	80013ce <HAL_RCC_OscConfig+0x532>
 80013f2:	e01a      	b.n	800142a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f4:	f7ff fa7a 	bl	80008ec <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013fa:	e00f      	b.n	800141c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013fc:	f7ff fa76 	bl	80008ec <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	f241 3288 	movw	r2, #5000	; 0x1388
 800140a:	4293      	cmp	r3, r2
 800140c:	d906      	bls.n	800141c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e15f      	b.n	80016d2 <HAL_RCC_OscConfig+0x836>
 8001412:	bf00      	nop
 8001414:	40021000 	.word	0x40021000
 8001418:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800141c:	4baa      	ldr	r3, [pc, #680]	; (80016c8 <HAL_RCC_OscConfig+0x82c>)
 800141e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1e8      	bne.n	80013fc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800142a:	7ffb      	ldrb	r3, [r7, #31]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d105      	bne.n	800143c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001430:	4ba5      	ldr	r3, [pc, #660]	; (80016c8 <HAL_RCC_OscConfig+0x82c>)
 8001432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001434:	4aa4      	ldr	r2, [pc, #656]	; (80016c8 <HAL_RCC_OscConfig+0x82c>)
 8001436:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800143a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0320 	and.w	r3, r3, #32
 8001444:	2b00      	cmp	r3, #0
 8001446:	d03c      	beq.n	80014c2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144c:	2b00      	cmp	r3, #0
 800144e:	d01c      	beq.n	800148a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001450:	4b9d      	ldr	r3, [pc, #628]	; (80016c8 <HAL_RCC_OscConfig+0x82c>)
 8001452:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001456:	4a9c      	ldr	r2, [pc, #624]	; (80016c8 <HAL_RCC_OscConfig+0x82c>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001460:	f7ff fa44 	bl	80008ec <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001468:	f7ff fa40 	bl	80008ec <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e12b      	b.n	80016d2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800147a:	4b93      	ldr	r3, [pc, #588]	; (80016c8 <HAL_RCC_OscConfig+0x82c>)
 800147c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0ef      	beq.n	8001468 <HAL_RCC_OscConfig+0x5cc>
 8001488:	e01b      	b.n	80014c2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800148a:	4b8f      	ldr	r3, [pc, #572]	; (80016c8 <HAL_RCC_OscConfig+0x82c>)
 800148c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001490:	4a8d      	ldr	r2, [pc, #564]	; (80016c8 <HAL_RCC_OscConfig+0x82c>)
 8001492:	f023 0301 	bic.w	r3, r3, #1
 8001496:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800149a:	f7ff fa27 	bl	80008ec <HAL_GetTick>
 800149e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014a2:	f7ff fa23 	bl	80008ec <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e10e      	b.n	80016d2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80014b4:	4b84      	ldr	r3, [pc, #528]	; (80016c8 <HAL_RCC_OscConfig+0x82c>)
 80014b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1ef      	bne.n	80014a2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f000 8102 	beq.w	80016d0 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	f040 80c5 	bne.w	8001660 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80014d6:	4b7c      	ldr	r3, [pc, #496]	; (80016c8 <HAL_RCC_OscConfig+0x82c>)
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	f003 0203 	and.w	r2, r3, #3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d12c      	bne.n	8001544 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f4:	3b01      	subs	r3, #1
 80014f6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d123      	bne.n	8001544 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001506:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001508:	429a      	cmp	r2, r3
 800150a:	d11b      	bne.n	8001544 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001516:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001518:	429a      	cmp	r2, r3
 800151a:	d113      	bne.n	8001544 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001526:	085b      	lsrs	r3, r3, #1
 8001528:	3b01      	subs	r3, #1
 800152a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800152c:	429a      	cmp	r2, r3
 800152e:	d109      	bne.n	8001544 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	085b      	lsrs	r3, r3, #1
 800153c:	3b01      	subs	r3, #1
 800153e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001540:	429a      	cmp	r2, r3
 8001542:	d067      	beq.n	8001614 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	2b0c      	cmp	r3, #12
 8001548:	d062      	beq.n	8001610 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800154a:	4b5f      	ldr	r3, [pc, #380]	; (80016c8 <HAL_RCC_OscConfig+0x82c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e0bb      	b.n	80016d2 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800155a:	4b5b      	ldr	r3, [pc, #364]	; (80016c8 <HAL_RCC_OscConfig+0x82c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a5a      	ldr	r2, [pc, #360]	; (80016c8 <HAL_RCC_OscConfig+0x82c>)
 8001560:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001564:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001566:	f7ff f9c1 	bl	80008ec <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800156e:	f7ff f9bd 	bl	80008ec <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e0a8      	b.n	80016d2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001580:	4b51      	ldr	r3, [pc, #324]	; (80016c8 <HAL_RCC_OscConfig+0x82c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1f0      	bne.n	800156e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800158c:	4b4e      	ldr	r3, [pc, #312]	; (80016c8 <HAL_RCC_OscConfig+0x82c>)
 800158e:	68da      	ldr	r2, [r3, #12]
 8001590:	4b4e      	ldr	r3, [pc, #312]	; (80016cc <HAL_RCC_OscConfig+0x830>)
 8001592:	4013      	ands	r3, r2
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800159c:	3a01      	subs	r2, #1
 800159e:	0112      	lsls	r2, r2, #4
 80015a0:	4311      	orrs	r1, r2
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015a6:	0212      	lsls	r2, r2, #8
 80015a8:	4311      	orrs	r1, r2
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80015ae:	0852      	lsrs	r2, r2, #1
 80015b0:	3a01      	subs	r2, #1
 80015b2:	0552      	lsls	r2, r2, #21
 80015b4:	4311      	orrs	r1, r2
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80015ba:	0852      	lsrs	r2, r2, #1
 80015bc:	3a01      	subs	r2, #1
 80015be:	0652      	lsls	r2, r2, #25
 80015c0:	4311      	orrs	r1, r2
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80015c6:	06d2      	lsls	r2, r2, #27
 80015c8:	430a      	orrs	r2, r1
 80015ca:	493f      	ldr	r1, [pc, #252]	; (80016c8 <HAL_RCC_OscConfig+0x82c>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80015d0:	4b3d      	ldr	r3, [pc, #244]	; (80016c8 <HAL_RCC_OscConfig+0x82c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a3c      	ldr	r2, [pc, #240]	; (80016c8 <HAL_RCC_OscConfig+0x82c>)
 80015d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015dc:	4b3a      	ldr	r3, [pc, #232]	; (80016c8 <HAL_RCC_OscConfig+0x82c>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	4a39      	ldr	r2, [pc, #228]	; (80016c8 <HAL_RCC_OscConfig+0x82c>)
 80015e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015e8:	f7ff f980 	bl	80008ec <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f0:	f7ff f97c 	bl	80008ec <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e067      	b.n	80016d2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001602:	4b31      	ldr	r3, [pc, #196]	; (80016c8 <HAL_RCC_OscConfig+0x82c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0f0      	beq.n	80015f0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800160e:	e05f      	b.n	80016d0 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e05e      	b.n	80016d2 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001614:	4b2c      	ldr	r3, [pc, #176]	; (80016c8 <HAL_RCC_OscConfig+0x82c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d157      	bne.n	80016d0 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001620:	4b29      	ldr	r3, [pc, #164]	; (80016c8 <HAL_RCC_OscConfig+0x82c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a28      	ldr	r2, [pc, #160]	; (80016c8 <HAL_RCC_OscConfig+0x82c>)
 8001626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800162a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800162c:	4b26      	ldr	r3, [pc, #152]	; (80016c8 <HAL_RCC_OscConfig+0x82c>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	4a25      	ldr	r2, [pc, #148]	; (80016c8 <HAL_RCC_OscConfig+0x82c>)
 8001632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001636:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001638:	f7ff f958 	bl	80008ec <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001640:	f7ff f954 	bl	80008ec <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e03f      	b.n	80016d2 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001652:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <HAL_RCC_OscConfig+0x82c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f0      	beq.n	8001640 <HAL_RCC_OscConfig+0x7a4>
 800165e:	e037      	b.n	80016d0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2b0c      	cmp	r3, #12
 8001664:	d02d      	beq.n	80016c2 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001666:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <HAL_RCC_OscConfig+0x82c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a17      	ldr	r2, [pc, #92]	; (80016c8 <HAL_RCC_OscConfig+0x82c>)
 800166c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001670:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <HAL_RCC_OscConfig+0x82c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d105      	bne.n	800168a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800167e:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_RCC_OscConfig+0x82c>)
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	4a11      	ldr	r2, [pc, #68]	; (80016c8 <HAL_RCC_OscConfig+0x82c>)
 8001684:	f023 0303 	bic.w	r3, r3, #3
 8001688:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800168a:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <HAL_RCC_OscConfig+0x82c>)
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	4a0e      	ldr	r2, [pc, #56]	; (80016c8 <HAL_RCC_OscConfig+0x82c>)
 8001690:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001698:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169a:	f7ff f927 	bl	80008ec <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a2:	f7ff f923 	bl	80008ec <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e00e      	b.n	80016d2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <HAL_RCC_OscConfig+0x82c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1f0      	bne.n	80016a2 <HAL_RCC_OscConfig+0x806>
 80016c0:	e006      	b.n	80016d0 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e005      	b.n	80016d2 <HAL_RCC_OscConfig+0x836>
 80016c6:	bf00      	nop
 80016c8:	40021000 	.word	0x40021000
 80016cc:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3720      	adds	r7, #32
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop

080016dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e0c8      	b.n	8001882 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016f0:	4b66      	ldr	r3, [pc, #408]	; (800188c <HAL_RCC_ClockConfig+0x1b0>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0307 	and.w	r3, r3, #7
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d910      	bls.n	8001720 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fe:	4b63      	ldr	r3, [pc, #396]	; (800188c <HAL_RCC_ClockConfig+0x1b0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f023 0207 	bic.w	r2, r3, #7
 8001706:	4961      	ldr	r1, [pc, #388]	; (800188c <HAL_RCC_ClockConfig+0x1b0>)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	4313      	orrs	r3, r2
 800170c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800170e:	4b5f      	ldr	r3, [pc, #380]	; (800188c <HAL_RCC_ClockConfig+0x1b0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d001      	beq.n	8001720 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e0b0      	b.n	8001882 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	2b00      	cmp	r3, #0
 800172a:	d04c      	beq.n	80017c6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b03      	cmp	r3, #3
 8001732:	d107      	bne.n	8001744 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001734:	4b56      	ldr	r3, [pc, #344]	; (8001890 <HAL_RCC_ClockConfig+0x1b4>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d121      	bne.n	8001784 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e09e      	b.n	8001882 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b02      	cmp	r3, #2
 800174a:	d107      	bne.n	800175c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800174c:	4b50      	ldr	r3, [pc, #320]	; (8001890 <HAL_RCC_ClockConfig+0x1b4>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d115      	bne.n	8001784 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e092      	b.n	8001882 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d107      	bne.n	8001774 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001764:	4b4a      	ldr	r3, [pc, #296]	; (8001890 <HAL_RCC_ClockConfig+0x1b4>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d109      	bne.n	8001784 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e086      	b.n	8001882 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001774:	4b46      	ldr	r3, [pc, #280]	; (8001890 <HAL_RCC_ClockConfig+0x1b4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800177c:	2b00      	cmp	r3, #0
 800177e:	d101      	bne.n	8001784 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e07e      	b.n	8001882 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001784:	4b42      	ldr	r3, [pc, #264]	; (8001890 <HAL_RCC_ClockConfig+0x1b4>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f023 0203 	bic.w	r2, r3, #3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	493f      	ldr	r1, [pc, #252]	; (8001890 <HAL_RCC_ClockConfig+0x1b4>)
 8001792:	4313      	orrs	r3, r2
 8001794:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001796:	f7ff f8a9 	bl	80008ec <HAL_GetTick>
 800179a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179c:	e00a      	b.n	80017b4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800179e:	f7ff f8a5 	bl	80008ec <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e066      	b.n	8001882 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b4:	4b36      	ldr	r3, [pc, #216]	; (8001890 <HAL_RCC_ClockConfig+0x1b4>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 020c 	and.w	r2, r3, #12
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d1eb      	bne.n	800179e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d008      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017d2:	4b2f      	ldr	r3, [pc, #188]	; (8001890 <HAL_RCC_ClockConfig+0x1b4>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	492c      	ldr	r1, [pc, #176]	; (8001890 <HAL_RCC_ClockConfig+0x1b4>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017e4:	4b29      	ldr	r3, [pc, #164]	; (800188c <HAL_RCC_ClockConfig+0x1b0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0307 	and.w	r3, r3, #7
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d210      	bcs.n	8001814 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f2:	4b26      	ldr	r3, [pc, #152]	; (800188c <HAL_RCC_ClockConfig+0x1b0>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f023 0207 	bic.w	r2, r3, #7
 80017fa:	4924      	ldr	r1, [pc, #144]	; (800188c <HAL_RCC_ClockConfig+0x1b0>)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	4313      	orrs	r3, r2
 8001800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001802:	4b22      	ldr	r3, [pc, #136]	; (800188c <HAL_RCC_ClockConfig+0x1b0>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d001      	beq.n	8001814 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e036      	b.n	8001882 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	2b00      	cmp	r3, #0
 800181e:	d008      	beq.n	8001832 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001820:	4b1b      	ldr	r3, [pc, #108]	; (8001890 <HAL_RCC_ClockConfig+0x1b4>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	4918      	ldr	r1, [pc, #96]	; (8001890 <HAL_RCC_ClockConfig+0x1b4>)
 800182e:	4313      	orrs	r3, r2
 8001830:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b00      	cmp	r3, #0
 800183c:	d009      	beq.n	8001852 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800183e:	4b14      	ldr	r3, [pc, #80]	; (8001890 <HAL_RCC_ClockConfig+0x1b4>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	4910      	ldr	r1, [pc, #64]	; (8001890 <HAL_RCC_ClockConfig+0x1b4>)
 800184e:	4313      	orrs	r3, r2
 8001850:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001852:	f000 f825 	bl	80018a0 <HAL_RCC_GetSysClockFreq>
 8001856:	4602      	mov	r2, r0
 8001858:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <HAL_RCC_ClockConfig+0x1b4>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	091b      	lsrs	r3, r3, #4
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	490c      	ldr	r1, [pc, #48]	; (8001894 <HAL_RCC_ClockConfig+0x1b8>)
 8001864:	5ccb      	ldrb	r3, [r1, r3]
 8001866:	f003 031f 	and.w	r3, r3, #31
 800186a:	fa22 f303 	lsr.w	r3, r2, r3
 800186e:	4a0a      	ldr	r2, [pc, #40]	; (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 8001870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001872:	4b0a      	ldr	r3, [pc, #40]	; (800189c <HAL_RCC_ClockConfig+0x1c0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe ffe8 	bl	800084c <HAL_InitTick>
 800187c:	4603      	mov	r3, r0
 800187e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001880:	7afb      	ldrb	r3, [r7, #11]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40022000 	.word	0x40022000
 8001890:	40021000 	.word	0x40021000
 8001894:	08002740 	.word	0x08002740
 8001898:	20000000 	.word	0x20000000
 800189c:	20000004 	.word	0x20000004

080018a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b089      	sub	sp, #36	; 0x24
 80018a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
 80018aa:	2300      	movs	r3, #0
 80018ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ae:	4b3e      	ldr	r3, [pc, #248]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018b8:	4b3b      	ldr	r3, [pc, #236]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d005      	beq.n	80018d4 <HAL_RCC_GetSysClockFreq+0x34>
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	2b0c      	cmp	r3, #12
 80018cc:	d121      	bne.n	8001912 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d11e      	bne.n	8001912 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80018d4:	4b34      	ldr	r3, [pc, #208]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0308 	and.w	r3, r3, #8
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d107      	bne.n	80018f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80018e0:	4b31      	ldr	r3, [pc, #196]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80018e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e6:	0a1b      	lsrs	r3, r3, #8
 80018e8:	f003 030f 	and.w	r3, r3, #15
 80018ec:	61fb      	str	r3, [r7, #28]
 80018ee:	e005      	b.n	80018fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80018f0:	4b2d      	ldr	r3, [pc, #180]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	091b      	lsrs	r3, r3, #4
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80018fc:	4a2b      	ldr	r2, [pc, #172]	; (80019ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001904:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d10d      	bne.n	8001928 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001910:	e00a      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	2b04      	cmp	r3, #4
 8001916:	d102      	bne.n	800191e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001918:	4b25      	ldr	r3, [pc, #148]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800191a:	61bb      	str	r3, [r7, #24]
 800191c:	e004      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	2b08      	cmp	r3, #8
 8001922:	d101      	bne.n	8001928 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001924:	4b23      	ldr	r3, [pc, #140]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001926:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	2b0c      	cmp	r3, #12
 800192c:	d134      	bne.n	8001998 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800192e:	4b1e      	ldr	r3, [pc, #120]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d003      	beq.n	8001946 <HAL_RCC_GetSysClockFreq+0xa6>
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	2b03      	cmp	r3, #3
 8001942:	d003      	beq.n	800194c <HAL_RCC_GetSysClockFreq+0xac>
 8001944:	e005      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001946:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001948:	617b      	str	r3, [r7, #20]
      break;
 800194a:	e005      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800194c:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800194e:	617b      	str	r3, [r7, #20]
      break;
 8001950:	e002      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	617b      	str	r3, [r7, #20]
      break;
 8001956:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001958:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	091b      	lsrs	r3, r3, #4
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	3301      	adds	r3, #1
 8001964:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	0a1b      	lsrs	r3, r3, #8
 800196c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	fb02 f203 	mul.w	r2, r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	fbb2 f3f3 	udiv	r3, r2, r3
 800197c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800197e:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	0e5b      	lsrs	r3, r3, #25
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	3301      	adds	r3, #1
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	fbb2 f3f3 	udiv	r3, r2, r3
 8001996:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001998:	69bb      	ldr	r3, [r7, #24]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3724      	adds	r7, #36	; 0x24
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40021000 	.word	0x40021000
 80019ac:	08002750 	.word	0x08002750
 80019b0:	00f42400 	.word	0x00f42400
 80019b4:	007a1200 	.word	0x007a1200

080019b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80019c0:	2300      	movs	r3, #0
 80019c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80019c4:	4b2a      	ldr	r3, [pc, #168]	; (8001a70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80019d0:	f7ff fa00 	bl	8000dd4 <HAL_PWREx_GetVoltageRange>
 80019d4:	6178      	str	r0, [r7, #20]
 80019d6:	e014      	b.n	8001a02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019d8:	4b25      	ldr	r3, [pc, #148]	; (8001a70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019dc:	4a24      	ldr	r2, [pc, #144]	; (8001a70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e2:	6593      	str	r3, [r2, #88]	; 0x58
 80019e4:	4b22      	ldr	r3, [pc, #136]	; (8001a70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80019f0:	f7ff f9f0 	bl	8000dd4 <HAL_PWREx_GetVoltageRange>
 80019f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80019f6:	4b1e      	ldr	r3, [pc, #120]	; (8001a70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fa:	4a1d      	ldr	r2, [pc, #116]	; (8001a70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a00:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a08:	d10b      	bne.n	8001a22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b80      	cmp	r3, #128	; 0x80
 8001a0e:	d919      	bls.n	8001a44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2ba0      	cmp	r3, #160	; 0xa0
 8001a14:	d902      	bls.n	8001a1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a16:	2302      	movs	r3, #2
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	e013      	b.n	8001a44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	e010      	b.n	8001a44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b80      	cmp	r3, #128	; 0x80
 8001a26:	d902      	bls.n	8001a2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a28:	2303      	movs	r3, #3
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	e00a      	b.n	8001a44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b80      	cmp	r3, #128	; 0x80
 8001a32:	d102      	bne.n	8001a3a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a34:	2302      	movs	r3, #2
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	e004      	b.n	8001a44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b70      	cmp	r3, #112	; 0x70
 8001a3e:	d101      	bne.n	8001a44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a40:	2301      	movs	r3, #1
 8001a42:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f023 0207 	bic.w	r2, r3, #7
 8001a4c:	4909      	ldr	r1, [pc, #36]	; (8001a74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a54:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d001      	beq.n	8001a66 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e000      	b.n	8001a68 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40022000 	.word	0x40022000

08001a78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e049      	b.n	8001b1e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d106      	bne.n	8001aa4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7fe fdde 	bl	8000660 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3304      	adds	r3, #4
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4610      	mov	r0, r2
 8001ab8:	f000 fa24 	bl	8001f04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d109      	bne.n	8001b4c <HAL_TIM_PWM_Start+0x24>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	bf14      	ite	ne
 8001b44:	2301      	movne	r3, #1
 8001b46:	2300      	moveq	r3, #0
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	e03c      	b.n	8001bc6 <HAL_TIM_PWM_Start+0x9e>
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d109      	bne.n	8001b66 <HAL_TIM_PWM_Start+0x3e>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	bf14      	ite	ne
 8001b5e:	2301      	movne	r3, #1
 8001b60:	2300      	moveq	r3, #0
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	e02f      	b.n	8001bc6 <HAL_TIM_PWM_Start+0x9e>
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	d109      	bne.n	8001b80 <HAL_TIM_PWM_Start+0x58>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	bf14      	ite	ne
 8001b78:	2301      	movne	r3, #1
 8001b7a:	2300      	moveq	r3, #0
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	e022      	b.n	8001bc6 <HAL_TIM_PWM_Start+0x9e>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	2b0c      	cmp	r3, #12
 8001b84:	d109      	bne.n	8001b9a <HAL_TIM_PWM_Start+0x72>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	bf14      	ite	ne
 8001b92:	2301      	movne	r3, #1
 8001b94:	2300      	moveq	r3, #0
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	e015      	b.n	8001bc6 <HAL_TIM_PWM_Start+0x9e>
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	2b10      	cmp	r3, #16
 8001b9e:	d109      	bne.n	8001bb4 <HAL_TIM_PWM_Start+0x8c>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	bf14      	ite	ne
 8001bac:	2301      	movne	r3, #1
 8001bae:	2300      	moveq	r3, #0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	e008      	b.n	8001bc6 <HAL_TIM_PWM_Start+0x9e>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	bf14      	ite	ne
 8001bc0:	2301      	movne	r3, #1
 8001bc2:	2300      	moveq	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e07e      	b.n	8001ccc <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d104      	bne.n	8001bde <HAL_TIM_PWM_Start+0xb6>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bdc:	e023      	b.n	8001c26 <HAL_TIM_PWM_Start+0xfe>
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d104      	bne.n	8001bee <HAL_TIM_PWM_Start+0xc6>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2202      	movs	r2, #2
 8001be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bec:	e01b      	b.n	8001c26 <HAL_TIM_PWM_Start+0xfe>
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d104      	bne.n	8001bfe <HAL_TIM_PWM_Start+0xd6>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bfc:	e013      	b.n	8001c26 <HAL_TIM_PWM_Start+0xfe>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	2b0c      	cmp	r3, #12
 8001c02:	d104      	bne.n	8001c0e <HAL_TIM_PWM_Start+0xe6>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2202      	movs	r2, #2
 8001c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001c0c:	e00b      	b.n	8001c26 <HAL_TIM_PWM_Start+0xfe>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	2b10      	cmp	r3, #16
 8001c12:	d104      	bne.n	8001c1e <HAL_TIM_PWM_Start+0xf6>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2202      	movs	r2, #2
 8001c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c1c:	e003      	b.n	8001c26 <HAL_TIM_PWM_Start+0xfe>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2202      	movs	r2, #2
 8001c22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	6839      	ldr	r1, [r7, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f000 fc4a 	bl	80024c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a26      	ldr	r2, [pc, #152]	; (8001cd4 <HAL_TIM_PWM_Start+0x1ac>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d009      	beq.n	8001c52 <HAL_TIM_PWM_Start+0x12a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a25      	ldr	r2, [pc, #148]	; (8001cd8 <HAL_TIM_PWM_Start+0x1b0>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d004      	beq.n	8001c52 <HAL_TIM_PWM_Start+0x12a>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a23      	ldr	r2, [pc, #140]	; (8001cdc <HAL_TIM_PWM_Start+0x1b4>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d101      	bne.n	8001c56 <HAL_TIM_PWM_Start+0x12e>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <HAL_TIM_PWM_Start+0x130>
 8001c56:	2300      	movs	r3, #0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d007      	beq.n	8001c6c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c6a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a18      	ldr	r2, [pc, #96]	; (8001cd4 <HAL_TIM_PWM_Start+0x1ac>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d009      	beq.n	8001c8a <HAL_TIM_PWM_Start+0x162>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c7e:	d004      	beq.n	8001c8a <HAL_TIM_PWM_Start+0x162>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a14      	ldr	r2, [pc, #80]	; (8001cd8 <HAL_TIM_PWM_Start+0x1b0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d115      	bne.n	8001cb6 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <HAL_TIM_PWM_Start+0x1b8>)
 8001c92:	4013      	ands	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2b06      	cmp	r3, #6
 8001c9a:	d015      	beq.n	8001cc8 <HAL_TIM_PWM_Start+0x1a0>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca2:	d011      	beq.n	8001cc8 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0201 	orr.w	r2, r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cb4:	e008      	b.n	8001cc8 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f042 0201 	orr.w	r2, r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	e000      	b.n	8001cca <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cc8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40012c00 	.word	0x40012c00
 8001cd8:	40014000 	.word	0x40014000
 8001cdc:	40014400 	.word	0x40014400
 8001ce0:	00010007 	.word	0x00010007

08001ce4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d101      	bne.n	8001cfe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e0fd      	b.n	8001efa <HAL_TIM_PWM_ConfigChannel+0x216>
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b14      	cmp	r3, #20
 8001d0a:	f200 80f0 	bhi.w	8001eee <HAL_TIM_PWM_ConfigChannel+0x20a>
 8001d0e:	a201      	add	r2, pc, #4	; (adr r2, 8001d14 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d14:	08001d69 	.word	0x08001d69
 8001d18:	08001eef 	.word	0x08001eef
 8001d1c:	08001eef 	.word	0x08001eef
 8001d20:	08001eef 	.word	0x08001eef
 8001d24:	08001da9 	.word	0x08001da9
 8001d28:	08001eef 	.word	0x08001eef
 8001d2c:	08001eef 	.word	0x08001eef
 8001d30:	08001eef 	.word	0x08001eef
 8001d34:	08001deb 	.word	0x08001deb
 8001d38:	08001eef 	.word	0x08001eef
 8001d3c:	08001eef 	.word	0x08001eef
 8001d40:	08001eef 	.word	0x08001eef
 8001d44:	08001e2b 	.word	0x08001e2b
 8001d48:	08001eef 	.word	0x08001eef
 8001d4c:	08001eef 	.word	0x08001eef
 8001d50:	08001eef 	.word	0x08001eef
 8001d54:	08001e6d 	.word	0x08001e6d
 8001d58:	08001eef 	.word	0x08001eef
 8001d5c:	08001eef 	.word	0x08001eef
 8001d60:	08001eef 	.word	0x08001eef
 8001d64:	08001ead 	.word	0x08001ead
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68b9      	ldr	r1, [r7, #8]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 f92c 	bl	8001fcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699a      	ldr	r2, [r3, #24]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 0208 	orr.w	r2, r2, #8
 8001d82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	699a      	ldr	r2, [r3, #24]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0204 	bic.w	r2, r2, #4
 8001d92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6999      	ldr	r1, [r3, #24]
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	691a      	ldr	r2, [r3, #16]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	619a      	str	r2, [r3, #24]
      break;
 8001da6:	e0a3      	b.n	8001ef0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68b9      	ldr	r1, [r7, #8]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 f988 	bl	80020c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	699a      	ldr	r2, [r3, #24]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	699a      	ldr	r2, [r3, #24]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6999      	ldr	r1, [r3, #24]
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	021a      	lsls	r2, r3, #8
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	619a      	str	r2, [r3, #24]
      break;
 8001de8:	e082      	b.n	8001ef0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68b9      	ldr	r1, [r7, #8]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f000 f9e1 	bl	80021b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	69da      	ldr	r2, [r3, #28]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f042 0208 	orr.w	r2, r2, #8
 8001e04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	69da      	ldr	r2, [r3, #28]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0204 	bic.w	r2, r2, #4
 8001e14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	69d9      	ldr	r1, [r3, #28]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	691a      	ldr	r2, [r3, #16]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	61da      	str	r2, [r3, #28]
      break;
 8001e28:	e062      	b.n	8001ef0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68b9      	ldr	r1, [r7, #8]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f000 fa39 	bl	80022a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	69da      	ldr	r2, [r3, #28]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	69da      	ldr	r2, [r3, #28]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	69d9      	ldr	r1, [r3, #28]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	021a      	lsls	r2, r3, #8
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	61da      	str	r2, [r3, #28]
      break;
 8001e6a:	e041      	b.n	8001ef0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 fa76 	bl	8002364 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 0208 	orr.w	r2, r2, #8
 8001e86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 0204 	bic.w	r2, r2, #4
 8001e96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	691a      	ldr	r2, [r3, #16]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001eaa:	e021      	b.n	8001ef0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 faae 	bl	8002414 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ec6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ed6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	021a      	lsls	r2, r3, #8
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001eec:	e000      	b.n	8001ef0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8001eee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop

08001f04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a2a      	ldr	r2, [pc, #168]	; (8001fc0 <TIM_Base_SetConfig+0xbc>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d003      	beq.n	8001f24 <TIM_Base_SetConfig+0x20>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f22:	d108      	bne.n	8001f36 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a21      	ldr	r2, [pc, #132]	; (8001fc0 <TIM_Base_SetConfig+0xbc>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d00b      	beq.n	8001f56 <TIM_Base_SetConfig+0x52>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f44:	d007      	beq.n	8001f56 <TIM_Base_SetConfig+0x52>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a1e      	ldr	r2, [pc, #120]	; (8001fc4 <TIM_Base_SetConfig+0xc0>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d003      	beq.n	8001f56 <TIM_Base_SetConfig+0x52>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a1d      	ldr	r2, [pc, #116]	; (8001fc8 <TIM_Base_SetConfig+0xc4>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d108      	bne.n	8001f68 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a0c      	ldr	r2, [pc, #48]	; (8001fc0 <TIM_Base_SetConfig+0xbc>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d007      	beq.n	8001fa4 <TIM_Base_SetConfig+0xa0>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a0b      	ldr	r2, [pc, #44]	; (8001fc4 <TIM_Base_SetConfig+0xc0>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d003      	beq.n	8001fa4 <TIM_Base_SetConfig+0xa0>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a0a      	ldr	r2, [pc, #40]	; (8001fc8 <TIM_Base_SetConfig+0xc4>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d103      	bne.n	8001fac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	615a      	str	r2, [r3, #20]
}
 8001fb2:	bf00      	nop
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40012c00 	.word	0x40012c00
 8001fc4:	40014000 	.word	0x40014000
 8001fc8:	40014400 	.word	0x40014400

08001fcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b087      	sub	sp, #28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	f023 0201 	bic.w	r2, r3, #1
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f023 0303 	bic.w	r3, r3, #3
 8002006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	4313      	orrs	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f023 0302 	bic.w	r3, r3, #2
 8002018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	4313      	orrs	r3, r2
 8002022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a24      	ldr	r2, [pc, #144]	; (80020b8 <TIM_OC1_SetConfig+0xec>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d007      	beq.n	800203c <TIM_OC1_SetConfig+0x70>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a23      	ldr	r2, [pc, #140]	; (80020bc <TIM_OC1_SetConfig+0xf0>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d003      	beq.n	800203c <TIM_OC1_SetConfig+0x70>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a22      	ldr	r2, [pc, #136]	; (80020c0 <TIM_OC1_SetConfig+0xf4>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d10c      	bne.n	8002056 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f023 0308 	bic.w	r3, r3, #8
 8002042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	4313      	orrs	r3, r2
 800204c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f023 0304 	bic.w	r3, r3, #4
 8002054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a17      	ldr	r2, [pc, #92]	; (80020b8 <TIM_OC1_SetConfig+0xec>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d007      	beq.n	800206e <TIM_OC1_SetConfig+0xa2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a16      	ldr	r2, [pc, #88]	; (80020bc <TIM_OC1_SetConfig+0xf0>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d003      	beq.n	800206e <TIM_OC1_SetConfig+0xa2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a15      	ldr	r2, [pc, #84]	; (80020c0 <TIM_OC1_SetConfig+0xf4>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d111      	bne.n	8002092 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002074:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800207c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	4313      	orrs	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	621a      	str	r2, [r3, #32]
}
 80020ac:	bf00      	nop
 80020ae:	371c      	adds	r7, #28
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	40012c00 	.word	0x40012c00
 80020bc:	40014000 	.word	0x40014000
 80020c0:	40014400 	.word	0x40014400

080020c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b087      	sub	sp, #28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	f023 0210 	bic.w	r2, r3, #16
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	021b      	lsls	r3, r3, #8
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	4313      	orrs	r3, r2
 800210a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f023 0320 	bic.w	r3, r3, #32
 8002112:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	011b      	lsls	r3, r3, #4
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	4313      	orrs	r3, r2
 800211e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a22      	ldr	r2, [pc, #136]	; (80021ac <TIM_OC2_SetConfig+0xe8>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d10d      	bne.n	8002144 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800212e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	011b      	lsls	r3, r3, #4
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	4313      	orrs	r3, r2
 800213a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002142:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a19      	ldr	r2, [pc, #100]	; (80021ac <TIM_OC2_SetConfig+0xe8>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d007      	beq.n	800215c <TIM_OC2_SetConfig+0x98>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a18      	ldr	r2, [pc, #96]	; (80021b0 <TIM_OC2_SetConfig+0xec>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d003      	beq.n	800215c <TIM_OC2_SetConfig+0x98>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a17      	ldr	r2, [pc, #92]	; (80021b4 <TIM_OC2_SetConfig+0xf0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d113      	bne.n	8002184 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002162:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800216a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	4313      	orrs	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	621a      	str	r2, [r3, #32]
}
 800219e:	bf00      	nop
 80021a0:	371c      	adds	r7, #28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40012c00 	.word	0x40012c00
 80021b0:	40014000 	.word	0x40014000
 80021b4:	40014400 	.word	0x40014400

080021b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f023 0303 	bic.w	r3, r3, #3
 80021f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002204:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	021b      	lsls	r3, r3, #8
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	4313      	orrs	r3, r2
 8002210:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a21      	ldr	r2, [pc, #132]	; (800229c <TIM_OC3_SetConfig+0xe4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d10d      	bne.n	8002236 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002220:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	021b      	lsls	r3, r3, #8
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	4313      	orrs	r3, r2
 800222c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002234:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a18      	ldr	r2, [pc, #96]	; (800229c <TIM_OC3_SetConfig+0xe4>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d007      	beq.n	800224e <TIM_OC3_SetConfig+0x96>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a17      	ldr	r2, [pc, #92]	; (80022a0 <TIM_OC3_SetConfig+0xe8>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d003      	beq.n	800224e <TIM_OC3_SetConfig+0x96>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a16      	ldr	r2, [pc, #88]	; (80022a4 <TIM_OC3_SetConfig+0xec>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d113      	bne.n	8002276 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002254:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800225c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	011b      	lsls	r3, r3, #4
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	4313      	orrs	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	621a      	str	r2, [r3, #32]
}
 8002290:	bf00      	nop
 8002292:	371c      	adds	r7, #28
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	40012c00 	.word	0x40012c00
 80022a0:	40014000 	.word	0x40014000
 80022a4:	40014400 	.word	0x40014400

080022a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b087      	sub	sp, #28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	021b      	lsls	r3, r3, #8
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	031b      	lsls	r3, r3, #12
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a14      	ldr	r2, [pc, #80]	; (8002358 <TIM_OC4_SetConfig+0xb0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d007      	beq.n	800231c <TIM_OC4_SetConfig+0x74>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a13      	ldr	r2, [pc, #76]	; (800235c <TIM_OC4_SetConfig+0xb4>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d003      	beq.n	800231c <TIM_OC4_SetConfig+0x74>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a12      	ldr	r2, [pc, #72]	; (8002360 <TIM_OC4_SetConfig+0xb8>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d109      	bne.n	8002330 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002322:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	019b      	lsls	r3, r3, #6
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	4313      	orrs	r3, r2
 800232e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	621a      	str	r2, [r3, #32]
}
 800234a:	bf00      	nop
 800234c:	371c      	adds	r7, #28
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	40012c00 	.word	0x40012c00
 800235c:	40014000 	.word	0x40014000
 8002360:	40014400 	.word	0x40014400

08002364 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	4313      	orrs	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80023a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	041b      	lsls	r3, r3, #16
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a13      	ldr	r2, [pc, #76]	; (8002408 <TIM_OC5_SetConfig+0xa4>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d007      	beq.n	80023ce <TIM_OC5_SetConfig+0x6a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a12      	ldr	r2, [pc, #72]	; (800240c <TIM_OC5_SetConfig+0xa8>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d003      	beq.n	80023ce <TIM_OC5_SetConfig+0x6a>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a11      	ldr	r2, [pc, #68]	; (8002410 <TIM_OC5_SetConfig+0xac>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d109      	bne.n	80023e2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	021b      	lsls	r3, r3, #8
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	4313      	orrs	r3, r2
 80023e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	621a      	str	r2, [r3, #32]
}
 80023fc:	bf00      	nop
 80023fe:	371c      	adds	r7, #28
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	40012c00 	.word	0x40012c00
 800240c:	40014000 	.word	0x40014000
 8002410:	40014400 	.word	0x40014400

08002414 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002414:	b480      	push	{r7}
 8002416:	b087      	sub	sp, #28
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	021b      	lsls	r3, r3, #8
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	4313      	orrs	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800245a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	051b      	lsls	r3, r3, #20
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4313      	orrs	r3, r2
 8002466:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a14      	ldr	r2, [pc, #80]	; (80024bc <TIM_OC6_SetConfig+0xa8>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d007      	beq.n	8002480 <TIM_OC6_SetConfig+0x6c>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a13      	ldr	r2, [pc, #76]	; (80024c0 <TIM_OC6_SetConfig+0xac>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d003      	beq.n	8002480 <TIM_OC6_SetConfig+0x6c>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a12      	ldr	r2, [pc, #72]	; (80024c4 <TIM_OC6_SetConfig+0xb0>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d109      	bne.n	8002494 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002486:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	029b      	lsls	r3, r3, #10
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	4313      	orrs	r3, r2
 8002492:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	621a      	str	r2, [r3, #32]
}
 80024ae:	bf00      	nop
 80024b0:	371c      	adds	r7, #28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40012c00 	.word	0x40012c00
 80024c0:	40014000 	.word	0x40014000
 80024c4:	40014400 	.word	0x40014400

080024c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b087      	sub	sp, #28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	f003 031f 	and.w	r3, r3, #31
 80024da:	2201      	movs	r2, #1
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a1a      	ldr	r2, [r3, #32]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	43db      	mvns	r3, r3
 80024ea:	401a      	ands	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6a1a      	ldr	r2, [r3, #32]
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	f003 031f 	and.w	r3, r3, #31
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002500:	431a      	orrs	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	621a      	str	r2, [r3, #32]
}
 8002506:	bf00      	nop
 8002508:	371c      	adds	r7, #28
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
	...

08002514 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002528:	2302      	movs	r3, #2
 800252a:	e04f      	b.n	80025cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a21      	ldr	r2, [pc, #132]	; (80025d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d108      	bne.n	8002568 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800255c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	4313      	orrs	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800256e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	4313      	orrs	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a14      	ldr	r2, [pc, #80]	; (80025d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d009      	beq.n	80025a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002594:	d004      	beq.n	80025a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a10      	ldr	r2, [pc, #64]	; (80025dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d10c      	bne.n	80025ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	68ba      	ldr	r2, [r7, #8]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	40012c00 	.word	0x40012c00
 80025dc:	40014000 	.word	0x40014000

080025e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d101      	bne.n	80025fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80025f8:	2302      	movs	r3, #2
 80025fa:	e060      	b.n	80026be <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	4313      	orrs	r3, r2
 8002610:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	4313      	orrs	r3, r2
 800261e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	4313      	orrs	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4313      	orrs	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	4313      	orrs	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	4313      	orrs	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002662:	4313      	orrs	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	041b      	lsls	r3, r3, #16
 8002672:	4313      	orrs	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a14      	ldr	r2, [pc, #80]	; (80026cc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d115      	bne.n	80026ac <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	051b      	lsls	r3, r3, #20
 800268c:	4313      	orrs	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	4313      	orrs	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40012c00 	.word	0x40012c00

080026d0 <__libc_init_array>:
 80026d0:	b570      	push	{r4, r5, r6, lr}
 80026d2:	4d0d      	ldr	r5, [pc, #52]	; (8002708 <__libc_init_array+0x38>)
 80026d4:	4c0d      	ldr	r4, [pc, #52]	; (800270c <__libc_init_array+0x3c>)
 80026d6:	1b64      	subs	r4, r4, r5
 80026d8:	10a4      	asrs	r4, r4, #2
 80026da:	2600      	movs	r6, #0
 80026dc:	42a6      	cmp	r6, r4
 80026de:	d109      	bne.n	80026f4 <__libc_init_array+0x24>
 80026e0:	4d0b      	ldr	r5, [pc, #44]	; (8002710 <__libc_init_array+0x40>)
 80026e2:	4c0c      	ldr	r4, [pc, #48]	; (8002714 <__libc_init_array+0x44>)
 80026e4:	f000 f820 	bl	8002728 <_init>
 80026e8:	1b64      	subs	r4, r4, r5
 80026ea:	10a4      	asrs	r4, r4, #2
 80026ec:	2600      	movs	r6, #0
 80026ee:	42a6      	cmp	r6, r4
 80026f0:	d105      	bne.n	80026fe <__libc_init_array+0x2e>
 80026f2:	bd70      	pop	{r4, r5, r6, pc}
 80026f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80026f8:	4798      	blx	r3
 80026fa:	3601      	adds	r6, #1
 80026fc:	e7ee      	b.n	80026dc <__libc_init_array+0xc>
 80026fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002702:	4798      	blx	r3
 8002704:	3601      	adds	r6, #1
 8002706:	e7f2      	b.n	80026ee <__libc_init_array+0x1e>
 8002708:	08002780 	.word	0x08002780
 800270c:	08002780 	.word	0x08002780
 8002710:	08002780 	.word	0x08002780
 8002714:	08002784 	.word	0x08002784

08002718 <memset>:
 8002718:	4402      	add	r2, r0
 800271a:	4603      	mov	r3, r0
 800271c:	4293      	cmp	r3, r2
 800271e:	d100      	bne.n	8002722 <memset+0xa>
 8002720:	4770      	bx	lr
 8002722:	f803 1b01 	strb.w	r1, [r3], #1
 8002726:	e7f9      	b.n	800271c <memset+0x4>

08002728 <_init>:
 8002728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800272a:	bf00      	nop
 800272c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800272e:	bc08      	pop	{r3}
 8002730:	469e      	mov	lr, r3
 8002732:	4770      	bx	lr

08002734 <_fini>:
 8002734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002736:	bf00      	nop
 8002738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800273a:	bc08      	pop	{r3}
 800273c:	469e      	mov	lr, r3
 800273e:	4770      	bx	lr
