
MotorController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6f4  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  0800b888  0800b888  0001b888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800baa8  0800baa8  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  0800baa8  0800baa8  0001baa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bab0  0800bab0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bab0  0800bab0  0001bab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bab4  0800bab4  0001bab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800bab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000804  20000018  0800bad0  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000081c  0800bad0  0002081c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b7e5  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003089  00000000  00000000  0003b82d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001710  00000000  00000000  0003e8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015e8  00000000  00000000  0003ffc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000442e  00000000  00000000  000415b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001928d  00000000  00000000  000459de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de0c8  00000000  00000000  0005ec6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013cd33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006744  00000000  00000000  0013cd88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b86c 	.word	0x0800b86c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	0800b86c 	.word	0x0800b86c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b80:	f000 b96e 	b.w	8000e60 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	468c      	mov	ip, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 8083 	bne.w	8000cb2 <__udivmoddi4+0x116>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	4617      	mov	r7, r2
 8000bb0:	d947      	bls.n	8000c42 <__udivmoddi4+0xa6>
 8000bb2:	fab2 f282 	clz	r2, r2
 8000bb6:	b142      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb8:	f1c2 0020 	rsb	r0, r2, #32
 8000bbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000bc0:	4091      	lsls	r1, r2
 8000bc2:	4097      	lsls	r7, r2
 8000bc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000bc8:	4094      	lsls	r4, r2
 8000bca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000bd4:	fa1f fe87 	uxth.w	lr, r7
 8000bd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be0:	fb06 f10e 	mul.w	r1, r6, lr
 8000be4:	4299      	cmp	r1, r3
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x60>
 8000be8:	18fb      	adds	r3, r7, r3
 8000bea:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bee:	f080 8119 	bcs.w	8000e24 <__udivmoddi4+0x288>
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	f240 8116 	bls.w	8000e24 <__udivmoddi4+0x288>
 8000bf8:	3e02      	subs	r6, #2
 8000bfa:	443b      	add	r3, r7
 8000bfc:	1a5b      	subs	r3, r3, r1
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c04:	fb08 3310 	mls	r3, r8, r0, r3
 8000c08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	45a6      	cmp	lr, r4
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x8c>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c1a:	f080 8105 	bcs.w	8000e28 <__udivmoddi4+0x28c>
 8000c1e:	45a6      	cmp	lr, r4
 8000c20:	f240 8102 	bls.w	8000e28 <__udivmoddi4+0x28c>
 8000c24:	3802      	subs	r0, #2
 8000c26:	443c      	add	r4, r7
 8000c28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	2600      	movs	r6, #0
 8000c32:	b11d      	cbz	r5, 8000c3c <__udivmoddi4+0xa0>
 8000c34:	40d4      	lsrs	r4, r2
 8000c36:	2300      	movs	r3, #0
 8000c38:	e9c5 4300 	strd	r4, r3, [r5]
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	b902      	cbnz	r2, 8000c46 <__udivmoddi4+0xaa>
 8000c44:	deff      	udf	#255	; 0xff
 8000c46:	fab2 f282 	clz	r2, r2
 8000c4a:	2a00      	cmp	r2, #0
 8000c4c:	d150      	bne.n	8000cf0 <__udivmoddi4+0x154>
 8000c4e:	1bcb      	subs	r3, r1, r7
 8000c50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c54:	fa1f f887 	uxth.w	r8, r7
 8000c58:	2601      	movs	r6, #1
 8000c5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c5e:	0c21      	lsrs	r1, r4, #16
 8000c60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c68:	fb08 f30c 	mul.w	r3, r8, ip
 8000c6c:	428b      	cmp	r3, r1
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0xe4>
 8000c70:	1879      	adds	r1, r7, r1
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0xe2>
 8000c78:	428b      	cmp	r3, r1
 8000c7a:	f200 80e9 	bhi.w	8000e50 <__udivmoddi4+0x2b4>
 8000c7e:	4684      	mov	ip, r0
 8000c80:	1ac9      	subs	r1, r1, r3
 8000c82:	b2a3      	uxth	r3, r4
 8000c84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c90:	fb08 f800 	mul.w	r8, r8, r0
 8000c94:	45a0      	cmp	r8, r4
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0x10c>
 8000c98:	193c      	adds	r4, r7, r4
 8000c9a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x10a>
 8000ca0:	45a0      	cmp	r8, r4
 8000ca2:	f200 80d9 	bhi.w	8000e58 <__udivmoddi4+0x2bc>
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	eba4 0408 	sub.w	r4, r4, r8
 8000cac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cb0:	e7bf      	b.n	8000c32 <__udivmoddi4+0x96>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0x12e>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80b1 	beq.w	8000e1e <__udivmoddi4+0x282>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x1cc>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0x140>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80b8 	bhi.w	8000e4c <__udivmoddi4+0x2b0>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0103 	sbc.w	r1, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	468c      	mov	ip, r1
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0a8      	beq.n	8000c3c <__udivmoddi4+0xa0>
 8000cea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cee:	e7a5      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f603 	lsr.w	r6, r0, r3
 8000cf8:	4097      	lsls	r7, r2
 8000cfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000cfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d02:	40d9      	lsrs	r1, r3
 8000d04:	4330      	orrs	r0, r6
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d0c:	fa1f f887 	uxth.w	r8, r7
 8000d10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d18:	fb06 f108 	mul.w	r1, r6, r8
 8000d1c:	4299      	cmp	r1, r3
 8000d1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x19c>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d2a:	f080 808d 	bcs.w	8000e48 <__udivmoddi4+0x2ac>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 808a 	bls.w	8000e48 <__udivmoddi4+0x2ac>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b281      	uxth	r1, r0
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d48:	fb00 f308 	mul.w	r3, r0, r8
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	d907      	bls.n	8000d60 <__udivmoddi4+0x1c4>
 8000d50:	1879      	adds	r1, r7, r1
 8000d52:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d56:	d273      	bcs.n	8000e40 <__udivmoddi4+0x2a4>
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d971      	bls.n	8000e40 <__udivmoddi4+0x2a4>
 8000d5c:	3802      	subs	r0, #2
 8000d5e:	4439      	add	r1, r7
 8000d60:	1acb      	subs	r3, r1, r3
 8000d62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d66:	e778      	b.n	8000c5a <__udivmoddi4+0xbe>
 8000d68:	f1c6 0c20 	rsb	ip, r6, #32
 8000d6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d74:	431c      	orrs	r4, r3
 8000d76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d86:	431f      	orrs	r7, r3
 8000d88:	0c3b      	lsrs	r3, r7, #16
 8000d8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d8e:	fa1f f884 	uxth.w	r8, r4
 8000d92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d9e:	458a      	cmp	sl, r1
 8000da0:	fa02 f206 	lsl.w	r2, r2, r6
 8000da4:	fa00 f306 	lsl.w	r3, r0, r6
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x220>
 8000daa:	1861      	adds	r1, r4, r1
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000db0:	d248      	bcs.n	8000e44 <__udivmoddi4+0x2a8>
 8000db2:	458a      	cmp	sl, r1
 8000db4:	d946      	bls.n	8000e44 <__udivmoddi4+0x2a8>
 8000db6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dba:	4421      	add	r1, r4
 8000dbc:	eba1 010a 	sub.w	r1, r1, sl
 8000dc0:	b2bf      	uxth	r7, r7
 8000dc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dce:	fb00 f808 	mul.w	r8, r0, r8
 8000dd2:	45b8      	cmp	r8, r7
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x24a>
 8000dd6:	19e7      	adds	r7, r4, r7
 8000dd8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ddc:	d22e      	bcs.n	8000e3c <__udivmoddi4+0x2a0>
 8000dde:	45b8      	cmp	r8, r7
 8000de0:	d92c      	bls.n	8000e3c <__udivmoddi4+0x2a0>
 8000de2:	3802      	subs	r0, #2
 8000de4:	4427      	add	r7, r4
 8000de6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dea:	eba7 0708 	sub.w	r7, r7, r8
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	454f      	cmp	r7, r9
 8000df4:	46c6      	mov	lr, r8
 8000df6:	4649      	mov	r1, r9
 8000df8:	d31a      	bcc.n	8000e30 <__udivmoddi4+0x294>
 8000dfa:	d017      	beq.n	8000e2c <__udivmoddi4+0x290>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x27a>
 8000dfe:	ebb3 020e 	subs.w	r2, r3, lr
 8000e02:	eb67 0701 	sbc.w	r7, r7, r1
 8000e06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e0a:	40f2      	lsrs	r2, r6
 8000e0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e10:	40f7      	lsrs	r7, r6
 8000e12:	e9c5 2700 	strd	r2, r7, [r5]
 8000e16:	2600      	movs	r6, #0
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	462e      	mov	r6, r5
 8000e20:	4628      	mov	r0, r5
 8000e22:	e70b      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000e24:	4606      	mov	r6, r0
 8000e26:	e6e9      	b.n	8000bfc <__udivmoddi4+0x60>
 8000e28:	4618      	mov	r0, r3
 8000e2a:	e6fd      	b.n	8000c28 <__udivmoddi4+0x8c>
 8000e2c:	4543      	cmp	r3, r8
 8000e2e:	d2e5      	bcs.n	8000dfc <__udivmoddi4+0x260>
 8000e30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e34:	eb69 0104 	sbc.w	r1, r9, r4
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e7df      	b.n	8000dfc <__udivmoddi4+0x260>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	e7d2      	b.n	8000de6 <__udivmoddi4+0x24a>
 8000e40:	4660      	mov	r0, ip
 8000e42:	e78d      	b.n	8000d60 <__udivmoddi4+0x1c4>
 8000e44:	4681      	mov	r9, r0
 8000e46:	e7b9      	b.n	8000dbc <__udivmoddi4+0x220>
 8000e48:	4666      	mov	r6, ip
 8000e4a:	e775      	b.n	8000d38 <__udivmoddi4+0x19c>
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	e74a      	b.n	8000ce6 <__udivmoddi4+0x14a>
 8000e50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e54:	4439      	add	r1, r7
 8000e56:	e713      	b.n	8000c80 <__udivmoddi4+0xe4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	443c      	add	r4, r7
 8000e5c:	e724      	b.n	8000ca8 <__udivmoddi4+0x10c>
 8000e5e:	bf00      	nop

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <MPU_Init>:
Axes3 resultGyro = { 0 };
Axes3 resultAccel = { 0 };

I2C_HandleTypeDef *hi2c;

HAL_StatusTypeDef MPU_Init(I2C_HandleTypeDef *I2C_handler) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af02      	add	r7, sp, #8
 8000e6a:	6078      	str	r0, [r7, #4]
	hi2c = I2C_handler;
 8000e6c:	4a51      	ldr	r2, [pc, #324]	; (8000fb4 <MPU_Init+0x150>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef returnValue = HAL_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	73fb      	strb	r3, [r7, #15]
	uint8_t initializationBuffer[5] = { 0 };
 8000e76:	2300      	movs	r3, #0
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	733b      	strb	r3, [r7, #12]

	initializationBuffer[0] = MPU_PWR_MGT_1;
 8000e7e:	236b      	movs	r3, #107	; 0x6b
 8000e80:	723b      	strb	r3, [r7, #8]
	initializationBuffer[1] = 0x00; //Set clocksource to internal 8MHz oscillator
 8000e82:	2300      	movs	r3, #0
 8000e84:	727b      	strb	r3, [r7, #9]
	returnValue = HAL_I2C_Master_Transmit(hi2c, (MPU_Address << 1),
 8000e86:	4b4b      	ldr	r3, [pc, #300]	; (8000fb4 <MPU_Init+0x150>)
 8000e88:	6818      	ldr	r0, [r3, #0]
 8000e8a:	2368      	movs	r3, #104	; 0x68
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	b299      	uxth	r1, r3
 8000e92:	f107 0208 	add.w	r2, r7, #8
 8000e96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e9a:	9300      	str	r3, [sp, #0]
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	f004 fb25 	bl	80054ec <HAL_I2C_Master_Transmit>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	73fb      	strb	r3, [r7, #15]
			initializationBuffer, 2, HAL_MAX_DELAY);
	if (returnValue != HAL_OK)
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MPU_Init+0x4c>
		return returnValue;
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	e07d      	b.n	8000fac <MPU_Init+0x148>

	initializationBuffer[0] = SIGNAL_PATH_RESET;
 8000eb0:	2368      	movs	r3, #104	; 0x68
 8000eb2:	723b      	strb	r3, [r7, #8]
	initializationBuffer[1] = 0x07; // Resets gyro, accel & temp signal path to disable any filtering
 8000eb4:	2307      	movs	r3, #7
 8000eb6:	727b      	strb	r3, [r7, #9]
	returnValue = HAL_I2C_Master_Transmit(hi2c, (MPU_Address << 1),
 8000eb8:	4b3e      	ldr	r3, [pc, #248]	; (8000fb4 <MPU_Init+0x150>)
 8000eba:	6818      	ldr	r0, [r3, #0]
 8000ebc:	2368      	movs	r3, #104	; 0x68
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	b299      	uxth	r1, r3
 8000ec4:	f107 0208 	add.w	r2, r7, #8
 8000ec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	2302      	movs	r3, #2
 8000ed0:	f004 fb0c 	bl	80054ec <HAL_I2C_Master_Transmit>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	73fb      	strb	r3, [r7, #15]
			initializationBuffer, 2, HAL_MAX_DELAY);
	if (returnValue != HAL_OK)
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MPU_Init+0x7e>
		return returnValue;
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	e064      	b.n	8000fac <MPU_Init+0x148>

	initializationBuffer[0] = DLPF_CFG;
 8000ee2:	231a      	movs	r3, #26
 8000ee4:	723b      	strb	r3, [r7, #8]
	initializationBuffer[1] = 0x01; //Digital low pass filter disable & gyro sample rate at 1 kHz
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	727b      	strb	r3, [r7, #9]
	returnValue = HAL_I2C_Master_Transmit(hi2c, (MPU_Address << 1),
 8000eea:	4b32      	ldr	r3, [pc, #200]	; (8000fb4 <MPU_Init+0x150>)
 8000eec:	6818      	ldr	r0, [r3, #0]
 8000eee:	2368      	movs	r3, #104	; 0x68
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	b299      	uxth	r1, r3
 8000ef6:	f107 0208 	add.w	r2, r7, #8
 8000efa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	2302      	movs	r3, #2
 8000f02:	f004 faf3 	bl	80054ec <HAL_I2C_Master_Transmit>
 8000f06:	4603      	mov	r3, r0
 8000f08:	73fb      	strb	r3, [r7, #15]
			initializationBuffer, 2, HAL_MAX_DELAY);
	if (returnValue != HAL_OK)
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MPU_Init+0xb0>
		return returnValue;
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	e04b      	b.n	8000fac <MPU_Init+0x148>

	initializationBuffer[0] = SMPLRT_DIV;
 8000f14:	2319      	movs	r3, #25
 8000f16:	723b      	strb	r3, [r7, #8]
	initializationBuffer[1] = 0x00; //Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)  @ 1kHz
 8000f18:	2300      	movs	r3, #0
 8000f1a:	727b      	strb	r3, [r7, #9]
	returnValue = HAL_I2C_Master_Transmit(hi2c, (MPU_Address << 1),
 8000f1c:	4b25      	ldr	r3, [pc, #148]	; (8000fb4 <MPU_Init+0x150>)
 8000f1e:	6818      	ldr	r0, [r3, #0]
 8000f20:	2368      	movs	r3, #104	; 0x68
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	b299      	uxth	r1, r3
 8000f28:	f107 0208 	add.w	r2, r7, #8
 8000f2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	2302      	movs	r3, #2
 8000f34:	f004 fada 	bl	80054ec <HAL_I2C_Master_Transmit>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	73fb      	strb	r3, [r7, #15]
			initializationBuffer, 2, HAL_MAX_DELAY);
	if (returnValue != HAL_OK)
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MPU_Init+0xe2>
		return returnValue;
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	e032      	b.n	8000fac <MPU_Init+0x148>

	initializationBuffer[0] = GYRO_CONFIG;
 8000f46:	231b      	movs	r3, #27
 8000f48:	723b      	strb	r3, [r7, #8]
	initializationBuffer[1] = GYRO_CONFIG_SCALE; // Sets the full scale to +-2000 degrees per second
 8000f4a:	2318      	movs	r3, #24
 8000f4c:	727b      	strb	r3, [r7, #9]
	returnValue = HAL_I2C_Master_Transmit(hi2c, (MPU_Address << 1),
 8000f4e:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <MPU_Init+0x150>)
 8000f50:	6818      	ldr	r0, [r3, #0]
 8000f52:	2368      	movs	r3, #104	; 0x68
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	b299      	uxth	r1, r3
 8000f5a:	f107 0208 	add.w	r2, r7, #8
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	2302      	movs	r3, #2
 8000f66:	f004 fac1 	bl	80054ec <HAL_I2C_Master_Transmit>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	73fb      	strb	r3, [r7, #15]
			initializationBuffer, 2, HAL_MAX_DELAY);
	if (returnValue != HAL_OK)
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MPU_Init+0x114>
		return returnValue;
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	e019      	b.n	8000fac <MPU_Init+0x148>

	initializationBuffer[0] = ACCEL_CONFIG;
 8000f78:	231c      	movs	r3, #28
 8000f7a:	723b      	strb	r3, [r7, #8]
	initializationBuffer[1] = ACCEL_CONFIG_SCALE; // Sets the accelerometer full scale to +-16g
 8000f7c:	2318      	movs	r3, #24
 8000f7e:	727b      	strb	r3, [r7, #9]
	returnValue = HAL_I2C_Master_Transmit(hi2c, (MPU_Address << 1),
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <MPU_Init+0x150>)
 8000f82:	6818      	ldr	r0, [r3, #0]
 8000f84:	2368      	movs	r3, #104	; 0x68
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	b299      	uxth	r1, r3
 8000f8c:	f107 0208 	add.w	r2, r7, #8
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2302      	movs	r3, #2
 8000f98:	f004 faa8 	bl	80054ec <HAL_I2C_Master_Transmit>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	73fb      	strb	r3, [r7, #15]
			initializationBuffer, 2, HAL_MAX_DELAY);
	if (returnValue != HAL_OK)
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MPU_Init+0x146>
		return returnValue;
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	e000      	b.n	8000fac <MPU_Init+0x148>

	return returnValue;
 8000faa:	7bfb      	ldrb	r3, [r7, #15]

}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000468 	.word	0x20000468

08000fb8 <MPU_Read_Temp>:

float MPU_Read_Temp() {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af02      	add	r7, sp, #8
	// Enumeration of possible errors
	HAL_StatusTypeDef returnValue;
	int16_t rawTempVal;

	uint8_t tempBuf[2];
	tempBuf[0] = MPU_TempReg;
 8000fbe:	2341      	movs	r3, #65	; 0x41
 8000fc0:	703b      	strb	r3, [r7, #0]
	returnValue = HAL_I2C_Master_Transmit(hi2c, (MPU_Address << 1), tempBuf,
 8000fc2:	4b31      	ldr	r3, [pc, #196]	; (8001088 <MPU_Read_Temp+0xd0>)
 8000fc4:	6818      	ldr	r0, [r3, #0]
 8000fc6:	2368      	movs	r3, #104	; 0x68
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	b299      	uxth	r1, r3
 8000fce:	463a      	mov	r2, r7
 8000fd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	f004 fa88 	bl	80054ec <HAL_I2C_Master_Transmit>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	71fb      	strb	r3, [r7, #7]
			1, HAL_MAX_DELAY);
	if (returnValue != HAL_OK)
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d005      	beq.n	8000ff2 <MPU_Read_Temp+0x3a>
		return returnValue;
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	ee07 3a90 	vmov	s15, r3
 8000fec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ff0:	e040      	b.n	8001074 <MPU_Read_Temp+0xbc>
	returnValue = HAL_I2C_Master_Receive(hi2c, (MPU_Address << 1) | 0x01,
 8000ff2:	4b25      	ldr	r3, [pc, #148]	; (8001088 <MPU_Read_Temp+0xd0>)
 8000ff4:	6818      	ldr	r0, [r3, #0]
 8000ff6:	2368      	movs	r3, #104	; 0x68
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	b21b      	sxth	r3, r3
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	b21b      	sxth	r3, r3
 8001002:	b299      	uxth	r1, r3
 8001004:	463a      	mov	r2, r7
 8001006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	2302      	movs	r3, #2
 800100e:	f004 fb61 	bl	80056d4 <HAL_I2C_Master_Receive>
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
			tempBuf, 2, HAL_MAX_DELAY);
	if (returnValue != HAL_OK)
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d005      	beq.n	8001028 <MPU_Read_Temp+0x70>
		return returnValue;
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	ee07 3a90 	vmov	s15, r3
 8001022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001026:	e025      	b.n	8001074 <MPU_Read_Temp+0xbc>

	// Data composition from raw data
	rawTempVal = ((int16_t) tempBuf[0] << 8 | tempBuf[1]);
 8001028:	783b      	ldrb	r3, [r7, #0]
 800102a:	021b      	lsls	r3, r3, #8
 800102c:	b21a      	sxth	r2, r3
 800102e:	787b      	ldrb	r3, [r7, #1]
 8001030:	b21b      	sxth	r3, r3
 8001032:	4313      	orrs	r3, r2
 8001034:	80bb      	strh	r3, [r7, #4]

	// Temperature calculation
	tempVal = (rawTempVal) / 340.0 + 36.53;
 8001036:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fa1a 	bl	8000474 <__aeabi_i2d>
 8001040:	f04f 0200 	mov.w	r2, #0
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <MPU_Read_Temp+0xd4>)
 8001046:	f7ff fba9 	bl	800079c <__aeabi_ddiv>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4610      	mov	r0, r2
 8001050:	4619      	mov	r1, r3
 8001052:	a30b      	add	r3, pc, #44	; (adr r3, 8001080 <MPU_Read_Temp+0xc8>)
 8001054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001058:	f7ff f8c0 	bl	80001dc <__adddf3>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4610      	mov	r0, r2
 8001062:	4619      	mov	r1, r3
 8001064:	f7ff fd32 	bl	8000acc <__aeabi_d2f>
 8001068:	4603      	mov	r3, r0
 800106a:	4a09      	ldr	r2, [pc, #36]	; (8001090 <MPU_Read_Temp+0xd8>)
 800106c:	6013      	str	r3, [r2, #0]

	return tempVal;
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <MPU_Read_Temp+0xd8>)
 8001070:	edd3 7a00 	vldr	s15, [r3]
}
 8001074:	eeb0 0a67 	vmov.f32	s0, s15
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	0a3d70a4 	.word	0x0a3d70a4
 8001084:	404243d7 	.word	0x404243d7
 8001088:	20000468 	.word	0x20000468
 800108c:	40754000 	.word	0x40754000
 8001090:	20000034 	.word	0x20000034

08001094 <MPU_Read_Gyro>:

Axes3 MPU_Read_Gyro() {
 8001094:	b580      	push	{r7, lr}
 8001096:	b090      	sub	sp, #64	; 0x40
 8001098:	af02      	add	r7, sp, #8
	int16_t rawGyroData_X = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	867b      	strh	r3, [r7, #50]	; 0x32
	int16_t rawGyroData_Y = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	863b      	strh	r3, [r7, #48]	; 0x30
	int16_t rawGyroData_Z = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	85fb      	strh	r3, [r7, #46]	; 0x2e

	float sensitivity = 0.0f;
 80010a6:	f04f 0300 	mov.w	r3, #0
 80010aa:	637b      	str	r3, [r7, #52]	; 0x34

	if (GYRO_CONFIG_SCALE == 0x00)
 80010ac:	2318      	movs	r3, #24
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <MPU_Read_Gyro+0x22>
		sensitivity = 131.0;
 80010b2:	4b43      	ldr	r3, [pc, #268]	; (80011c0 <MPU_Read_Gyro+0x12c>)
 80010b4:	637b      	str	r3, [r7, #52]	; 0x34
	if (GYRO_CONFIG_SCALE == 0x08)
 80010b6:	2318      	movs	r3, #24
 80010b8:	2b08      	cmp	r3, #8
 80010ba:	d101      	bne.n	80010c0 <MPU_Read_Gyro+0x2c>
		sensitivity = 65.5;
 80010bc:	4b41      	ldr	r3, [pc, #260]	; (80011c4 <MPU_Read_Gyro+0x130>)
 80010be:	637b      	str	r3, [r7, #52]	; 0x34
	if (GYRO_CONFIG_SCALE == 0x10)
 80010c0:	2318      	movs	r3, #24
 80010c2:	2b10      	cmp	r3, #16
 80010c4:	d101      	bne.n	80010ca <MPU_Read_Gyro+0x36>
		sensitivity = 32.8;
 80010c6:	4b40      	ldr	r3, [pc, #256]	; (80011c8 <MPU_Read_Gyro+0x134>)
 80010c8:	637b      	str	r3, [r7, #52]	; 0x34
	if (GYRO_CONFIG_SCALE == 0x18)
 80010ca:	2318      	movs	r3, #24
 80010cc:	2b18      	cmp	r3, #24
 80010ce:	d101      	bne.n	80010d4 <MPU_Read_Gyro+0x40>
		sensitivity = 16.4;
 80010d0:	4b3e      	ldr	r3, [pc, #248]	; (80011cc <MPU_Read_Gyro+0x138>)
 80010d2:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t gyroBuf[10];
	gyroBuf[0] = MPU_GyroOut;
 80010d4:	2343      	movs	r3, #67	; 0x43
 80010d6:	753b      	strb	r3, [r7, #20]
	HAL_I2C_Master_Transmit(hi2c, (MPU_Address << 1), gyroBuf, 1,
 80010d8:	4b3d      	ldr	r3, [pc, #244]	; (80011d0 <MPU_Read_Gyro+0x13c>)
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	2368      	movs	r3, #104	; 0x68
 80010de:	b29b      	uxth	r3, r3
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	b299      	uxth	r1, r3
 80010e4:	f107 0214 	add.w	r2, r7, #20
 80010e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2301      	movs	r3, #1
 80010f0:	f004 f9fc 	bl	80054ec <HAL_I2C_Master_Transmit>
			HAL_MAX_DELAY);
	HAL_I2C_Master_Receive(hi2c, (MPU_Address << 1) | 0x01, gyroBuf, 6,
 80010f4:	4b36      	ldr	r3, [pc, #216]	; (80011d0 <MPU_Read_Gyro+0x13c>)
 80010f6:	6818      	ldr	r0, [r3, #0]
 80010f8:	2368      	movs	r3, #104	; 0x68
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	b21b      	sxth	r3, r3
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	b21b      	sxth	r3, r3
 8001104:	b299      	uxth	r1, r3
 8001106:	f107 0214 	add.w	r2, r7, #20
 800110a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2306      	movs	r3, #6
 8001112:	f004 fadf 	bl	80056d4 <HAL_I2C_Master_Receive>
			HAL_MAX_DELAY);

	// Data composition from raw data
	rawGyroData_X = ((int16_t) gyroBuf[0] << 8 | gyroBuf[1]);
 8001116:	7d3b      	ldrb	r3, [r7, #20]
 8001118:	021b      	lsls	r3, r3, #8
 800111a:	b21a      	sxth	r2, r3
 800111c:	7d7b      	ldrb	r3, [r7, #21]
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	867b      	strh	r3, [r7, #50]	; 0x32
	rawGyroData_Y = ((int16_t) gyroBuf[2] << 8 | gyroBuf[3]);
 8001124:	7dbb      	ldrb	r3, [r7, #22]
 8001126:	021b      	lsls	r3, r3, #8
 8001128:	b21a      	sxth	r2, r3
 800112a:	7dfb      	ldrb	r3, [r7, #23]
 800112c:	b21b      	sxth	r3, r3
 800112e:	4313      	orrs	r3, r2
 8001130:	863b      	strh	r3, [r7, #48]	; 0x30
	rawGyroData_Z = ((int16_t) gyroBuf[4] << 8 | gyroBuf[5]);
 8001132:	7e3b      	ldrb	r3, [r7, #24]
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	b21a      	sxth	r2, r3
 8001138:	7e7b      	ldrb	r3, [r7, #25]
 800113a:	b21b      	sxth	r3, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	85fb      	strh	r3, [r7, #46]	; 0x2e

	resultGyro.x = (float) rawGyroData_X / sensitivity;
 8001140:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001144:	ee07 3a90 	vmov	s15, r3
 8001148:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800114c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001154:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <MPU_Read_Gyro+0x140>)
 8001156:	edc3 7a00 	vstr	s15, [r3]
	resultGyro.y = (float) rawGyroData_Y / sensitivity;
 800115a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800115e:	ee07 3a90 	vmov	s15, r3
 8001162:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001166:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800116a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <MPU_Read_Gyro+0x140>)
 8001170:	edc3 7a01 	vstr	s15, [r3, #4]
	resultGyro.z = (float) rawGyroData_Z / sensitivity;
 8001174:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001178:	ee07 3a90 	vmov	s15, r3
 800117c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001180:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001184:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <MPU_Read_Gyro+0x140>)
 800118a:	edc3 7a02 	vstr	s15, [r3, #8]

	return resultGyro;
 800118e:	4a11      	ldr	r2, [pc, #68]	; (80011d4 <MPU_Read_Gyro+0x140>)
 8001190:	f107 0320 	add.w	r3, r7, #32
 8001194:	ca07      	ldmia	r2, {r0, r1, r2}
 8001196:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800119a:	6a39      	ldr	r1, [r7, #32]
 800119c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800119e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a0:	ee06 1a90 	vmov	s13, r1
 80011a4:	ee07 2a10 	vmov	s14, r2
 80011a8:	ee07 3a90 	vmov	s15, r3
}
 80011ac:	eeb0 0a66 	vmov.f32	s0, s13
 80011b0:	eef0 0a47 	vmov.f32	s1, s14
 80011b4:	eeb0 1a67 	vmov.f32	s2, s15
 80011b8:	3738      	adds	r7, #56	; 0x38
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	43030000 	.word	0x43030000
 80011c4:	42830000 	.word	0x42830000
 80011c8:	42033333 	.word	0x42033333
 80011cc:	41833333 	.word	0x41833333
 80011d0:	20000468 	.word	0x20000468
 80011d4:	20000038 	.word	0x20000038

080011d8 <MPU_Read_Accel>:

Axes3 MPU_Read_Accel() {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b090      	sub	sp, #64	; 0x40
 80011dc:	af02      	add	r7, sp, #8
	int16_t rawAccelData_Y;
	int16_t rawAccelData_Z;

	float sensitivity;

	if (ACCEL_CONFIG_SCALE == 0x00)
 80011de:	2318      	movs	r3, #24
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d102      	bne.n	80011ea <MPU_Read_Accel+0x12>
		sensitivity = 16384.0;
 80011e4:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
 80011e8:	637b      	str	r3, [r7, #52]	; 0x34
	if (ACCEL_CONFIG_SCALE == 0x08)
 80011ea:	2318      	movs	r3, #24
 80011ec:	2b08      	cmp	r3, #8
 80011ee:	d102      	bne.n	80011f6 <MPU_Read_Accel+0x1e>
		sensitivity = 8192.0;
 80011f0:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 80011f4:	637b      	str	r3, [r7, #52]	; 0x34
	if (ACCEL_CONFIG_SCALE == 0x10)
 80011f6:	2318      	movs	r3, #24
 80011f8:	2b10      	cmp	r3, #16
 80011fa:	d102      	bne.n	8001202 <MPU_Read_Accel+0x2a>
		sensitivity = 4096.0;
 80011fc:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8001200:	637b      	str	r3, [r7, #52]	; 0x34
	if (ACCEL_CONFIG_SCALE == 0x18)
 8001202:	2318      	movs	r3, #24
 8001204:	2b18      	cmp	r3, #24
 8001206:	d102      	bne.n	800120e <MPU_Read_Accel+0x36>
		sensitivity = 2048.0;
 8001208:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 800120c:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t accelBuf[10];
	accelBuf[0] = MPU_AccelOut;
 800120e:	233b      	movs	r3, #59	; 0x3b
 8001210:	753b      	strb	r3, [r7, #20]
	HAL_I2C_Master_Transmit(hi2c, (MPU_Address << 1), accelBuf, 1,
 8001212:	4b39      	ldr	r3, [pc, #228]	; (80012f8 <MPU_Read_Accel+0x120>)
 8001214:	6818      	ldr	r0, [r3, #0]
 8001216:	2368      	movs	r3, #104	; 0x68
 8001218:	b29b      	uxth	r3, r3
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	b299      	uxth	r1, r3
 800121e:	f107 0214 	add.w	r2, r7, #20
 8001222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2301      	movs	r3, #1
 800122a:	f004 f95f 	bl	80054ec <HAL_I2C_Master_Transmit>
			HAL_MAX_DELAY);
	HAL_I2C_Master_Receive(hi2c, (MPU_Address << 1) | 0x01, accelBuf, 6,
 800122e:	4b32      	ldr	r3, [pc, #200]	; (80012f8 <MPU_Read_Accel+0x120>)
 8001230:	6818      	ldr	r0, [r3, #0]
 8001232:	2368      	movs	r3, #104	; 0x68
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	b21b      	sxth	r3, r3
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	b21b      	sxth	r3, r3
 800123e:	b299      	uxth	r1, r3
 8001240:	f107 0214 	add.w	r2, r7, #20
 8001244:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	2306      	movs	r3, #6
 800124c:	f004 fa42 	bl	80056d4 <HAL_I2C_Master_Receive>
			HAL_MAX_DELAY);

	// Data composition from raw data
	rawAccelData_X = ((int16_t) accelBuf[0] << 8 | accelBuf[1]);
 8001250:	7d3b      	ldrb	r3, [r7, #20]
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	b21a      	sxth	r2, r3
 8001256:	7d7b      	ldrb	r3, [r7, #21]
 8001258:	b21b      	sxth	r3, r3
 800125a:	4313      	orrs	r3, r2
 800125c:	867b      	strh	r3, [r7, #50]	; 0x32
	rawAccelData_Y = ((int16_t) accelBuf[2] << 8 | accelBuf[3]);
 800125e:	7dbb      	ldrb	r3, [r7, #22]
 8001260:	021b      	lsls	r3, r3, #8
 8001262:	b21a      	sxth	r2, r3
 8001264:	7dfb      	ldrb	r3, [r7, #23]
 8001266:	b21b      	sxth	r3, r3
 8001268:	4313      	orrs	r3, r2
 800126a:	863b      	strh	r3, [r7, #48]	; 0x30
	rawAccelData_Z = ((int16_t) accelBuf[4] << 8 | accelBuf[5]);
 800126c:	7e3b      	ldrb	r3, [r7, #24]
 800126e:	021b      	lsls	r3, r3, #8
 8001270:	b21a      	sxth	r2, r3
 8001272:	7e7b      	ldrb	r3, [r7, #25]
 8001274:	b21b      	sxth	r3, r3
 8001276:	4313      	orrs	r3, r2
 8001278:	85fb      	strh	r3, [r7, #46]	; 0x2e

	resultAccel.x = (float) rawAccelData_X / sensitivity;
 800127a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800127e:	ee07 3a90 	vmov	s15, r3
 8001282:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001286:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800128a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800128e:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <MPU_Read_Accel+0x124>)
 8001290:	edc3 7a00 	vstr	s15, [r3]
	resultAccel.y = (float) rawAccelData_Y / sensitivity;
 8001294:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001298:	ee07 3a90 	vmov	s15, r3
 800129c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012a0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80012a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <MPU_Read_Accel+0x124>)
 80012aa:	edc3 7a01 	vstr	s15, [r3, #4]
	resultAccel.z = (float) rawAccelData_Z / sensitivity;
 80012ae:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80012b2:	ee07 3a90 	vmov	s15, r3
 80012b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012ba:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80012be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <MPU_Read_Accel+0x124>)
 80012c4:	edc3 7a02 	vstr	s15, [r3, #8]

	return resultAccel;
 80012c8:	4a0c      	ldr	r2, [pc, #48]	; (80012fc <MPU_Read_Accel+0x124>)
 80012ca:	f107 0320 	add.w	r3, r7, #32
 80012ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80012d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80012d4:	6a39      	ldr	r1, [r7, #32]
 80012d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012da:	ee06 1a90 	vmov	s13, r1
 80012de:	ee07 2a10 	vmov	s14, r2
 80012e2:	ee07 3a90 	vmov	s15, r3
}
 80012e6:	eeb0 0a66 	vmov.f32	s0, s13
 80012ea:	eef0 0a47 	vmov.f32	s1, s14
 80012ee:	eeb0 1a67 	vmov.f32	s2, s15
 80012f2:	3738      	adds	r7, #56	; 0x38
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000468 	.word	0x20000468
 80012fc:	20000044 	.word	0x20000044

08001300 <MPU6050>:

void MPU6050() {
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
	tempVal = MPU_Read_Temp();
 8001304:	f7ff fe58 	bl	8000fb8 <MPU_Read_Temp>
 8001308:	eef0 7a40 	vmov.f32	s15, s0
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <MPU6050+0x54>)
 800130e:	edc3 7a00 	vstr	s15, [r3]
	resultAccel = MPU_Read_Accel();
 8001312:	f7ff ff61 	bl	80011d8 <MPU_Read_Accel>
 8001316:	eef0 6a40 	vmov.f32	s13, s0
 800131a:	eeb0 7a60 	vmov.f32	s14, s1
 800131e:	eef0 7a41 	vmov.f32	s15, s2
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <MPU6050+0x58>)
 8001324:	edc3 6a00 	vstr	s13, [r3]
 8001328:	ed83 7a01 	vstr	s14, [r3, #4]
 800132c:	edc3 7a02 	vstr	s15, [r3, #8]
	resultGyro = MPU_Read_Gyro();
 8001330:	f7ff feb0 	bl	8001094 <MPU_Read_Gyro>
 8001334:	eef0 6a40 	vmov.f32	s13, s0
 8001338:	eeb0 7a60 	vmov.f32	s14, s1
 800133c:	eef0 7a41 	vmov.f32	s15, s2
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <MPU6050+0x5c>)
 8001342:	edc3 6a00 	vstr	s13, [r3]
 8001346:	ed83 7a01 	vstr	s14, [r3, #4]
 800134a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000034 	.word	0x20000034
 8001358:	20000044 	.word	0x20000044
 800135c:	20000038 	.word	0x20000038

08001360 <to_frame>:

#include "comm_relay.h"
#include "stdint.h"
#include "main.h"

int to_frame(char * frame, uint8_t *revolutionAddr, uint8_t *ID) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]

	int i = 2, j = 0, PACKAGE_SIZE = 0;
 800136c:	2302      	movs	r3, #2
 800136e:	61fb      	str	r3, [r7, #28]
 8001370:	2300      	movs	r3, #0
 8001372:	61bb      	str	r3, [r7, #24]
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]

	frame[0] = COMM_DEL_START;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2224      	movs	r2, #36	; 0x24
 800137c:	701a      	strb	r2, [r3, #0]
	frame[1] = ID;
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	3301      	adds	r3, #1
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	701a      	strb	r2, [r3, #0]

	if (ID == 3) {
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b03      	cmp	r3, #3
 800138c:	d102      	bne.n	8001394 <to_frame+0x34>
		PACKAGE_SIZE = 5;
 800138e:	2305      	movs	r3, #5
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	e02d      	b.n	80013f0 <to_frame+0x90>
	} else if (ID == 2) {
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b02      	cmp	r3, #2
 8001398:	d12a      	bne.n	80013f0 <to_frame+0x90>
		PACKAGE_SIZE = 24;
 800139a:	2318      	movs	r3, #24
 800139c:	617b      	str	r3, [r7, #20]
	}

	for (; i < FRAME_SIZE && j < PACKAGE_SIZE; i++, j++) {
 800139e:	e027      	b.n	80013f0 <to_frame+0x90>
		char c;
		c = *(revolutionAddr + j);
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	4413      	add	r3, r2
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	74fb      	strb	r3, [r7, #19]

		if (is_special_character(c)) {
 80013aa:	7cfb      	ldrb	r3, [r7, #19]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 f830 	bl	8001412 <is_special_character>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d010      	beq.n	80013da <to_frame+0x7a>
			frame[i] = COMM_ESCAPE;
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	4413      	add	r3, r2
 80013be:	2223      	movs	r2, #35	; 0x23
 80013c0:	701a      	strb	r2, [r3, #0]
			frame[i+1] = c + 2;
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3301      	adds	r3, #1
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	4413      	add	r3, r2
 80013ca:	7cfa      	ldrb	r2, [r7, #19]
 80013cc:	3202      	adds	r2, #2
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	701a      	strb	r2, [r3, #0]
			i++;
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3301      	adds	r3, #1
 80013d6:	61fb      	str	r3, [r7, #28]
 80013d8:	e004      	b.n	80013e4 <to_frame+0x84>
		} else {
			frame[i] = c;
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	4413      	add	r3, r2
 80013e0:	7cfa      	ldrb	r2, [r7, #19]
 80013e2:	701a      	strb	r2, [r3, #0]
	for (; i < FRAME_SIZE && j < PACKAGE_SIZE; i++, j++) {
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	3301      	adds	r3, #1
 80013e8:	61fb      	str	r3, [r7, #28]
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	3301      	adds	r3, #1
 80013ee:	61bb      	str	r3, [r7, #24]
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	2b32      	cmp	r3, #50	; 0x32
 80013f4:	dc03      	bgt.n	80013fe <to_frame+0x9e>
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	dbd0      	blt.n	80013a0 <to_frame+0x40>
		}
	}

	frame[i] = COMM_DEL_STOP;
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	4413      	add	r3, r2
 8001404:	2240      	movs	r2, #64	; 0x40
 8001406:	701a      	strb	r2, [r3, #0]

	return 1;
 8001408:	2301      	movs	r3, #1
}
 800140a:	4618      	mov	r0, r3
 800140c:	3720      	adds	r7, #32
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <is_special_character>:


int is_special_character(char c) {
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	4603      	mov	r3, r0
 800141a:	71fb      	strb	r3, [r7, #7]
	if ((c == COMM_DEL_START) || (c == COMM_DEL_STOP) || (c == COMM_ESCAPE) || (c == 0)) return 1;
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	2b24      	cmp	r3, #36	; 0x24
 8001420:	d008      	beq.n	8001434 <is_special_character+0x22>
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	2b40      	cmp	r3, #64	; 0x40
 8001426:	d005      	beq.n	8001434 <is_special_character+0x22>
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	2b23      	cmp	r3, #35	; 0x23
 800142c:	d002      	beq.n	8001434 <is_special_character+0x22>
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <is_special_character+0x26>
 8001434:	2301      	movs	r3, #1
 8001436:	e000      	b.n	800143a <is_special_character+0x28>
	return 0;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <from_frame>:

int from_frame(const char * frame, size_t len, char * destination, uint32_t *outputLen) {
 8001446:	b480      	push	{r7}
 8001448:	b089      	sub	sp, #36	; 0x24
 800144a:	af00      	add	r7, sp, #0
 800144c:	60f8      	str	r0, [r7, #12]
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	607a      	str	r2, [r7, #4]
 8001452:	603b      	str	r3, [r7, #0]
	uint32_t indexFrame = 0, indexDest = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	61fb      	str	r3, [r7, #28]
 8001458:	2300      	movs	r3, #0
 800145a:	61bb      	str	r3, [r7, #24]

	if (frame[0] == COMM_DEL_START) indexFrame++;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b24      	cmp	r3, #36	; 0x24
 8001462:	d137      	bne.n	80014d4 <from_frame+0x8e>
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	3301      	adds	r3, #1
 8001468:	61fb      	str	r3, [r7, #28]

	for (; indexFrame < len - 1; indexFrame++, indexDest++) {
 800146a:	e033      	b.n	80014d4 <from_frame+0x8e>
		char c = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	75fb      	strb	r3, [r7, #23]

		if (frame[indexFrame] == COMM_DEL_START) return -1; // If we meet start delimiter inside frame data, something's wrong.
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	4413      	add	r3, r2
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b24      	cmp	r3, #36	; 0x24
 800147a:	d102      	bne.n	8001482 <from_frame+0x3c>
 800147c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001480:	e044      	b.n	800150c <from_frame+0xc6>
		if (frame[indexFrame] == COMM_DEL_STOP) return 1; // If we meet stop delimiter inside frame data, it is just a shorter message.
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	4413      	add	r3, r2
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b40      	cmp	r3, #64	; 0x40
 800148c:	d101      	bne.n	8001492 <from_frame+0x4c>
 800148e:	2301      	movs	r3, #1
 8001490:	e03c      	b.n	800150c <from_frame+0xc6>

		if (frame[indexFrame] == COMM_ESCAPE) {
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	4413      	add	r3, r2
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b23      	cmp	r3, #35	; 0x23
 800149c:	d10a      	bne.n	80014b4 <from_frame+0x6e>
			c = frame[indexFrame+1] - 2; // Return the character after the escape character minus 2
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3301      	adds	r3, #1
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	4413      	add	r3, r2
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	3b02      	subs	r3, #2
 80014aa:	75fb      	strb	r3, [r7, #23]
			indexFrame++;
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	3301      	adds	r3, #1
 80014b0:	61fb      	str	r3, [r7, #28]
 80014b2:	e004      	b.n	80014be <from_frame+0x78>
		}
		else c = frame[indexFrame]; // There was no escape character, so return it
 80014b4:	68fa      	ldr	r2, [r7, #12]
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	4413      	add	r3, r2
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	75fb      	strb	r3, [r7, #23]

		destination[indexDest] = c; 	// Insert the data
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	4413      	add	r3, r2
 80014c4:	7dfa      	ldrb	r2, [r7, #23]
 80014c6:	701a      	strb	r2, [r3, #0]
	for (; indexFrame < len - 1; indexFrame++, indexDest++) {
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	3301      	adds	r3, #1
 80014cc:	61fb      	str	r3, [r7, #28]
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	3301      	adds	r3, #1
 80014d2:	61bb      	str	r3, [r7, #24]
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	69fa      	ldr	r2, [r7, #28]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d3c6      	bcc.n	800146c <from_frame+0x26>
	}

	// Check whether the last character is either the specified stop delimiter or '0'
	if (indexFrame < len) {
 80014de:	69fa      	ldr	r2, [r7, #28]
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d20e      	bcs.n	8001504 <from_frame+0xbe>
		if (!(frame[indexFrame] == COMM_DEL_STOP || frame[indexFrame] == 0)) return -1;
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	4413      	add	r3, r2
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b40      	cmp	r3, #64	; 0x40
 80014f0:	d008      	beq.n	8001504 <from_frame+0xbe>
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	4413      	add	r3, r2
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d002      	beq.n	8001504 <from_frame+0xbe>
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001502:	e003      	b.n	800150c <from_frame+0xc6>
	}

	*outputLen = indexDest;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	601a      	str	r2, [r3, #0]

	return 1;
 800150a:	2301      	movs	r3, #1
}
 800150c:	4618      	mov	r0, r3
 800150e:	3724      	adds	r7, #36	; 0x24
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001518:	b5b0      	push	{r4, r5, r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800151e:	f002 f868 	bl	80035f2 <HAL_Init>

  /* USER CODE BEGIN Init */

	// Motor Initialization
	motor_init(&motorR, 'R');
 8001522:	2152      	movs	r1, #82	; 0x52
 8001524:	4858      	ldr	r0, [pc, #352]	; (8001688 <main+0x170>)
 8001526:	f000 fc39 	bl	8001d9c <motor_init>
	motor_init(&motorL, 'L');
 800152a:	214c      	movs	r1, #76	; 0x4c
 800152c:	4857      	ldr	r0, [pc, #348]	; (800168c <main+0x174>)
 800152e:	f000 fc35 	bl	8001d9c <motor_init>

	motorEncoder_init(&encoderR);
 8001532:	4857      	ldr	r0, [pc, #348]	; (8001690 <main+0x178>)
 8001534:	f000 fc48 	bl	8001dc8 <motorEncoder_init>
	motorEncoder_init(&encoderL);
 8001538:	4856      	ldr	r0, [pc, #344]	; (8001694 <main+0x17c>)
 800153a:	f000 fc45 	bl	8001dc8 <motorEncoder_init>

	motorController_init(&controllerR, &motorR, &encoderR);
 800153e:	4a54      	ldr	r2, [pc, #336]	; (8001690 <main+0x178>)
 8001540:	4951      	ldr	r1, [pc, #324]	; (8001688 <main+0x170>)
 8001542:	4855      	ldr	r0, [pc, #340]	; (8001698 <main+0x180>)
 8001544:	f000 fc5b 	bl	8001dfe <motorController_init>
	motorController_init(&controllerL, &motorL, &encoderL);
 8001548:	4a52      	ldr	r2, [pc, #328]	; (8001694 <main+0x17c>)
 800154a:	4950      	ldr	r1, [pc, #320]	; (800168c <main+0x174>)
 800154c:	4853      	ldr	r0, [pc, #332]	; (800169c <main+0x184>)
 800154e:	f000 fc56 	bl	8001dfe <motorController_init>

	HAL_I2C_Master_Transmit_DMA (&hi2c3, MPU_Address, MPU_in, sizeof(MPU_in));
 8001552:	2368      	movs	r3, #104	; 0x68
 8001554:	b299      	uxth	r1, r3
 8001556:	2332      	movs	r3, #50	; 0x32
 8001558:	4a51      	ldr	r2, [pc, #324]	; (80016a0 <main+0x188>)
 800155a:	4852      	ldr	r0, [pc, #328]	; (80016a4 <main+0x18c>)
 800155c:	f004 f9b0 	bl	80058c0 <HAL_I2C_Master_Transmit_DMA>
	HAL_I2C_Master_Receive_DMA (&hi2c3, MPU_Address, MPU_out, sizeof(MPU_out));
 8001560:	2368      	movs	r3, #104	; 0x68
 8001562:	b299      	uxth	r1, r3
 8001564:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001568:	4a4f      	ldr	r2, [pc, #316]	; (80016a8 <main+0x190>)
 800156a:	484e      	ldr	r0, [pc, #312]	; (80016a4 <main+0x18c>)
 800156c:	f004 fa98 	bl	8005aa0 <HAL_I2C_Master_Receive_DMA>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001570:	f000 f8ae 	bl	80016d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001574:	f000 fb70 	bl	8001c58 <MX_GPIO_Init>
  MX_DMA_Init();
 8001578:	f000 fb40 	bl	8001bfc <MX_DMA_Init>
  MX_TIM1_Init();
 800157c:	f000 f9ae 	bl	80018dc <MX_TIM1_Init>
  MX_TIM6_Init();
 8001580:	f000 fa9e 	bl	8001ac0 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8001584:	f000 fb0a 	bl	8001b9c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001588:	f000 f8f4 	bl	8001774 <MX_ADC1_Init>
  MX_TIM7_Init();
 800158c:	f000 face 	bl	8001b2c <MX_TIM7_Init>
  MX_TIM2_Init();
 8001590:	f000 fa40 	bl	8001a14 <MX_TIM2_Init>
  MX_I2C3_Init();
 8001594:	f000 f962 	bl	800185c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

	positionCalculationPeriod = ((htim6.Instance->ARR + 1)
 8001598:	4b44      	ldr	r3, [pc, #272]	; (80016ac <main+0x194>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159e:	3301      	adds	r3, #1
				/ (80000000.0 / (htim6.Instance->PSC + 1)));
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ff57 	bl	8000454 <__aeabi_ui2d>
 80015a6:	4604      	mov	r4, r0
 80015a8:	460d      	mov	r5, r1
 80015aa:	4b40      	ldr	r3, [pc, #256]	; (80016ac <main+0x194>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b0:	3301      	adds	r3, #1
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe ff4e 	bl	8000454 <__aeabi_ui2d>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	a130      	add	r1, pc, #192	; (adr r1, 8001680 <main+0x168>)
 80015be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015c2:	f7ff f8eb 	bl	800079c <__aeabi_ddiv>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4620      	mov	r0, r4
 80015cc:	4629      	mov	r1, r5
 80015ce:	f7ff f8e5 	bl	800079c <__aeabi_ddiv>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	f7ff fa77 	bl	8000acc <__aeabi_d2f>
 80015de:	4603      	mov	r3, r0
	positionCalculationPeriod = ((htim6.Instance->ARR + 1)
 80015e0:	4a33      	ldr	r2, [pc, #204]	; (80016b0 <main+0x198>)
 80015e2:	6013      	str	r3, [r2, #0]
	controllerPeriod = ((htim2.Instance->ARR + 1)
 80015e4:	4b33      	ldr	r3, [pc, #204]	; (80016b4 <main+0x19c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ea:	3301      	adds	r3, #1
				/ (80000000.0 / (htim2.Instance->PSC + 1)));
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe ff31 	bl	8000454 <__aeabi_ui2d>
 80015f2:	4604      	mov	r4, r0
 80015f4:	460d      	mov	r5, r1
 80015f6:	4b2f      	ldr	r3, [pc, #188]	; (80016b4 <main+0x19c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fc:	3301      	adds	r3, #1
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe ff28 	bl	8000454 <__aeabi_ui2d>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	a11d      	add	r1, pc, #116	; (adr r1, 8001680 <main+0x168>)
 800160a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800160e:	f7ff f8c5 	bl	800079c <__aeabi_ddiv>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4620      	mov	r0, r4
 8001618:	4629      	mov	r1, r5
 800161a:	f7ff f8bf 	bl	800079c <__aeabi_ddiv>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	f7ff fa51 	bl	8000acc <__aeabi_d2f>
 800162a:	4603      	mov	r3, r0
	controllerPeriod = ((htim2.Instance->ARR + 1)
 800162c:	4a22      	ldr	r2, [pc, #136]	; (80016b8 <main+0x1a0>)
 800162e:	6013      	str	r3, [r2, #0]

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001630:	217f      	movs	r1, #127	; 0x7f
 8001632:	4822      	ldr	r0, [pc, #136]	; (80016bc <main+0x1a4>)
 8001634:	f003 f956 	bl	80048e4 <HAL_ADCEx_Calibration_Start>

	HAL_UART_Receive_DMA(&huart2, uart_in, UART_IN_BUF_SIZE);
 8001638:	f44f 7280 	mov.w	r2, #256	; 0x100
 800163c:	4920      	ldr	r1, [pc, #128]	; (80016c0 <main+0x1a8>)
 800163e:	4821      	ldr	r0, [pc, #132]	; (80016c4 <main+0x1ac>)
 8001640:	f008 fb1c 	bl	8009c7c <HAL_UART_Receive_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 8001644:	481b      	ldr	r0, [pc, #108]	; (80016b4 <main+0x19c>)
 8001646:	f007 f97b 	bl	8008940 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 800164a:	4818      	ldr	r0, [pc, #96]	; (80016ac <main+0x194>)
 800164c:	f007 f978 	bl	8008940 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8001650:	481d      	ldr	r0, [pc, #116]	; (80016c8 <main+0x1b0>)
 8001652:	f007 f975 	bl	8008940 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001656:	2100      	movs	r1, #0
 8001658:	481c      	ldr	r0, [pc, #112]	; (80016cc <main+0x1b4>)
 800165a:	f007 fa73 	bl	8008b44 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800165e:	2104      	movs	r1, #4
 8001660:	481a      	ldr	r0, [pc, #104]	; (80016cc <main+0x1b4>)
 8001662:	f007 fa6f 	bl	8008b44 <HAL_TIM_PWM_Start>

	if (MPU_Init(&hi2c3)!= HAL_OK)
 8001666:	480f      	ldr	r0, [pc, #60]	; (80016a4 <main+0x18c>)
 8001668:	f7ff fbfc 	bl	8000e64 <MPU_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <main+0x15e>
		{
		int dev = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
		MPU6050();
 8001676:	f7ff fe43 	bl	8001300 <MPU6050>
		int dev = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	603b      	str	r3, [r7, #0]
	while (1) {
 800167e:	e7fa      	b.n	8001676 <main+0x15e>
 8001680:	00000000 	.word	0x00000000
 8001684:	419312d0 	.word	0x419312d0
 8001688:	20000590 	.word	0x20000590
 800168c:	20000598 	.word	0x20000598
 8001690:	20000804 	.word	0x20000804
 8001694:	200007a4 	.word	0x200007a4
 8001698:	20000670 	.word	0x20000670
 800169c:	200005a4 	.word	0x200005a4
 80016a0:	20000160 	.word	0x20000160
 80016a4:	200004fc 	.word	0x200004fc
 80016a8:	20000194 	.word	0x20000194
 80016ac:	20000624 	.word	0x20000624
 80016b0:	200005a0 	.word	0x200005a0
 80016b4:	200006d4 	.word	0x200006d4
 80016b8:	20000620 	.word	0x20000620
 80016bc:	200005bc 	.word	0x200005bc
 80016c0:	2000005c 	.word	0x2000005c
 80016c4:	20000720 	.word	0x20000720
 80016c8:	200007b8 	.word	0x200007b8
 80016cc:	20000688 	.word	0x20000688

080016d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b096      	sub	sp, #88	; 0x58
 80016d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	2244      	movs	r2, #68	; 0x44
 80016dc:	2100      	movs	r1, #0
 80016de:	4618      	mov	r0, r3
 80016e0:	f009 f836 	bl	800a750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e4:	463b      	mov	r3, r7
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80016f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016f6:	f005 ff69 	bl	80075cc <HAL_PWREx_ControlVoltageScaling>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001700:	f001 fadc 	bl	8002cbc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001704:	2310      	movs	r3, #16
 8001706:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001708:	2301      	movs	r3, #1
 800170a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001710:	2360      	movs	r3, #96	; 0x60
 8001712:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001714:	2302      	movs	r3, #2
 8001716:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001718:	2301      	movs	r3, #1
 800171a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800171c:	2301      	movs	r3, #1
 800171e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001720:	2328      	movs	r3, #40	; 0x28
 8001722:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001724:	2307      	movs	r3, #7
 8001726:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001728:	2302      	movs	r3, #2
 800172a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800172c:	2302      	movs	r3, #2
 800172e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4618      	mov	r0, r3
 8001736:	f005 ff9f 	bl	8007678 <HAL_RCC_OscConfig>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001740:	f001 fabc 	bl	8002cbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001744:	230f      	movs	r3, #15
 8001746:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001748:	2303      	movs	r3, #3
 800174a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800174c:	2300      	movs	r3, #0
 800174e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001754:	2300      	movs	r3, #0
 8001756:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001758:	463b      	mov	r3, r7
 800175a:	2104      	movs	r1, #4
 800175c:	4618      	mov	r0, r3
 800175e:	f006 fbab 	bl	8007eb8 <HAL_RCC_ClockConfig>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001768:	f001 faa8 	bl	8002cbc <Error_Handler>
  }
}
 800176c:	bf00      	nop
 800176e:	3758      	adds	r7, #88	; 0x58
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800177a:	f107 0308 	add.w	r3, r7, #8
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
 8001788:	611a      	str	r2, [r3, #16]
 800178a:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800178c:	4b2f      	ldr	r3, [pc, #188]	; (800184c <MX_ADC1_Init+0xd8>)
 800178e:	4a30      	ldr	r2, [pc, #192]	; (8001850 <MX_ADC1_Init+0xdc>)
 8001790:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001792:	4b2e      	ldr	r3, [pc, #184]	; (800184c <MX_ADC1_Init+0xd8>)
 8001794:	2200      	movs	r2, #0
 8001796:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001798:	4b2c      	ldr	r3, [pc, #176]	; (800184c <MX_ADC1_Init+0xd8>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800179e:	4b2b      	ldr	r3, [pc, #172]	; (800184c <MX_ADC1_Init+0xd8>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017a4:	4b29      	ldr	r3, [pc, #164]	; (800184c <MX_ADC1_Init+0xd8>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017aa:	4b28      	ldr	r3, [pc, #160]	; (800184c <MX_ADC1_Init+0xd8>)
 80017ac:	2204      	movs	r2, #4
 80017ae:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80017b0:	4b26      	ldr	r3, [pc, #152]	; (800184c <MX_ADC1_Init+0xd8>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017b6:	4b25      	ldr	r3, [pc, #148]	; (800184c <MX_ADC1_Init+0xd8>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80017bc:	4b23      	ldr	r3, [pc, #140]	; (800184c <MX_ADC1_Init+0xd8>)
 80017be:	2201      	movs	r2, #1
 80017c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017c2:	4b22      	ldr	r3, [pc, #136]	; (800184c <MX_ADC1_Init+0xd8>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017ca:	4b20      	ldr	r3, [pc, #128]	; (800184c <MX_ADC1_Init+0xd8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017d0:	4b1e      	ldr	r3, [pc, #120]	; (800184c <MX_ADC1_Init+0xd8>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017d6:	4b1d      	ldr	r3, [pc, #116]	; (800184c <MX_ADC1_Init+0xd8>)
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017de:	4b1b      	ldr	r3, [pc, #108]	; (800184c <MX_ADC1_Init+0xd8>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <MX_ADC1_Init+0xd8>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017ec:	4817      	ldr	r0, [pc, #92]	; (800184c <MX_ADC1_Init+0xd8>)
 80017ee:	f002 f963 	bl	8003ab8 <HAL_ADC_Init>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80017f8:	f001 fa60 	bl	8002cbc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <MX_ADC1_Init+0xe0>)
 80017fe:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001800:	2306      	movs	r3, #6
 8001802:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001804:	2300      	movs	r3, #0
 8001806:	613b      	str	r3, [r7, #16]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001808:	237f      	movs	r3, #127	; 0x7f
 800180a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800180c:	2304      	movs	r3, #4
 800180e:	61bb      	str	r3, [r7, #24]
  sConfig.Offset = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	61fb      	str	r3, [r7, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001814:	f107 0308 	add.w	r3, r7, #8
 8001818:	4619      	mov	r1, r3
 800181a:	480c      	ldr	r0, [pc, #48]	; (800184c <MX_ADC1_Init+0xd8>)
 800181c:	f002 fb94 	bl	8003f48 <HAL_ADC_ConfigChannel>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001826:	f001 fa49 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
	__HAL_RCC_ADC_CLK_ENABLE();
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <MX_ADC1_Init+0xe4>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	4a0a      	ldr	r2, [pc, #40]	; (8001858 <MX_ADC1_Init+0xe4>)
 8001830:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001836:	4b08      	ldr	r3, [pc, #32]	; (8001858 <MX_ADC1_Init+0xe4>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END ADC1_Init 2 */

}
 8001842:	bf00      	nop
 8001844:	3720      	adds	r7, #32
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200005bc 	.word	0x200005bc
 8001850:	50040000 	.word	0x50040000
 8001854:	21800100 	.word	0x21800100
 8001858:	40021000 	.word	0x40021000

0800185c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001860:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <MX_I2C3_Init+0x74>)
 8001862:	4a1c      	ldr	r2, [pc, #112]	; (80018d4 <MX_I2C3_Init+0x78>)
 8001864:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00702991;
 8001866:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <MX_I2C3_Init+0x74>)
 8001868:	4a1b      	ldr	r2, [pc, #108]	; (80018d8 <MX_I2C3_Init+0x7c>)
 800186a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800186c:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <MX_I2C3_Init+0x74>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001872:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <MX_I2C3_Init+0x74>)
 8001874:	2201      	movs	r2, #1
 8001876:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001878:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <MX_I2C3_Init+0x74>)
 800187a:	2200      	movs	r2, #0
 800187c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800187e:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <MX_I2C3_Init+0x74>)
 8001880:	2200      	movs	r2, #0
 8001882:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001884:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <MX_I2C3_Init+0x74>)
 8001886:	2200      	movs	r2, #0
 8001888:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800188a:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <MX_I2C3_Init+0x74>)
 800188c:	2200      	movs	r2, #0
 800188e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <MX_I2C3_Init+0x74>)
 8001892:	2200      	movs	r2, #0
 8001894:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001896:	480e      	ldr	r0, [pc, #56]	; (80018d0 <MX_I2C3_Init+0x74>)
 8001898:	f003 fd99 	bl	80053ce <HAL_I2C_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80018a2:	f001 fa0b 	bl	8002cbc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018a6:	2100      	movs	r1, #0
 80018a8:	4809      	ldr	r0, [pc, #36]	; (80018d0 <MX_I2C3_Init+0x74>)
 80018aa:	f005 fde9 	bl	8007480 <HAL_I2CEx_ConfigAnalogFilter>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80018b4:	f001 fa02 	bl	8002cbc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80018b8:	2100      	movs	r1, #0
 80018ba:	4805      	ldr	r0, [pc, #20]	; (80018d0 <MX_I2C3_Init+0x74>)
 80018bc:	f005 fe2b 	bl	8007516 <HAL_I2CEx_ConfigDigitalFilter>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80018c6:	f001 f9f9 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	200004fc 	.word	0x200004fc
 80018d4:	40005c00 	.word	0x40005c00
 80018d8:	00702991 	.word	0x00702991

080018dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b096      	sub	sp, #88	; 0x58
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
 80018fc:	611a      	str	r2, [r3, #16]
 80018fe:	615a      	str	r2, [r3, #20]
 8001900:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	222c      	movs	r2, #44	; 0x2c
 8001906:	2100      	movs	r1, #0
 8001908:	4618      	mov	r0, r3
 800190a:	f008 ff21 	bl	800a750 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800190e:	4b3f      	ldr	r3, [pc, #252]	; (8001a0c <MX_TIM1_Init+0x130>)
 8001910:	4a3f      	ldr	r2, [pc, #252]	; (8001a10 <MX_TIM1_Init+0x134>)
 8001912:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001914:	4b3d      	ldr	r3, [pc, #244]	; (8001a0c <MX_TIM1_Init+0x130>)
 8001916:	2200      	movs	r2, #0
 8001918:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800191a:	4b3c      	ldr	r3, [pc, #240]	; (8001a0c <MX_TIM1_Init+0x130>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001920:	4b3a      	ldr	r3, [pc, #232]	; (8001a0c <MX_TIM1_Init+0x130>)
 8001922:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001926:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001928:	4b38      	ldr	r3, [pc, #224]	; (8001a0c <MX_TIM1_Init+0x130>)
 800192a:	2200      	movs	r2, #0
 800192c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800192e:	4b37      	ldr	r3, [pc, #220]	; (8001a0c <MX_TIM1_Init+0x130>)
 8001930:	2200      	movs	r2, #0
 8001932:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001934:	4b35      	ldr	r3, [pc, #212]	; (8001a0c <MX_TIM1_Init+0x130>)
 8001936:	2280      	movs	r2, #128	; 0x80
 8001938:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800193a:	4834      	ldr	r0, [pc, #208]	; (8001a0c <MX_TIM1_Init+0x130>)
 800193c:	f007 f8ab 	bl	8008a96 <HAL_TIM_PWM_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001946:	f001 f9b9 	bl	8002cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800194a:	2300      	movs	r3, #0
 800194c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800194e:	2300      	movs	r3, #0
 8001950:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001952:	2300      	movs	r3, #0
 8001954:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001956:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800195a:	4619      	mov	r1, r3
 800195c:	482b      	ldr	r0, [pc, #172]	; (8001a0c <MX_TIM1_Init+0x130>)
 800195e:	f007 ffaf 	bl	80098c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001968:	f001 f9a8 	bl	8002cbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800196c:	2360      	movs	r3, #96	; 0x60
 800196e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001974:	2300      	movs	r3, #0
 8001976:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001978:	2300      	movs	r3, #0
 800197a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800197c:	2300      	movs	r3, #0
 800197e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001980:	2300      	movs	r3, #0
 8001982:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001984:	2300      	movs	r3, #0
 8001986:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001988:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800198c:	2200      	movs	r2, #0
 800198e:	4619      	mov	r1, r3
 8001990:	481e      	ldr	r0, [pc, #120]	; (8001a0c <MX_TIM1_Init+0x130>)
 8001992:	f007 fb4b 	bl	800902c <HAL_TIM_PWM_ConfigChannel>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800199c:	f001 f98e 	bl	8002cbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019a4:	2204      	movs	r2, #4
 80019a6:	4619      	mov	r1, r3
 80019a8:	4818      	ldr	r0, [pc, #96]	; (8001a0c <MX_TIM1_Init+0x130>)
 80019aa:	f007 fb3f 	bl	800902c <HAL_TIM_PWM_ConfigChannel>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80019b4:	f001 f982 	bl	8002cbc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019b8:	2300      	movs	r3, #0
 80019ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019bc:	2300      	movs	r3, #0
 80019be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019d6:	2300      	movs	r3, #0
 80019d8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	4619      	mov	r1, r3
 80019ec:	4807      	ldr	r0, [pc, #28]	; (8001a0c <MX_TIM1_Init+0x130>)
 80019ee:	f007 ffcd 	bl	800998c <HAL_TIMEx_ConfigBreakDeadTime>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 80019f8:	f001 f960 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019fc:	4803      	ldr	r0, [pc, #12]	; (8001a0c <MX_TIM1_Init+0x130>)
 80019fe:	f001 fc2b 	bl	8003258 <HAL_TIM_MspPostInit>

}
 8001a02:	bf00      	nop
 8001a04:	3758      	adds	r7, #88	; 0x58
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000688 	.word	0x20000688
 8001a10:	40012c00 	.word	0x40012c00

08001a14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	; 0x28
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a1a:	f107 031c 	add.w	r3, r7, #28
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a26:	463b      	mov	r3, r7
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
 8001a34:	615a      	str	r2, [r3, #20]
 8001a36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a38:	4b20      	ldr	r3, [pc, #128]	; (8001abc <MX_TIM2_Init+0xa8>)
 8001a3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8001a40:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <MX_TIM2_Init+0xa8>)
 8001a42:	224f      	movs	r2, #79	; 0x4f
 8001a44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a46:	4b1d      	ldr	r3, [pc, #116]	; (8001abc <MX_TIM2_Init+0xa8>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <MX_TIM2_Init+0xa8>)
 8001a4e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a54:	4b19      	ldr	r3, [pc, #100]	; (8001abc <MX_TIM2_Init+0xa8>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a5a:	4b18      	ldr	r3, [pc, #96]	; (8001abc <MX_TIM2_Init+0xa8>)
 8001a5c:	2280      	movs	r2, #128	; 0x80
 8001a5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001a60:	4816      	ldr	r0, [pc, #88]	; (8001abc <MX_TIM2_Init+0xa8>)
 8001a62:	f006 ffc1 	bl	80089e8 <HAL_TIM_OC_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001a6c:	f001 f926 	bl	8002cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	480f      	ldr	r0, [pc, #60]	; (8001abc <MX_TIM2_Init+0xa8>)
 8001a80:	f007 ff1e 	bl	80098c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001a8a:	f001 f917 	bl	8002cbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a9e:	463b      	mov	r3, r7
 8001aa0:	2204      	movs	r2, #4
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4805      	ldr	r0, [pc, #20]	; (8001abc <MX_TIM2_Init+0xa8>)
 8001aa6:	f007 fa4b 	bl	8008f40 <HAL_TIM_OC_ConfigChannel>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001ab0:	f001 f904 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ab4:	bf00      	nop
 8001ab6:	3728      	adds	r7, #40	; 0x28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	200006d4 	.word	0x200006d4

08001ac0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ad0:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <MX_TIM6_Init+0x64>)
 8001ad2:	4a15      	ldr	r2, [pc, #84]	; (8001b28 <MX_TIM6_Init+0x68>)
 8001ad4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 160-1;
 8001ad6:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <MX_TIM6_Init+0x64>)
 8001ad8:	229f      	movs	r2, #159	; 0x9f
 8001ada:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <MX_TIM6_Init+0x64>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50000-1;
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <MX_TIM6_Init+0x64>)
 8001ae4:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001ae8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001aea:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <MX_TIM6_Init+0x64>)
 8001aec:	2280      	movs	r2, #128	; 0x80
 8001aee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001af0:	480c      	ldr	r0, [pc, #48]	; (8001b24 <MX_TIM6_Init+0x64>)
 8001af2:	f006 fecd 	bl	8008890 <HAL_TIM_Base_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001afc:	f001 f8de 	bl	8002cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b00:	2300      	movs	r3, #0
 8001b02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4805      	ldr	r0, [pc, #20]	; (8001b24 <MX_TIM6_Init+0x64>)
 8001b0e:	f007 fed7 	bl	80098c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001b18:	f001 f8d0 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b1c:	bf00      	nop
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000624 	.word	0x20000624
 8001b28:	40001000 	.word	0x40001000

08001b2c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001b3c:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <MX_TIM7_Init+0x68>)
 8001b3e:	4a16      	ldr	r2, [pc, #88]	; (8001b98 <MX_TIM7_Init+0x6c>)
 8001b40:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 65535;
 8001b42:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <MX_TIM7_Init+0x68>)
 8001b44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b48:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4a:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <MX_TIM7_Init+0x68>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 12207-1;
 8001b50:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <MX_TIM7_Init+0x68>)
 8001b52:	f642 72ae 	movw	r2, #12206	; 0x2fae
 8001b56:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b58:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <MX_TIM7_Init+0x68>)
 8001b5a:	2280      	movs	r2, #128	; 0x80
 8001b5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001b5e:	480d      	ldr	r0, [pc, #52]	; (8001b94 <MX_TIM7_Init+0x68>)
 8001b60:	f006 fe96 	bl	8008890 <HAL_TIM_Base_Init>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001b6a:	f001 f8a7 	bl	8002cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4806      	ldr	r0, [pc, #24]	; (8001b94 <MX_TIM7_Init+0x68>)
 8001b7c:	f007 fea0 	bl	80098c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001b86:	f001 f899 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001b8a:	bf00      	nop
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200007b8 	.word	0x200007b8
 8001b98:	40001400 	.word	0x40001400

08001b9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ba0:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <MX_USART2_UART_Init+0x58>)
 8001ba2:	4a15      	ldr	r2, [pc, #84]	; (8001bf8 <MX_USART2_UART_Init+0x5c>)
 8001ba4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ba6:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <MX_USART2_UART_Init+0x58>)
 8001ba8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bae:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <MX_USART2_UART_Init+0x58>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <MX_USART2_UART_Init+0x58>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bba:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <MX_USART2_UART_Init+0x58>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <MX_USART2_UART_Init+0x58>)
 8001bc2:	220c      	movs	r2, #12
 8001bc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <MX_USART2_UART_Init+0x58>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bcc:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <MX_USART2_UART_Init+0x58>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bd2:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <MX_USART2_UART_Init+0x58>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bd8:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <MX_USART2_UART_Init+0x58>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bde:	4805      	ldr	r0, [pc, #20]	; (8001bf4 <MX_USART2_UART_Init+0x58>)
 8001be0:	f007 ff6a 	bl	8009ab8 <HAL_UART_Init>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001bea:	f001 f867 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000720 	.word	0x20000720
 8001bf8:	40004400 	.word	0x40004400

08001bfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c02:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <MX_DMA_Init+0x58>)
 8001c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c06:	4a13      	ldr	r2, [pc, #76]	; (8001c54 <MX_DMA_Init+0x58>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6493      	str	r3, [r2, #72]	; 0x48
 8001c0e:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <MX_DMA_Init+0x58>)
 8001c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	607b      	str	r3, [r7, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	200c      	movs	r0, #12
 8001c20:	f002 ff9b 	bl	8004b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001c24:	200c      	movs	r0, #12
 8001c26:	f002 ffb4 	bl	8004b92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	200d      	movs	r0, #13
 8001c30:	f002 ff93 	bl	8004b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001c34:	200d      	movs	r0, #13
 8001c36:	f002 ffac 	bl	8004b92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	2010      	movs	r0, #16
 8001c40:	f002 ff8b 	bl	8004b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001c44:	2010      	movs	r0, #16
 8001c46:	f002 ffa4 	bl	8004b92 <HAL_NVIC_EnableIRQ>

}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40021000 	.word	0x40021000

08001c58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b088      	sub	sp, #32
 8001c5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5e:	f107 030c 	add.w	r3, r7, #12
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	609a      	str	r2, [r3, #8]
 8001c6a:	60da      	str	r2, [r3, #12]
 8001c6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6e:	4b48      	ldr	r3, [pc, #288]	; (8001d90 <MX_GPIO_Init+0x138>)
 8001c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c72:	4a47      	ldr	r2, [pc, #284]	; (8001d90 <MX_GPIO_Init+0x138>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c7a:	4b45      	ldr	r3, [pc, #276]	; (8001d90 <MX_GPIO_Init+0x138>)
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c86:	4b42      	ldr	r3, [pc, #264]	; (8001d90 <MX_GPIO_Init+0x138>)
 8001c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8a:	4a41      	ldr	r2, [pc, #260]	; (8001d90 <MX_GPIO_Init+0x138>)
 8001c8c:	f043 0302 	orr.w	r3, r3, #2
 8001c90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c92:	4b3f      	ldr	r3, [pc, #252]	; (8001d90 <MX_GPIO_Init+0x138>)
 8001c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	607b      	str	r3, [r7, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_L1_Pin|testLED_Pin|DIR_L2_Pin, GPIO_PIN_RESET);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f44f 51a2 	mov.w	r1, #5184	; 0x1440
 8001ca4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ca8:	f003 fb56 	bl	8005358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_R1_Pin|DIR_R2_Pin, GPIO_PIN_RESET);
 8001cac:	2200      	movs	r2, #0
 8001cae:	21c0      	movs	r1, #192	; 0xc0
 8001cb0:	4838      	ldr	r0, [pc, #224]	; (8001d94 <MX_GPIO_Init+0x13c>)
 8001cb2:	f003 fb51 	bl	8005358 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Motor_counterclock_right_Pin Motor_Left_clock_Pin orientation_counterclock_Pin */
  GPIO_InitStruct.Pin = Motor_counterclock_right_Pin|Motor_Left_clock_Pin|orientation_counterclock_Pin;
 8001cb6:	f44f 6303 	mov.w	r3, #2096	; 0x830
 8001cba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001cbc:	4b36      	ldr	r3, [pc, #216]	; (8001d98 <MX_GPIO_Init+0x140>)
 8001cbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc4:	f107 030c 	add.w	r3, r7, #12
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cce:	f003 f9c1 	bl	8005054 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_L1_Pin testLED_Pin DIR_L2_Pin */
  GPIO_InitStruct.Pin = DIR_L1_Pin|testLED_Pin|DIR_L2_Pin;
 8001cd2:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 8001cd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce4:	f107 030c 	add.w	r3, r7, #12
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cee:	f003 f9b1 	bl	8005054 <HAL_GPIO_Init>

  /*Configure GPIO pins : motor_Right_clock_Pin Motor_left_counterclock_Pin orientation_clock_Pin */
  GPIO_InitStruct.Pin = motor_Right_clock_Pin|Motor_left_counterclock_Pin|orientation_clock_Pin;
 8001cf2:	230b      	movs	r3, #11
 8001cf4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001cf6:	4b28      	ldr	r3, [pc, #160]	; (8001d98 <MX_GPIO_Init+0x140>)
 8001cf8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfe:	f107 030c 	add.w	r3, r7, #12
 8001d02:	4619      	mov	r1, r3
 8001d04:	4823      	ldr	r0, [pc, #140]	; (8001d94 <MX_GPIO_Init+0x13c>)
 8001d06:	f003 f9a5 	bl	8005054 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_R1_Pin DIR_R2_Pin */
  GPIO_InitStruct.Pin = DIR_R1_Pin|DIR_R2_Pin;
 8001d0a:	23c0      	movs	r3, #192	; 0xc0
 8001d0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1a:	f107 030c 	add.w	r3, r7, #12
 8001d1e:	4619      	mov	r1, r3
 8001d20:	481c      	ldr	r0, [pc, #112]	; (8001d94 <MX_GPIO_Init+0x13c>)
 8001d22:	f003 f997 	bl	8005054 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2100      	movs	r1, #0
 8001d2a:	2006      	movs	r0, #6
 8001d2c:	f002 ff15 	bl	8004b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d30:	2006      	movs	r0, #6
 8001d32:	f002 ff2e 	bl	8004b92 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2100      	movs	r1, #0
 8001d3a:	2007      	movs	r0, #7
 8001d3c:	f002 ff0d 	bl	8004b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001d40:	2007      	movs	r0, #7
 8001d42:	f002 ff26 	bl	8004b92 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001d46:	2200      	movs	r2, #0
 8001d48:	2100      	movs	r1, #0
 8001d4a:	2009      	movs	r0, #9
 8001d4c:	f002 ff05 	bl	8004b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001d50:	2009      	movs	r0, #9
 8001d52:	f002 ff1e 	bl	8004b92 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2100      	movs	r1, #0
 8001d5a:	200a      	movs	r0, #10
 8001d5c:	f002 fefd 	bl	8004b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001d60:	200a      	movs	r0, #10
 8001d62:	f002 ff16 	bl	8004b92 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2100      	movs	r1, #0
 8001d6a:	2017      	movs	r0, #23
 8001d6c:	f002 fef5 	bl	8004b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d70:	2017      	movs	r0, #23
 8001d72:	f002 ff0e 	bl	8004b92 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2100      	movs	r1, #0
 8001d7a:	2028      	movs	r0, #40	; 0x28
 8001d7c:	f002 feed 	bl	8004b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d80:	2028      	movs	r0, #40	; 0x28
 8001d82:	f002 ff06 	bl	8004b92 <HAL_NVIC_EnableIRQ>

}
 8001d86:	bf00      	nop
 8001d88:	3720      	adds	r7, #32
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40021000 	.word	0x40021000
 8001d94:	48000400 	.word	0x48000400
 8001d98:	10310000 	.word	0x10310000

08001d9c <motor_init>:

/* USER CODE BEGIN 4 */
void motor_init(Motor *m, char name) {
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	460b      	mov	r3, r1
 8001da6:	70fb      	strb	r3, [r7, #3]
	m->name = name;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	78fa      	ldrb	r2, [r7, #3]
 8001dac:	701a      	strb	r2, [r3, #0]
	m->direction = 0;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	705a      	strb	r2, [r3, #1]
	m->dutyCycle = 0.0;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	605a      	str	r2, [r3, #4]
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <motorEncoder_init>:

void motorEncoder_init(MotorEncoder *e) {
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
	e->fineAdjustment = 0;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	811a      	strh	r2, [r3, #8]
	e->lastAngle = 0.0;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	605a      	str	r2, [r3, #4]
	e->lastTicks = 0;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
	e->output = 0.0;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	611a      	str	r2, [r3, #16]
	e->revolutions = 0;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	60da      	str	r2, [r3, #12]
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <motorController_init>:

void motorController_init(MotorController *c, Motor *m, MotorEncoder *e) {
 8001dfe:	b480      	push	{r7}
 8001e00:	b085      	sub	sp, #20
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
	c->Encoder = e;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	615a      	str	r2, [r3, #20]
	c->lastError = 0.0;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f04f 0200 	mov.w	r2, #0
 8001e16:	609a      	str	r2, [r3, #8]
	c->motor = m;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	611a      	str	r2, [r3, #16]
	c->reference = 0.0;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
	c->voltage = 0.0;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	60da      	str	r2, [r3, #12]
	c->measAngVel = 0.0;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f04f 0200 	mov.w	r2, #0
 8001e34:	605a      	str	r2, [r3, #4]
}
 8001e36:	bf00      	nop
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
	...

08001e44 <uart_in_read>:

void uart_in_read(void (*formattingFunc)(char*, uint32_t)) {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b092      	sub	sp, #72	; 0x48
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
	// The position at which the DMA writes (can be larger than queue size, if DMA is a lap ahead)
	int dma_ptr = (UART_IN_BUF_SIZE - huart2.hdmarx->Instance->CNDTR)
			+ UART_IN_BUF_SIZE * uart_dma_laps_ahead;
 8001e4c:	4b5d      	ldr	r3, [pc, #372]	; (8001fc4 <uart_in_read+0x180>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	021b      	lsls	r3, r3, #8
 8001e52:	461a      	mov	r2, r3
	int dma_ptr = (UART_IN_BUF_SIZE - huart2.hdmarx->Instance->CNDTR)
 8001e54:	4b5c      	ldr	r3, [pc, #368]	; (8001fc8 <uart_in_read+0x184>)
 8001e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
			+ UART_IN_BUF_SIZE * uart_dma_laps_ahead;
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	f503 7380 	add.w	r3, r3, #256	; 0x100
	int dma_ptr = (UART_IN_BUF_SIZE - huart2.hdmarx->Instance->CNDTR)
 8001e62:	647b      	str	r3, [r7, #68]	; 0x44

	// dma_ptr - uart_in_read_ptr is the number of unread/uninterpreted bytes in queue
	for (; dma_ptr - uart_in_read_ptr > 0; uart_in_read_ptr++) {
 8001e64:	e0a1      	b.n	8001faa <uart_in_read+0x166>

		// If read pointer crosses "queue border"
		if (uart_in_read_ptr >= UART_IN_BUF_SIZE) {
 8001e66:	4b59      	ldr	r3, [pc, #356]	; (8001fcc <uart_in_read+0x188>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2bff      	cmp	r3, #255	; 0xff
 8001e6c:	dd19      	ble.n	8001ea2 <uart_in_read+0x5e>
			uart_in_read_ptr = 0;
 8001e6e:	4b57      	ldr	r3, [pc, #348]	; (8001fcc <uart_in_read+0x188>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
			uart_in_lastStart -= UART_IN_BUF_SIZE;
 8001e74:	4b56      	ldr	r3, [pc, #344]	; (8001fd0 <uart_in_read+0x18c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001e7c:	4a54      	ldr	r2, [pc, #336]	; (8001fd0 <uart_in_read+0x18c>)
 8001e7e:	6013      	str	r3, [r2, #0]
			uart_dma_laps_ahead--;
 8001e80:	4b50      	ldr	r3, [pc, #320]	; (8001fc4 <uart_in_read+0x180>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	3b01      	subs	r3, #1
 8001e86:	4a4f      	ldr	r2, [pc, #316]	; (8001fc4 <uart_in_read+0x180>)
 8001e88:	6013      	str	r3, [r2, #0]
			dma_ptr = (UART_IN_BUF_SIZE - huart2.hdmarx->Instance->CNDTR)
					+ UART_IN_BUF_SIZE * uart_dma_laps_ahead;
 8001e8a:	4b4e      	ldr	r3, [pc, #312]	; (8001fc4 <uart_in_read+0x180>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	021b      	lsls	r3, r3, #8
 8001e90:	461a      	mov	r2, r3
			dma_ptr = (UART_IN_BUF_SIZE - huart2.hdmarx->Instance->CNDTR)
 8001e92:	4b4d      	ldr	r3, [pc, #308]	; (8001fc8 <uart_in_read+0x184>)
 8001e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
					+ UART_IN_BUF_SIZE * uart_dma_laps_ahead;
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	f503 7380 	add.w	r3, r3, #256	; 0x100
			dma_ptr = (UART_IN_BUF_SIZE - huart2.hdmarx->Instance->CNDTR)
 8001ea0:	647b      	str	r3, [r7, #68]	; 0x44
		}

		// If we find the beginning of a message
		if (uart_in[uart_in_read_ptr] == COMM_DEL_START) {
 8001ea2:	4b4a      	ldr	r3, [pc, #296]	; (8001fcc <uart_in_read+0x188>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a4b      	ldr	r2, [pc, #300]	; (8001fd4 <uart_in_read+0x190>)
 8001ea8:	5cd3      	ldrb	r3, [r2, r3]
 8001eaa:	2b24      	cmp	r3, #36	; 0x24
 8001eac:	d10a      	bne.n	8001ec4 <uart_in_read+0x80>
			validStartDelimiter = true;
 8001eae:	4b4a      	ldr	r3, [pc, #296]	; (8001fd8 <uart_in_read+0x194>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	701a      	strb	r2, [r3, #0]
			uart_in_lastStart = uart_in_read_ptr;
 8001eb4:	4b45      	ldr	r3, [pc, #276]	; (8001fcc <uart_in_read+0x188>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a45      	ldr	r2, [pc, #276]	; (8001fd0 <uart_in_read+0x18c>)
 8001eba:	6013      	str	r3, [r2, #0]
			uart_in_escapes = 0;
 8001ebc:	4b47      	ldr	r3, [pc, #284]	; (8001fdc <uart_in_read+0x198>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	e06d      	b.n	8001fa0 <uart_in_read+0x15c>
		} else if (uart_in[uart_in_read_ptr] == COMM_ESCAPE)
 8001ec4:	4b41      	ldr	r3, [pc, #260]	; (8001fcc <uart_in_read+0x188>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a42      	ldr	r2, [pc, #264]	; (8001fd4 <uart_in_read+0x190>)
 8001eca:	5cd3      	ldrb	r3, [r2, r3]
 8001ecc:	2b23      	cmp	r3, #35	; 0x23
 8001ece:	d105      	bne.n	8001edc <uart_in_read+0x98>
			uart_in_escapes++;
 8001ed0:	4b42      	ldr	r3, [pc, #264]	; (8001fdc <uart_in_read+0x198>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	4a41      	ldr	r2, [pc, #260]	; (8001fdc <uart_in_read+0x198>)
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	e061      	b.n	8001fa0 <uart_in_read+0x15c>

		// If we find the end of a message
		else if (uart_in[uart_in_read_ptr] == COMM_DEL_STOP) {
 8001edc:	4b3b      	ldr	r3, [pc, #236]	; (8001fcc <uart_in_read+0x188>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a3c      	ldr	r2, [pc, #240]	; (8001fd4 <uart_in_read+0x190>)
 8001ee2:	5cd3      	ldrb	r3, [r2, r3]
 8001ee4:	2b40      	cmp	r3, #64	; 0x40
 8001ee6:	d15b      	bne.n	8001fa0 <uart_in_read+0x15c>

			int frameLength = uart_in_read_ptr - uart_in_lastStart + 1;
 8001ee8:	4b38      	ldr	r3, [pc, #224]	; (8001fcc <uart_in_read+0x188>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4b38      	ldr	r3, [pc, #224]	; (8001fd0 <uart_in_read+0x18c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	643b      	str	r3, [r7, #64]	; 0x40

			char frame[COMM_MAX_FRAME_SIZE] = { 0 };
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8001efa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	605a      	str	r2, [r3, #4]
 8001f04:	609a      	str	r2, [r3, #8]
 8001f06:	60da      	str	r2, [r3, #12]
 8001f08:	821a      	strh	r2, [r3, #16]

			// If the start and stop delimiter are on opposite sides of the "queue border"
			if (uart_in_lastStart < 0) {
 8001f0a:	4b31      	ldr	r3, [pc, #196]	; (8001fd0 <uart_in_read+0x18c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	da1c      	bge.n	8001f4c <uart_in_read+0x108>
				memcpy(frame, uart_in + UART_IN_BUF_SIZE + uart_in_lastStart,
 8001f12:	4b2f      	ldr	r3, [pc, #188]	; (8001fd0 <uart_in_read+0x18c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001f1a:	4a2e      	ldr	r2, [pc, #184]	; (8001fd4 <uart_in_read+0x190>)
 8001f1c:	1899      	adds	r1, r3, r2
						-uart_in_lastStart);
 8001f1e:	4b2c      	ldr	r3, [pc, #176]	; (8001fd0 <uart_in_read+0x18c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	425b      	negs	r3, r3
				memcpy(frame, uart_in + UART_IN_BUF_SIZE + uart_in_lastStart,
 8001f24:	461a      	mov	r2, r3
 8001f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f008 fc02 	bl	800a734 <memcpy>
				memcpy(frame - uart_in_lastStart, uart_in,
 8001f30:	4b27      	ldr	r3, [pc, #156]	; (8001fd0 <uart_in_read+0x18c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	425b      	negs	r3, r3
 8001f36:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001f3a:	18d0      	adds	r0, r2, r3
						uart_in_read_ptr + 1);
 8001f3c:	4b23      	ldr	r3, [pc, #140]	; (8001fcc <uart_in_read+0x188>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	3301      	adds	r3, #1
				memcpy(frame - uart_in_lastStart, uart_in,
 8001f42:	461a      	mov	r2, r3
 8001f44:	4923      	ldr	r1, [pc, #140]	; (8001fd4 <uart_in_read+0x190>)
 8001f46:	f008 fbf5 	bl	800a734 <memcpy>
 8001f4a:	e00a      	b.n	8001f62 <uart_in_read+0x11e>
			} else
				memcpy(frame, uart_in + uart_in_lastStart, frameLength);
 8001f4c:	4b20      	ldr	r3, [pc, #128]	; (8001fd0 <uart_in_read+0x18c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	4b20      	ldr	r3, [pc, #128]	; (8001fd4 <uart_in_read+0x190>)
 8001f54:	18d1      	adds	r1, r2, r3
 8001f56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f008 fbe9 	bl	800a734 <memcpy>
			validStartDelimiter = false;
 8001f62:	4b1d      	ldr	r3, [pc, #116]	; (8001fd8 <uart_in_read+0x194>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	701a      	strb	r2, [r3, #0]

			char data[COMM_MAX_FRAME_SIZE] = { 0 };
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	f107 0310 	add.w	r3, r7, #16
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	821a      	strh	r2, [r3, #16]
			uint32_t *dataLength;

			if (from_frame(frame, frameLength, data, dataLength) == 1) {
 8001f7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001f7e:	f107 020c 	add.w	r2, r7, #12
 8001f82:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f88:	f7ff fa5d 	bl	8001446 <from_frame>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d106      	bne.n	8001fa0 <uart_in_read+0x15c>
				(*formattingFunc)(data, *dataLength);
 8001f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f94:	6819      	ldr	r1, [r3, #0]
 8001f96:	f107 020c 	add.w	r2, r7, #12
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	4798      	blx	r3
	for (; dma_ptr - uart_in_read_ptr > 0; uart_in_read_ptr++) {
 8001fa0:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <uart_in_read+0x188>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	4a09      	ldr	r2, [pc, #36]	; (8001fcc <uart_in_read+0x188>)
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <uart_in_read+0x188>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f73f af57 	bgt.w	8001e66 <uart_in_read+0x22>
			}
		}
	}
}
 8001fb8:	bf00      	nop
 8001fba:	bf00      	nop
 8001fbc:	3748      	adds	r7, #72	; 0x48
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000058 	.word	0x20000058
 8001fc8:	20000720 	.word	0x20000720
 8001fcc:	20000054 	.word	0x20000054
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	2000005c 	.word	0x2000005c
 8001fd8:	20000050 	.word	0x20000050
 8001fdc:	2000015c 	.word	0x2000015c

08001fe0 <referenceFormatting>:

void referenceFormatting(char *uart_msg, uint32_t len) {
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]

	// Check length of msg
	if (len != 10)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	2b0a      	cmp	r3, #10
 8001fee:	d115      	bne.n	800201c <referenceFormatting+0x3c>
		return;

	// Retrieve reference for right wheel
	if (uart_msg[0] == 'R') {
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b52      	cmp	r3, #82	; 0x52
 8001ff6:	d113      	bne.n	8002020 <referenceFormatting+0x40>
		memcpy(&controllerR.reference, uart_msg + 1, 4);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <referenceFormatting+0x50>)
 8002002:	601a      	str	r2, [r3, #0]
	} else {
		return;
	}

	// Retrieve reference for left wheel
	if (uart_msg[5] == 'L') {
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3305      	adds	r3, #5
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b4c      	cmp	r3, #76	; 0x4c
 800200c:	d10a      	bne.n	8002024 <referenceFormatting+0x44>
		memcpy(&controllerL.reference, uart_msg + 6, 4);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3306      	adds	r3, #6
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	4b07      	ldr	r3, [pc, #28]	; (8002034 <referenceFormatting+0x54>)
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	e004      	b.n	8002026 <referenceFormatting+0x46>
		return;
 800201c:	bf00      	nop
 800201e:	e002      	b.n	8002026 <referenceFormatting+0x46>
		return;
 8002020:	bf00      	nop
 8002022:	e000      	b.n	8002026 <referenceFormatting+0x46>
	} else {
		return;
 8002024:	bf00      	nop
	}
}
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	20000670 	.word	0x20000670
 8002034:	200005a4 	.word	0x200005a4

08002038 <calcDistance>:

float calcDistance(MotorController *c) {
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
	float deltaTicks = c->Encoder->output * TOTAL_WHEEL_TICKS
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	edd3 7a04 	vldr	s15, [r3, #16]
 8002048:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80020a8 <calcDistance+0x70>
 800204c:	ee27 7a87 	vmul.f32	s14, s15, s14
			- c->Encoder->lastTicks;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	ee07 3a90 	vmov	s15, r3
 800205a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	float deltaTicks = c->Encoder->output * TOTAL_WHEEL_TICKS
 800205e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002062:	edc7 7a03 	vstr	s15, [r7, #12]
	return M_PI * WHEELDIA * (deltaTicks / TOTAL_WHEEL_TICKS);
 8002066:	edd7 7a03 	vldr	s15, [r7, #12]
 800206a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80020a8 <calcDistance+0x70>
 800206e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002072:	ee16 0a90 	vmov	r0, s13
 8002076:	f7fe fa0f 	bl	8000498 <__aeabi_f2d>
 800207a:	a309      	add	r3, pc, #36	; (adr r3, 80020a0 <calcDistance+0x68>)
 800207c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002080:	f7fe fa62 	bl	8000548 <__aeabi_dmul>
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	4610      	mov	r0, r2
 800208a:	4619      	mov	r1, r3
 800208c:	f7fe fd1e 	bl	8000acc <__aeabi_d2f>
 8002090:	4603      	mov	r3, r0
 8002092:	ee07 3a90 	vmov	s15, r3
}
 8002096:	eeb0 0a67 	vmov.f32	s0, s15
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	9217271a 	.word	0x9217271a
 80020a4:	3fd015bf 	.word	0x3fd015bf
 80020a8:	44f00000 	.word	0x44f00000
 80020ac:	00000000 	.word	0x00000000

080020b0 <calcPositionAndVelocity>:

void calcPositionAndVelocity() {
 80020b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020b4:	b084      	sub	sp, #16
 80020b6:	af00      	add	r7, sp, #0
	float distR = calcDistance(&controllerR);
 80020b8:	487b      	ldr	r0, [pc, #492]	; (80022a8 <calcPositionAndVelocity+0x1f8>)
 80020ba:	f7ff ffbd 	bl	8002038 <calcDistance>
 80020be:	ed87 0a03 	vstr	s0, [r7, #12]
	float distL = calcDistance(&controllerL);
 80020c2:	487a      	ldr	r0, [pc, #488]	; (80022ac <calcPositionAndVelocity+0x1fc>)
 80020c4:	f7ff ffb8 	bl	8002038 <calcDistance>
 80020c8:	ed87 0a02 	vstr	s0, [r7, #8]
	controllerR.Encoder->lastTicks = controllerR.Encoder->output
 80020cc:	4b76      	ldr	r3, [pc, #472]	; (80022a8 <calcPositionAndVelocity+0x1f8>)
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	edd3 7a04 	vldr	s15, [r3, #16]
			* TOTAL_WHEEL_TICKS;
 80020d4:	ed9f 7a76 	vldr	s14, [pc, #472]	; 80022b0 <calcPositionAndVelocity+0x200>
 80020d8:	ee67 7a87 	vmul.f32	s15, s15, s14
	controllerR.Encoder->lastTicks = controllerR.Encoder->output
 80020dc:	4b72      	ldr	r3, [pc, #456]	; (80022a8 <calcPositionAndVelocity+0x1f8>)
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020e4:	ee17 2a90 	vmov	r2, s15
 80020e8:	601a      	str	r2, [r3, #0]
	controllerL.Encoder->lastTicks = controllerL.Encoder->output
 80020ea:	4b70      	ldr	r3, [pc, #448]	; (80022ac <calcPositionAndVelocity+0x1fc>)
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	edd3 7a04 	vldr	s15, [r3, #16]
			* TOTAL_WHEEL_TICKS;
 80020f2:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80022b0 <calcPositionAndVelocity+0x200>
 80020f6:	ee67 7a87 	vmul.f32	s15, s15, s14
	controllerL.Encoder->lastTicks = controllerL.Encoder->output
 80020fa:	4b6c      	ldr	r3, [pc, #432]	; (80022ac <calcPositionAndVelocity+0x1fc>)
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002102:	ee17 2a90 	vmov	r2, s15
 8002106:	601a      	str	r2, [r3, #0]
	float dist = (distL + distR) / 2;
 8002108:	ed97 7a02 	vldr	s14, [r7, #8]
 800210c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002110:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002114:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002118:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800211c:	edc7 7a01 	vstr	s15, [r7, #4]
	posX = posX + dist * cos(posPhi);
 8002120:	4b64      	ldr	r3, [pc, #400]	; (80022b4 <calcPositionAndVelocity+0x204>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe f9b7 	bl	8000498 <__aeabi_f2d>
 800212a:	4604      	mov	r4, r0
 800212c:	460d      	mov	r5, r1
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7fe f9b2 	bl	8000498 <__aeabi_f2d>
 8002134:	4680      	mov	r8, r0
 8002136:	4689      	mov	r9, r1
 8002138:	4b5f      	ldr	r3, [pc, #380]	; (80022b8 <calcPositionAndVelocity+0x208>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe f9ab 	bl	8000498 <__aeabi_f2d>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	ec43 2b10 	vmov	d0, r2, r3
 800214a:	f008 fb09 	bl	800a760 <cos>
 800214e:	ec53 2b10 	vmov	r2, r3, d0
 8002152:	4640      	mov	r0, r8
 8002154:	4649      	mov	r1, r9
 8002156:	f7fe f9f7 	bl	8000548 <__aeabi_dmul>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	4620      	mov	r0, r4
 8002160:	4629      	mov	r1, r5
 8002162:	f7fe f83b 	bl	80001dc <__adddf3>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	4610      	mov	r0, r2
 800216c:	4619      	mov	r1, r3
 800216e:	f7fe fcad 	bl	8000acc <__aeabi_d2f>
 8002172:	4603      	mov	r3, r0
 8002174:	4a4f      	ldr	r2, [pc, #316]	; (80022b4 <calcPositionAndVelocity+0x204>)
 8002176:	6013      	str	r3, [r2, #0]
	posY = posY + dist * sin(posPhi);
 8002178:	4b50      	ldr	r3, [pc, #320]	; (80022bc <calcPositionAndVelocity+0x20c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe f98b 	bl	8000498 <__aeabi_f2d>
 8002182:	4604      	mov	r4, r0
 8002184:	460d      	mov	r5, r1
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7fe f986 	bl	8000498 <__aeabi_f2d>
 800218c:	4680      	mov	r8, r0
 800218e:	4689      	mov	r9, r1
 8002190:	4b49      	ldr	r3, [pc, #292]	; (80022b8 <calcPositionAndVelocity+0x208>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f7fe f97f 	bl	8000498 <__aeabi_f2d>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	ec43 2b10 	vmov	d0, r2, r3
 80021a2:	f008 fb2d 	bl	800a800 <sin>
 80021a6:	ec53 2b10 	vmov	r2, r3, d0
 80021aa:	4640      	mov	r0, r8
 80021ac:	4649      	mov	r1, r9
 80021ae:	f7fe f9cb 	bl	8000548 <__aeabi_dmul>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4620      	mov	r0, r4
 80021b8:	4629      	mov	r1, r5
 80021ba:	f7fe f80f 	bl	80001dc <__adddf3>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	4610      	mov	r0, r2
 80021c4:	4619      	mov	r1, r3
 80021c6:	f7fe fc81 	bl	8000acc <__aeabi_d2f>
 80021ca:	4603      	mov	r3, r0
 80021cc:	4a3b      	ldr	r2, [pc, #236]	; (80022bc <calcPositionAndVelocity+0x20c>)
 80021ce:	6013      	str	r3, [r2, #0]
	posPhi = posPhi + (distR - distL) / DISBETWHEEL;
 80021d0:	4b39      	ldr	r3, [pc, #228]	; (80022b8 <calcPositionAndVelocity+0x208>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe f95f 	bl	8000498 <__aeabi_f2d>
 80021da:	4604      	mov	r4, r0
 80021dc:	460d      	mov	r5, r1
 80021de:	ed97 7a03 	vldr	s14, [r7, #12]
 80021e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80021e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021ea:	ee17 0a90 	vmov	r0, s15
 80021ee:	f7fe f953 	bl	8000498 <__aeabi_f2d>
 80021f2:	a32b      	add	r3, pc, #172	; (adr r3, 80022a0 <calcPositionAndVelocity+0x1f0>)
 80021f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f8:	f7fe fad0 	bl	800079c <__aeabi_ddiv>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	4620      	mov	r0, r4
 8002202:	4629      	mov	r1, r5
 8002204:	f7fd ffea 	bl	80001dc <__adddf3>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4610      	mov	r0, r2
 800220e:	4619      	mov	r1, r3
 8002210:	f7fe fc5c 	bl	8000acc <__aeabi_d2f>
 8002214:	4603      	mov	r3, r0
 8002216:	4a28      	ldr	r2, [pc, #160]	; (80022b8 <calcPositionAndVelocity+0x208>)
 8002218:	6013      	str	r3, [r2, #0]

	velPhi = ((posPhi - posPhiPrev)) / positionCalculationPeriod;
 800221a:	4b27      	ldr	r3, [pc, #156]	; (80022b8 <calcPositionAndVelocity+0x208>)
 800221c:	ed93 7a00 	vldr	s14, [r3]
 8002220:	4b27      	ldr	r3, [pc, #156]	; (80022c0 <calcPositionAndVelocity+0x210>)
 8002222:	edd3 7a00 	vldr	s15, [r3]
 8002226:	ee77 6a67 	vsub.f32	s13, s14, s15
 800222a:	4b26      	ldr	r3, [pc, #152]	; (80022c4 <calcPositionAndVelocity+0x214>)
 800222c:	ed93 7a00 	vldr	s14, [r3]
 8002230:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002234:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <calcPositionAndVelocity+0x218>)
 8002236:	edc3 7a00 	vstr	s15, [r3]
	velX = (posX - posXPrev) / positionCalculationPeriod;
 800223a:	4b1e      	ldr	r3, [pc, #120]	; (80022b4 <calcPositionAndVelocity+0x204>)
 800223c:	ed93 7a00 	vldr	s14, [r3]
 8002240:	4b22      	ldr	r3, [pc, #136]	; (80022cc <calcPositionAndVelocity+0x21c>)
 8002242:	edd3 7a00 	vldr	s15, [r3]
 8002246:	ee77 6a67 	vsub.f32	s13, s14, s15
 800224a:	4b1e      	ldr	r3, [pc, #120]	; (80022c4 <calcPositionAndVelocity+0x214>)
 800224c:	ed93 7a00 	vldr	s14, [r3]
 8002250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002254:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <calcPositionAndVelocity+0x220>)
 8002256:	edc3 7a00 	vstr	s15, [r3]
	velY = (posY - posYPrev) / positionCalculationPeriod;
 800225a:	4b18      	ldr	r3, [pc, #96]	; (80022bc <calcPositionAndVelocity+0x20c>)
 800225c:	ed93 7a00 	vldr	s14, [r3]
 8002260:	4b1c      	ldr	r3, [pc, #112]	; (80022d4 <calcPositionAndVelocity+0x224>)
 8002262:	edd3 7a00 	vldr	s15, [r3]
 8002266:	ee77 6a67 	vsub.f32	s13, s14, s15
 800226a:	4b16      	ldr	r3, [pc, #88]	; (80022c4 <calcPositionAndVelocity+0x214>)
 800226c:	ed93 7a00 	vldr	s14, [r3]
 8002270:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002274:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <calcPositionAndVelocity+0x228>)
 8002276:	edc3 7a00 	vstr	s15, [r3]

	posPhiPrev = posPhi;
 800227a:	4b0f      	ldr	r3, [pc, #60]	; (80022b8 <calcPositionAndVelocity+0x208>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a10      	ldr	r2, [pc, #64]	; (80022c0 <calcPositionAndVelocity+0x210>)
 8002280:	6013      	str	r3, [r2, #0]
	posXPrev = posX;
 8002282:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <calcPositionAndVelocity+0x204>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a11      	ldr	r2, [pc, #68]	; (80022cc <calcPositionAndVelocity+0x21c>)
 8002288:	6013      	str	r3, [r2, #0]
	posYPrev = posY;
 800228a:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <calcPositionAndVelocity+0x20c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a11      	ldr	r2, [pc, #68]	; (80022d4 <calcPositionAndVelocity+0x224>)
 8002290:	6013      	str	r3, [r2, #0]
}
 8002292:	bf00      	nop
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800229c:	f3af 8000 	nop.w
 80022a0:	851eb852 	.word	0x851eb852
 80022a4:	3fd851eb 	.word	0x3fd851eb
 80022a8:	20000670 	.word	0x20000670
 80022ac:	200005a4 	.word	0x200005a4
 80022b0:	44f00000 	.word	0x44f00000
 80022b4:	200003dc 	.word	0x200003dc
 80022b8:	200003ec 	.word	0x200003ec
 80022bc:	200003e4 	.word	0x200003e4
 80022c0:	200003f0 	.word	0x200003f0
 80022c4:	200005a0 	.word	0x200005a0
 80022c8:	200003fc 	.word	0x200003fc
 80022cc:	200003e0 	.word	0x200003e0
 80022d0:	200003f4 	.word	0x200003f4
 80022d4:	200003e8 	.word	0x200003e8
 80022d8:	200003f8 	.word	0x200003f8

080022dc <updatePositionsAndVelocities>:

void updatePositionsAndVelocities() {
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0

	// Position and velocity data from wheel encoders
	calcPositionAndVelocity();
 80022e0:	f7ff fee6 	bl	80020b0 <calcPositionAndVelocity>
	sendPositionAndVelocity();
 80022e4:	f000 f89c 	bl	8002420 <sendPositionAndVelocity>

	// Encoder data from top plate
	calcOrientOutput();
 80022e8:	f000 fcee 	bl	8002cc8 <calcOrientOutput>
	sendOrientData();
 80022ec:	f000 fd96 	bl	8002e1c <sendOrientData>
}
 80022f0:	bf00      	nop
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <packThe6Floats>:

void packThe6Floats() {
 80022f4:	b480      	push	{r7}
 80022f6:	b089      	sub	sp, #36	; 0x24
 80022f8:	af00      	add	r7, sp, #0
	uint8_t *pointer = &posX;
 80022fa:	4b42      	ldr	r3, [pc, #264]	; (8002404 <packThe6Floats+0x110>)
 80022fc:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 4; i++) {
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
 8002302:	e00b      	b.n	800231c <packThe6Floats+0x28>
		position[i] = *(pointer + i);
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	4413      	add	r3, r2
 800230a:	7819      	ldrb	r1, [r3, #0]
 800230c:	4a3e      	ldr	r2, [pc, #248]	; (8002408 <packThe6Floats+0x114>)
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	4413      	add	r3, r2
 8002312:	460a      	mov	r2, r1
 8002314:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3301      	adds	r3, #1
 800231a:	61fb      	str	r3, [r7, #28]
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	2b03      	cmp	r3, #3
 8002320:	ddf0      	ble.n	8002304 <packThe6Floats+0x10>
	}

	pointer = &posY;
 8002322:	4b3a      	ldr	r3, [pc, #232]	; (800240c <packThe6Floats+0x118>)
 8002324:	607b      	str	r3, [r7, #4]
	for (int k = 4; k < 8; k++) {
 8002326:	2304      	movs	r3, #4
 8002328:	61bb      	str	r3, [r7, #24]
 800232a:	e00c      	b.n	8002346 <packThe6Floats+0x52>
		position[k] = *(pointer + k - 4);
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	3b04      	subs	r3, #4
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	4413      	add	r3, r2
 8002334:	7819      	ldrb	r1, [r3, #0]
 8002336:	4a34      	ldr	r2, [pc, #208]	; (8002408 <packThe6Floats+0x114>)
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	4413      	add	r3, r2
 800233c:	460a      	mov	r2, r1
 800233e:	701a      	strb	r2, [r3, #0]
	for (int k = 4; k < 8; k++) {
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	3301      	adds	r3, #1
 8002344:	61bb      	str	r3, [r7, #24]
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	2b07      	cmp	r3, #7
 800234a:	ddef      	ble.n	800232c <packThe6Floats+0x38>
	}
	pointer = &posPhi;
 800234c:	4b30      	ldr	r3, [pc, #192]	; (8002410 <packThe6Floats+0x11c>)
 800234e:	607b      	str	r3, [r7, #4]
	for (int j = 8; j < 12; j++) {
 8002350:	2308      	movs	r3, #8
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	e00c      	b.n	8002370 <packThe6Floats+0x7c>
		position[j] = *(pointer + j - 8);
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	3b08      	subs	r3, #8
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	7819      	ldrb	r1, [r3, #0]
 8002360:	4a29      	ldr	r2, [pc, #164]	; (8002408 <packThe6Floats+0x114>)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	4413      	add	r3, r2
 8002366:	460a      	mov	r2, r1
 8002368:	701a      	strb	r2, [r3, #0]
	for (int j = 8; j < 12; j++) {
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	3301      	adds	r3, #1
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	2b0b      	cmp	r3, #11
 8002374:	ddef      	ble.n	8002356 <packThe6Floats+0x62>
	}
	pointer = &velX;
 8002376:	4b27      	ldr	r3, [pc, #156]	; (8002414 <packThe6Floats+0x120>)
 8002378:	607b      	str	r3, [r7, #4]
	for (int m = 12; m < 16; m++) {
 800237a:	230c      	movs	r3, #12
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	e00c      	b.n	800239a <packThe6Floats+0xa6>
		position[m] = *(pointer + m - 12);
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	3b0c      	subs	r3, #12
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	4413      	add	r3, r2
 8002388:	7819      	ldrb	r1, [r3, #0]
 800238a:	4a1f      	ldr	r2, [pc, #124]	; (8002408 <packThe6Floats+0x114>)
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4413      	add	r3, r2
 8002390:	460a      	mov	r2, r1
 8002392:	701a      	strb	r2, [r3, #0]
	for (int m = 12; m < 16; m++) {
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	3301      	adds	r3, #1
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	2b0f      	cmp	r3, #15
 800239e:	ddef      	ble.n	8002380 <packThe6Floats+0x8c>
	}
	pointer = &velY;
 80023a0:	4b1d      	ldr	r3, [pc, #116]	; (8002418 <packThe6Floats+0x124>)
 80023a2:	607b      	str	r3, [r7, #4]
	for (int n = 16; n < 20; n++) {
 80023a4:	2310      	movs	r3, #16
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	e00c      	b.n	80023c4 <packThe6Floats+0xd0>
		position[n] = *(pointer + n - 16);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	3b10      	subs	r3, #16
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	4413      	add	r3, r2
 80023b2:	7819      	ldrb	r1, [r3, #0]
 80023b4:	4a14      	ldr	r2, [pc, #80]	; (8002408 <packThe6Floats+0x114>)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	4413      	add	r3, r2
 80023ba:	460a      	mov	r2, r1
 80023bc:	701a      	strb	r2, [r3, #0]
	for (int n = 16; n < 20; n++) {
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	3301      	adds	r3, #1
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2b13      	cmp	r3, #19
 80023c8:	ddef      	ble.n	80023aa <packThe6Floats+0xb6>
	}
	pointer = &velPhi;
 80023ca:	4b14      	ldr	r3, [pc, #80]	; (800241c <packThe6Floats+0x128>)
 80023cc:	607b      	str	r3, [r7, #4]
	for (int o = 20; o < 24; o++) {
 80023ce:	2314      	movs	r3, #20
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	e00c      	b.n	80023ee <packThe6Floats+0xfa>
		position[o] = *(pointer + o - 20);
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	3b14      	subs	r3, #20
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	4413      	add	r3, r2
 80023dc:	7819      	ldrb	r1, [r3, #0]
 80023de:	4a0a      	ldr	r2, [pc, #40]	; (8002408 <packThe6Floats+0x114>)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	4413      	add	r3, r2
 80023e4:	460a      	mov	r2, r1
 80023e6:	701a      	strb	r2, [r3, #0]
	for (int o = 20; o < 24; o++) {
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	3301      	adds	r3, #1
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	2b17      	cmp	r3, #23
 80023f2:	ddef      	ble.n	80023d4 <packThe6Floats+0xe0>
	}
}
 80023f4:	bf00      	nop
 80023f6:	bf00      	nop
 80023f8:	3724      	adds	r7, #36	; 0x24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	200003dc 	.word	0x200003dc
 8002408:	20000400 	.word	0x20000400
 800240c:	200003e4 	.word	0x200003e4
 8002410:	200003ec 	.word	0x200003ec
 8002414:	200003f4 	.word	0x200003f4
 8002418:	200003f8 	.word	0x200003f8
 800241c:	200003fc 	.word	0x200003fc

08002420 <sendPositionAndVelocity>:

void sendPositionAndVelocity() {
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
	if (spamCheckX != posX || spamCheckY != posY || spamCheckPhi != posPhi) {
 8002424:	4b20      	ldr	r3, [pc, #128]	; (80024a8 <sendPositionAndVelocity+0x88>)
 8002426:	ed93 7a00 	vldr	s14, [r3]
 800242a:	4b20      	ldr	r3, [pc, #128]	; (80024ac <sendPositionAndVelocity+0x8c>)
 800242c:	edd3 7a00 	vldr	s15, [r3]
 8002430:	eeb4 7a67 	vcmp.f32	s14, s15
 8002434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002438:	d115      	bne.n	8002466 <sendPositionAndVelocity+0x46>
 800243a:	4b1d      	ldr	r3, [pc, #116]	; (80024b0 <sendPositionAndVelocity+0x90>)
 800243c:	ed93 7a00 	vldr	s14, [r3]
 8002440:	4b1c      	ldr	r3, [pc, #112]	; (80024b4 <sendPositionAndVelocity+0x94>)
 8002442:	edd3 7a00 	vldr	s15, [r3]
 8002446:	eeb4 7a67 	vcmp.f32	s14, s15
 800244a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244e:	d10a      	bne.n	8002466 <sendPositionAndVelocity+0x46>
 8002450:	4b19      	ldr	r3, [pc, #100]	; (80024b8 <sendPositionAndVelocity+0x98>)
 8002452:	ed93 7a00 	vldr	s14, [r3]
 8002456:	4b19      	ldr	r3, [pc, #100]	; (80024bc <sendPositionAndVelocity+0x9c>)
 8002458:	edd3 7a00 	vldr	s15, [r3]
 800245c:	eeb4 7a67 	vcmp.f32	s14, s15
 8002460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002464:	d01e      	beq.n	80024a4 <sendPositionAndVelocity+0x84>
		spamCheckX = posX;
 8002466:	4b11      	ldr	r3, [pc, #68]	; (80024ac <sendPositionAndVelocity+0x8c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a0f      	ldr	r2, [pc, #60]	; (80024a8 <sendPositionAndVelocity+0x88>)
 800246c:	6013      	str	r3, [r2, #0]
		spamCheckY = posY;
 800246e:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <sendPositionAndVelocity+0x94>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a0f      	ldr	r2, [pc, #60]	; (80024b0 <sendPositionAndVelocity+0x90>)
 8002474:	6013      	str	r3, [r2, #0]
		spamCheckPhi = posPhi;
 8002476:	4b11      	ldr	r3, [pc, #68]	; (80024bc <sendPositionAndVelocity+0x9c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a0f      	ldr	r2, [pc, #60]	; (80024b8 <sendPositionAndVelocity+0x98>)
 800247c:	6013      	str	r3, [r2, #0]
		packThe6Floats();
 800247e:	f7ff ff39 	bl	80022f4 <packThe6Floats>
		memset(packedMotorData, 0, sizeof(packedMotorData));
 8002482:	2232      	movs	r2, #50	; 0x32
 8002484:	2100      	movs	r1, #0
 8002486:	480e      	ldr	r0, [pc, #56]	; (80024c0 <sendPositionAndVelocity+0xa0>)
 8002488:	f008 f962 	bl	800a750 <memset>

		to_frame(packedMotorData, position, 3);
 800248c:	2203      	movs	r2, #3
 800248e:	490d      	ldr	r1, [pc, #52]	; (80024c4 <sendPositionAndVelocity+0xa4>)
 8002490:	480b      	ldr	r0, [pc, #44]	; (80024c0 <sendPositionAndVelocity+0xa0>)
 8002492:	f7fe ff65 	bl	8001360 <to_frame>
		HAL_UART_Transmit(&huart2, packedMotorData, sizeof(packedMotorData),
 8002496:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800249a:	2232      	movs	r2, #50	; 0x32
 800249c:	4908      	ldr	r1, [pc, #32]	; (80024c0 <sendPositionAndVelocity+0xa0>)
 800249e:	480a      	ldr	r0, [pc, #40]	; (80024c8 <sendPositionAndVelocity+0xa8>)
 80024a0:	f007 fb58 	bl	8009b54 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
	}
}
 80024a4:	bf00      	nop
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	200003a0 	.word	0x200003a0
 80024ac:	200003dc 	.word	0x200003dc
 80024b0:	2000039c 	.word	0x2000039c
 80024b4:	200003e4 	.word	0x200003e4
 80024b8:	200003a4 	.word	0x200003a4
 80024bc:	200003ec 	.word	0x200003ec
 80024c0:	200003a8 	.word	0x200003a8
 80024c4:	20000400 	.word	0x20000400
 80024c8:	20000720 	.word	0x20000720

080024cc <clockcheckRight>:
	c->Encoder->output = 0.0;
	c->Encoder->fineAdjustment = 0;
	c->Encoder->revolutions = 0;
}

void clockcheckRight() {
 80024cc:	b598      	push	{r3, r4, r7, lr}
 80024ce:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(motor_Right_clock_GPIO_Port, motor_Right_clock_Pin)
 80024d0:	2101      	movs	r1, #1
 80024d2:	482b      	ldr	r0, [pc, #172]	; (8002580 <clockcheckRight+0xb4>)
 80024d4:	f002 ff28 	bl	8005328 <HAL_GPIO_ReadPin>
 80024d8:	4603      	mov	r3, r0
 80024da:	461c      	mov	r4, r3
			== HAL_GPIO_ReadPin(Motor_counterclock_right_GPIO_Port,
 80024dc:	2110      	movs	r1, #16
 80024de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024e2:	f002 ff21 	bl	8005328 <HAL_GPIO_ReadPin>
 80024e6:	4603      	mov	r3, r0
	if (HAL_GPIO_ReadPin(motor_Right_clock_GPIO_Port, motor_Right_clock_Pin)
 80024e8:	429c      	cmp	r4, r3
 80024ea:	d122      	bne.n	8002532 <clockcheckRight+0x66>
					Motor_counterclock_right_Pin)) {
		controllerR.motor->direction = -1;
 80024ec:	4b25      	ldr	r3, [pc, #148]	; (8002584 <clockcheckRight+0xb8>)
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	22ff      	movs	r2, #255	; 0xff
 80024f2:	705a      	strb	r2, [r3, #1]
		controllerR.Encoder->fineAdjustment = abs(
				(controllerR.Encoder->fineAdjustment
 80024f4:	4b23      	ldr	r3, [pc, #140]	; (8002584 <clockcheckRight+0xb8>)
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80024fc:	461a      	mov	r2, r3
						+ controllerR.motor->direction) % TOTAL_WHEEL_TICKS);
 80024fe:	4b21      	ldr	r3, [pc, #132]	; (8002584 <clockcheckRight+0xb8>)
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002506:	441a      	add	r2, r3
 8002508:	4b1f      	ldr	r3, [pc, #124]	; (8002588 <clockcheckRight+0xbc>)
 800250a:	fb83 1302 	smull	r1, r3, r3, r2
 800250e:	4413      	add	r3, r2
 8002510:	1299      	asrs	r1, r3, #10
 8002512:	17d3      	asrs	r3, r2, #31
 8002514:	1ac9      	subs	r1, r1, r3
 8002516:	460b      	mov	r3, r1
 8002518:	011b      	lsls	r3, r3, #4
 800251a:	1a5b      	subs	r3, r3, r1
 800251c:	01db      	lsls	r3, r3, #7
 800251e:	1ad1      	subs	r1, r2, r3
		controllerR.Encoder->fineAdjustment = abs(
 8002520:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 8002524:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 8002528:	4b16      	ldr	r3, [pc, #88]	; (8002584 <clockcheckRight+0xb8>)
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	b212      	sxth	r2, r2
 800252e:	811a      	strh	r2, [r3, #8]
 8002530:	e020      	b.n	8002574 <clockcheckRight+0xa8>
	} else {
		controllerR.motor->direction = 1;
 8002532:	4b14      	ldr	r3, [pc, #80]	; (8002584 <clockcheckRight+0xb8>)
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	2201      	movs	r2, #1
 8002538:	705a      	strb	r2, [r3, #1]
		controllerR.Encoder->fineAdjustment = abs(
				(controllerR.Encoder->fineAdjustment
 800253a:	4b12      	ldr	r3, [pc, #72]	; (8002584 <clockcheckRight+0xb8>)
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002542:	461a      	mov	r2, r3
						+ controllerR.motor->direction)
 8002544:	4b0f      	ldr	r3, [pc, #60]	; (8002584 <clockcheckRight+0xb8>)
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800254c:	18d1      	adds	r1, r2, r3
						% (TOTAL_WHEEL_TICKS + 1));
 800254e:	4b0f      	ldr	r3, [pc, #60]	; (800258c <clockcheckRight+0xc0>)
 8002550:	fb83 2301 	smull	r2, r3, r3, r1
 8002554:	115a      	asrs	r2, r3, #5
 8002556:	17cb      	asrs	r3, r1, #31
 8002558:	1ad2      	subs	r2, r2, r3
 800255a:	4613      	mov	r3, r2
 800255c:	011b      	lsls	r3, r3, #4
 800255e:	1a9b      	subs	r3, r3, r2
 8002560:	01db      	lsls	r3, r3, #7
 8002562:	4413      	add	r3, r2
 8002564:	1aca      	subs	r2, r1, r3
		controllerR.Encoder->fineAdjustment = abs(
 8002566:	2a00      	cmp	r2, #0
 8002568:	bfb8      	it	lt
 800256a:	4252      	neglt	r2, r2
 800256c:	4b05      	ldr	r3, [pc, #20]	; (8002584 <clockcheckRight+0xb8>)
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	b212      	sxth	r2, r2
 8002572:	811a      	strh	r2, [r3, #8]
	}

	checkRevolutions(&controllerR);
 8002574:	4803      	ldr	r0, [pc, #12]	; (8002584 <clockcheckRight+0xb8>)
 8002576:	f000 f931 	bl	80027dc <checkRevolutions>
}
 800257a:	bf00      	nop
 800257c:	bd98      	pop	{r3, r4, r7, pc}
 800257e:	bf00      	nop
 8002580:	48000400 	.word	0x48000400
 8002584:	20000670 	.word	0x20000670
 8002588:	88888889 	.word	0x88888889
 800258c:	0443b2b5 	.word	0x0443b2b5

08002590 <counterclockcheckRight>:

void counterclockcheckRight() {
 8002590:	b598      	push	{r3, r4, r7, lr}
 8002592:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(motor_Right_clock_GPIO_Port, motor_Right_clock_Pin)
 8002594:	2101      	movs	r1, #1
 8002596:	482b      	ldr	r0, [pc, #172]	; (8002644 <counterclockcheckRight+0xb4>)
 8002598:	f002 fec6 	bl	8005328 <HAL_GPIO_ReadPin>
 800259c:	4603      	mov	r3, r0
 800259e:	461c      	mov	r4, r3
			== HAL_GPIO_ReadPin(Motor_counterclock_right_GPIO_Port,
 80025a0:	2110      	movs	r1, #16
 80025a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025a6:	f002 febf 	bl	8005328 <HAL_GPIO_ReadPin>
 80025aa:	4603      	mov	r3, r0
	if (HAL_GPIO_ReadPin(motor_Right_clock_GPIO_Port, motor_Right_clock_Pin)
 80025ac:	429c      	cmp	r4, r3
 80025ae:	d121      	bne.n	80025f4 <counterclockcheckRight+0x64>
					Motor_counterclock_right_Pin)) {
		controllerR.motor->direction = 1;
 80025b0:	4b25      	ldr	r3, [pc, #148]	; (8002648 <counterclockcheckRight+0xb8>)
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	2201      	movs	r2, #1
 80025b6:	705a      	strb	r2, [r3, #1]
		controllerR.Encoder->fineAdjustment = abs(
				(controllerR.Encoder->fineAdjustment
 80025b8:	4b23      	ldr	r3, [pc, #140]	; (8002648 <counterclockcheckRight+0xb8>)
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80025c0:	461a      	mov	r2, r3
						+ controllerR.motor->direction)
 80025c2:	4b21      	ldr	r3, [pc, #132]	; (8002648 <counterclockcheckRight+0xb8>)
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80025ca:	18d1      	adds	r1, r2, r3
						% (TOTAL_WHEEL_TICKS + 1));
 80025cc:	4b1f      	ldr	r3, [pc, #124]	; (800264c <counterclockcheckRight+0xbc>)
 80025ce:	fb83 2301 	smull	r2, r3, r3, r1
 80025d2:	115a      	asrs	r2, r3, #5
 80025d4:	17cb      	asrs	r3, r1, #31
 80025d6:	1ad2      	subs	r2, r2, r3
 80025d8:	4613      	mov	r3, r2
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	1a9b      	subs	r3, r3, r2
 80025de:	01db      	lsls	r3, r3, #7
 80025e0:	4413      	add	r3, r2
 80025e2:	1aca      	subs	r2, r1, r3
		controllerR.Encoder->fineAdjustment = abs(
 80025e4:	2a00      	cmp	r2, #0
 80025e6:	bfb8      	it	lt
 80025e8:	4252      	neglt	r2, r2
 80025ea:	4b17      	ldr	r3, [pc, #92]	; (8002648 <counterclockcheckRight+0xb8>)
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	b212      	sxth	r2, r2
 80025f0:	811a      	strh	r2, [r3, #8]
 80025f2:	e021      	b.n	8002638 <counterclockcheckRight+0xa8>
	} else {
		controllerR.motor->direction = -1;
 80025f4:	4b14      	ldr	r3, [pc, #80]	; (8002648 <counterclockcheckRight+0xb8>)
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	22ff      	movs	r2, #255	; 0xff
 80025fa:	705a      	strb	r2, [r3, #1]
		controllerR.Encoder->fineAdjustment = abs(
				(controllerR.Encoder->fineAdjustment
 80025fc:	4b12      	ldr	r3, [pc, #72]	; (8002648 <counterclockcheckRight+0xb8>)
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002604:	461a      	mov	r2, r3
						+ controllerR.motor->direction) % TOTAL_WHEEL_TICKS);
 8002606:	4b10      	ldr	r3, [pc, #64]	; (8002648 <counterclockcheckRight+0xb8>)
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800260e:	441a      	add	r2, r3
 8002610:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <counterclockcheckRight+0xc0>)
 8002612:	fb83 1302 	smull	r1, r3, r3, r2
 8002616:	4413      	add	r3, r2
 8002618:	1299      	asrs	r1, r3, #10
 800261a:	17d3      	asrs	r3, r2, #31
 800261c:	1ac9      	subs	r1, r1, r3
 800261e:	460b      	mov	r3, r1
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	1a5b      	subs	r3, r3, r1
 8002624:	01db      	lsls	r3, r3, #7
 8002626:	1ad1      	subs	r1, r2, r3
		controllerR.Encoder->fineAdjustment = abs(
 8002628:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 800262c:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 8002630:	4b05      	ldr	r3, [pc, #20]	; (8002648 <counterclockcheckRight+0xb8>)
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	b212      	sxth	r2, r2
 8002636:	811a      	strh	r2, [r3, #8]
	}

	checkRevolutions(&controllerR);
 8002638:	4803      	ldr	r0, [pc, #12]	; (8002648 <counterclockcheckRight+0xb8>)
 800263a:	f000 f8cf 	bl	80027dc <checkRevolutions>
}
 800263e:	bf00      	nop
 8002640:	bd98      	pop	{r3, r4, r7, pc}
 8002642:	bf00      	nop
 8002644:	48000400 	.word	0x48000400
 8002648:	20000670 	.word	0x20000670
 800264c:	0443b2b5 	.word	0x0443b2b5
 8002650:	88888889 	.word	0x88888889

08002654 <clockcheckLeft>:

void clockcheckLeft() {
 8002654:	b598      	push	{r3, r4, r7, lr}
 8002656:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(Motor_Left_clock_GPIO_Port, Motor_Left_clock_Pin)
 8002658:	2120      	movs	r1, #32
 800265a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800265e:	f002 fe63 	bl	8005328 <HAL_GPIO_ReadPin>
 8002662:	4603      	mov	r3, r0
 8002664:	461c      	mov	r4, r3
			== HAL_GPIO_ReadPin(Motor_left_counterclock_GPIO_Port,
 8002666:	2102      	movs	r1, #2
 8002668:	4827      	ldr	r0, [pc, #156]	; (8002708 <clockcheckLeft+0xb4>)
 800266a:	f002 fe5d 	bl	8005328 <HAL_GPIO_ReadPin>
 800266e:	4603      	mov	r3, r0
	if (HAL_GPIO_ReadPin(Motor_Left_clock_GPIO_Port, Motor_Left_clock_Pin)
 8002670:	429c      	cmp	r4, r3
 8002672:	d122      	bne.n	80026ba <clockcheckLeft+0x66>
					Motor_left_counterclock_Pin)) {
		controllerL.motor->direction = -1;
 8002674:	4b25      	ldr	r3, [pc, #148]	; (800270c <clockcheckLeft+0xb8>)
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	22ff      	movs	r2, #255	; 0xff
 800267a:	705a      	strb	r2, [r3, #1]
		controllerL.Encoder->fineAdjustment = abs(
				(controllerL.Encoder->fineAdjustment
 800267c:	4b23      	ldr	r3, [pc, #140]	; (800270c <clockcheckLeft+0xb8>)
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002684:	461a      	mov	r2, r3
						+ controllerL.motor->direction) % TOTAL_WHEEL_TICKS);
 8002686:	4b21      	ldr	r3, [pc, #132]	; (800270c <clockcheckLeft+0xb8>)
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800268e:	441a      	add	r2, r3
 8002690:	4b1f      	ldr	r3, [pc, #124]	; (8002710 <clockcheckLeft+0xbc>)
 8002692:	fb83 1302 	smull	r1, r3, r3, r2
 8002696:	4413      	add	r3, r2
 8002698:	1299      	asrs	r1, r3, #10
 800269a:	17d3      	asrs	r3, r2, #31
 800269c:	1ac9      	subs	r1, r1, r3
 800269e:	460b      	mov	r3, r1
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	1a5b      	subs	r3, r3, r1
 80026a4:	01db      	lsls	r3, r3, #7
 80026a6:	1ad1      	subs	r1, r2, r3
		controllerL.Encoder->fineAdjustment = abs(
 80026a8:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 80026ac:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 80026b0:	4b16      	ldr	r3, [pc, #88]	; (800270c <clockcheckLeft+0xb8>)
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	b212      	sxth	r2, r2
 80026b6:	811a      	strh	r2, [r3, #8]
 80026b8:	e020      	b.n	80026fc <clockcheckLeft+0xa8>
	} else {
		controllerL.motor->direction = 1;
 80026ba:	4b14      	ldr	r3, [pc, #80]	; (800270c <clockcheckLeft+0xb8>)
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	2201      	movs	r2, #1
 80026c0:	705a      	strb	r2, [r3, #1]
		controllerL.Encoder->fineAdjustment = abs(
				(controllerL.Encoder->fineAdjustment
 80026c2:	4b12      	ldr	r3, [pc, #72]	; (800270c <clockcheckLeft+0xb8>)
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80026ca:	461a      	mov	r2, r3
						+ controllerL.motor->direction)
 80026cc:	4b0f      	ldr	r3, [pc, #60]	; (800270c <clockcheckLeft+0xb8>)
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80026d4:	18d1      	adds	r1, r2, r3
						% (TOTAL_WHEEL_TICKS + 1));
 80026d6:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <clockcheckLeft+0xc0>)
 80026d8:	fb83 2301 	smull	r2, r3, r3, r1
 80026dc:	115a      	asrs	r2, r3, #5
 80026de:	17cb      	asrs	r3, r1, #31
 80026e0:	1ad2      	subs	r2, r2, r3
 80026e2:	4613      	mov	r3, r2
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	1a9b      	subs	r3, r3, r2
 80026e8:	01db      	lsls	r3, r3, #7
 80026ea:	4413      	add	r3, r2
 80026ec:	1aca      	subs	r2, r1, r3
		controllerL.Encoder->fineAdjustment = abs(
 80026ee:	2a00      	cmp	r2, #0
 80026f0:	bfb8      	it	lt
 80026f2:	4252      	neglt	r2, r2
 80026f4:	4b05      	ldr	r3, [pc, #20]	; (800270c <clockcheckLeft+0xb8>)
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	b212      	sxth	r2, r2
 80026fa:	811a      	strh	r2, [r3, #8]
	}

	checkRevolutions(&controllerL);
 80026fc:	4803      	ldr	r0, [pc, #12]	; (800270c <clockcheckLeft+0xb8>)
 80026fe:	f000 f86d 	bl	80027dc <checkRevolutions>
}
 8002702:	bf00      	nop
 8002704:	bd98      	pop	{r3, r4, r7, pc}
 8002706:	bf00      	nop
 8002708:	48000400 	.word	0x48000400
 800270c:	200005a4 	.word	0x200005a4
 8002710:	88888889 	.word	0x88888889
 8002714:	0443b2b5 	.word	0x0443b2b5

08002718 <counterclockcheckLeft>:

void counterclockcheckLeft() {
 8002718:	b598      	push	{r3, r4, r7, lr}
 800271a:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(Motor_Left_clock_GPIO_Port, Motor_Left_clock_Pin)
 800271c:	2120      	movs	r1, #32
 800271e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002722:	f002 fe01 	bl	8005328 <HAL_GPIO_ReadPin>
 8002726:	4603      	mov	r3, r0
 8002728:	461c      	mov	r4, r3
			== HAL_GPIO_ReadPin(Motor_left_counterclock_GPIO_Port,
 800272a:	2102      	movs	r1, #2
 800272c:	4827      	ldr	r0, [pc, #156]	; (80027cc <counterclockcheckLeft+0xb4>)
 800272e:	f002 fdfb 	bl	8005328 <HAL_GPIO_ReadPin>
 8002732:	4603      	mov	r3, r0
	if (HAL_GPIO_ReadPin(Motor_Left_clock_GPIO_Port, Motor_Left_clock_Pin)
 8002734:	429c      	cmp	r4, r3
 8002736:	d121      	bne.n	800277c <counterclockcheckLeft+0x64>
					Motor_left_counterclock_Pin)) {
		controllerL.motor->direction = 1;
 8002738:	4b25      	ldr	r3, [pc, #148]	; (80027d0 <counterclockcheckLeft+0xb8>)
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	2201      	movs	r2, #1
 800273e:	705a      	strb	r2, [r3, #1]
		controllerL.Encoder->fineAdjustment = abs(
				(controllerL.Encoder->fineAdjustment
 8002740:	4b23      	ldr	r3, [pc, #140]	; (80027d0 <counterclockcheckLeft+0xb8>)
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002748:	461a      	mov	r2, r3
						+ controllerL.motor->direction)
 800274a:	4b21      	ldr	r3, [pc, #132]	; (80027d0 <counterclockcheckLeft+0xb8>)
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002752:	18d1      	adds	r1, r2, r3
						% (TOTAL_WHEEL_TICKS + 1));
 8002754:	4b1f      	ldr	r3, [pc, #124]	; (80027d4 <counterclockcheckLeft+0xbc>)
 8002756:	fb83 2301 	smull	r2, r3, r3, r1
 800275a:	115a      	asrs	r2, r3, #5
 800275c:	17cb      	asrs	r3, r1, #31
 800275e:	1ad2      	subs	r2, r2, r3
 8002760:	4613      	mov	r3, r2
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	1a9b      	subs	r3, r3, r2
 8002766:	01db      	lsls	r3, r3, #7
 8002768:	4413      	add	r3, r2
 800276a:	1aca      	subs	r2, r1, r3
		controllerL.Encoder->fineAdjustment = abs(
 800276c:	2a00      	cmp	r2, #0
 800276e:	bfb8      	it	lt
 8002770:	4252      	neglt	r2, r2
 8002772:	4b17      	ldr	r3, [pc, #92]	; (80027d0 <counterclockcheckLeft+0xb8>)
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	b212      	sxth	r2, r2
 8002778:	811a      	strh	r2, [r3, #8]
 800277a:	e021      	b.n	80027c0 <counterclockcheckLeft+0xa8>
	} else {
		controllerL.motor->direction = -1;
 800277c:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <counterclockcheckLeft+0xb8>)
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	22ff      	movs	r2, #255	; 0xff
 8002782:	705a      	strb	r2, [r3, #1]
		controllerL.Encoder->fineAdjustment = abs(
				(controllerL.Encoder->fineAdjustment
 8002784:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <counterclockcheckLeft+0xb8>)
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800278c:	461a      	mov	r2, r3
						+ controllerL.motor->direction) % TOTAL_WHEEL_TICKS);
 800278e:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <counterclockcheckLeft+0xb8>)
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002796:	441a      	add	r2, r3
 8002798:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <counterclockcheckLeft+0xc0>)
 800279a:	fb83 1302 	smull	r1, r3, r3, r2
 800279e:	4413      	add	r3, r2
 80027a0:	1299      	asrs	r1, r3, #10
 80027a2:	17d3      	asrs	r3, r2, #31
 80027a4:	1ac9      	subs	r1, r1, r3
 80027a6:	460b      	mov	r3, r1
 80027a8:	011b      	lsls	r3, r3, #4
 80027aa:	1a5b      	subs	r3, r3, r1
 80027ac:	01db      	lsls	r3, r3, #7
 80027ae:	1ad1      	subs	r1, r2, r3
		controllerL.Encoder->fineAdjustment = abs(
 80027b0:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 80027b4:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 80027b8:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <counterclockcheckLeft+0xb8>)
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	b212      	sxth	r2, r2
 80027be:	811a      	strh	r2, [r3, #8]
	}

	checkRevolutions(&controllerL);
 80027c0:	4803      	ldr	r0, [pc, #12]	; (80027d0 <counterclockcheckLeft+0xb8>)
 80027c2:	f000 f80b 	bl	80027dc <checkRevolutions>
}
 80027c6:	bf00      	nop
 80027c8:	bd98      	pop	{r3, r4, r7, pc}
 80027ca:	bf00      	nop
 80027cc:	48000400 	.word	0x48000400
 80027d0:	200005a4 	.word	0x200005a4
 80027d4:	0443b2b5 	.word	0x0443b2b5
 80027d8:	88888889 	.word	0x88888889

080027dc <checkRevolutions>:

void checkRevolutions(MotorController *c) {
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
	if (c->Encoder->fineAdjustment == 0 && c->motor->direction == 1) {
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d116      	bne.n	800281e <checkRevolutions+0x42>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d110      	bne.n	800281e <checkRevolutions+0x42>
		c->Encoder->revolutions = c->Encoder->revolutions + c->motor->direction;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800280a:	4619      	mov	r1, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	440a      	add	r2, r1
 8002812:	60da      	str	r2, [r3, #12]
		c->Encoder->fineAdjustment = 1;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	2201      	movs	r2, #1
 800281a:	811a      	strh	r2, [r3, #8]
	 fineadjustmentRight = 1;
	 } else if (fineadjustmentRight == 0 && directionRight == -1) {
	 revolutionRight = revolutionRight + directionRight;
	 fineadjustmentRight = TOTAL_WHEEL_TICKS;
	 }*/
}
 800281c:	e01d      	b.n	800285a <checkRevolutions+0x7e>
	} else if (c->Encoder->fineAdjustment == 0 && c->motor->direction == -1) {
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d117      	bne.n	800285a <checkRevolutions+0x7e>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002832:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002836:	d110      	bne.n	800285a <checkRevolutions+0x7e>
		c->Encoder->revolutions = c->Encoder->revolutions + c->motor->direction;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002846:	4619      	mov	r1, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	440a      	add	r2, r1
 800284e:	60da      	str	r2, [r3, #12]
		c->Encoder->fineAdjustment = TOTAL_WHEEL_TICKS;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8002858:	811a      	strh	r2, [r3, #8]
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
	...

08002868 <calcOutput>:

void calcOutput(MotorEncoder *e) {
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
	e->output = e->revolutions
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
			+ ((float) e->fineAdjustment / TOTAL_WHEEL_TICKS);
 8002874:	ee07 3a90 	vmov	s15, r3
 8002878:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002882:	ee07 3a90 	vmov	s15, r3
 8002886:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800288a:	ed9f 6a07 	vldr	s12, [pc, #28]	; 80028a8 <calcOutput+0x40>
 800288e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002892:	ee77 7a27 	vadd.f32	s15, s14, s15
	e->output = e->revolutions
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	edc3 7a04 	vstr	s15, [r3, #16]
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	44f00000 	.word	0x44f00000

080028ac <calculateError>:

void calculateError(MotorController *c) {
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
	c->lastError = c->reference - c->measAngVel;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	ed93 7a00 	vldr	s14, [r3]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80028c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
	...

080028d8 <nextVoltage>:

void nextVoltage(MotorController *c) {
 80028d8:	b5b0      	push	{r4, r5, r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
	c->voltage = c->lastError * 2.82 * controllerPeriod + c->voltage;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fd fdd7 	bl	8000498 <__aeabi_f2d>
 80028ea:	a31a      	add	r3, pc, #104	; (adr r3, 8002954 <nextVoltage+0x7c>)
 80028ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f0:	f7fd fe2a 	bl	8000548 <__aeabi_dmul>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4614      	mov	r4, r2
 80028fa:	461d      	mov	r5, r3
 80028fc:	4b14      	ldr	r3, [pc, #80]	; (8002950 <nextVoltage+0x78>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f7fd fdc9 	bl	8000498 <__aeabi_f2d>
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	4620      	mov	r0, r4
 800290c:	4629      	mov	r1, r5
 800290e:	f7fd fe1b 	bl	8000548 <__aeabi_dmul>
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	4614      	mov	r4, r2
 8002918:	461d      	mov	r5, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	4618      	mov	r0, r3
 8002920:	f7fd fdba 	bl	8000498 <__aeabi_f2d>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4620      	mov	r0, r4
 800292a:	4629      	mov	r1, r5
 800292c:	f7fd fc56 	bl	80001dc <__adddf3>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4610      	mov	r0, r2
 8002936:	4619      	mov	r1, r3
 8002938:	f7fe f8c8 	bl	8000acc <__aeabi_d2f>
 800293c:	4602      	mov	r2, r0
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	60da      	str	r2, [r3, #12]
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bdb0      	pop	{r4, r5, r7, pc}
 800294a:	bf00      	nop
 800294c:	f3af 8000 	nop.w
 8002950:	20000620 	.word	0x20000620
 8002954:	28f5c28f 	.word	0x28f5c28f
 8002958:	40068f5c 	.word	0x40068f5c
 800295c:	00000000 	.word	0x00000000

08002960 <updateAngularVelocity>:

void updateAngularVelocity(MotorController *c) {
 8002960:	b5b0      	push	{r4, r5, r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
	float deltaAngle = c->Encoder->output * 2 * M_PI - c->Encoder->lastAngle;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002970:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002974:	ee17 0a90 	vmov	r0, s15
 8002978:	f7fd fd8e 	bl	8000498 <__aeabi_f2d>
 800297c:	a323      	add	r3, pc, #140	; (adr r3, 8002a0c <updateAngularVelocity+0xac>)
 800297e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002982:	f7fd fde1 	bl	8000548 <__aeabi_dmul>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	4614      	mov	r4, r2
 800298c:	461d      	mov	r5, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	4618      	mov	r0, r3
 8002996:	f7fd fd7f 	bl	8000498 <__aeabi_f2d>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4620      	mov	r0, r4
 80029a0:	4629      	mov	r1, r5
 80029a2:	f7fd fc19 	bl	80001d8 <__aeabi_dsub>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4610      	mov	r0, r2
 80029ac:	4619      	mov	r1, r3
 80029ae:	f7fe f88d 	bl	8000acc <__aeabi_d2f>
 80029b2:	4603      	mov	r3, r0
 80029b4:	60fb      	str	r3, [r7, #12]
	c->Encoder->lastAngle = c->Encoder->output * 2 * M_PI;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	edd3 7a04 	vldr	s15, [r3, #16]
 80029be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029c2:	ee17 0a90 	vmov	r0, s15
 80029c6:	f7fd fd67 	bl	8000498 <__aeabi_f2d>
 80029ca:	a310      	add	r3, pc, #64	; (adr r3, 8002a0c <updateAngularVelocity+0xac>)
 80029cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d0:	f7fd fdba 	bl	8000548 <__aeabi_dmul>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4610      	mov	r0, r2
 80029da:	4619      	mov	r1, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	695c      	ldr	r4, [r3, #20]
 80029e0:	f7fe f874 	bl	8000acc <__aeabi_d2f>
 80029e4:	4603      	mov	r3, r0
 80029e6:	6063      	str	r3, [r4, #4]
	c->measAngVel = deltaAngle / controllerPeriod;
 80029e8:	4b07      	ldr	r3, [pc, #28]	; (8002a08 <updateAngularVelocity+0xa8>)
 80029ea:	ed93 7a00 	vldr	s14, [r3]
 80029ee:	edd7 6a03 	vldr	s13, [r7, #12]
 80029f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80029fc:	bf00      	nop
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bdb0      	pop	{r4, r5, r7, pc}
 8002a04:	f3af 8000 	nop.w
 8002a08:	20000620 	.word	0x20000620
 8002a0c:	54442d18 	.word	0x54442d18
 8002a10:	400921fb 	.word	0x400921fb

08002a14 <updateDutyCycle>:

void updateDutyCycle(MotorController *c) {
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
	if (c->voltage > 0) {
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a2a:	dd04      	ble.n	8002a36 <updateDutyCycle+0x22>
		c->motor->direction = 1;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	2201      	movs	r2, #1
 8002a32:	705a      	strb	r2, [r3, #1]
 8002a34:	e012      	b.n	8002a5c <updateDutyCycle+0x48>
	} else if (c->voltage < 0){
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a44:	d504      	bpl.n	8002a50 <updateDutyCycle+0x3c>
		c->motor->direction = -1;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	22ff      	movs	r2, #255	; 0xff
 8002a4c:	705a      	strb	r2, [r3, #1]
 8002a4e:	e005      	b.n	8002a5c <updateDutyCycle+0x48>
	} else {
		c->motor->dutyCycle = 0;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	605a      	str	r2, [r3, #4]
		return;
 8002a5a:	e026      	b.n	8002aaa <updateDutyCycle+0x96>
	}

	float pwm = c->voltage / batteryVoltage;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	edd3 6a03 	vldr	s13, [r3, #12]
 8002a62:	4b14      	ldr	r3, [pc, #80]	; (8002ab4 <updateDutyCycle+0xa0>)
 8002a64:	ed93 7a00 	vldr	s14, [r3]
 8002a68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a6c:	edc7 7a03 	vstr	s15, [r7, #12]

	if (pwm < 0) pwm = -pwm;
 8002a70:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a7c:	d505      	bpl.n	8002a8a <updateDutyCycle+0x76>
 8002a7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a82:	eef1 7a67 	vneg.f32	s15, s15
 8002a86:	edc7 7a03 	vstr	s15, [r7, #12]
	if (pwm > 1.0)
 8002a8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a9a:	dd02      	ble.n	8002aa2 <updateDutyCycle+0x8e>
		pwm = 1.0;
 8002a9c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002aa0:	60fb      	str	r3, [r7, #12]
	c->motor->dutyCycle = pwm;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	605a      	str	r2, [r3, #4]
}
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	20000398 	.word	0x20000398

08002ab8 <setDutyCycle>:

void setDutyCycle(MotorController *c) {
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
	if (c->motor->name == 'R') {
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b52      	cmp	r3, #82	; 0x52
 8002ac8:	d136      	bne.n	8002b38 <setDutyCycle+0x80>
		htim1.Instance->CCR1 = (uint32_t) ((htim1.Instance->ARR)
 8002aca:	4b3e      	ldr	r3, [pc, #248]	; (8002bc4 <setDutyCycle+0x10c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
				* c->motor->dutyCycle);
 8002ad0:	ee07 3a90 	vmov	s15, r3
 8002ad4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ae0:	ee67 7a27 	vmul.f32	s15, s14, s15
		htim1.Instance->CCR1 = (uint32_t) ((htim1.Instance->ARR)
 8002ae4:	4b37      	ldr	r3, [pc, #220]	; (8002bc4 <setDutyCycle+0x10c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aec:	ee17 2a90 	vmov	r2, s15
 8002af0:	635a      	str	r2, [r3, #52]	; 0x34

		if (c->motor->direction == 1) {
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d10a      	bne.n	8002b14 <setDutyCycle+0x5c>
			HAL_GPIO_WritePin(DIR_R1_GPIO_Port, DIR_R1_Pin, 1);
 8002afe:	2201      	movs	r2, #1
 8002b00:	2140      	movs	r1, #64	; 0x40
 8002b02:	4831      	ldr	r0, [pc, #196]	; (8002bc8 <setDutyCycle+0x110>)
 8002b04:	f002 fc28 	bl	8005358 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIR_R2_GPIO_Port, DIR_R2_Pin, 0);
 8002b08:	2200      	movs	r2, #0
 8002b0a:	2180      	movs	r1, #128	; 0x80
 8002b0c:	482e      	ldr	r0, [pc, #184]	; (8002bc8 <setDutyCycle+0x110>)
 8002b0e:	f002 fc23 	bl	8005358 <HAL_GPIO_WritePin>
 8002b12:	e054      	b.n	8002bbe <setDutyCycle+0x106>
		} else if (c->motor->direction == -1) {
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b20:	d14d      	bne.n	8002bbe <setDutyCycle+0x106>
			HAL_GPIO_WritePin(DIR_R1_GPIO_Port, DIR_R1_Pin, 0);
 8002b22:	2200      	movs	r2, #0
 8002b24:	2140      	movs	r1, #64	; 0x40
 8002b26:	4828      	ldr	r0, [pc, #160]	; (8002bc8 <setDutyCycle+0x110>)
 8002b28:	f002 fc16 	bl	8005358 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIR_R2_GPIO_Port, DIR_R2_Pin, 1);
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	2180      	movs	r1, #128	; 0x80
 8002b30:	4825      	ldr	r0, [pc, #148]	; (8002bc8 <setDutyCycle+0x110>)
 8002b32:	f002 fc11 	bl	8005358 <HAL_GPIO_WritePin>
 8002b36:	e042      	b.n	8002bbe <setDutyCycle+0x106>
		}
	} else if (c->motor->name == 'L') {
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b4c      	cmp	r3, #76	; 0x4c
 8002b40:	d13c      	bne.n	8002bbc <setDutyCycle+0x104>
		htim1.Instance->CCR2 = (uint32_t) ((htim1.Instance->ARR)
 8002b42:	4b20      	ldr	r3, [pc, #128]	; (8002bc4 <setDutyCycle+0x10c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
				* c->motor->dutyCycle);
 8002b48:	ee07 3a90 	vmov	s15, r3
 8002b4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b58:	ee67 7a27 	vmul.f32	s15, s14, s15
		htim1.Instance->CCR2 = (uint32_t) ((htim1.Instance->ARR)
 8002b5c:	4b19      	ldr	r3, [pc, #100]	; (8002bc4 <setDutyCycle+0x10c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b64:	ee17 2a90 	vmov	r2, s15
 8002b68:	639a      	str	r2, [r3, #56]	; 0x38

		if (c->motor->direction == 1) {
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d10d      	bne.n	8002b92 <setDutyCycle+0xda>
			HAL_GPIO_WritePin(DIR_L1_GPIO_Port, DIR_L1_Pin, 1);
 8002b76:	2201      	movs	r2, #1
 8002b78:	2140      	movs	r1, #64	; 0x40
 8002b7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b7e:	f002 fbeb 	bl	8005358 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIR_L2_GPIO_Port, DIR_L2_Pin, 0);
 8002b82:	2200      	movs	r2, #0
 8002b84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b8c:	f002 fbe4 	bl	8005358 <HAL_GPIO_WritePin>
 8002b90:	e015      	b.n	8002bbe <setDutyCycle+0x106>
		} else if (c->motor->direction == -1) {
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002b9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b9e:	d10e      	bne.n	8002bbe <setDutyCycle+0x106>
			HAL_GPIO_WritePin(DIR_L1_GPIO_Port, DIR_L1_Pin, 0);
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2140      	movs	r1, #64	; 0x40
 8002ba4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ba8:	f002 fbd6 	bl	8005358 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIR_L2_GPIO_Port, DIR_L2_Pin, 1);
 8002bac:	2201      	movs	r2, #1
 8002bae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bb6:	f002 fbcf 	bl	8005358 <HAL_GPIO_WritePin>
 8002bba:	e000      	b.n	8002bbe <setDutyCycle+0x106>
		}
	} else {
		return;
 8002bbc:	bf00      	nop
	}
}
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20000688 	.word	0x20000688
 8002bc8:	48000400 	.word	0x48000400

08002bcc <controller>:

void controller(MotorController *c) {
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
	calcOutput(c->Encoder);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff fe45 	bl	8002868 <calcOutput>

	// Measure the angular velocity (feedback)
	updateAngularVelocity(c);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff febe 	bl	8002960 <updateAngularVelocity>

	// Calculate next voltage according to the controller design
	nextVoltage(c);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff fe77 	bl	80028d8 <nextVoltage>

	// Calculate current error to use for next iteration
	calculateError(c);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7ff fe5e 	bl	80028ac <calculateError>

	// Update the duty cycle
	updateDutyCycle(c);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff ff0f 	bl	8002a14 <updateDutyCycle>

	setDutyCycle(c);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff ff5e 	bl	8002ab8 <setDutyCycle>
}
 8002bfc:	bf00      	nop
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <controlBothMotors>:

void controlBothMotors() {
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
	uart_in_read(&referenceFormatting);
 8002c08:	4805      	ldr	r0, [pc, #20]	; (8002c20 <controlBothMotors+0x1c>)
 8002c0a:	f7ff f91b 	bl	8001e44 <uart_in_read>
	controller(&controllerR);
 8002c0e:	4805      	ldr	r0, [pc, #20]	; (8002c24 <controlBothMotors+0x20>)
 8002c10:	f7ff ffdc 	bl	8002bcc <controller>
	controller(&controllerL);
 8002c14:	4804      	ldr	r0, [pc, #16]	; (8002c28 <controlBothMotors+0x24>)
 8002c16:	f7ff ffd9 	bl	8002bcc <controller>
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	08001fe1 	.word	0x08001fe1
 8002c24:	20000670 	.word	0x20000670
 8002c28:	200005a4 	.word	0x200005a4

08002c2c <UpdateBatteryVoltage>:

void UpdateBatteryVoltage() {
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1); // Start ADC conversion
 8002c32:	480e      	ldr	r0, [pc, #56]	; (8002c6c <UpdateBatteryVoltage+0x40>)
 8002c34:	f001 f888 	bl	8003d48 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY); // Wait for conversion to complete
 8002c38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c3c:	480b      	ldr	r0, [pc, #44]	; (8002c6c <UpdateBatteryVoltage+0x40>)
 8002c3e:	f001 f8e6 	bl	8003e0e <HAL_ADC_PollForConversion>
	uint32_t adc_val = HAL_ADC_GetValue(&hadc1); // Get the ADC value
 8002c42:	480a      	ldr	r0, [pc, #40]	; (8002c6c <UpdateBatteryVoltage+0x40>)
 8002c44:	f001 f972 	bl	8003f2c <HAL_ADC_GetValue>
 8002c48:	6078      	str	r0, [r7, #4]
	batteryVoltage = adc_val * voltageMeasScaling;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	ee07 3a90 	vmov	s15, r3
 8002c50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <UpdateBatteryVoltage+0x44>)
 8002c56:	edd3 7a00 	vldr	s15, [r3]
 8002c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c5e:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <UpdateBatteryVoltage+0x48>)
 8002c60:	edc3 7a00 	vstr	s15, [r3]
}
 8002c64:	bf00      	nop
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	200005bc 	.word	0x200005bc
 8002c70:	20000004 	.word	0x20000004
 8002c74:	20000398 	.word	0x20000398

08002c78 <HAL_I2C_MasterTxCpltCallback>:


void HAL_I2C_MasterTxCpltCallback (I2C_HandleTypeDef * hi2c)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
	MPU_in[0] = MPU_GyroOut;
 8002c80:	2243      	movs	r2, #67	; 0x43
 8002c82:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <HAL_I2C_MasterTxCpltCallback+0x20>)
 8002c84:	701a      	strb	r2, [r3, #0]
	globalDMAFlag = 1;
 8002c86:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <HAL_I2C_MasterTxCpltCallback+0x24>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	701a      	strb	r2, [r3, #0]
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	20000160 	.word	0x20000160
 8002c9c:	20000394 	.word	0x20000394

08002ca0 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback (I2C_HandleTypeDef * hi2c)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  if(globalDMAFlag == 1){
 8002ca8:	4b03      	ldr	r3, [pc, #12]	; (8002cb8 <HAL_I2C_MasterRxCpltCallback+0x18>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
	  //TODO circular buffer for all gyro reads
  }else{
	  //TODO circular buffer for all accel reads
  }
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	20000394 	.word	0x20000394

08002cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cc0:	b672      	cpsid	i
}
 8002cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002cc4:	e7fe      	b.n	8002cc4 <Error_Handler+0x8>
	...

08002cc8 <calcOrientOutput>:
char packedOrientData[50] = { 0 };
uint8_t angularPosition[5] = { 0 };
float angularResolution = 360.0/TOPENCODERRESOLUTION;


void calcOrientOutput() {
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
	 orientAngle = (orientIncrement % TOPENCODERRESOLUTION) * angularResolution; // Antallet af målte inkrementer ganges med hvor stor en grad hver inkrement er
 8002ccc:	4b0f      	ldr	r3, [pc, #60]	; (8002d0c <calcOrientOutput+0x44>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a0f      	ldr	r2, [pc, #60]	; (8002d10 <calcOrientOutput+0x48>)
 8002cd2:	fb82 1203 	smull	r1, r2, r2, r3
 8002cd6:	441a      	add	r2, r3
 8002cd8:	1251      	asrs	r1, r2, #9
 8002cda:	17da      	asrs	r2, r3, #31
 8002cdc:	1a8a      	subs	r2, r1, r2
 8002cde:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8002ce2:	fb01 f202 	mul.w	r2, r1, r2
 8002ce6:	1a9a      	subs	r2, r3, r2
 8002ce8:	ee07 2a90 	vmov	s15, r2
 8002cec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cf0:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <calcOrientOutput+0x4c>)
 8002cf2:	edd3 7a00 	vldr	s15, [r3]
 8002cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cfa:	4b07      	ldr	r3, [pc, #28]	; (8002d18 <calcOrientOutput+0x50>)
 8002cfc:	edc3 7a00 	vstr	s15, [r3]
 }
 8002d00:	bf00      	nop
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	2000041c 	.word	0x2000041c
 8002d10:	b21642c9 	.word	0xb21642c9
 8002d14:	20000008 	.word	0x20000008
 8002d18:	20000420 	.word	0x20000420

08002d1c <packOrient>:

void packOrient() {
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
	uint8_t *angularPointer = &directionOrient;
 8002d22:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <packOrient+0x4c>)
 8002d24:	603b      	str	r3, [r7, #0]
	angularPosition[0] = *(angularPointer);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	781a      	ldrb	r2, [r3, #0]
 8002d2a:	4b10      	ldr	r3, [pc, #64]	; (8002d6c <packOrient+0x50>)
 8002d2c:	701a      	strb	r2, [r3, #0]

	angularPointer = &orientAngle;
 8002d2e:	4b10      	ldr	r3, [pc, #64]	; (8002d70 <packOrient+0x54>)
 8002d30:	603b      	str	r3, [r7, #0]
		for (int x = 1; x < 5 ; x++) {
 8002d32:	2301      	movs	r3, #1
 8002d34:	607b      	str	r3, [r7, #4]
 8002d36:	e00c      	b.n	8002d52 <packOrient+0x36>
		angularPosition[x] = *(angularPointer + (x-1));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	4413      	add	r3, r2
 8002d40:	7819      	ldrb	r1, [r3, #0]
 8002d42:	4a0a      	ldr	r2, [pc, #40]	; (8002d6c <packOrient+0x50>)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4413      	add	r3, r2
 8002d48:	460a      	mov	r2, r1
 8002d4a:	701a      	strb	r2, [r3, #0]
		for (int x = 1; x < 5 ; x++) {
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	607b      	str	r3, [r7, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	ddef      	ble.n	8002d38 <packOrient+0x1c>
	}
}
 8002d58:	bf00      	nop
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	20000419 	.word	0x20000419
 8002d6c:	20000460 	.word	0x20000460
 8002d70:	20000420 	.word	0x20000420

08002d74 <checkOrientClock>:

void checkOrientClock() { //A
 8002d74:	b598      	push	{r3, r4, r7, lr}
 8002d76:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(orientation_clock_GPIO_Port, orientation_clock_Pin)
 8002d78:	2108      	movs	r1, #8
 8002d7a:	4810      	ldr	r0, [pc, #64]	; (8002dbc <checkOrientClock+0x48>)
 8002d7c:	f002 fad4 	bl	8005328 <HAL_GPIO_ReadPin>
 8002d80:	4603      	mov	r3, r0
 8002d82:	461c      	mov	r4, r3
				== HAL_GPIO_ReadPin(orientation_counterclock_GPIO_Port, orientation_counterclock_Pin)) {
 8002d84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d8c:	f002 facc 	bl	8005328 <HAL_GPIO_ReadPin>
 8002d90:	4603      	mov	r3, r0
	if (HAL_GPIO_ReadPin(orientation_clock_GPIO_Port, orientation_clock_Pin)
 8002d92:	429c      	cmp	r4, r3
 8002d94:	d108      	bne.n	8002da8 <checkOrientClock+0x34>
			directionOrient = -1;
 8002d96:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <checkOrientClock+0x4c>)
 8002d98:	22ff      	movs	r2, #255	; 0xff
 8002d9a:	701a      	strb	r2, [r3, #0]
			orientIncrement--;//abs((orientIncrement + directionOrient) % TOOTHRESOLUTION);
 8002d9c:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <checkOrientClock+0x50>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	3b01      	subs	r3, #1
 8002da2:	4a08      	ldr	r2, [pc, #32]	; (8002dc4 <checkOrientClock+0x50>)
 8002da4:	6013      	str	r3, [r2, #0]
			directionOrient = 1;
			orientIncrement++; //= abs((orientIncrement + directionOrient) % (TOOTHRESOLUTION + 1));
		}

		//checkRevolutionsOrient();
}
 8002da6:	e007      	b.n	8002db8 <checkOrientClock+0x44>
			directionOrient = 1;
 8002da8:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <checkOrientClock+0x4c>)
 8002daa:	2201      	movs	r2, #1
 8002dac:	701a      	strb	r2, [r3, #0]
			orientIncrement++; //= abs((orientIncrement + directionOrient) % (TOOTHRESOLUTION + 1));
 8002dae:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <checkOrientClock+0x50>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	3301      	adds	r3, #1
 8002db4:	4a03      	ldr	r2, [pc, #12]	; (8002dc4 <checkOrientClock+0x50>)
 8002db6:	6013      	str	r3, [r2, #0]
}
 8002db8:	bf00      	nop
 8002dba:	bd98      	pop	{r3, r4, r7, pc}
 8002dbc:	48000400 	.word	0x48000400
 8002dc0:	20000419 	.word	0x20000419
 8002dc4:	2000041c 	.word	0x2000041c

08002dc8 <checkOrientCounterClock>:

void checkOrientCounterClock() { //B
 8002dc8:	b598      	push	{r3, r4, r7, lr}
 8002dca:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(orientation_counterclock_GPIO_Port, orientation_counterclock_Pin)
 8002dcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dd4:	f002 faa8 	bl	8005328 <HAL_GPIO_ReadPin>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	461c      	mov	r4, r3
				== HAL_GPIO_ReadPin(orientation_clock_GPIO_Port, orientation_clock_Pin)) {
 8002ddc:	2108      	movs	r1, #8
 8002dde:	480c      	ldr	r0, [pc, #48]	; (8002e10 <checkOrientCounterClock+0x48>)
 8002de0:	f002 faa2 	bl	8005328 <HAL_GPIO_ReadPin>
 8002de4:	4603      	mov	r3, r0
	if (HAL_GPIO_ReadPin(orientation_counterclock_GPIO_Port, orientation_counterclock_Pin)
 8002de6:	429c      	cmp	r4, r3
 8002de8:	d108      	bne.n	8002dfc <checkOrientCounterClock+0x34>
			directionOrient = 1;
 8002dea:	4b0a      	ldr	r3, [pc, #40]	; (8002e14 <checkOrientCounterClock+0x4c>)
 8002dec:	2201      	movs	r2, #1
 8002dee:	701a      	strb	r2, [r3, #0]
			orientIncrement++; //= abs((orientIncrement + directionOrient) % TOOTHRESOLUTION);
 8002df0:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <checkOrientCounterClock+0x50>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	3301      	adds	r3, #1
 8002df6:	4a08      	ldr	r2, [pc, #32]	; (8002e18 <checkOrientCounterClock+0x50>)
 8002df8:	6013      	str	r3, [r2, #0]
			directionOrient = -1;
			orientIncrement--; //= abs((orientIncrement + directionOrient) % (TOOTHRESOLUTION + 1));
		}

		//checkRevolutionsOrient();
}
 8002dfa:	e007      	b.n	8002e0c <checkOrientCounterClock+0x44>
			directionOrient = -1;
 8002dfc:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <checkOrientCounterClock+0x4c>)
 8002dfe:	22ff      	movs	r2, #255	; 0xff
 8002e00:	701a      	strb	r2, [r3, #0]
			orientIncrement--; //= abs((orientIncrement + directionOrient) % (TOOTHRESOLUTION + 1));
 8002e02:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <checkOrientCounterClock+0x50>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	4a03      	ldr	r2, [pc, #12]	; (8002e18 <checkOrientCounterClock+0x50>)
 8002e0a:	6013      	str	r3, [r2, #0]
}
 8002e0c:	bf00      	nop
 8002e0e:	bd98      	pop	{r3, r4, r7, pc}
 8002e10:	48000400 	.word	0x48000400
 8002e14:	20000419 	.word	0x20000419
 8002e18:	2000041c 	.word	0x2000041c

08002e1c <sendOrientData>:
//	else if (orientIncrement == 0 && directionOrient == -1){
//		orientIncrement = TOOTHRESOLUTION;
//	}
//}

void sendOrientData() {
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
	if (spamCheckDirOrient != directionOrient || spamCheckOrientAngle != orientAngle) {
 8002e20:	4b16      	ldr	r3, [pc, #88]	; (8002e7c <sendOrientData+0x60>)
 8002e22:	781a      	ldrb	r2, [r3, #0]
 8002e24:	4b16      	ldr	r3, [pc, #88]	; (8002e80 <sendOrientData+0x64>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d10a      	bne.n	8002e42 <sendOrientData+0x26>
 8002e2c:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <sendOrientData+0x68>)
 8002e2e:	ed93 7a00 	vldr	s14, [r3]
 8002e32:	4b15      	ldr	r3, [pc, #84]	; (8002e88 <sendOrientData+0x6c>)
 8002e34:	edd3 7a00 	vldr	s15, [r3]
 8002e38:	eeb4 7a67 	vcmp.f32	s14, s15
 8002e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e40:	d01a      	beq.n	8002e78 <sendOrientData+0x5c>
		spamCheckDirOrient = directionOrient;
 8002e42:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <sendOrientData+0x64>)
 8002e44:	781a      	ldrb	r2, [r3, #0]
 8002e46:	4b0d      	ldr	r3, [pc, #52]	; (8002e7c <sendOrientData+0x60>)
 8002e48:	701a      	strb	r2, [r3, #0]
		spamCheckOrientAngle = orientAngle;
 8002e4a:	4b0f      	ldr	r3, [pc, #60]	; (8002e88 <sendOrientData+0x6c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a0d      	ldr	r2, [pc, #52]	; (8002e84 <sendOrientData+0x68>)
 8002e50:	6013      	str	r3, [r2, #0]
		packOrient();
 8002e52:	f7ff ff63 	bl	8002d1c <packOrient>
		memset(packedOrientData, 0, sizeof(packedOrientData));
 8002e56:	2232      	movs	r2, #50	; 0x32
 8002e58:	2100      	movs	r1, #0
 8002e5a:	480c      	ldr	r0, [pc, #48]	; (8002e8c <sendOrientData+0x70>)
 8002e5c:	f007 fc78 	bl	800a750 <memset>

		to_frame(packedOrientData, angularPosition, ORIENTID);
 8002e60:	2203      	movs	r2, #3
 8002e62:	490b      	ldr	r1, [pc, #44]	; (8002e90 <sendOrientData+0x74>)
 8002e64:	4809      	ldr	r0, [pc, #36]	; (8002e8c <sendOrientData+0x70>)
 8002e66:	f7fe fa7b 	bl	8001360 <to_frame>
		HAL_UART_Transmit(&huart2, packedOrientData, sizeof(packedOrientData), HAL_MAX_DELAY);
 8002e6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e6e:	2232      	movs	r2, #50	; 0x32
 8002e70:	4906      	ldr	r1, [pc, #24]	; (8002e8c <sendOrientData+0x70>)
 8002e72:	4808      	ldr	r0, [pc, #32]	; (8002e94 <sendOrientData+0x78>)
 8002e74:	f006 fe6e 	bl	8009b54 <HAL_UART_Transmit>
	}
}
 8002e78:	bf00      	nop
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20000424 	.word	0x20000424
 8002e80:	20000419 	.word	0x20000419
 8002e84:	20000428 	.word	0x20000428
 8002e88:	20000420 	.word	0x20000420
 8002e8c:	2000042c 	.word	0x2000042c
 8002e90:	20000460 	.word	0x20000460
 8002e94:	20000720 	.word	0x20000720

08002e98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e9e:	4b0f      	ldr	r3, [pc, #60]	; (8002edc <HAL_MspInit+0x44>)
 8002ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea2:	4a0e      	ldr	r2, [pc, #56]	; (8002edc <HAL_MspInit+0x44>)
 8002ea4:	f043 0301 	orr.w	r3, r3, #1
 8002ea8:	6613      	str	r3, [r2, #96]	; 0x60
 8002eaa:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <HAL_MspInit+0x44>)
 8002eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	607b      	str	r3, [r7, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eb6:	4b09      	ldr	r3, [pc, #36]	; (8002edc <HAL_MspInit+0x44>)
 8002eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eba:	4a08      	ldr	r2, [pc, #32]	; (8002edc <HAL_MspInit+0x44>)
 8002ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ec2:	4b06      	ldr	r3, [pc, #24]	; (8002edc <HAL_MspInit+0x44>)
 8002ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eca:	603b      	str	r3, [r7, #0]
 8002ecc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40021000 	.word	0x40021000

08002ee0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b09e      	sub	sp, #120	; 0x78
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	605a      	str	r2, [r3, #4]
 8002ef2:	609a      	str	r2, [r3, #8]
 8002ef4:	60da      	str	r2, [r3, #12]
 8002ef6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ef8:	f107 0310 	add.w	r3, r7, #16
 8002efc:	2254      	movs	r2, #84	; 0x54
 8002efe:	2100      	movs	r1, #0
 8002f00:	4618      	mov	r0, r3
 8002f02:	f007 fc25 	bl	800a750 <memset>
  if(hadc->Instance==ADC1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a25      	ldr	r2, [pc, #148]	; (8002fa0 <HAL_ADC_MspInit+0xc0>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d143      	bne.n	8002f98 <HAL_ADC_MspInit+0xb8>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002f10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f14:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002f16:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002f1a:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002f20:	2301      	movs	r3, #1
 8002f22:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8002f24:	2310      	movs	r3, #16
 8002f26:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002f28:	2307      	movs	r3, #7
 8002f2a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 8002f30:	2308      	movs	r3, #8
 8002f32:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002f34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f38:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f3a:	f107 0310 	add.w	r3, r7, #16
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f005 f9c0 	bl	80082c4 <HAL_RCCEx_PeriphCLKConfig>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8002f4a:	f7ff feb7 	bl	8002cbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002f4e:	4b15      	ldr	r3, [pc, #84]	; (8002fa4 <HAL_ADC_MspInit+0xc4>)
 8002f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f52:	4a14      	ldr	r2, [pc, #80]	; (8002fa4 <HAL_ADC_MspInit+0xc4>)
 8002f54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f5a:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <HAL_ADC_MspInit+0xc4>)
 8002f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f66:	4b0f      	ldr	r3, [pc, #60]	; (8002fa4 <HAL_ADC_MspInit+0xc4>)
 8002f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6a:	4a0e      	ldr	r2, [pc, #56]	; (8002fa4 <HAL_ADC_MspInit+0xc4>)
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f72:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <HAL_ADC_MspInit+0xc4>)
 8002f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	60bb      	str	r3, [r7, #8]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = BatteryVoltage_Pin;
 8002f7e:	2308      	movs	r3, #8
 8002f80:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002f82:	230b      	movs	r3, #11
 8002f84:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BatteryVoltage_GPIO_Port, &GPIO_InitStruct);
 8002f8a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002f8e:	4619      	mov	r1, r3
 8002f90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f94:	f002 f85e 	bl	8005054 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002f98:	bf00      	nop
 8002f9a:	3778      	adds	r7, #120	; 0x78
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	50040000 	.word	0x50040000
 8002fa4:	40021000 	.word	0x40021000

08002fa8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b0a0      	sub	sp, #128	; 0x80
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	605a      	str	r2, [r3, #4]
 8002fba:	609a      	str	r2, [r3, #8]
 8002fbc:	60da      	str	r2, [r3, #12]
 8002fbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fc0:	f107 0318 	add.w	r3, r7, #24
 8002fc4:	2254      	movs	r2, #84	; 0x54
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f007 fbc1 	bl	800a750 <memset>
  if(hi2c->Instance==I2C3)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a57      	ldr	r2, [pc, #348]	; (8003130 <HAL_I2C_MspInit+0x188>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	f040 80a6 	bne.w	8003126 <HAL_I2C_MspInit+0x17e>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002fda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fde:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fe4:	f107 0318 	add.w	r3, r7, #24
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f005 f96b 	bl	80082c4 <HAL_RCCEx_PeriphCLKConfig>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8002ff4:	f7ff fe62 	bl	8002cbc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff8:	4b4e      	ldr	r3, [pc, #312]	; (8003134 <HAL_I2C_MspInit+0x18c>)
 8002ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffc:	4a4d      	ldr	r2, [pc, #308]	; (8003134 <HAL_I2C_MspInit+0x18c>)
 8002ffe:	f043 0301 	orr.w	r3, r3, #1
 8003002:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003004:	4b4b      	ldr	r3, [pc, #300]	; (8003134 <HAL_I2C_MspInit+0x18c>)
 8003006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	617b      	str	r3, [r7, #20]
 800300e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003010:	4b48      	ldr	r3, [pc, #288]	; (8003134 <HAL_I2C_MspInit+0x18c>)
 8003012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003014:	4a47      	ldr	r2, [pc, #284]	; (8003134 <HAL_I2C_MspInit+0x18c>)
 8003016:	f043 0302 	orr.w	r3, r3, #2
 800301a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800301c:	4b45      	ldr	r3, [pc, #276]	; (8003134 <HAL_I2C_MspInit+0x18c>)
 800301e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	613b      	str	r3, [r7, #16]
 8003026:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB4 (NJTRST)     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003028:	2380      	movs	r3, #128	; 0x80
 800302a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800302c:	2312      	movs	r3, #18
 800302e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003030:	2300      	movs	r3, #0
 8003032:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003034:	2303      	movs	r3, #3
 8003036:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003038:	2304      	movs	r3, #4
 800303a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800303c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003040:	4619      	mov	r1, r3
 8003042:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003046:	f002 f805 	bl	8005054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800304a:	2310      	movs	r3, #16
 800304c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800304e:	2312      	movs	r3, #18
 8003050:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003052:	2300      	movs	r3, #0
 8003054:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003056:	2303      	movs	r3, #3
 8003058:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800305a:	2304      	movs	r3, #4
 800305c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800305e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003062:	4619      	mov	r1, r3
 8003064:	4834      	ldr	r0, [pc, #208]	; (8003138 <HAL_I2C_MspInit+0x190>)
 8003066:	f001 fff5 	bl	8005054 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800306a:	4b32      	ldr	r3, [pc, #200]	; (8003134 <HAL_I2C_MspInit+0x18c>)
 800306c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306e:	4a31      	ldr	r2, [pc, #196]	; (8003134 <HAL_I2C_MspInit+0x18c>)
 8003070:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003074:	6593      	str	r3, [r2, #88]	; 0x58
 8003076:	4b2f      	ldr	r3, [pc, #188]	; (8003134 <HAL_I2C_MspInit+0x18c>)
 8003078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	68fb      	ldr	r3, [r7, #12]

    /* I2C3 DMA Init */
    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Channel2;
 8003082:	4b2e      	ldr	r3, [pc, #184]	; (800313c <HAL_I2C_MspInit+0x194>)
 8003084:	4a2e      	ldr	r2, [pc, #184]	; (8003140 <HAL_I2C_MspInit+0x198>)
 8003086:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Request = DMA_REQUEST_3;
 8003088:	4b2c      	ldr	r3, [pc, #176]	; (800313c <HAL_I2C_MspInit+0x194>)
 800308a:	2203      	movs	r2, #3
 800308c:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800308e:	4b2b      	ldr	r3, [pc, #172]	; (800313c <HAL_I2C_MspInit+0x194>)
 8003090:	2210      	movs	r2, #16
 8003092:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003094:	4b29      	ldr	r3, [pc, #164]	; (800313c <HAL_I2C_MspInit+0x194>)
 8003096:	2200      	movs	r2, #0
 8003098:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800309a:	4b28      	ldr	r3, [pc, #160]	; (800313c <HAL_I2C_MspInit+0x194>)
 800309c:	2280      	movs	r2, #128	; 0x80
 800309e:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030a0:	4b26      	ldr	r3, [pc, #152]	; (800313c <HAL_I2C_MspInit+0x194>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030a6:	4b25      	ldr	r3, [pc, #148]	; (800313c <HAL_I2C_MspInit+0x194>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 80030ac:	4b23      	ldr	r3, [pc, #140]	; (800313c <HAL_I2C_MspInit+0x194>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030b2:	4b22      	ldr	r3, [pc, #136]	; (800313c <HAL_I2C_MspInit+0x194>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 80030b8:	4820      	ldr	r0, [pc, #128]	; (800313c <HAL_I2C_MspInit+0x194>)
 80030ba:	f001 fd85 	bl	8004bc8 <HAL_DMA_Init>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 80030c4:	f7ff fdfa 	bl	8002cbc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a1c      	ldr	r2, [pc, #112]	; (800313c <HAL_I2C_MspInit+0x194>)
 80030cc:	639a      	str	r2, [r3, #56]	; 0x38
 80030ce:	4a1b      	ldr	r2, [pc, #108]	; (800313c <HAL_I2C_MspInit+0x194>)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Channel3;
 80030d4:	4b1b      	ldr	r3, [pc, #108]	; (8003144 <HAL_I2C_MspInit+0x19c>)
 80030d6:	4a1c      	ldr	r2, [pc, #112]	; (8003148 <HAL_I2C_MspInit+0x1a0>)
 80030d8:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_3;
 80030da:	4b1a      	ldr	r3, [pc, #104]	; (8003144 <HAL_I2C_MspInit+0x19c>)
 80030dc:	2203      	movs	r2, #3
 80030de:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030e0:	4b18      	ldr	r3, [pc, #96]	; (8003144 <HAL_I2C_MspInit+0x19c>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030e6:	4b17      	ldr	r3, [pc, #92]	; (8003144 <HAL_I2C_MspInit+0x19c>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030ec:	4b15      	ldr	r3, [pc, #84]	; (8003144 <HAL_I2C_MspInit+0x19c>)
 80030ee:	2280      	movs	r2, #128	; 0x80
 80030f0:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030f2:	4b14      	ldr	r3, [pc, #80]	; (8003144 <HAL_I2C_MspInit+0x19c>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030f8:	4b12      	ldr	r3, [pc, #72]	; (8003144 <HAL_I2C_MspInit+0x19c>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 80030fe:	4b11      	ldr	r3, [pc, #68]	; (8003144 <HAL_I2C_MspInit+0x19c>)
 8003100:	2200      	movs	r2, #0
 8003102:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003104:	4b0f      	ldr	r3, [pc, #60]	; (8003144 <HAL_I2C_MspInit+0x19c>)
 8003106:	2200      	movs	r2, #0
 8003108:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 800310a:	480e      	ldr	r0, [pc, #56]	; (8003144 <HAL_I2C_MspInit+0x19c>)
 800310c:	f001 fd5c 	bl	8004bc8 <HAL_DMA_Init>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 8003116:	f7ff fdd1 	bl	8002cbc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a09      	ldr	r2, [pc, #36]	; (8003144 <HAL_I2C_MspInit+0x19c>)
 800311e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003120:	4a08      	ldr	r2, [pc, #32]	; (8003144 <HAL_I2C_MspInit+0x19c>)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003126:	bf00      	nop
 8003128:	3780      	adds	r7, #128	; 0x80
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40005c00 	.word	0x40005c00
 8003134:	40021000 	.word	0x40021000
 8003138:	48000400 	.word	0x48000400
 800313c:	2000046c 	.word	0x2000046c
 8003140:	4002001c 	.word	0x4002001c
 8003144:	20000548 	.word	0x20000548
 8003148:	40020030 	.word	0x40020030

0800314c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a0a      	ldr	r2, [pc, #40]	; (8003184 <HAL_TIM_PWM_MspInit+0x38>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d10b      	bne.n	8003176 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800315e:	4b0a      	ldr	r3, [pc, #40]	; (8003188 <HAL_TIM_PWM_MspInit+0x3c>)
 8003160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003162:	4a09      	ldr	r2, [pc, #36]	; (8003188 <HAL_TIM_PWM_MspInit+0x3c>)
 8003164:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003168:	6613      	str	r3, [r2, #96]	; 0x60
 800316a:	4b07      	ldr	r3, [pc, #28]	; (8003188 <HAL_TIM_PWM_MspInit+0x3c>)
 800316c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800316e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003176:	bf00      	nop
 8003178:	3714      	adds	r7, #20
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40012c00 	.word	0x40012c00
 8003188:	40021000 	.word	0x40021000

0800318c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800319c:	d113      	bne.n	80031c6 <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800319e:	4b0c      	ldr	r3, [pc, #48]	; (80031d0 <HAL_TIM_OC_MspInit+0x44>)
 80031a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a2:	4a0b      	ldr	r2, [pc, #44]	; (80031d0 <HAL_TIM_OC_MspInit+0x44>)
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	6593      	str	r3, [r2, #88]	; 0x58
 80031aa:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <HAL_TIM_OC_MspInit+0x44>)
 80031ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80031b6:	2200      	movs	r2, #0
 80031b8:	2100      	movs	r1, #0
 80031ba:	201c      	movs	r0, #28
 80031bc:	f001 fccd 	bl	8004b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80031c0:	201c      	movs	r0, #28
 80031c2:	f001 fce6 	bl	8004b92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80031c6:	bf00      	nop
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40021000 	.word	0x40021000

080031d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a1a      	ldr	r2, [pc, #104]	; (800324c <HAL_TIM_Base_MspInit+0x78>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d114      	bne.n	8003210 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80031e6:	4b1a      	ldr	r3, [pc, #104]	; (8003250 <HAL_TIM_Base_MspInit+0x7c>)
 80031e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ea:	4a19      	ldr	r2, [pc, #100]	; (8003250 <HAL_TIM_Base_MspInit+0x7c>)
 80031ec:	f043 0310 	orr.w	r3, r3, #16
 80031f0:	6593      	str	r3, [r2, #88]	; 0x58
 80031f2:	4b17      	ldr	r3, [pc, #92]	; (8003250 <HAL_TIM_Base_MspInit+0x7c>)
 80031f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f6:	f003 0310 	and.w	r3, r3, #16
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80031fe:	2200      	movs	r2, #0
 8003200:	2100      	movs	r1, #0
 8003202:	2036      	movs	r0, #54	; 0x36
 8003204:	f001 fca9 	bl	8004b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003208:	2036      	movs	r0, #54	; 0x36
 800320a:	f001 fcc2 	bl	8004b92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800320e:	e018      	b.n	8003242 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a0f      	ldr	r2, [pc, #60]	; (8003254 <HAL_TIM_Base_MspInit+0x80>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d113      	bne.n	8003242 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800321a:	4b0d      	ldr	r3, [pc, #52]	; (8003250 <HAL_TIM_Base_MspInit+0x7c>)
 800321c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321e:	4a0c      	ldr	r2, [pc, #48]	; (8003250 <HAL_TIM_Base_MspInit+0x7c>)
 8003220:	f043 0320 	orr.w	r3, r3, #32
 8003224:	6593      	str	r3, [r2, #88]	; 0x58
 8003226:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <HAL_TIM_Base_MspInit+0x7c>)
 8003228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322a:	f003 0320 	and.w	r3, r3, #32
 800322e:	60bb      	str	r3, [r7, #8]
 8003230:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003232:	2200      	movs	r2, #0
 8003234:	2100      	movs	r1, #0
 8003236:	2037      	movs	r0, #55	; 0x37
 8003238:	f001 fc8f 	bl	8004b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800323c:	2037      	movs	r0, #55	; 0x37
 800323e:	f001 fca8 	bl	8004b92 <HAL_NVIC_EnableIRQ>
}
 8003242:	bf00      	nop
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40001000 	.word	0x40001000
 8003250:	40021000 	.word	0x40021000
 8003254:	40001400 	.word	0x40001400

08003258 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b088      	sub	sp, #32
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003260:	f107 030c 	add.w	r3, r7, #12
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	605a      	str	r2, [r3, #4]
 800326a:	609a      	str	r2, [r3, #8]
 800326c:	60da      	str	r2, [r3, #12]
 800326e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a12      	ldr	r2, [pc, #72]	; (80032c0 <HAL_TIM_MspPostInit+0x68>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d11d      	bne.n	80032b6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800327a:	4b12      	ldr	r3, [pc, #72]	; (80032c4 <HAL_TIM_MspPostInit+0x6c>)
 800327c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327e:	4a11      	ldr	r2, [pc, #68]	; (80032c4 <HAL_TIM_MspPostInit+0x6c>)
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003286:	4b0f      	ldr	r3, [pc, #60]	; (80032c4 <HAL_TIM_MspPostInit+0x6c>)
 8003288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	60bb      	str	r3, [r7, #8]
 8003290:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_R_Pin|PWM_L_Pin;
 8003292:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003296:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003298:	2302      	movs	r3, #2
 800329a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a0:	2300      	movs	r3, #0
 80032a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80032a4:	2301      	movs	r3, #1
 80032a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a8:	f107 030c 	add.w	r3, r7, #12
 80032ac:	4619      	mov	r1, r3
 80032ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032b2:	f001 fecf 	bl	8005054 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80032b6:	bf00      	nop
 80032b8:	3720      	adds	r7, #32
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40012c00 	.word	0x40012c00
 80032c4:	40021000 	.word	0x40021000

080032c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b09e      	sub	sp, #120	; 0x78
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	605a      	str	r2, [r3, #4]
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	60da      	str	r2, [r3, #12]
 80032de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032e0:	f107 0310 	add.w	r3, r7, #16
 80032e4:	2254      	movs	r2, #84	; 0x54
 80032e6:	2100      	movs	r1, #0
 80032e8:	4618      	mov	r0, r3
 80032ea:	f007 fa31 	bl	800a750 <memset>
  if(huart->Instance==USART2)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a3c      	ldr	r2, [pc, #240]	; (80033e4 <HAL_UART_MspInit+0x11c>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d171      	bne.n	80033dc <HAL_UART_MspInit+0x114>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80032f8:	2302      	movs	r3, #2
 80032fa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80032fc:	2300      	movs	r3, #0
 80032fe:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003300:	f107 0310 	add.w	r3, r7, #16
 8003304:	4618      	mov	r0, r3
 8003306:	f004 ffdd 	bl	80082c4 <HAL_RCCEx_PeriphCLKConfig>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003310:	f7ff fcd4 	bl	8002cbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003314:	4b34      	ldr	r3, [pc, #208]	; (80033e8 <HAL_UART_MspInit+0x120>)
 8003316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003318:	4a33      	ldr	r2, [pc, #204]	; (80033e8 <HAL_UART_MspInit+0x120>)
 800331a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800331e:	6593      	str	r3, [r2, #88]	; 0x58
 8003320:	4b31      	ldr	r3, [pc, #196]	; (80033e8 <HAL_UART_MspInit+0x120>)
 8003322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800332c:	4b2e      	ldr	r3, [pc, #184]	; (80033e8 <HAL_UART_MspInit+0x120>)
 800332e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003330:	4a2d      	ldr	r2, [pc, #180]	; (80033e8 <HAL_UART_MspInit+0x120>)
 8003332:	f043 0301 	orr.w	r3, r3, #1
 8003336:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003338:	4b2b      	ldr	r3, [pc, #172]	; (80033e8 <HAL_UART_MspInit+0x120>)
 800333a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	60bb      	str	r3, [r7, #8]
 8003342:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003344:	2304      	movs	r3, #4
 8003346:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003348:	2302      	movs	r3, #2
 800334a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334c:	2300      	movs	r3, #0
 800334e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003350:	2303      	movs	r3, #3
 8003352:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003354:	2307      	movs	r3, #7
 8003356:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003358:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800335c:	4619      	mov	r1, r3
 800335e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003362:	f001 fe77 	bl	8005054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800336a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336c:	2302      	movs	r3, #2
 800336e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003370:	2300      	movs	r3, #0
 8003372:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003374:	2303      	movs	r3, #3
 8003376:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8003378:	2303      	movs	r3, #3
 800337a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800337c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003380:	4619      	mov	r1, r3
 8003382:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003386:	f001 fe65 	bl	8005054 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800338a:	4b18      	ldr	r3, [pc, #96]	; (80033ec <HAL_UART_MspInit+0x124>)
 800338c:	4a18      	ldr	r2, [pc, #96]	; (80033f0 <HAL_UART_MspInit+0x128>)
 800338e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8003390:	4b16      	ldr	r3, [pc, #88]	; (80033ec <HAL_UART_MspInit+0x124>)
 8003392:	2202      	movs	r2, #2
 8003394:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003396:	4b15      	ldr	r3, [pc, #84]	; (80033ec <HAL_UART_MspInit+0x124>)
 8003398:	2200      	movs	r2, #0
 800339a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800339c:	4b13      	ldr	r3, [pc, #76]	; (80033ec <HAL_UART_MspInit+0x124>)
 800339e:	2200      	movs	r2, #0
 80033a0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80033a2:	4b12      	ldr	r3, [pc, #72]	; (80033ec <HAL_UART_MspInit+0x124>)
 80033a4:	2280      	movs	r2, #128	; 0x80
 80033a6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033a8:	4b10      	ldr	r3, [pc, #64]	; (80033ec <HAL_UART_MspInit+0x124>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033ae:	4b0f      	ldr	r3, [pc, #60]	; (80033ec <HAL_UART_MspInit+0x124>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80033b4:	4b0d      	ldr	r3, [pc, #52]	; (80033ec <HAL_UART_MspInit+0x124>)
 80033b6:	2220      	movs	r2, #32
 80033b8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80033ba:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <HAL_UART_MspInit+0x124>)
 80033bc:	2200      	movs	r2, #0
 80033be:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80033c0:	480a      	ldr	r0, [pc, #40]	; (80033ec <HAL_UART_MspInit+0x124>)
 80033c2:	f001 fc01 	bl	8004bc8 <HAL_DMA_Init>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80033cc:	f7ff fc76 	bl	8002cbc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a06      	ldr	r2, [pc, #24]	; (80033ec <HAL_UART_MspInit+0x124>)
 80033d4:	671a      	str	r2, [r3, #112]	; 0x70
 80033d6:	4a05      	ldr	r2, [pc, #20]	; (80033ec <HAL_UART_MspInit+0x124>)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80033dc:	bf00      	nop
 80033de:	3778      	adds	r7, #120	; 0x78
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40004400 	.word	0x40004400
 80033e8:	40021000 	.word	0x40021000
 80033ec:	200004b4 	.word	0x200004b4
 80033f0:	4002006c 	.word	0x4002006c

080033f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80033f8:	e7fe      	b.n	80033f8 <NMI_Handler+0x4>

080033fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033fa:	b480      	push	{r7}
 80033fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033fe:	e7fe      	b.n	80033fe <HardFault_Handler+0x4>

08003400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003404:	e7fe      	b.n	8003404 <MemManage_Handler+0x4>

08003406 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003406:	b480      	push	{r7}
 8003408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800340a:	e7fe      	b.n	800340a <BusFault_Handler+0x4>

0800340c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003410:	e7fe      	b.n	8003410 <UsageFault_Handler+0x4>

08003412 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003412:	b480      	push	{r7}
 8003414:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003416:	bf00      	nop
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003424:	bf00      	nop
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800342e:	b480      	push	{r7}
 8003430:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003432:	bf00      	nop
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003440:	f000 f92c 	bl	800369c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003444:	bf00      	nop
 8003446:	bd80      	pop	{r7, pc}

08003448 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800344c:	2001      	movs	r0, #1
 800344e:	f001 ff9b 	bl	8005388 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	clockcheckRight();
 8003452:	f7ff f83b 	bl	80024cc <clockcheckRight>
  /* USER CODE END EXTI0_IRQn 1 */
}
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}

0800345a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800345e:	2002      	movs	r0, #2
 8003460:	f001 ff92 	bl	8005388 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
	counterclockcheckLeft();
 8003464:	f7ff f958 	bl	8002718 <counterclockcheckLeft>
  /* USER CODE END EXTI1_IRQn 1 */
}
 8003468:	bf00      	nop
 800346a:	bd80      	pop	{r7, pc}

0800346c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003470:	2008      	movs	r0, #8
 8003472:	f001 ff89 	bl	8005388 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
	checkOrientClock();
 8003476:	f7ff fc7d 	bl	8002d74 <checkOrientClock>
  /* USER CODE END EXTI3_IRQn 1 */
}
 800347a:	bf00      	nop
 800347c:	bd80      	pop	{r7, pc}

0800347e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003482:	2010      	movs	r0, #16
 8003484:	f001 ff80 	bl	8005388 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
	counterclockcheckRight();
 8003488:	f7ff f882 	bl	8002590 <counterclockcheckRight>
  /* USER CODE END EXTI4_IRQn 1 */
}
 800348c:	bf00      	nop
 800348e:	bd80      	pop	{r7, pc}

08003490 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8003494:	4802      	ldr	r0, [pc, #8]	; (80034a0 <DMA1_Channel2_IRQHandler+0x10>)
 8003496:	f001 fcf0 	bl	8004e7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800349a:	bf00      	nop
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	2000046c 	.word	0x2000046c

080034a4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 80034a8:	4802      	ldr	r0, [pc, #8]	; (80034b4 <DMA1_Channel3_IRQHandler+0x10>)
 80034aa:	f001 fce6 	bl	8004e7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80034ae:	bf00      	nop
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	20000548 	.word	0x20000548

080034b8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80034bc:	4802      	ldr	r0, [pc, #8]	; (80034c8 <DMA1_Channel6_IRQHandler+0x10>)
 80034be:	f001 fcdc 	bl	8004e7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80034c2:	bf00      	nop
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	200004b4 	.word	0x200004b4

080034cc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80034d0:	2020      	movs	r0, #32
 80034d2:	f001 ff59 	bl	8005388 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
	clockcheckLeft();
 80034d6:	f7ff f8bd 	bl	8002654 <clockcheckLeft>

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80034da:	bf00      	nop
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80034e4:	4803      	ldr	r0, [pc, #12]	; (80034f4 <TIM2_IRQHandler+0x14>)
 80034e6:	f005 fc0b 	bl	8008d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
	controlBothMotors();
 80034ea:	f7ff fb8b 	bl	8002c04 <controlBothMotors>
  /* USER CODE END TIM2_IRQn 1 */
}
 80034ee:	bf00      	nop
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	200006d4 	.word	0x200006d4

080034f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80034fc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003500:	f001 ff42 	bl	8005388 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
	checkOrientCounterClock();
 8003504:	f7ff fc60 	bl	8002dc8 <checkOrientCounterClock>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003508:	bf00      	nop
 800350a:	bd80      	pop	{r7, pc}

0800350c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003510:	4803      	ldr	r0, [pc, #12]	; (8003520 <TIM6_DAC_IRQHandler+0x14>)
 8003512:	f005 fbf5 	bl	8008d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
	updatePositionsAndVelocities();
 8003516:	f7fe fee1 	bl	80022dc <updatePositionsAndVelocities>
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800351a:	bf00      	nop
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	20000624 	.word	0x20000624

08003524 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003528:	4803      	ldr	r0, [pc, #12]	; (8003538 <TIM7_IRQHandler+0x14>)
 800352a:	f005 fbe9 	bl	8008d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
	UpdateBatteryVoltage();
 800352e:	f7ff fb7d 	bl	8002c2c <UpdateBatteryVoltage>

  /* USER CODE END TIM7_IRQn 1 */
}
 8003532:	bf00      	nop
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	200007b8 	.word	0x200007b8

0800353c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003540:	4b15      	ldr	r3, [pc, #84]	; (8003598 <SystemInit+0x5c>)
 8003542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003546:	4a14      	ldr	r2, [pc, #80]	; (8003598 <SystemInit+0x5c>)
 8003548:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800354c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003550:	4b12      	ldr	r3, [pc, #72]	; (800359c <SystemInit+0x60>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a11      	ldr	r2, [pc, #68]	; (800359c <SystemInit+0x60>)
 8003556:	f043 0301 	orr.w	r3, r3, #1
 800355a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800355c:	4b0f      	ldr	r3, [pc, #60]	; (800359c <SystemInit+0x60>)
 800355e:	2200      	movs	r2, #0
 8003560:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003562:	4b0e      	ldr	r3, [pc, #56]	; (800359c <SystemInit+0x60>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a0d      	ldr	r2, [pc, #52]	; (800359c <SystemInit+0x60>)
 8003568:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800356c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003570:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003572:	4b0a      	ldr	r3, [pc, #40]	; (800359c <SystemInit+0x60>)
 8003574:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003578:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800357a:	4b08      	ldr	r3, [pc, #32]	; (800359c <SystemInit+0x60>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a07      	ldr	r2, [pc, #28]	; (800359c <SystemInit+0x60>)
 8003580:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003584:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003586:	4b05      	ldr	r3, [pc, #20]	; (800359c <SystemInit+0x60>)
 8003588:	2200      	movs	r2, #0
 800358a:	619a      	str	r2, [r3, #24]
}
 800358c:	bf00      	nop
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	e000ed00 	.word	0xe000ed00
 800359c:	40021000 	.word	0x40021000

080035a0 <Reset_Handler>:
 80035a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035d8 <LoopForever+0x2>
 80035a4:	f7ff ffca 	bl	800353c <SystemInit>
 80035a8:	2100      	movs	r1, #0
 80035aa:	e003      	b.n	80035b4 <LoopCopyDataInit>

080035ac <CopyDataInit>:
 80035ac:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <LoopForever+0x6>)
 80035ae:	585b      	ldr	r3, [r3, r1]
 80035b0:	5043      	str	r3, [r0, r1]
 80035b2:	3104      	adds	r1, #4

080035b4 <LoopCopyDataInit>:
 80035b4:	480a      	ldr	r0, [pc, #40]	; (80035e0 <LoopForever+0xa>)
 80035b6:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <LoopForever+0xe>)
 80035b8:	1842      	adds	r2, r0, r1
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d3f6      	bcc.n	80035ac <CopyDataInit>
 80035be:	4a0a      	ldr	r2, [pc, #40]	; (80035e8 <LoopForever+0x12>)
 80035c0:	e002      	b.n	80035c8 <LoopFillZerobss>

080035c2 <FillZerobss>:
 80035c2:	2300      	movs	r3, #0
 80035c4:	f842 3b04 	str.w	r3, [r2], #4

080035c8 <LoopFillZerobss>:
 80035c8:	4b08      	ldr	r3, [pc, #32]	; (80035ec <LoopForever+0x16>)
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d3f9      	bcc.n	80035c2 <FillZerobss>
 80035ce:	f007 f88d 	bl	800a6ec <__libc_init_array>
 80035d2:	f7fd ffa1 	bl	8001518 <main>

080035d6 <LoopForever>:
 80035d6:	e7fe      	b.n	80035d6 <LoopForever>
 80035d8:	20010000 	.word	0x20010000
 80035dc:	0800bab8 	.word	0x0800bab8
 80035e0:	20000000 	.word	0x20000000
 80035e4:	20000018 	.word	0x20000018
 80035e8:	20000018 	.word	0x20000018
 80035ec:	2000081c 	.word	0x2000081c

080035f0 <ADC1_IRQHandler>:
 80035f0:	e7fe      	b.n	80035f0 <ADC1_IRQHandler>

080035f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b082      	sub	sp, #8
 80035f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80035f8:	2300      	movs	r3, #0
 80035fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035fc:	2003      	movs	r0, #3
 80035fe:	f001 faa1 	bl	8004b44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003602:	2000      	movs	r0, #0
 8003604:	f000 f80e 	bl	8003624 <HAL_InitTick>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d002      	beq.n	8003614 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	71fb      	strb	r3, [r7, #7]
 8003612:	e001      	b.n	8003618 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003614:	f7ff fc40 	bl	8002e98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003618:	79fb      	ldrb	r3, [r7, #7]
}
 800361a:	4618      	mov	r0, r3
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800362c:	2300      	movs	r3, #0
 800362e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003630:	4b17      	ldr	r3, [pc, #92]	; (8003690 <HAL_InitTick+0x6c>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d023      	beq.n	8003680 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003638:	4b16      	ldr	r3, [pc, #88]	; (8003694 <HAL_InitTick+0x70>)
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	4b14      	ldr	r3, [pc, #80]	; (8003690 <HAL_InitTick+0x6c>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	4619      	mov	r1, r3
 8003642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003646:	fbb3 f3f1 	udiv	r3, r3, r1
 800364a:	fbb2 f3f3 	udiv	r3, r2, r3
 800364e:	4618      	mov	r0, r3
 8003650:	f001 faad 	bl	8004bae <HAL_SYSTICK_Config>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10f      	bne.n	800367a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b0f      	cmp	r3, #15
 800365e:	d809      	bhi.n	8003674 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003660:	2200      	movs	r2, #0
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003668:	f001 fa77 	bl	8004b5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800366c:	4a0a      	ldr	r2, [pc, #40]	; (8003698 <HAL_InitTick+0x74>)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	e007      	b.n	8003684 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	73fb      	strb	r3, [r7, #15]
 8003678:	e004      	b.n	8003684 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	73fb      	strb	r3, [r7, #15]
 800367e:	e001      	b.n	8003684 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003684:	7bfb      	ldrb	r3, [r7, #15]
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20000014 	.word	0x20000014
 8003694:	2000000c 	.word	0x2000000c
 8003698:	20000010 	.word	0x20000010

0800369c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036a0:	4b06      	ldr	r3, [pc, #24]	; (80036bc <HAL_IncTick+0x20>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	461a      	mov	r2, r3
 80036a6:	4b06      	ldr	r3, [pc, #24]	; (80036c0 <HAL_IncTick+0x24>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4413      	add	r3, r2
 80036ac:	4a04      	ldr	r2, [pc, #16]	; (80036c0 <HAL_IncTick+0x24>)
 80036ae:	6013      	str	r3, [r2, #0]
}
 80036b0:	bf00      	nop
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	20000014 	.word	0x20000014
 80036c0:	20000818 	.word	0x20000818

080036c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  return uwTick;
 80036c8:	4b03      	ldr	r3, [pc, #12]	; (80036d8 <HAL_GetTick+0x14>)
 80036ca:	681b      	ldr	r3, [r3, #0]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	20000818 	.word	0x20000818

080036dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	431a      	orrs	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	609a      	str	r2, [r3, #8]
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	431a      	orrs	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	609a      	str	r2, [r3, #8]
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003738:	4618      	mov	r0, r3
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003744:	b480      	push	{r7}
 8003746:	b087      	sub	sp, #28
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	3360      	adds	r3, #96	; 0x60
 8003756:	461a      	mov	r2, r3
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	4b08      	ldr	r3, [pc, #32]	; (8003788 <LL_ADC_SetOffset+0x44>)
 8003766:	4013      	ands	r3, r2
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	4313      	orrs	r3, r2
 8003774:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800377c:	bf00      	nop
 800377e:	371c      	adds	r7, #28
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	03fff000 	.word	0x03fff000

0800378c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	3360      	adds	r3, #96	; 0x60
 800379a:	461a      	mov	r2, r3
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3714      	adds	r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	3360      	adds	r3, #96	; 0x60
 80037c8:	461a      	mov	r2, r3
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	431a      	orrs	r2, r3
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80037e2:	bf00      	nop
 80037e4:	371c      	adds	r7, #28
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b083      	sub	sp, #12
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	3330      	adds	r3, #48	; 0x30
 8003824:	461a      	mov	r2, r3
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	0a1b      	lsrs	r3, r3, #8
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	f003 030c 	and.w	r3, r3, #12
 8003830:	4413      	add	r3, r2
 8003832:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f003 031f 	and.w	r3, r3, #31
 800383e:	211f      	movs	r1, #31
 8003840:	fa01 f303 	lsl.w	r3, r1, r3
 8003844:	43db      	mvns	r3, r3
 8003846:	401a      	ands	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	0e9b      	lsrs	r3, r3, #26
 800384c:	f003 011f 	and.w	r1, r3, #31
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f003 031f 	and.w	r3, r3, #31
 8003856:	fa01 f303 	lsl.w	r3, r1, r3
 800385a:	431a      	orrs	r2, r3
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003860:	bf00      	nop
 8003862:	371c      	adds	r7, #28
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	3314      	adds	r3, #20
 800387c:	461a      	mov	r2, r3
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	0e5b      	lsrs	r3, r3, #25
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	4413      	add	r3, r2
 800388a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	0d1b      	lsrs	r3, r3, #20
 8003894:	f003 031f 	and.w	r3, r3, #31
 8003898:	2107      	movs	r1, #7
 800389a:	fa01 f303 	lsl.w	r3, r1, r3
 800389e:	43db      	mvns	r3, r3
 80038a0:	401a      	ands	r2, r3
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	0d1b      	lsrs	r3, r3, #20
 80038a6:	f003 031f 	and.w	r3, r3, #31
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	fa01 f303 	lsl.w	r3, r1, r3
 80038b0:	431a      	orrs	r2, r3
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80038b6:	bf00      	nop
 80038b8:	371c      	adds	r7, #28
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
	...

080038c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038dc:	43db      	mvns	r3, r3
 80038de:	401a      	ands	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f003 0318 	and.w	r3, r3, #24
 80038e6:	4908      	ldr	r1, [pc, #32]	; (8003908 <LL_ADC_SetChannelSingleDiff+0x44>)
 80038e8:	40d9      	lsrs	r1, r3
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	400b      	ands	r3, r1
 80038ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f2:	431a      	orrs	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80038fa:	bf00      	nop
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	0007ffff 	.word	0x0007ffff

0800390c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800391c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6093      	str	r3, [r2, #8]
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003940:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003944:	d101      	bne.n	800394a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003946:	2301      	movs	r3, #1
 8003948:	e000      	b.n	800394c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003968:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800396c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003990:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003994:	d101      	bne.n	800399a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003996:	2301      	movs	r3, #1
 8003998:	e000      	b.n	800399c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039bc:	f043 0201 	orr.w	r2, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039e4:	f043 0202 	orr.w	r2, r3, #2
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d101      	bne.n	8003a10 <LL_ADC_IsEnabled+0x18>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e000      	b.n	8003a12 <LL_ADC_IsEnabled+0x1a>
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d101      	bne.n	8003a36 <LL_ADC_IsDisableOngoing+0x18>
 8003a32:	2301      	movs	r3, #1
 8003a34:	e000      	b.n	8003a38 <LL_ADC_IsDisableOngoing+0x1a>
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a58:	f043 0204 	orr.w	r2, r3, #4
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b04      	cmp	r3, #4
 8003a7e:	d101      	bne.n	8003a84 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a80:	2301      	movs	r3, #1
 8003a82:	e000      	b.n	8003a86 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 0308 	and.w	r3, r3, #8
 8003aa2:	2b08      	cmp	r3, #8
 8003aa4:	d101      	bne.n	8003aaa <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b088      	sub	sp, #32
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e12c      	b.n	8003d2c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d109      	bne.n	8003af4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7ff f9fd 	bl	8002ee0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff ff19 	bl	8003930 <LL_ADC_IsDeepPowerDownEnabled>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d004      	beq.n	8003b0e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff feff 	bl	800390c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7ff ff34 	bl	8003980 <LL_ADC_IsInternalRegulatorEnabled>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d115      	bne.n	8003b4a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff ff18 	bl	8003958 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b28:	4b82      	ldr	r3, [pc, #520]	; (8003d34 <HAL_ADC_Init+0x27c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	099b      	lsrs	r3, r3, #6
 8003b2e:	4a82      	ldr	r2, [pc, #520]	; (8003d38 <HAL_ADC_Init+0x280>)
 8003b30:	fba2 2303 	umull	r2, r3, r2, r3
 8003b34:	099b      	lsrs	r3, r3, #6
 8003b36:	3301      	adds	r3, #1
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003b3c:	e002      	b.n	8003b44 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	3b01      	subs	r3, #1
 8003b42:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f9      	bne.n	8003b3e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff ff16 	bl	8003980 <LL_ADC_IsInternalRegulatorEnabled>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10d      	bne.n	8003b76 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5e:	f043 0210 	orr.w	r2, r3, #16
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6a:	f043 0201 	orr.w	r2, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff ff76 	bl	8003a6c <LL_ADC_REG_IsConversionOngoing>
 8003b80:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f040 80c5 	bne.w	8003d1a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f040 80c1 	bne.w	8003d1a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003ba0:	f043 0202 	orr.w	r2, r3, #2
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff ff23 	bl	80039f8 <LL_ADC_IsEnabled>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10b      	bne.n	8003bd0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bb8:	4860      	ldr	r0, [pc, #384]	; (8003d3c <HAL_ADC_Init+0x284>)
 8003bba:	f7ff ff1d 	bl	80039f8 <LL_ADC_IsEnabled>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d105      	bne.n	8003bd0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	4619      	mov	r1, r3
 8003bca:	485d      	ldr	r0, [pc, #372]	; (8003d40 <HAL_ADC_Init+0x288>)
 8003bcc:	f7ff fd86 	bl	80036dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	7e5b      	ldrb	r3, [r3, #25]
 8003bd4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003bda:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003be0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003be6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bee:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d106      	bne.n	8003c0c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	3b01      	subs	r3, #1
 8003c04:	045b      	lsls	r3, r3, #17
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d009      	beq.n	8003c28 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c18:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c20:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	4b45      	ldr	r3, [pc, #276]	; (8003d44 <HAL_ADC_Init+0x28c>)
 8003c30:	4013      	ands	r3, r2
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6812      	ldr	r2, [r2, #0]
 8003c36:	69b9      	ldr	r1, [r7, #24]
 8003c38:	430b      	orrs	r3, r1
 8003c3a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7ff ff13 	bl	8003a6c <LL_ADC_REG_IsConversionOngoing>
 8003c46:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7ff ff20 	bl	8003a92 <LL_ADC_INJ_IsConversionOngoing>
 8003c52:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d13d      	bne.n	8003cd6 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d13a      	bne.n	8003cd6 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c64:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c6c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c7c:	f023 0302 	bic.w	r3, r3, #2
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	69b9      	ldr	r1, [r7, #24]
 8003c86:	430b      	orrs	r3, r1
 8003c88:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d118      	bne.n	8003cc6 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003c9e:	f023 0304 	bic.w	r3, r3, #4
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003caa:	4311      	orrs	r1, r2
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003cb0:	4311      	orrs	r1, r2
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0201 	orr.w	r2, r2, #1
 8003cc2:	611a      	str	r2, [r3, #16]
 8003cc4:	e007      	b.n	8003cd6 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	691a      	ldr	r2, [r3, #16]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0201 	bic.w	r2, r2, #1
 8003cd4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d10c      	bne.n	8003cf8 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce4:	f023 010f 	bic.w	r1, r3, #15
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	1e5a      	subs	r2, r3, #1
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	631a      	str	r2, [r3, #48]	; 0x30
 8003cf6:	e007      	b.n	8003d08 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 020f 	bic.w	r2, r2, #15
 8003d06:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0c:	f023 0303 	bic.w	r3, r3, #3
 8003d10:	f043 0201 	orr.w	r2, r3, #1
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	655a      	str	r2, [r3, #84]	; 0x54
 8003d18:	e007      	b.n	8003d2a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1e:	f043 0210 	orr.w	r2, r3, #16
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3720      	adds	r7, #32
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	2000000c 	.word	0x2000000c
 8003d38:	053e2d63 	.word	0x053e2d63
 8003d3c:	50040000 	.word	0x50040000
 8003d40:	50040300 	.word	0x50040300
 8003d44:	fff0c007 	.word	0xfff0c007

08003d48 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff fe89 	bl	8003a6c <LL_ADC_REG_IsConversionOngoing>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d14f      	bne.n	8003e00 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d101      	bne.n	8003d6e <HAL_ADC_Start+0x26>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e04b      	b.n	8003e06 <HAL_ADC_Start+0xbe>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 fcc6 	bl	8004708 <ADC_Enable>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003d80:	7bfb      	ldrb	r3, [r7, #15]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d137      	bne.n	8003df6 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d8e:	f023 0301 	bic.w	r3, r3, #1
 8003d92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da6:	d106      	bne.n	8003db6 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dac:	f023 0206 	bic.w	r2, r3, #6
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	659a      	str	r2, [r3, #88]	; 0x58
 8003db4:	e002      	b.n	8003dbc <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	221c      	movs	r2, #28
 8003dc2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d007      	beq.n	8003dea <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dde:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003de2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff fe28 	bl	8003a44 <LL_ADC_REG_StartConversion>
 8003df4:	e006      	b.n	8003e04 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003dfe:	e001      	b.n	8003e04 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003e00:	2302      	movs	r3, #2
 8003e02:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b086      	sub	sp, #24
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
 8003e16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d102      	bne.n	8003e26 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003e20:	2308      	movs	r3, #8
 8003e22:	617b      	str	r3, [r7, #20]
 8003e24:	e010      	b.n	8003e48 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d007      	beq.n	8003e44 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e38:	f043 0220 	orr.w	r2, r3, #32
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e06f      	b.n	8003f24 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8003e44:	2304      	movs	r3, #4
 8003e46:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003e48:	f7ff fc3c 	bl	80036c4 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003e4e:	e021      	b.n	8003e94 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e56:	d01d      	beq.n	8003e94 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003e58:	f7ff fc34 	bl	80036c4 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d302      	bcc.n	8003e6e <HAL_ADC_PollForConversion+0x60>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d112      	bne.n	8003e94 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	4013      	ands	r3, r2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10b      	bne.n	8003e94 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e80:	f043 0204 	orr.w	r2, r3, #4
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e047      	b.n	8003f24 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0d6      	beq.n	8003e50 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7ff fc9b 	bl	80037ee <LL_ADC_REG_IsTriggerSourceSWStart>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d01c      	beq.n	8003ef8 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	7e5b      	ldrb	r3, [r3, #25]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d118      	bne.n	8003ef8 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0308 	and.w	r3, r3, #8
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d111      	bne.n	8003ef8 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d105      	bne.n	8003ef8 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef0:	f043 0201 	orr.w	r2, r3, #1
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2b08      	cmp	r3, #8
 8003f04:	d104      	bne.n	8003f10 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2208      	movs	r2, #8
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	e008      	b.n	8003f22 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d103      	bne.n	8003f22 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	220c      	movs	r2, #12
 8003f20:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3718      	adds	r7, #24
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
	...

08003f48 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b0b6      	sub	sp, #216	; 0xd8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f52:	2300      	movs	r3, #0
 8003f54:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d101      	bne.n	8003f6a <HAL_ADC_ConfigChannel+0x22>
 8003f66:	2302      	movs	r3, #2
 8003f68:	e3b9      	b.n	80046de <HAL_ADC_ConfigChannel+0x796>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff fd78 	bl	8003a6c <LL_ADC_REG_IsConversionOngoing>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f040 839e 	bne.w	80046c0 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b05      	cmp	r3, #5
 8003f8a:	d824      	bhi.n	8003fd6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	3b02      	subs	r3, #2
 8003f92:	2b03      	cmp	r3, #3
 8003f94:	d81b      	bhi.n	8003fce <HAL_ADC_ConfigChannel+0x86>
 8003f96:	a201      	add	r2, pc, #4	; (adr r2, 8003f9c <HAL_ADC_ConfigChannel+0x54>)
 8003f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9c:	08003fad 	.word	0x08003fad
 8003fa0:	08003fb5 	.word	0x08003fb5
 8003fa4:	08003fbd 	.word	0x08003fbd
 8003fa8:	08003fc5 	.word	0x08003fc5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	220c      	movs	r2, #12
 8003fb0:	605a      	str	r2, [r3, #4]
          break;
 8003fb2:	e011      	b.n	8003fd8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	2212      	movs	r2, #18
 8003fb8:	605a      	str	r2, [r3, #4]
          break;
 8003fba:	e00d      	b.n	8003fd8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	2218      	movs	r2, #24
 8003fc0:	605a      	str	r2, [r3, #4]
          break;
 8003fc2:	e009      	b.n	8003fd8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fca:	605a      	str	r2, [r3, #4]
          break;
 8003fcc:	e004      	b.n	8003fd8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2206      	movs	r2, #6
 8003fd2:	605a      	str	r2, [r3, #4]
          break;
 8003fd4:	e000      	b.n	8003fd8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003fd6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6818      	ldr	r0, [r3, #0]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	6859      	ldr	r1, [r3, #4]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	f7ff fc15 	bl	8003814 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7ff fd3c 	bl	8003a6c <LL_ADC_REG_IsConversionOngoing>
 8003ff4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff fd48 	bl	8003a92 <LL_ADC_INJ_IsConversionOngoing>
 8004002:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004006:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800400a:	2b00      	cmp	r3, #0
 800400c:	f040 81a6 	bne.w	800435c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004010:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004014:	2b00      	cmp	r3, #0
 8004016:	f040 81a1 	bne.w	800435c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	6819      	ldr	r1, [r3, #0]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	461a      	mov	r2, r3
 8004028:	f7ff fc20 	bl	800386c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	695a      	ldr	r2, [r3, #20]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	08db      	lsrs	r3, r3, #3
 8004038:	f003 0303 	and.w	r3, r3, #3
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	2b04      	cmp	r3, #4
 800404c:	d00a      	beq.n	8004064 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6818      	ldr	r0, [r3, #0]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	6919      	ldr	r1, [r3, #16]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800405e:	f7ff fb71 	bl	8003744 <LL_ADC_SetOffset>
 8004062:	e17b      	b.n	800435c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2100      	movs	r1, #0
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff fb8e 	bl	800378c <LL_ADC_GetOffsetChannel>
 8004070:	4603      	mov	r3, r0
 8004072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10a      	bne.n	8004090 <HAL_ADC_ConfigChannel+0x148>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2100      	movs	r1, #0
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff fb83 	bl	800378c <LL_ADC_GetOffsetChannel>
 8004086:	4603      	mov	r3, r0
 8004088:	0e9b      	lsrs	r3, r3, #26
 800408a:	f003 021f 	and.w	r2, r3, #31
 800408e:	e01e      	b.n	80040ce <HAL_ADC_ConfigChannel+0x186>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2100      	movs	r1, #0
 8004096:	4618      	mov	r0, r3
 8004098:	f7ff fb78 	bl	800378c <LL_ADC_GetOffsetChannel>
 800409c:	4603      	mov	r3, r0
 800409e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80040a6:	fa93 f3a3 	rbit	r3, r3
 80040aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80040ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80040b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80040b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80040be:	2320      	movs	r3, #32
 80040c0:	e004      	b.n	80040cc <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80040c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040c6:	fab3 f383 	clz	r3, r3
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d105      	bne.n	80040e6 <HAL_ADC_ConfigChannel+0x19e>
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	0e9b      	lsrs	r3, r3, #26
 80040e0:	f003 031f 	and.w	r3, r3, #31
 80040e4:	e018      	b.n	8004118 <HAL_ADC_ConfigChannel+0x1d0>
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80040f2:	fa93 f3a3 	rbit	r3, r3
 80040f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80040fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004102:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800410a:	2320      	movs	r3, #32
 800410c:	e004      	b.n	8004118 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800410e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004112:	fab3 f383 	clz	r3, r3
 8004116:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004118:	429a      	cmp	r2, r3
 800411a:	d106      	bne.n	800412a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2200      	movs	r2, #0
 8004122:	2100      	movs	r1, #0
 8004124:	4618      	mov	r0, r3
 8004126:	f7ff fb47 	bl	80037b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2101      	movs	r1, #1
 8004130:	4618      	mov	r0, r3
 8004132:	f7ff fb2b 	bl	800378c <LL_ADC_GetOffsetChannel>
 8004136:	4603      	mov	r3, r0
 8004138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10a      	bne.n	8004156 <HAL_ADC_ConfigChannel+0x20e>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2101      	movs	r1, #1
 8004146:	4618      	mov	r0, r3
 8004148:	f7ff fb20 	bl	800378c <LL_ADC_GetOffsetChannel>
 800414c:	4603      	mov	r3, r0
 800414e:	0e9b      	lsrs	r3, r3, #26
 8004150:	f003 021f 	and.w	r2, r3, #31
 8004154:	e01e      	b.n	8004194 <HAL_ADC_ConfigChannel+0x24c>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2101      	movs	r1, #1
 800415c:	4618      	mov	r0, r3
 800415e:	f7ff fb15 	bl	800378c <LL_ADC_GetOffsetChannel>
 8004162:	4603      	mov	r3, r0
 8004164:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004168:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800416c:	fa93 f3a3 	rbit	r3, r3
 8004170:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004174:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004178:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800417c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004184:	2320      	movs	r3, #32
 8004186:	e004      	b.n	8004192 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8004188:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800418c:	fab3 f383 	clz	r3, r3
 8004190:	b2db      	uxtb	r3, r3
 8004192:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800419c:	2b00      	cmp	r3, #0
 800419e:	d105      	bne.n	80041ac <HAL_ADC_ConfigChannel+0x264>
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	0e9b      	lsrs	r3, r3, #26
 80041a6:	f003 031f 	and.w	r3, r3, #31
 80041aa:	e018      	b.n	80041de <HAL_ADC_ConfigChannel+0x296>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041b8:	fa93 f3a3 	rbit	r3, r3
 80041bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80041c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80041c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80041c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80041d0:	2320      	movs	r3, #32
 80041d2:	e004      	b.n	80041de <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80041d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041d8:	fab3 f383 	clz	r3, r3
 80041dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80041de:	429a      	cmp	r2, r3
 80041e0:	d106      	bne.n	80041f0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2200      	movs	r2, #0
 80041e8:	2101      	movs	r1, #1
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff fae4 	bl	80037b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2102      	movs	r1, #2
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff fac8 	bl	800378c <LL_ADC_GetOffsetChannel>
 80041fc:	4603      	mov	r3, r0
 80041fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10a      	bne.n	800421c <HAL_ADC_ConfigChannel+0x2d4>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2102      	movs	r1, #2
 800420c:	4618      	mov	r0, r3
 800420e:	f7ff fabd 	bl	800378c <LL_ADC_GetOffsetChannel>
 8004212:	4603      	mov	r3, r0
 8004214:	0e9b      	lsrs	r3, r3, #26
 8004216:	f003 021f 	and.w	r2, r3, #31
 800421a:	e01e      	b.n	800425a <HAL_ADC_ConfigChannel+0x312>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2102      	movs	r1, #2
 8004222:	4618      	mov	r0, r3
 8004224:	f7ff fab2 	bl	800378c <LL_ADC_GetOffsetChannel>
 8004228:	4603      	mov	r3, r0
 800422a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004232:	fa93 f3a3 	rbit	r3, r3
 8004236:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800423a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800423e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004242:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800424a:	2320      	movs	r3, #32
 800424c:	e004      	b.n	8004258 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800424e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004252:	fab3 f383 	clz	r3, r3
 8004256:	b2db      	uxtb	r3, r3
 8004258:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004262:	2b00      	cmp	r3, #0
 8004264:	d105      	bne.n	8004272 <HAL_ADC_ConfigChannel+0x32a>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	0e9b      	lsrs	r3, r3, #26
 800426c:	f003 031f 	and.w	r3, r3, #31
 8004270:	e016      	b.n	80042a0 <HAL_ADC_ConfigChannel+0x358>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800427e:	fa93 f3a3 	rbit	r3, r3
 8004282:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004284:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004286:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800428a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8004292:	2320      	movs	r3, #32
 8004294:	e004      	b.n	80042a0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8004296:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800429a:	fab3 f383 	clz	r3, r3
 800429e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d106      	bne.n	80042b2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2200      	movs	r2, #0
 80042aa:	2102      	movs	r1, #2
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7ff fa83 	bl	80037b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2103      	movs	r1, #3
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7ff fa67 	bl	800378c <LL_ADC_GetOffsetChannel>
 80042be:	4603      	mov	r3, r0
 80042c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10a      	bne.n	80042de <HAL_ADC_ConfigChannel+0x396>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2103      	movs	r1, #3
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7ff fa5c 	bl	800378c <LL_ADC_GetOffsetChannel>
 80042d4:	4603      	mov	r3, r0
 80042d6:	0e9b      	lsrs	r3, r3, #26
 80042d8:	f003 021f 	and.w	r2, r3, #31
 80042dc:	e017      	b.n	800430e <HAL_ADC_ConfigChannel+0x3c6>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2103      	movs	r1, #3
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff fa51 	bl	800378c <LL_ADC_GetOffsetChannel>
 80042ea:	4603      	mov	r3, r0
 80042ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042f0:	fa93 f3a3 	rbit	r3, r3
 80042f4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80042f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042f8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80042fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004300:	2320      	movs	r3, #32
 8004302:	e003      	b.n	800430c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004304:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004306:	fab3 f383 	clz	r3, r3
 800430a:	b2db      	uxtb	r3, r3
 800430c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004316:	2b00      	cmp	r3, #0
 8004318:	d105      	bne.n	8004326 <HAL_ADC_ConfigChannel+0x3de>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	0e9b      	lsrs	r3, r3, #26
 8004320:	f003 031f 	and.w	r3, r3, #31
 8004324:	e011      	b.n	800434a <HAL_ADC_ConfigChannel+0x402>
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800432e:	fa93 f3a3 	rbit	r3, r3
 8004332:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004334:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004336:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800433e:	2320      	movs	r3, #32
 8004340:	e003      	b.n	800434a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004344:	fab3 f383 	clz	r3, r3
 8004348:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800434a:	429a      	cmp	r2, r3
 800434c:	d106      	bne.n	800435c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2200      	movs	r2, #0
 8004354:	2103      	movs	r1, #3
 8004356:	4618      	mov	r0, r3
 8004358:	f7ff fa2e 	bl	80037b8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4618      	mov	r0, r3
 8004362:	f7ff fb49 	bl	80039f8 <LL_ADC_IsEnabled>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	f040 813f 	bne.w	80045ec <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6818      	ldr	r0, [r3, #0]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	6819      	ldr	r1, [r3, #0]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	461a      	mov	r2, r3
 800437c:	f7ff faa2 	bl	80038c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	4a8e      	ldr	r2, [pc, #568]	; (80045c0 <HAL_ADC_ConfigChannel+0x678>)
 8004386:	4293      	cmp	r3, r2
 8004388:	f040 8130 	bne.w	80045ec <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10b      	bne.n	80043b4 <HAL_ADC_ConfigChannel+0x46c>
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	0e9b      	lsrs	r3, r3, #26
 80043a2:	3301      	adds	r3, #1
 80043a4:	f003 031f 	and.w	r3, r3, #31
 80043a8:	2b09      	cmp	r3, #9
 80043aa:	bf94      	ite	ls
 80043ac:	2301      	movls	r3, #1
 80043ae:	2300      	movhi	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	e019      	b.n	80043e8 <HAL_ADC_ConfigChannel+0x4a0>
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043bc:	fa93 f3a3 	rbit	r3, r3
 80043c0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80043c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043c4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80043c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80043cc:	2320      	movs	r3, #32
 80043ce:	e003      	b.n	80043d8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80043d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043d2:	fab3 f383 	clz	r3, r3
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	3301      	adds	r3, #1
 80043da:	f003 031f 	and.w	r3, r3, #31
 80043de:	2b09      	cmp	r3, #9
 80043e0:	bf94      	ite	ls
 80043e2:	2301      	movls	r3, #1
 80043e4:	2300      	movhi	r3, #0
 80043e6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d079      	beq.n	80044e0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d107      	bne.n	8004408 <HAL_ADC_ConfigChannel+0x4c0>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	0e9b      	lsrs	r3, r3, #26
 80043fe:	3301      	adds	r3, #1
 8004400:	069b      	lsls	r3, r3, #26
 8004402:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004406:	e015      	b.n	8004434 <HAL_ADC_ConfigChannel+0x4ec>
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004410:	fa93 f3a3 	rbit	r3, r3
 8004414:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004418:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800441a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004420:	2320      	movs	r3, #32
 8004422:	e003      	b.n	800442c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004424:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004426:	fab3 f383 	clz	r3, r3
 800442a:	b2db      	uxtb	r3, r3
 800442c:	3301      	adds	r3, #1
 800442e:	069b      	lsls	r3, r3, #26
 8004430:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800443c:	2b00      	cmp	r3, #0
 800443e:	d109      	bne.n	8004454 <HAL_ADC_ConfigChannel+0x50c>
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	0e9b      	lsrs	r3, r3, #26
 8004446:	3301      	adds	r3, #1
 8004448:	f003 031f 	and.w	r3, r3, #31
 800444c:	2101      	movs	r1, #1
 800444e:	fa01 f303 	lsl.w	r3, r1, r3
 8004452:	e017      	b.n	8004484 <HAL_ADC_ConfigChannel+0x53c>
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800445c:	fa93 f3a3 	rbit	r3, r3
 8004460:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004464:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800446c:	2320      	movs	r3, #32
 800446e:	e003      	b.n	8004478 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004472:	fab3 f383 	clz	r3, r3
 8004476:	b2db      	uxtb	r3, r3
 8004478:	3301      	adds	r3, #1
 800447a:	f003 031f 	and.w	r3, r3, #31
 800447e:	2101      	movs	r1, #1
 8004480:	fa01 f303 	lsl.w	r3, r1, r3
 8004484:	ea42 0103 	orr.w	r1, r2, r3
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10a      	bne.n	80044aa <HAL_ADC_ConfigChannel+0x562>
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	0e9b      	lsrs	r3, r3, #26
 800449a:	3301      	adds	r3, #1
 800449c:	f003 021f 	and.w	r2, r3, #31
 80044a0:	4613      	mov	r3, r2
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	4413      	add	r3, r2
 80044a6:	051b      	lsls	r3, r3, #20
 80044a8:	e018      	b.n	80044dc <HAL_ADC_ConfigChannel+0x594>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b2:	fa93 f3a3 	rbit	r3, r3
 80044b6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80044b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80044bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80044c2:	2320      	movs	r3, #32
 80044c4:	e003      	b.n	80044ce <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80044c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044c8:	fab3 f383 	clz	r3, r3
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	3301      	adds	r3, #1
 80044d0:	f003 021f 	and.w	r2, r3, #31
 80044d4:	4613      	mov	r3, r2
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	4413      	add	r3, r2
 80044da:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044dc:	430b      	orrs	r3, r1
 80044de:	e080      	b.n	80045e2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d107      	bne.n	80044fc <HAL_ADC_ConfigChannel+0x5b4>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	0e9b      	lsrs	r3, r3, #26
 80044f2:	3301      	adds	r3, #1
 80044f4:	069b      	lsls	r3, r3, #26
 80044f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044fa:	e015      	b.n	8004528 <HAL_ADC_ConfigChannel+0x5e0>
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004504:	fa93 f3a3 	rbit	r3, r3
 8004508:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800450a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800450e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004514:	2320      	movs	r3, #32
 8004516:	e003      	b.n	8004520 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8004518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451a:	fab3 f383 	clz	r3, r3
 800451e:	b2db      	uxtb	r3, r3
 8004520:	3301      	adds	r3, #1
 8004522:	069b      	lsls	r3, r3, #26
 8004524:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004530:	2b00      	cmp	r3, #0
 8004532:	d109      	bne.n	8004548 <HAL_ADC_ConfigChannel+0x600>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	0e9b      	lsrs	r3, r3, #26
 800453a:	3301      	adds	r3, #1
 800453c:	f003 031f 	and.w	r3, r3, #31
 8004540:	2101      	movs	r1, #1
 8004542:	fa01 f303 	lsl.w	r3, r1, r3
 8004546:	e017      	b.n	8004578 <HAL_ADC_ConfigChannel+0x630>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454e:	6a3b      	ldr	r3, [r7, #32]
 8004550:	fa93 f3a3 	rbit	r3, r3
 8004554:	61fb      	str	r3, [r7, #28]
  return result;
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004560:	2320      	movs	r3, #32
 8004562:	e003      	b.n	800456c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	fab3 f383 	clz	r3, r3
 800456a:	b2db      	uxtb	r3, r3
 800456c:	3301      	adds	r3, #1
 800456e:	f003 031f 	and.w	r3, r3, #31
 8004572:	2101      	movs	r1, #1
 8004574:	fa01 f303 	lsl.w	r3, r1, r3
 8004578:	ea42 0103 	orr.w	r1, r2, r3
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10d      	bne.n	80045a4 <HAL_ADC_ConfigChannel+0x65c>
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	0e9b      	lsrs	r3, r3, #26
 800458e:	3301      	adds	r3, #1
 8004590:	f003 021f 	and.w	r2, r3, #31
 8004594:	4613      	mov	r3, r2
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	4413      	add	r3, r2
 800459a:	3b1e      	subs	r3, #30
 800459c:	051b      	lsls	r3, r3, #20
 800459e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045a2:	e01d      	b.n	80045e0 <HAL_ADC_ConfigChannel+0x698>
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	fa93 f3a3 	rbit	r3, r3
 80045b0:	613b      	str	r3, [r7, #16]
  return result;
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d103      	bne.n	80045c4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80045bc:	2320      	movs	r3, #32
 80045be:	e005      	b.n	80045cc <HAL_ADC_ConfigChannel+0x684>
 80045c0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	fab3 f383 	clz	r3, r3
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	3301      	adds	r3, #1
 80045ce:	f003 021f 	and.w	r2, r3, #31
 80045d2:	4613      	mov	r3, r2
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	4413      	add	r3, r2
 80045d8:	3b1e      	subs	r3, #30
 80045da:	051b      	lsls	r3, r3, #20
 80045dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045e0:	430b      	orrs	r3, r1
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	6892      	ldr	r2, [r2, #8]
 80045e6:	4619      	mov	r1, r3
 80045e8:	f7ff f940 	bl	800386c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	4b3d      	ldr	r3, [pc, #244]	; (80046e8 <HAL_ADC_ConfigChannel+0x7a0>)
 80045f2:	4013      	ands	r3, r2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d06c      	beq.n	80046d2 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045f8:	483c      	ldr	r0, [pc, #240]	; (80046ec <HAL_ADC_ConfigChannel+0x7a4>)
 80045fa:	f7ff f895 	bl	8003728 <LL_ADC_GetCommonPathInternalCh>
 80045fe:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a3a      	ldr	r2, [pc, #232]	; (80046f0 <HAL_ADC_ConfigChannel+0x7a8>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d127      	bne.n	800465c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800460c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004610:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d121      	bne.n	800465c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a35      	ldr	r2, [pc, #212]	; (80046f4 <HAL_ADC_ConfigChannel+0x7ac>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d157      	bne.n	80046d2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004622:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004626:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800462a:	4619      	mov	r1, r3
 800462c:	482f      	ldr	r0, [pc, #188]	; (80046ec <HAL_ADC_ConfigChannel+0x7a4>)
 800462e:	f7ff f868 	bl	8003702 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004632:	4b31      	ldr	r3, [pc, #196]	; (80046f8 <HAL_ADC_ConfigChannel+0x7b0>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	099b      	lsrs	r3, r3, #6
 8004638:	4a30      	ldr	r2, [pc, #192]	; (80046fc <HAL_ADC_ConfigChannel+0x7b4>)
 800463a:	fba2 2303 	umull	r2, r3, r2, r3
 800463e:	099b      	lsrs	r3, r3, #6
 8004640:	1c5a      	adds	r2, r3, #1
 8004642:	4613      	mov	r3, r2
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	4413      	add	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800464c:	e002      	b.n	8004654 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	3b01      	subs	r3, #1
 8004652:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f9      	bne.n	800464e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800465a:	e03a      	b.n	80046d2 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a27      	ldr	r2, [pc, #156]	; (8004700 <HAL_ADC_ConfigChannel+0x7b8>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d113      	bne.n	800468e <HAL_ADC_ConfigChannel+0x746>
 8004666:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800466a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10d      	bne.n	800468e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a1f      	ldr	r2, [pc, #124]	; (80046f4 <HAL_ADC_ConfigChannel+0x7ac>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d12a      	bne.n	80046d2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800467c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004680:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004684:	4619      	mov	r1, r3
 8004686:	4819      	ldr	r0, [pc, #100]	; (80046ec <HAL_ADC_ConfigChannel+0x7a4>)
 8004688:	f7ff f83b 	bl	8003702 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800468c:	e021      	b.n	80046d2 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a1c      	ldr	r2, [pc, #112]	; (8004704 <HAL_ADC_ConfigChannel+0x7bc>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d11c      	bne.n	80046d2 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004698:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800469c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d116      	bne.n	80046d2 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a12      	ldr	r2, [pc, #72]	; (80046f4 <HAL_ADC_ConfigChannel+0x7ac>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d111      	bne.n	80046d2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80046b6:	4619      	mov	r1, r3
 80046b8:	480c      	ldr	r0, [pc, #48]	; (80046ec <HAL_ADC_ConfigChannel+0x7a4>)
 80046ba:	f7ff f822 	bl	8003702 <LL_ADC_SetCommonPathInternalCh>
 80046be:	e008      	b.n	80046d2 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c4:	f043 0220 	orr.w	r2, r3, #32
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80046da:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80046de:	4618      	mov	r0, r3
 80046e0:	37d8      	adds	r7, #216	; 0xd8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	80080000 	.word	0x80080000
 80046ec:	50040300 	.word	0x50040300
 80046f0:	c7520000 	.word	0xc7520000
 80046f4:	50040000 	.word	0x50040000
 80046f8:	2000000c 	.word	0x2000000c
 80046fc:	053e2d63 	.word	0x053e2d63
 8004700:	cb840000 	.word	0xcb840000
 8004704:	80000001 	.word	0x80000001

08004708 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4618      	mov	r0, r3
 8004716:	f7ff f96f 	bl	80039f8 <LL_ADC_IsEnabled>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d14d      	bne.n	80047bc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689a      	ldr	r2, [r3, #8]
 8004726:	4b28      	ldr	r3, [pc, #160]	; (80047c8 <ADC_Enable+0xc0>)
 8004728:	4013      	ands	r3, r2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00d      	beq.n	800474a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004732:	f043 0210 	orr.w	r2, r3, #16
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473e:	f043 0201 	orr.w	r2, r3, #1
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e039      	b.n	80047be <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4618      	mov	r0, r3
 8004750:	f7ff f92a 	bl	80039a8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004754:	f7fe ffb6 	bl	80036c4 <HAL_GetTick>
 8004758:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800475a:	e028      	b.n	80047ae <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff f949 	bl	80039f8 <LL_ADC_IsEnabled>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d104      	bne.n	8004776 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff f919 	bl	80039a8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004776:	f7fe ffa5 	bl	80036c4 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d914      	bls.n	80047ae <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b01      	cmp	r3, #1
 8004790:	d00d      	beq.n	80047ae <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004796:	f043 0210 	orr.w	r2, r3, #16
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a2:	f043 0201 	orr.w	r2, r3, #1
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e007      	b.n	80047be <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d1cf      	bne.n	800475c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	8000003f 	.word	0x8000003f

080047cc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4618      	mov	r0, r3
 80047da:	f7ff f920 	bl	8003a1e <LL_ADC_IsDisableOngoing>
 80047de:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7ff f907 	bl	80039f8 <LL_ADC_IsEnabled>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d047      	beq.n	8004880 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d144      	bne.n	8004880 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f003 030d 	and.w	r3, r3, #13
 8004800:	2b01      	cmp	r3, #1
 8004802:	d10c      	bne.n	800481e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4618      	mov	r0, r3
 800480a:	f7ff f8e1 	bl	80039d0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2203      	movs	r2, #3
 8004814:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004816:	f7fe ff55 	bl	80036c4 <HAL_GetTick>
 800481a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800481c:	e029      	b.n	8004872 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004822:	f043 0210 	orr.w	r2, r3, #16
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482e:	f043 0201 	orr.w	r2, r3, #1
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e023      	b.n	8004882 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800483a:	f7fe ff43 	bl	80036c4 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d914      	bls.n	8004872 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00d      	beq.n	8004872 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485a:	f043 0210 	orr.w	r2, r3, #16
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004866:	f043 0201 	orr.w	r2, r3, #1
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e007      	b.n	8004882 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1dc      	bne.n	800483a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <LL_ADC_StartCalibration>:
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
 8004892:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800489c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80048a6:	4313      	orrs	r3, r2
 80048a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	609a      	str	r2, [r3, #8]
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <LL_ADC_IsCalibrationOnGoing>:
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048d0:	d101      	bne.n	80048d6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80048d2:	2301      	movs	r3, #1
 80048d4:	e000      	b.n	80048d8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80048ee:	2300      	movs	r3, #0
 80048f0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d101      	bne.n	8004900 <HAL_ADCEx_Calibration_Start+0x1c>
 80048fc:	2302      	movs	r3, #2
 80048fe:	e04d      	b.n	800499c <HAL_ADCEx_Calibration_Start+0xb8>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f7ff ff5f 	bl	80047cc <ADC_Disable>
 800490e:	4603      	mov	r3, r0
 8004910:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004912:	7bfb      	ldrb	r3, [r7, #15]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d136      	bne.n	8004986 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004920:	f023 0302 	bic.w	r3, r3, #2
 8004924:	f043 0202 	orr.w	r2, r3, #2
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6839      	ldr	r1, [r7, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f7ff ffa9 	bl	800488a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004938:	e014      	b.n	8004964 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	3301      	adds	r3, #1
 800493e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8004946:	d30d      	bcc.n	8004964 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494c:	f023 0312 	bic.w	r3, r3, #18
 8004950:	f043 0210 	orr.w	r2, r3, #16
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e01b      	b.n	800499c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4618      	mov	r0, r3
 800496a:	f7ff ffa7 	bl	80048bc <LL_ADC_IsCalibrationOnGoing>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1e2      	bne.n	800493a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004978:	f023 0303 	bic.w	r3, r3, #3
 800497c:	f043 0201 	orr.w	r2, r3, #1
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	655a      	str	r2, [r3, #84]	; 0x54
 8004984:	e005      	b.n	8004992 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498a:	f043 0210 	orr.w	r2, r3, #16
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800499a:	7bfb      	ldrb	r3, [r7, #15]
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049b4:	4b0c      	ldr	r3, [pc, #48]	; (80049e8 <__NVIC_SetPriorityGrouping+0x44>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049c0:	4013      	ands	r3, r2
 80049c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80049d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049d6:	4a04      	ldr	r2, [pc, #16]	; (80049e8 <__NVIC_SetPriorityGrouping+0x44>)
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	60d3      	str	r3, [r2, #12]
}
 80049dc:	bf00      	nop
 80049de:	3714      	adds	r7, #20
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	e000ed00 	.word	0xe000ed00

080049ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049f0:	4b04      	ldr	r3, [pc, #16]	; (8004a04 <__NVIC_GetPriorityGrouping+0x18>)
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	0a1b      	lsrs	r3, r3, #8
 80049f6:	f003 0307 	and.w	r3, r3, #7
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	e000ed00 	.word	0xe000ed00

08004a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	4603      	mov	r3, r0
 8004a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	db0b      	blt.n	8004a32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a1a:	79fb      	ldrb	r3, [r7, #7]
 8004a1c:	f003 021f 	and.w	r2, r3, #31
 8004a20:	4907      	ldr	r1, [pc, #28]	; (8004a40 <__NVIC_EnableIRQ+0x38>)
 8004a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a26:	095b      	lsrs	r3, r3, #5
 8004a28:	2001      	movs	r0, #1
 8004a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	e000e100 	.word	0xe000e100

08004a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	6039      	str	r1, [r7, #0]
 8004a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	db0a      	blt.n	8004a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	490c      	ldr	r1, [pc, #48]	; (8004a90 <__NVIC_SetPriority+0x4c>)
 8004a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a62:	0112      	lsls	r2, r2, #4
 8004a64:	b2d2      	uxtb	r2, r2
 8004a66:	440b      	add	r3, r1
 8004a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a6c:	e00a      	b.n	8004a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	4908      	ldr	r1, [pc, #32]	; (8004a94 <__NVIC_SetPriority+0x50>)
 8004a74:	79fb      	ldrb	r3, [r7, #7]
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	3b04      	subs	r3, #4
 8004a7c:	0112      	lsls	r2, r2, #4
 8004a7e:	b2d2      	uxtb	r2, r2
 8004a80:	440b      	add	r3, r1
 8004a82:	761a      	strb	r2, [r3, #24]
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	e000e100 	.word	0xe000e100
 8004a94:	e000ed00 	.word	0xe000ed00

08004a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b089      	sub	sp, #36	; 0x24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	f1c3 0307 	rsb	r3, r3, #7
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	bf28      	it	cs
 8004ab6:	2304      	movcs	r3, #4
 8004ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	3304      	adds	r3, #4
 8004abe:	2b06      	cmp	r3, #6
 8004ac0:	d902      	bls.n	8004ac8 <NVIC_EncodePriority+0x30>
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	3b03      	subs	r3, #3
 8004ac6:	e000      	b.n	8004aca <NVIC_EncodePriority+0x32>
 8004ac8:	2300      	movs	r3, #0
 8004aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004acc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad6:	43da      	mvns	r2, r3
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	401a      	ands	r2, r3
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ae0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aea:	43d9      	mvns	r1, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004af0:	4313      	orrs	r3, r2
         );
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3724      	adds	r7, #36	; 0x24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
	...

08004b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b10:	d301      	bcc.n	8004b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b12:	2301      	movs	r3, #1
 8004b14:	e00f      	b.n	8004b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b16:	4a0a      	ldr	r2, [pc, #40]	; (8004b40 <SysTick_Config+0x40>)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b1e:	210f      	movs	r1, #15
 8004b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b24:	f7ff ff8e 	bl	8004a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b28:	4b05      	ldr	r3, [pc, #20]	; (8004b40 <SysTick_Config+0x40>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b2e:	4b04      	ldr	r3, [pc, #16]	; (8004b40 <SysTick_Config+0x40>)
 8004b30:	2207      	movs	r2, #7
 8004b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	e000e010 	.word	0xe000e010

08004b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7ff ff29 	bl	80049a4 <__NVIC_SetPriorityGrouping>
}
 8004b52:	bf00      	nop
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b086      	sub	sp, #24
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	4603      	mov	r3, r0
 8004b62:	60b9      	str	r1, [r7, #8]
 8004b64:	607a      	str	r2, [r7, #4]
 8004b66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b6c:	f7ff ff3e 	bl	80049ec <__NVIC_GetPriorityGrouping>
 8004b70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	68b9      	ldr	r1, [r7, #8]
 8004b76:	6978      	ldr	r0, [r7, #20]
 8004b78:	f7ff ff8e 	bl	8004a98 <NVIC_EncodePriority>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b82:	4611      	mov	r1, r2
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7ff ff5d 	bl	8004a44 <__NVIC_SetPriority>
}
 8004b8a:	bf00      	nop
 8004b8c:	3718      	adds	r7, #24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b082      	sub	sp, #8
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	4603      	mov	r3, r0
 8004b9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff ff31 	bl	8004a08 <__NVIC_EnableIRQ>
}
 8004ba6:	bf00      	nop
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b082      	sub	sp, #8
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7ff ffa2 	bl	8004b00 <SysTick_Config>
 8004bbc:	4603      	mov	r3, r0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
	...

08004bc8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e098      	b.n	8004d0c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	461a      	mov	r2, r3
 8004be0:	4b4d      	ldr	r3, [pc, #308]	; (8004d18 <HAL_DMA_Init+0x150>)
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d80f      	bhi.n	8004c06 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	461a      	mov	r2, r3
 8004bec:	4b4b      	ldr	r3, [pc, #300]	; (8004d1c <HAL_DMA_Init+0x154>)
 8004bee:	4413      	add	r3, r2
 8004bf0:	4a4b      	ldr	r2, [pc, #300]	; (8004d20 <HAL_DMA_Init+0x158>)
 8004bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf6:	091b      	lsrs	r3, r3, #4
 8004bf8:	009a      	lsls	r2, r3, #2
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a48      	ldr	r2, [pc, #288]	; (8004d24 <HAL_DMA_Init+0x15c>)
 8004c02:	641a      	str	r2, [r3, #64]	; 0x40
 8004c04:	e00e      	b.n	8004c24 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	4b46      	ldr	r3, [pc, #280]	; (8004d28 <HAL_DMA_Init+0x160>)
 8004c0e:	4413      	add	r3, r2
 8004c10:	4a43      	ldr	r2, [pc, #268]	; (8004d20 <HAL_DMA_Init+0x158>)
 8004c12:	fba2 2303 	umull	r2, r3, r2, r3
 8004c16:	091b      	lsrs	r3, r3, #4
 8004c18:	009a      	lsls	r2, r3, #2
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a42      	ldr	r2, [pc, #264]	; (8004d2c <HAL_DMA_Init+0x164>)
 8004c22:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c3e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004c48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c7e:	d039      	beq.n	8004cf4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c84:	4a27      	ldr	r2, [pc, #156]	; (8004d24 <HAL_DMA_Init+0x15c>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d11a      	bne.n	8004cc0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004c8a:	4b29      	ldr	r3, [pc, #164]	; (8004d30 <HAL_DMA_Init+0x168>)
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c92:	f003 031c 	and.w	r3, r3, #28
 8004c96:	210f      	movs	r1, #15
 8004c98:	fa01 f303 	lsl.w	r3, r1, r3
 8004c9c:	43db      	mvns	r3, r3
 8004c9e:	4924      	ldr	r1, [pc, #144]	; (8004d30 <HAL_DMA_Init+0x168>)
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004ca4:	4b22      	ldr	r3, [pc, #136]	; (8004d30 <HAL_DMA_Init+0x168>)
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6859      	ldr	r1, [r3, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb0:	f003 031c 	and.w	r3, r3, #28
 8004cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb8:	491d      	ldr	r1, [pc, #116]	; (8004d30 <HAL_DMA_Init+0x168>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	600b      	str	r3, [r1, #0]
 8004cbe:	e019      	b.n	8004cf4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004cc0:	4b1c      	ldr	r3, [pc, #112]	; (8004d34 <HAL_DMA_Init+0x16c>)
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc8:	f003 031c 	and.w	r3, r3, #28
 8004ccc:	210f      	movs	r1, #15
 8004cce:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd2:	43db      	mvns	r3, r3
 8004cd4:	4917      	ldr	r1, [pc, #92]	; (8004d34 <HAL_DMA_Init+0x16c>)
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004cda:	4b16      	ldr	r3, [pc, #88]	; (8004d34 <HAL_DMA_Init+0x16c>)
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6859      	ldr	r1, [r3, #4]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce6:	f003 031c 	and.w	r3, r3, #28
 8004cea:	fa01 f303 	lsl.w	r3, r1, r3
 8004cee:	4911      	ldr	r1, [pc, #68]	; (8004d34 <HAL_DMA_Init+0x16c>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3714      	adds	r7, #20
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	40020407 	.word	0x40020407
 8004d1c:	bffdfff8 	.word	0xbffdfff8
 8004d20:	cccccccd 	.word	0xcccccccd
 8004d24:	40020000 	.word	0x40020000
 8004d28:	bffdfbf8 	.word	0xbffdfbf8
 8004d2c:	40020400 	.word	0x40020400
 8004d30:	400200a8 	.word	0x400200a8
 8004d34:	400204a8 	.word	0x400204a8

08004d38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
 8004d44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d46:	2300      	movs	r3, #0
 8004d48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d101      	bne.n	8004d58 <HAL_DMA_Start_IT+0x20>
 8004d54:	2302      	movs	r3, #2
 8004d56:	e04b      	b.n	8004df0 <HAL_DMA_Start_IT+0xb8>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d13a      	bne.n	8004de2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 0201 	bic.w	r2, r2, #1
 8004d88:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	68b9      	ldr	r1, [r7, #8]
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f000 f92f 	bl	8004ff4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d008      	beq.n	8004db0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f042 020e 	orr.w	r2, r2, #14
 8004dac:	601a      	str	r2, [r3, #0]
 8004dae:	e00f      	b.n	8004dd0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0204 	bic.w	r2, r2, #4
 8004dbe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f042 020a 	orr.w	r2, r2, #10
 8004dce:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f042 0201 	orr.w	r2, r2, #1
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	e005      	b.n	8004dee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004dea:	2302      	movs	r3, #2
 8004dec:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e00:	2300      	movs	r3, #0
 8004e02:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d005      	beq.n	8004e1c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2204      	movs	r2, #4
 8004e14:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	73fb      	strb	r3, [r7, #15]
 8004e1a:	e029      	b.n	8004e70 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 020e 	bic.w	r2, r2, #14
 8004e2a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 0201 	bic.w	r2, r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e40:	f003 021c 	and.w	r2, r3, #28
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e48:	2101      	movs	r1, #1
 8004e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8004e4e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d003      	beq.n	8004e70 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	4798      	blx	r3
    }
  }
  return status;
 8004e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b084      	sub	sp, #16
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e96:	f003 031c 	and.w	r3, r3, #28
 8004e9a:	2204      	movs	r2, #4
 8004e9c:	409a      	lsls	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d026      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x7a>
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	f003 0304 	and.w	r3, r3, #4
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d021      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0320 	and.w	r3, r3, #32
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d107      	bne.n	8004ece <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 0204 	bic.w	r2, r2, #4
 8004ecc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed2:	f003 021c 	and.w	r2, r3, #28
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	2104      	movs	r1, #4
 8004edc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ee0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d071      	beq.n	8004fce <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004ef2:	e06c      	b.n	8004fce <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef8:	f003 031c 	and.w	r3, r3, #28
 8004efc:	2202      	movs	r2, #2
 8004efe:	409a      	lsls	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4013      	ands	r3, r2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d02e      	beq.n	8004f66 <HAL_DMA_IRQHandler+0xec>
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d029      	beq.n	8004f66 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0320 	and.w	r3, r3, #32
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10b      	bne.n	8004f38 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f022 020a 	bic.w	r2, r2, #10
 8004f2e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f3c:	f003 021c 	and.w	r2, r3, #28
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f44:	2102      	movs	r1, #2
 8004f46:	fa01 f202 	lsl.w	r2, r1, r2
 8004f4a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d038      	beq.n	8004fce <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004f64:	e033      	b.n	8004fce <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6a:	f003 031c 	and.w	r3, r3, #28
 8004f6e:	2208      	movs	r2, #8
 8004f70:	409a      	lsls	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	4013      	ands	r3, r2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d02a      	beq.n	8004fd0 <HAL_DMA_IRQHandler+0x156>
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	f003 0308 	and.w	r3, r3, #8
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d025      	beq.n	8004fd0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 020e 	bic.w	r2, r2, #14
 8004f92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f98:	f003 021c 	and.w	r2, r3, #28
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8004fa6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d004      	beq.n	8004fd0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004fce:	bf00      	nop
 8004fd0:	bf00      	nop
}
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004fe6:	b2db      	uxtb	r3, r3
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
 8005000:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005006:	f003 021c 	and.w	r2, r3, #28
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500e:	2101      	movs	r1, #1
 8005010:	fa01 f202 	lsl.w	r2, r1, r2
 8005014:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	2b10      	cmp	r3, #16
 8005024:	d108      	bne.n	8005038 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005036:	e007      	b.n	8005048 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	60da      	str	r2, [r3, #12]
}
 8005048:	bf00      	nop
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800505e:	2300      	movs	r3, #0
 8005060:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005062:	e148      	b.n	80052f6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	2101      	movs	r1, #1
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	fa01 f303 	lsl.w	r3, r1, r3
 8005070:	4013      	ands	r3, r2
 8005072:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	f000 813a 	beq.w	80052f0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d00b      	beq.n	800509c <HAL_GPIO_Init+0x48>
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	2b02      	cmp	r3, #2
 800508a:	d007      	beq.n	800509c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005090:	2b11      	cmp	r3, #17
 8005092:	d003      	beq.n	800509c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	2b12      	cmp	r3, #18
 800509a:	d130      	bne.n	80050fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	2203      	movs	r2, #3
 80050a8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ac:	43db      	mvns	r3, r3
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	4013      	ands	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	68da      	ldr	r2, [r3, #12]
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	fa02 f303 	lsl.w	r3, r2, r3
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80050d2:	2201      	movs	r2, #1
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	fa02 f303 	lsl.w	r3, r2, r3
 80050da:	43db      	mvns	r3, r3
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	4013      	ands	r3, r2
 80050e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	091b      	lsrs	r3, r3, #4
 80050e8:	f003 0201 	and.w	r2, r3, #1
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	fa02 f303 	lsl.w	r3, r2, r3
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	2203      	movs	r2, #3
 800510a:	fa02 f303 	lsl.w	r3, r2, r3
 800510e:	43db      	mvns	r3, r3
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	4013      	ands	r3, r2
 8005114:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	689a      	ldr	r2, [r3, #8]
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	005b      	lsls	r3, r3, #1
 800511e:	fa02 f303 	lsl.w	r3, r2, r3
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	4313      	orrs	r3, r2
 8005126:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	2b02      	cmp	r3, #2
 8005134:	d003      	beq.n	800513e <HAL_GPIO_Init+0xea>
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2b12      	cmp	r3, #18
 800513c:	d123      	bne.n	8005186 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	08da      	lsrs	r2, r3, #3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3208      	adds	r2, #8
 8005146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800514a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f003 0307 	and.w	r3, r3, #7
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	220f      	movs	r2, #15
 8005156:	fa02 f303 	lsl.w	r3, r2, r3
 800515a:	43db      	mvns	r3, r3
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	4013      	ands	r3, r2
 8005160:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	691a      	ldr	r2, [r3, #16]
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f003 0307 	and.w	r3, r3, #7
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	fa02 f303 	lsl.w	r3, r2, r3
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	4313      	orrs	r3, r2
 8005176:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	08da      	lsrs	r2, r3, #3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3208      	adds	r2, #8
 8005180:	6939      	ldr	r1, [r7, #16]
 8005182:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	2203      	movs	r2, #3
 8005192:	fa02 f303 	lsl.w	r3, r2, r3
 8005196:	43db      	mvns	r3, r3
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	4013      	ands	r3, r2
 800519c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f003 0203 	and.w	r2, r3, #3
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	fa02 f303 	lsl.w	r3, r2, r3
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 8094 	beq.w	80052f0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051c8:	4b52      	ldr	r3, [pc, #328]	; (8005314 <HAL_GPIO_Init+0x2c0>)
 80051ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051cc:	4a51      	ldr	r2, [pc, #324]	; (8005314 <HAL_GPIO_Init+0x2c0>)
 80051ce:	f043 0301 	orr.w	r3, r3, #1
 80051d2:	6613      	str	r3, [r2, #96]	; 0x60
 80051d4:	4b4f      	ldr	r3, [pc, #316]	; (8005314 <HAL_GPIO_Init+0x2c0>)
 80051d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	60bb      	str	r3, [r7, #8]
 80051de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80051e0:	4a4d      	ldr	r2, [pc, #308]	; (8005318 <HAL_GPIO_Init+0x2c4>)
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	089b      	lsrs	r3, r3, #2
 80051e6:	3302      	adds	r3, #2
 80051e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f003 0303 	and.w	r3, r3, #3
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	220f      	movs	r2, #15
 80051f8:	fa02 f303 	lsl.w	r3, r2, r3
 80051fc:	43db      	mvns	r3, r3
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	4013      	ands	r3, r2
 8005202:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800520a:	d00d      	beq.n	8005228 <HAL_GPIO_Init+0x1d4>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a43      	ldr	r2, [pc, #268]	; (800531c <HAL_GPIO_Init+0x2c8>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d007      	beq.n	8005224 <HAL_GPIO_Init+0x1d0>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a42      	ldr	r2, [pc, #264]	; (8005320 <HAL_GPIO_Init+0x2cc>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d101      	bne.n	8005220 <HAL_GPIO_Init+0x1cc>
 800521c:	2302      	movs	r3, #2
 800521e:	e004      	b.n	800522a <HAL_GPIO_Init+0x1d6>
 8005220:	2307      	movs	r3, #7
 8005222:	e002      	b.n	800522a <HAL_GPIO_Init+0x1d6>
 8005224:	2301      	movs	r3, #1
 8005226:	e000      	b.n	800522a <HAL_GPIO_Init+0x1d6>
 8005228:	2300      	movs	r3, #0
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	f002 0203 	and.w	r2, r2, #3
 8005230:	0092      	lsls	r2, r2, #2
 8005232:	4093      	lsls	r3, r2
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	4313      	orrs	r3, r2
 8005238:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800523a:	4937      	ldr	r1, [pc, #220]	; (8005318 <HAL_GPIO_Init+0x2c4>)
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	089b      	lsrs	r3, r3, #2
 8005240:	3302      	adds	r3, #2
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005248:	4b36      	ldr	r3, [pc, #216]	; (8005324 <HAL_GPIO_Init+0x2d0>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	43db      	mvns	r3, r3
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	4013      	ands	r3, r2
 8005256:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d003      	beq.n	800526c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	4313      	orrs	r3, r2
 800526a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800526c:	4a2d      	ldr	r2, [pc, #180]	; (8005324 <HAL_GPIO_Init+0x2d0>)
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8005272:	4b2c      	ldr	r3, [pc, #176]	; (8005324 <HAL_GPIO_Init+0x2d0>)
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	43db      	mvns	r3, r3
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	4013      	ands	r3, r2
 8005280:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4313      	orrs	r3, r2
 8005294:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005296:	4a23      	ldr	r2, [pc, #140]	; (8005324 <HAL_GPIO_Init+0x2d0>)
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800529c:	4b21      	ldr	r3, [pc, #132]	; (8005324 <HAL_GPIO_Init+0x2d0>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	43db      	mvns	r3, r3
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	4013      	ands	r3, r2
 80052aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d003      	beq.n	80052c0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	4313      	orrs	r3, r2
 80052be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80052c0:	4a18      	ldr	r2, [pc, #96]	; (8005324 <HAL_GPIO_Init+0x2d0>)
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80052c6:	4b17      	ldr	r3, [pc, #92]	; (8005324 <HAL_GPIO_Init+0x2d0>)
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	43db      	mvns	r3, r3
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	4013      	ands	r3, r2
 80052d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80052ea:	4a0e      	ldr	r2, [pc, #56]	; (8005324 <HAL_GPIO_Init+0x2d0>)
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	3301      	adds	r3, #1
 80052f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	f47f aeaf 	bne.w	8005064 <HAL_GPIO_Init+0x10>
  }
}
 8005306:	bf00      	nop
 8005308:	bf00      	nop
 800530a:	371c      	adds	r7, #28
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr
 8005314:	40021000 	.word	0x40021000
 8005318:	40010000 	.word	0x40010000
 800531c:	48000400 	.word	0x48000400
 8005320:	48000800 	.word	0x48000800
 8005324:	40010400 	.word	0x40010400

08005328 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	460b      	mov	r3, r1
 8005332:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	691a      	ldr	r2, [r3, #16]
 8005338:	887b      	ldrh	r3, [r7, #2]
 800533a:	4013      	ands	r3, r2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d002      	beq.n	8005346 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005340:	2301      	movs	r3, #1
 8005342:	73fb      	strb	r3, [r7, #15]
 8005344:	e001      	b.n	800534a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005346:	2300      	movs	r3, #0
 8005348:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800534a:	7bfb      	ldrb	r3, [r7, #15]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	460b      	mov	r3, r1
 8005362:	807b      	strh	r3, [r7, #2]
 8005364:	4613      	mov	r3, r2
 8005366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005368:	787b      	ldrb	r3, [r7, #1]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d003      	beq.n	8005376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800536e:	887a      	ldrh	r2, [r7, #2]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005374:	e002      	b.n	800537c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005376:	887a      	ldrh	r2, [r7, #2]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	4603      	mov	r3, r0
 8005390:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005392:	4b08      	ldr	r3, [pc, #32]	; (80053b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005394:	695a      	ldr	r2, [r3, #20]
 8005396:	88fb      	ldrh	r3, [r7, #6]
 8005398:	4013      	ands	r3, r2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d006      	beq.n	80053ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800539e:	4a05      	ldr	r2, [pc, #20]	; (80053b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053a0:	88fb      	ldrh	r3, [r7, #6]
 80053a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80053a4:	88fb      	ldrh	r3, [r7, #6]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 f806 	bl	80053b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80053ac:	bf00      	nop
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	40010400 	.word	0x40010400

080053b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	4603      	mov	r3, r0
 80053c0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80053c2:	bf00      	nop
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b082      	sub	sp, #8
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e081      	b.n	80054e4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d106      	bne.n	80053fa <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f7fd fdd7 	bl	8002fa8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2224      	movs	r2, #36	; 0x24
 80053fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0201 	bic.w	r2, r2, #1
 8005410:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685a      	ldr	r2, [r3, #4]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800541e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689a      	ldr	r2, [r3, #8]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800542e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d107      	bne.n	8005448 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689a      	ldr	r2, [r3, #8]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005444:	609a      	str	r2, [r3, #8]
 8005446:	e006      	b.n	8005456 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689a      	ldr	r2, [r3, #8]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005454:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	2b02      	cmp	r3, #2
 800545c:	d104      	bne.n	8005468 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005466:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	6812      	ldr	r2, [r2, #0]
 8005472:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800547a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68da      	ldr	r2, [r3, #12]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800548a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	691a      	ldr	r2, [r3, #16]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	ea42 0103 	orr.w	r1, r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	021a      	lsls	r2, r3, #8
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	69d9      	ldr	r1, [r3, #28]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1a      	ldr	r2, [r3, #32]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f042 0201 	orr.w	r2, r2, #1
 80054c4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2220      	movs	r2, #32
 80054d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3708      	adds	r7, #8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b088      	sub	sp, #32
 80054f0:	af02      	add	r7, sp, #8
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	607a      	str	r2, [r7, #4]
 80054f6:	461a      	mov	r2, r3
 80054f8:	460b      	mov	r3, r1
 80054fa:	817b      	strh	r3, [r7, #10]
 80054fc:	4613      	mov	r3, r2
 80054fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2b20      	cmp	r3, #32
 800550a:	f040 80da 	bne.w	80056c2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005514:	2b01      	cmp	r3, #1
 8005516:	d101      	bne.n	800551c <HAL_I2C_Master_Transmit+0x30>
 8005518:	2302      	movs	r3, #2
 800551a:	e0d3      	b.n	80056c4 <HAL_I2C_Master_Transmit+0x1d8>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005524:	f7fe f8ce 	bl	80036c4 <HAL_GetTick>
 8005528:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	2319      	movs	r3, #25
 8005530:	2201      	movs	r2, #1
 8005532:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f001 fd24 	bl	8006f84 <I2C_WaitOnFlagUntilTimeout>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e0be      	b.n	80056c4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2221      	movs	r2, #33	; 0x21
 800554a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2210      	movs	r2, #16
 8005552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	893a      	ldrh	r2, [r7, #8]
 8005566:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005572:	b29b      	uxth	r3, r3
 8005574:	2bff      	cmp	r3, #255	; 0xff
 8005576:	d90e      	bls.n	8005596 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	22ff      	movs	r2, #255	; 0xff
 800557c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005582:	b2da      	uxtb	r2, r3
 8005584:	8979      	ldrh	r1, [r7, #10]
 8005586:	4b51      	ldr	r3, [pc, #324]	; (80056cc <HAL_I2C_Master_Transmit+0x1e0>)
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f001 fe86 	bl	80072a0 <I2C_TransferConfig>
 8005594:	e06c      	b.n	8005670 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800559a:	b29a      	uxth	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055a4:	b2da      	uxtb	r2, r3
 80055a6:	8979      	ldrh	r1, [r7, #10]
 80055a8:	4b48      	ldr	r3, [pc, #288]	; (80056cc <HAL_I2C_Master_Transmit+0x1e0>)
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f001 fe75 	bl	80072a0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80055b6:	e05b      	b.n	8005670 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	6a39      	ldr	r1, [r7, #32]
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f001 fd21 	bl	8007004 <I2C_WaitOnTXISFlagUntilTimeout>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e07b      	b.n	80056c4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	781a      	ldrb	r2, [r3, #0]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	1c5a      	adds	r2, r3, #1
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	3b01      	subs	r3, #1
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f4:	3b01      	subs	r3, #1
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005600:	b29b      	uxth	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d034      	beq.n	8005670 <HAL_I2C_Master_Transmit+0x184>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800560a:	2b00      	cmp	r3, #0
 800560c:	d130      	bne.n	8005670 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	6a3b      	ldr	r3, [r7, #32]
 8005614:	2200      	movs	r2, #0
 8005616:	2180      	movs	r1, #128	; 0x80
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f001 fcb3 	bl	8006f84 <I2C_WaitOnFlagUntilTimeout>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d001      	beq.n	8005628 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e04d      	b.n	80056c4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800562c:	b29b      	uxth	r3, r3
 800562e:	2bff      	cmp	r3, #255	; 0xff
 8005630:	d90e      	bls.n	8005650 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	22ff      	movs	r2, #255	; 0xff
 8005636:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800563c:	b2da      	uxtb	r2, r3
 800563e:	8979      	ldrh	r1, [r7, #10]
 8005640:	2300      	movs	r3, #0
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f001 fe29 	bl	80072a0 <I2C_TransferConfig>
 800564e:	e00f      	b.n	8005670 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005654:	b29a      	uxth	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800565e:	b2da      	uxtb	r2, r3
 8005660:	8979      	ldrh	r1, [r7, #10]
 8005662:	2300      	movs	r3, #0
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f001 fe18 	bl	80072a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005674:	b29b      	uxth	r3, r3
 8005676:	2b00      	cmp	r3, #0
 8005678:	d19e      	bne.n	80055b8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	6a39      	ldr	r1, [r7, #32]
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f001 fd00 	bl	8007084 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e01a      	b.n	80056c4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2220      	movs	r2, #32
 8005694:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6859      	ldr	r1, [r3, #4]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	4b0b      	ldr	r3, [pc, #44]	; (80056d0 <HAL_I2C_Master_Transmit+0x1e4>)
 80056a2:	400b      	ands	r3, r1
 80056a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2220      	movs	r2, #32
 80056aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056be:	2300      	movs	r3, #0
 80056c0:	e000      	b.n	80056c4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80056c2:	2302      	movs	r3, #2
  }
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3718      	adds	r7, #24
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	80002000 	.word	0x80002000
 80056d0:	fe00e800 	.word	0xfe00e800

080056d4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b088      	sub	sp, #32
 80056d8:	af02      	add	r7, sp, #8
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	607a      	str	r2, [r7, #4]
 80056de:	461a      	mov	r2, r3
 80056e0:	460b      	mov	r3, r1
 80056e2:	817b      	strh	r3, [r7, #10]
 80056e4:	4613      	mov	r3, r2
 80056e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b20      	cmp	r3, #32
 80056f2:	f040 80db 	bne.w	80058ac <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d101      	bne.n	8005704 <HAL_I2C_Master_Receive+0x30>
 8005700:	2302      	movs	r3, #2
 8005702:	e0d4      	b.n	80058ae <HAL_I2C_Master_Receive+0x1da>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800570c:	f7fd ffda 	bl	80036c4 <HAL_GetTick>
 8005710:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	2319      	movs	r3, #25
 8005718:	2201      	movs	r2, #1
 800571a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f001 fc30 	bl	8006f84 <I2C_WaitOnFlagUntilTimeout>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d001      	beq.n	800572e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e0bf      	b.n	80058ae <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2222      	movs	r2, #34	; 0x22
 8005732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2210      	movs	r2, #16
 800573a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	893a      	ldrh	r2, [r7, #8]
 800574e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800575a:	b29b      	uxth	r3, r3
 800575c:	2bff      	cmp	r3, #255	; 0xff
 800575e:	d90e      	bls.n	800577e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	22ff      	movs	r2, #255	; 0xff
 8005764:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800576a:	b2da      	uxtb	r2, r3
 800576c:	8979      	ldrh	r1, [r7, #10]
 800576e:	4b52      	ldr	r3, [pc, #328]	; (80058b8 <HAL_I2C_Master_Receive+0x1e4>)
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f001 fd92 	bl	80072a0 <I2C_TransferConfig>
 800577c:	e06d      	b.n	800585a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005782:	b29a      	uxth	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800578c:	b2da      	uxtb	r2, r3
 800578e:	8979      	ldrh	r1, [r7, #10]
 8005790:	4b49      	ldr	r3, [pc, #292]	; (80058b8 <HAL_I2C_Master_Receive+0x1e4>)
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f001 fd81 	bl	80072a0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800579e:	e05c      	b.n	800585a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	6a39      	ldr	r1, [r7, #32]
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f001 fca9 	bl	80070fc <I2C_WaitOnRXNEFlagUntilTimeout>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e07c      	b.n	80058ae <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057be:	b2d2      	uxtb	r2, r2
 80057c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	1c5a      	adds	r2, r3, #1
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057d0:	3b01      	subs	r3, #1
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057dc:	b29b      	uxth	r3, r3
 80057de:	3b01      	subs	r3, #1
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d034      	beq.n	800585a <HAL_I2C_Master_Receive+0x186>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d130      	bne.n	800585a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	9300      	str	r3, [sp, #0]
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	2200      	movs	r2, #0
 8005800:	2180      	movs	r1, #128	; 0x80
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f001 fbbe 	bl	8006f84 <I2C_WaitOnFlagUntilTimeout>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e04d      	b.n	80058ae <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005816:	b29b      	uxth	r3, r3
 8005818:	2bff      	cmp	r3, #255	; 0xff
 800581a:	d90e      	bls.n	800583a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	22ff      	movs	r2, #255	; 0xff
 8005820:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005826:	b2da      	uxtb	r2, r3
 8005828:	8979      	ldrh	r1, [r7, #10]
 800582a:	2300      	movs	r3, #0
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f001 fd34 	bl	80072a0 <I2C_TransferConfig>
 8005838:	e00f      	b.n	800585a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800583e:	b29a      	uxth	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005848:	b2da      	uxtb	r2, r3
 800584a:	8979      	ldrh	r1, [r7, #10]
 800584c:	2300      	movs	r3, #0
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f001 fd23 	bl	80072a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800585e:	b29b      	uxth	r3, r3
 8005860:	2b00      	cmp	r3, #0
 8005862:	d19d      	bne.n	80057a0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	6a39      	ldr	r1, [r7, #32]
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f001 fc0b 	bl	8007084 <I2C_WaitOnSTOPFlagUntilTimeout>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e01a      	b.n	80058ae <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2220      	movs	r2, #32
 800587e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6859      	ldr	r1, [r3, #4]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	4b0c      	ldr	r3, [pc, #48]	; (80058bc <HAL_I2C_Master_Receive+0x1e8>)
 800588c:	400b      	ands	r3, r1
 800588e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2220      	movs	r2, #32
 8005894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80058a8:	2300      	movs	r3, #0
 80058aa:	e000      	b.n	80058ae <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80058ac:	2302      	movs	r3, #2
  }
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3718      	adds	r7, #24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	80002400 	.word	0x80002400
 80058bc:	fe00e800 	.word	0xfe00e800

080058c0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b088      	sub	sp, #32
 80058c4:	af02      	add	r7, sp, #8
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	607a      	str	r2, [r7, #4]
 80058ca:	461a      	mov	r2, r3
 80058cc:	460b      	mov	r3, r1
 80058ce:	817b      	strh	r3, [r7, #10]
 80058d0:	4613      	mov	r3, r2
 80058d2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	2b20      	cmp	r3, #32
 80058de:	f040 80cd 	bne.w	8005a7c <HAL_I2C_Master_Transmit_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058f0:	d101      	bne.n	80058f6 <HAL_I2C_Master_Transmit_DMA+0x36>
    {
      return HAL_BUSY;
 80058f2:	2302      	movs	r3, #2
 80058f4:	e0c3      	b.n	8005a7e <HAL_I2C_Master_Transmit_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <HAL_I2C_Master_Transmit_DMA+0x44>
 8005900:	2302      	movs	r3, #2
 8005902:	e0bc      	b.n	8005a7e <HAL_I2C_Master_Transmit_DMA+0x1be>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2221      	movs	r2, #33	; 0x21
 8005910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2210      	movs	r2, #16
 8005918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	893a      	ldrh	r2, [r7, #8]
 800592c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	4a55      	ldr	r2, [pc, #340]	; (8005a88 <HAL_I2C_Master_Transmit_DMA+0x1c8>)
 8005932:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	4a55      	ldr	r2, [pc, #340]	; (8005a8c <HAL_I2C_Master_Transmit_DMA+0x1cc>)
 8005938:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800593e:	b29b      	uxth	r3, r3
 8005940:	2bff      	cmp	r3, #255	; 0xff
 8005942:	d906      	bls.n	8005952 <HAL_I2C_Master_Transmit_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	22ff      	movs	r2, #255	; 0xff
 8005948:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800594a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800594e:	617b      	str	r3, [r7, #20]
 8005950:	e007      	b.n	8005962 <HAL_I2C_Master_Transmit_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005956:	b29a      	uxth	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800595c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005960:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005966:	2b00      	cmp	r3, #0
 8005968:	d070      	beq.n	8005a4c <HAL_I2C_Master_Transmit_DMA+0x18c>
    {
      if (hi2c->hdmatx != NULL)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596e:	2b00      	cmp	r3, #0
 8005970:	d020      	beq.n	80059b4 <HAL_I2C_Master_Transmit_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005976:	4a46      	ldr	r2, [pc, #280]	; (8005a90 <HAL_I2C_Master_Transmit_DMA+0x1d0>)
 8005978:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597e:	4a45      	ldr	r2, [pc, #276]	; (8005a94 <HAL_I2C_Master_Transmit_DMA+0x1d4>)
 8005980:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005986:	2200      	movs	r2, #0
 8005988:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598e:	2200      	movs	r2, #0
 8005990:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005996:	6879      	ldr	r1, [r7, #4]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	3328      	adds	r3, #40	; 0x28
 800599e:	461a      	mov	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059a4:	f7ff f9c8 	bl	8004d38 <HAL_DMA_Start_IT>
 80059a8:	4603      	mov	r3, r0
 80059aa:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80059ac:	7cfb      	ldrb	r3, [r7, #19]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d138      	bne.n	8005a24 <HAL_I2C_Master_Transmit_DMA+0x164>
 80059b2:	e013      	b.n	80059dc <HAL_I2C_Master_Transmit_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2220      	movs	r2, #32
 80059b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e050      	b.n	8005a7e <HAL_I2C_Master_Transmit_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	8979      	ldrh	r1, [r7, #10]
 80059e4:	4b2c      	ldr	r3, [pc, #176]	; (8005a98 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f001 fc58 	bl	80072a0 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005a0a:	2110      	movs	r1, #16
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f001 fc75 	bl	80072fc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a20:	601a      	str	r2, [r3, #0]
 8005a22:	e029      	b.n	8005a78 <HAL_I2C_Master_Transmit_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2220      	movs	r2, #32
 8005a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a38:	f043 0210 	orr.w	r2, r3, #16
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e018      	b.n	8005a7e <HAL_I2C_Master_Transmit_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	4a13      	ldr	r2, [pc, #76]	; (8005a9c <HAL_I2C_Master_Transmit_DMA+0x1dc>)
 8005a50:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	8979      	ldrh	r1, [r7, #10]
 8005a5a:	4b0f      	ldr	r3, [pc, #60]	; (8005a98 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f001 fc1c 	bl	80072a0 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005a70:	2101      	movs	r1, #1
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f001 fc42 	bl	80072fc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	e000      	b.n	8005a7e <HAL_I2C_Master_Transmit_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8005a7c:	2302      	movs	r3, #2
  }
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3718      	adds	r7, #24
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	ffff0000 	.word	0xffff0000
 8005a8c:	0800617f 	.word	0x0800617f
 8005a90:	08006def 	.word	0x08006def
 8005a94:	08006f1b 	.word	0x08006f1b
 8005a98:	80002000 	.word	0x80002000
 8005a9c:	08005d29 	.word	0x08005d29

08005aa0 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b088      	sub	sp, #32
 8005aa4:	af02      	add	r7, sp, #8
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	607a      	str	r2, [r7, #4]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	460b      	mov	r3, r1
 8005aae:	817b      	strh	r3, [r7, #10]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b20      	cmp	r3, #32
 8005abe:	f040 80cd 	bne.w	8005c5c <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ad0:	d101      	bne.n	8005ad6 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	e0c3      	b.n	8005c5e <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d101      	bne.n	8005ae4 <HAL_I2C_Master_Receive_DMA+0x44>
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	e0bc      	b.n	8005c5e <HAL_I2C_Master_Receive_DMA+0x1be>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2222      	movs	r2, #34	; 0x22
 8005af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2210      	movs	r2, #16
 8005af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	893a      	ldrh	r2, [r7, #8]
 8005b0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	4a55      	ldr	r2, [pc, #340]	; (8005c68 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 8005b12:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4a55      	ldr	r2, [pc, #340]	; (8005c6c <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8005b18:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	2bff      	cmp	r3, #255	; 0xff
 8005b22:	d906      	bls.n	8005b32 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	22ff      	movs	r2, #255	; 0xff
 8005b28:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8005b2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b2e:	617b      	str	r3, [r7, #20]
 8005b30:	e007      	b.n	8005b42 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005b3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b40:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d070      	beq.n	8005c2c <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d020      	beq.n	8005b94 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b56:	4a46      	ldr	r2, [pc, #280]	; (8005c70 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8005b58:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5e:	4a45      	ldr	r2, [pc, #276]	; (8005c74 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8005b60:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b66:	2200      	movs	r2, #0
 8005b68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6e:	2200      	movs	r2, #0
 8005b70:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	3324      	adds	r3, #36	; 0x24
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b84:	f7ff f8d8 	bl	8004d38 <HAL_DMA_Start_IT>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005b8c:	7cfb      	ldrb	r3, [r7, #19]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d138      	bne.n	8005c04 <HAL_I2C_Master_Receive_DMA+0x164>
 8005b92:	e013      	b.n	8005bbc <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2220      	movs	r2, #32
 8005b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e050      	b.n	8005c5e <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bc0:	b2da      	uxtb	r2, r3
 8005bc2:	8979      	ldrh	r1, [r7, #10]
 8005bc4:	4b2c      	ldr	r3, [pc, #176]	; (8005c78 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8005bc6:	9300      	str	r3, [sp, #0]
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f001 fb68 	bl	80072a0 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005bea:	2110      	movs	r1, #16
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f001 fb85 	bl	80072fc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c00:	601a      	str	r2, [r3, #0]
 8005c02:	e029      	b.n	8005c58 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2220      	movs	r2, #32
 8005c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c18:	f043 0210 	orr.w	r2, r3, #16
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e018      	b.n	8005c5e <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	4a13      	ldr	r2, [pc, #76]	; (8005c7c <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8005c30:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c36:	b2da      	uxtb	r2, r3
 8005c38:	8979      	ldrh	r1, [r7, #10]
 8005c3a:	4b0f      	ldr	r3, [pc, #60]	; (8005c78 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8005c3c:	9300      	str	r3, [sp, #0]
 8005c3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f001 fb2c 	bl	80072a0 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005c50:	2101      	movs	r1, #1
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f001 fb52 	bl	80072fc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	e000      	b.n	8005c5e <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8005c5c:	2302      	movs	r3, #2
  }
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3718      	adds	r7, #24
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	ffff0000 	.word	0xffff0000
 8005c6c:	0800617f 	.word	0x0800617f
 8005c70:	08006e85 	.word	0x08006e85
 8005c74:	08006f1b 	.word	0x08006f1b
 8005c78:	80002400 	.word	0x80002400
 8005c7c:	08005d29 	.word	0x08005d29

08005c80 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	70fb      	strb	r3, [r7, #3]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b088      	sub	sp, #32
 8005d2c:	af02      	add	r7, sp, #8
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d101      	bne.n	8005d46 <I2C_Master_ISR_IT+0x1e>
 8005d42:	2302      	movs	r3, #2
 8005d44:	e114      	b.n	8005f70 <I2C_Master_ISR_IT+0x248>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	091b      	lsrs	r3, r3, #4
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d013      	beq.n	8005d82 <I2C_Master_ISR_IT+0x5a>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	091b      	lsrs	r3, r3, #4
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00d      	beq.n	8005d82 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2210      	movs	r2, #16
 8005d6c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d72:	f043 0204 	orr.w	r2, r3, #4
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f001 f813 	bl	8006da6 <I2C_Flush_TXDR>
 8005d80:	e0e1      	b.n	8005f46 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	089b      	lsrs	r3, r3, #2
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d023      	beq.n	8005dd6 <I2C_Master_ISR_IT+0xae>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	089b      	lsrs	r3, r3, #2
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d01d      	beq.n	8005dd6 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f023 0304 	bic.w	r3, r3, #4
 8005da0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dac:	b2d2      	uxtb	r2, r2
 8005dae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db4:	1c5a      	adds	r2, r3, #1
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005dd4:	e0b7      	b.n	8005f46 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	085b      	lsrs	r3, r3, #1
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d01e      	beq.n	8005e20 <I2C_Master_ISR_IT+0xf8>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	085b      	lsrs	r3, r3, #1
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d018      	beq.n	8005e20 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	781a      	ldrb	r2, [r3, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfe:	1c5a      	adds	r2, r3, #1
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	3b01      	subs	r3, #1
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e1e:	e092      	b.n	8005f46 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	09db      	lsrs	r3, r3, #7
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d05d      	beq.n	8005ee8 <I2C_Master_ISR_IT+0x1c0>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	099b      	lsrs	r3, r3, #6
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d057      	beq.n	8005ee8 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d040      	beq.n	8005ec4 <I2C_Master_ISR_IT+0x19c>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d13c      	bne.n	8005ec4 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e56:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	2bff      	cmp	r3, #255	; 0xff
 8005e60:	d90e      	bls.n	8005e80 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	22ff      	movs	r2, #255	; 0xff
 8005e66:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	8a79      	ldrh	r1, [r7, #18]
 8005e70:	2300      	movs	r3, #0
 8005e72:	9300      	str	r3, [sp, #0]
 8005e74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f001 fa11 	bl	80072a0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e7e:	e032      	b.n	8005ee6 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e92:	d00b      	beq.n	8005eac <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e98:	b2da      	uxtb	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9e:	8a79      	ldrh	r1, [r7, #18]
 8005ea0:	2000      	movs	r0, #0
 8005ea2:	9000      	str	r0, [sp, #0]
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f001 f9fb 	bl	80072a0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005eaa:	e01c      	b.n	8005ee6 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	8a79      	ldrh	r1, [r7, #18]
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f001 f9ef 	bl	80072a0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ec2:	e010      	b.n	8005ee6 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ece:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ed2:	d003      	beq.n	8005edc <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f000 fba9 	bl	800662c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005eda:	e034      	b.n	8005f46 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005edc:	2140      	movs	r1, #64	; 0x40
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f000 fe6a 	bl	8006bb8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ee4:	e02f      	b.n	8005f46 <I2C_Master_ISR_IT+0x21e>
 8005ee6:	e02e      	b.n	8005f46 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	099b      	lsrs	r3, r3, #6
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d028      	beq.n	8005f46 <I2C_Master_ISR_IT+0x21e>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	099b      	lsrs	r3, r3, #6
 8005ef8:	f003 0301 	and.w	r3, r3, #1
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d022      	beq.n	8005f46 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d119      	bne.n	8005f3e <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f18:	d015      	beq.n	8005f46 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f22:	d108      	bne.n	8005f36 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	685a      	ldr	r2, [r3, #4]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f32:	605a      	str	r2, [r3, #4]
 8005f34:	e007      	b.n	8005f46 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 fb78 	bl	800662c <I2C_ITMasterSeqCplt>
 8005f3c:	e003      	b.n	8005f46 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005f3e:	2140      	movs	r1, #64	; 0x40
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f000 fe39 	bl	8006bb8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	095b      	lsrs	r3, r3, #5
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d009      	beq.n	8005f66 <I2C_Master_ISR_IT+0x23e>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	095b      	lsrs	r3, r3, #5
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005f5e:	6979      	ldr	r1, [r7, #20]
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f000 fbff 	bl	8006764 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3718      	adds	r7, #24
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f88:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d101      	bne.n	8005f9c <I2C_Slave_ISR_IT+0x24>
 8005f98:	2302      	movs	r3, #2
 8005f9a:	e0ec      	b.n	8006176 <I2C_Slave_ISR_IT+0x1fe>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	095b      	lsrs	r3, r3, #5
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d009      	beq.n	8005fc4 <I2C_Slave_ISR_IT+0x4c>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	095b      	lsrs	r3, r3, #5
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d003      	beq.n	8005fc4 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005fbc:	6939      	ldr	r1, [r7, #16]
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f000 fc9a 	bl	80068f8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	091b      	lsrs	r3, r3, #4
 8005fc8:	f003 0301 	and.w	r3, r3, #1
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d04d      	beq.n	800606c <I2C_Slave_ISR_IT+0xf4>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	091b      	lsrs	r3, r3, #4
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d047      	beq.n	800606c <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d128      	bne.n	8006038 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b28      	cmp	r3, #40	; 0x28
 8005ff0:	d108      	bne.n	8006004 <I2C_Slave_ISR_IT+0x8c>
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ff8:	d104      	bne.n	8006004 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005ffa:	6939      	ldr	r1, [r7, #16]
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f000 fd85 	bl	8006b0c <I2C_ITListenCplt>
 8006002:	e032      	b.n	800606a <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800600a:	b2db      	uxtb	r3, r3
 800600c:	2b29      	cmp	r3, #41	; 0x29
 800600e:	d10e      	bne.n	800602e <I2C_Slave_ISR_IT+0xb6>
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006016:	d00a      	beq.n	800602e <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2210      	movs	r2, #16
 800601e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 fec0 	bl	8006da6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f000 fb3d 	bl	80066a6 <I2C_ITSlaveSeqCplt>
 800602c:	e01d      	b.n	800606a <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2210      	movs	r2, #16
 8006034:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006036:	e096      	b.n	8006166 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2210      	movs	r2, #16
 800603e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006044:	f043 0204 	orr.w	r2, r3, #4
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d004      	beq.n	800605c <I2C_Slave_ISR_IT+0xe4>
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006058:	f040 8085 	bne.w	8006166 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006060:	4619      	mov	r1, r3
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f000 fda8 	bl	8006bb8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006068:	e07d      	b.n	8006166 <I2C_Slave_ISR_IT+0x1ee>
 800606a:	e07c      	b.n	8006166 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	089b      	lsrs	r3, r3, #2
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b00      	cmp	r3, #0
 8006076:	d030      	beq.n	80060da <I2C_Slave_ISR_IT+0x162>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	089b      	lsrs	r3, r3, #2
 800607c:	f003 0301 	and.w	r3, r3, #1
 8006080:	2b00      	cmp	r3, #0
 8006082:	d02a      	beq.n	80060da <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006088:	b29b      	uxth	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d018      	beq.n	80060c0 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006098:	b2d2      	uxtb	r2, r2
 800609a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a0:	1c5a      	adds	r2, r3, #1
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060aa:	3b01      	subs	r3, #1
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	3b01      	subs	r3, #1
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d14f      	bne.n	800616a <I2C_Slave_ISR_IT+0x1f2>
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80060d0:	d04b      	beq.n	800616a <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 fae7 	bl	80066a6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80060d8:	e047      	b.n	800616a <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	08db      	lsrs	r3, r3, #3
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	08db      	lsrs	r3, r3, #3
 80060ea:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d004      	beq.n	80060fc <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80060f2:	6939      	ldr	r1, [r7, #16]
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 fa15 	bl	8006524 <I2C_ITAddrCplt>
 80060fa:	e037      	b.n	800616c <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	085b      	lsrs	r3, r3, #1
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	2b00      	cmp	r3, #0
 8006106:	d031      	beq.n	800616c <I2C_Slave_ISR_IT+0x1f4>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	085b      	lsrs	r3, r3, #1
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b00      	cmp	r3, #0
 8006112:	d02b      	beq.n	800616c <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006118:	b29b      	uxth	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d018      	beq.n	8006150 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006122:	781a      	ldrb	r2, [r3, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612e:	1c5a      	adds	r2, r3, #1
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006138:	b29b      	uxth	r3, r3
 800613a:	3b01      	subs	r3, #1
 800613c:	b29a      	uxth	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006146:	3b01      	subs	r3, #1
 8006148:	b29a      	uxth	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	851a      	strh	r2, [r3, #40]	; 0x28
 800614e:	e00d      	b.n	800616c <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006156:	d002      	beq.n	800615e <I2C_Slave_ISR_IT+0x1e6>
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d106      	bne.n	800616c <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f000 faa1 	bl	80066a6 <I2C_ITSlaveSeqCplt>
 8006164:	e002      	b.n	800616c <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8006166:	bf00      	nop
 8006168:	e000      	b.n	800616c <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800616a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3718      	adds	r7, #24
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b088      	sub	sp, #32
 8006182:	af02      	add	r7, sp, #8
 8006184:	60f8      	str	r0, [r7, #12]
 8006186:	60b9      	str	r1, [r7, #8]
 8006188:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006190:	2b01      	cmp	r3, #1
 8006192:	d101      	bne.n	8006198 <I2C_Master_ISR_DMA+0x1a>
 8006194:	2302      	movs	r3, #2
 8006196:	e0e1      	b.n	800635c <I2C_Master_ISR_DMA+0x1de>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	091b      	lsrs	r3, r3, #4
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d017      	beq.n	80061dc <I2C_Master_ISR_DMA+0x5e>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	091b      	lsrs	r3, r3, #4
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d011      	beq.n	80061dc <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2210      	movs	r2, #16
 80061be:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c4:	f043 0204 	orr.w	r2, r3, #4
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80061cc:	2120      	movs	r1, #32
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f001 f894 	bl	80072fc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f000 fde6 	bl	8006da6 <I2C_Flush_TXDR>
 80061da:	e0ba      	b.n	8006352 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	09db      	lsrs	r3, r3, #7
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d072      	beq.n	80062ce <I2C_Master_ISR_DMA+0x150>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	099b      	lsrs	r3, r3, #6
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d06c      	beq.n	80062ce <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006202:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006208:	b29b      	uxth	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d04e      	beq.n	80062ac <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	b29b      	uxth	r3, r3
 8006216:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800621a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006220:	b29b      	uxth	r3, r3
 8006222:	2bff      	cmp	r3, #255	; 0xff
 8006224:	d906      	bls.n	8006234 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	22ff      	movs	r2, #255	; 0xff
 800622a:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800622c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006230:	617b      	str	r3, [r7, #20]
 8006232:	e010      	b.n	8006256 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006238:	b29a      	uxth	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006242:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006246:	d003      	beq.n	8006250 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624c:	617b      	str	r3, [r7, #20]
 800624e:	e002      	b.n	8006256 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8006250:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006254:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800625a:	b2da      	uxtb	r2, r3
 800625c:	8a79      	ldrh	r1, [r7, #18]
 800625e:	2300      	movs	r3, #0
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f001 f81b 	bl	80072a0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800626e:	b29a      	uxth	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	b29a      	uxth	r2, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b22      	cmp	r3, #34	; 0x22
 8006286:	d108      	bne.n	800629a <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006296:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006298:	e05b      	b.n	8006352 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062a8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80062aa:	e052      	b.n	8006352 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062ba:	d003      	beq.n	80062c4 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f000 f9b5 	bl	800662c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80062c2:	e046      	b.n	8006352 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80062c4:	2140      	movs	r1, #64	; 0x40
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f000 fc76 	bl	8006bb8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80062cc:	e041      	b.n	8006352 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	099b      	lsrs	r3, r3, #6
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d029      	beq.n	800632e <I2C_Master_ISR_DMA+0x1b0>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	099b      	lsrs	r3, r3, #6
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d023      	beq.n	800632e <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d119      	bne.n	8006324 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062fe:	d027      	beq.n	8006350 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006304:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006308:	d108      	bne.n	800631c <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006318:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800631a:	e019      	b.n	8006350 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 f985 	bl	800662c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006322:	e015      	b.n	8006350 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006324:	2140      	movs	r1, #64	; 0x40
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	f000 fc46 	bl	8006bb8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800632c:	e010      	b.n	8006350 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	095b      	lsrs	r3, r3, #5
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00b      	beq.n	8006352 <I2C_Master_ISR_DMA+0x1d4>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	095b      	lsrs	r3, r3, #5
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	2b00      	cmp	r3, #0
 8006344:	d005      	beq.n	8006352 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006346:	68b9      	ldr	r1, [r7, #8]
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f000 fa0b 	bl	8006764 <I2C_ITMasterCplt>
 800634e:	e000      	b.n	8006352 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8006350:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3718      	adds	r7, #24
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b088      	sub	sp, #32
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006374:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006376:	2300      	movs	r3, #0
 8006378:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006380:	2b01      	cmp	r3, #1
 8006382:	d101      	bne.n	8006388 <I2C_Slave_ISR_DMA+0x24>
 8006384:	2302      	movs	r3, #2
 8006386:	e0c9      	b.n	800651c <I2C_Slave_ISR_DMA+0x1b8>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	095b      	lsrs	r3, r3, #5
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	2b00      	cmp	r3, #0
 800639a:	d009      	beq.n	80063b0 <I2C_Slave_ISR_DMA+0x4c>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	095b      	lsrs	r3, r3, #5
 80063a0:	f003 0301 	and.w	r3, r3, #1
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d003      	beq.n	80063b0 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80063a8:	68b9      	ldr	r1, [r7, #8]
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f000 faa4 	bl	80068f8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	091b      	lsrs	r3, r3, #4
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 809a 	beq.w	80064f2 <I2C_Slave_ISR_DMA+0x18e>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	091b      	lsrs	r3, r3, #4
 80063c2:	f003 0301 	and.w	r3, r3, #1
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f000 8093 	beq.w	80064f2 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	0b9b      	lsrs	r3, r3, #14
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d105      	bne.n	80063e4 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	0bdb      	lsrs	r3, r3, #15
 80063dc:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d07f      	beq.n	80064e4 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00d      	beq.n	8006408 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	0bdb      	lsrs	r3, r3, #15
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d007      	beq.n	8006408 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d101      	bne.n	8006408 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8006404:	2301      	movs	r3, #1
 8006406:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00d      	beq.n	800642c <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	0b9b      	lsrs	r3, r3, #14
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	2b00      	cmp	r3, #0
 800641a:	d007      	beq.n	800642c <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8006428:	2301      	movs	r3, #1
 800642a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d128      	bne.n	8006484 <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b28      	cmp	r3, #40	; 0x28
 800643c:	d108      	bne.n	8006450 <I2C_Slave_ISR_DMA+0xec>
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006444:	d104      	bne.n	8006450 <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006446:	68b9      	ldr	r1, [r7, #8]
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 fb5f 	bl	8006b0c <I2C_ITListenCplt>
 800644e:	e048      	b.n	80064e2 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006456:	b2db      	uxtb	r3, r3
 8006458:	2b29      	cmp	r3, #41	; 0x29
 800645a:	d10e      	bne.n	800647a <I2C_Slave_ISR_DMA+0x116>
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006462:	d00a      	beq.n	800647a <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2210      	movs	r2, #16
 800646a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f000 fc9a 	bl	8006da6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f000 f917 	bl	80066a6 <I2C_ITSlaveSeqCplt>
 8006478:	e033      	b.n	80064e2 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2210      	movs	r2, #16
 8006480:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006482:	e034      	b.n	80064ee <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2210      	movs	r2, #16
 800648a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006490:	f043 0204 	orr.w	r2, r3, #4
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800649e:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <I2C_Slave_ISR_DMA+0x14a>
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80064ac:	d11f      	bne.n	80064ee <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80064ae:	7dfb      	ldrb	r3, [r7, #23]
 80064b0:	2b21      	cmp	r3, #33	; 0x21
 80064b2:	d002      	beq.n	80064ba <I2C_Slave_ISR_DMA+0x156>
 80064b4:	7dfb      	ldrb	r3, [r7, #23]
 80064b6:	2b29      	cmp	r3, #41	; 0x29
 80064b8:	d103      	bne.n	80064c2 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2221      	movs	r2, #33	; 0x21
 80064be:	631a      	str	r2, [r3, #48]	; 0x30
 80064c0:	e008      	b.n	80064d4 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80064c2:	7dfb      	ldrb	r3, [r7, #23]
 80064c4:	2b22      	cmp	r3, #34	; 0x22
 80064c6:	d002      	beq.n	80064ce <I2C_Slave_ISR_DMA+0x16a>
 80064c8:	7dfb      	ldrb	r3, [r7, #23]
 80064ca:	2b2a      	cmp	r3, #42	; 0x2a
 80064cc:	d102      	bne.n	80064d4 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2222      	movs	r2, #34	; 0x22
 80064d2:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d8:	4619      	mov	r1, r3
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f000 fb6c 	bl	8006bb8 <I2C_ITError>
      if (treatdmanack == 1U)
 80064e0:	e005      	b.n	80064ee <I2C_Slave_ISR_DMA+0x18a>
 80064e2:	e004      	b.n	80064ee <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2210      	movs	r2, #16
 80064ea:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80064ec:	e011      	b.n	8006512 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 80064ee:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80064f0:	e00f      	b.n	8006512 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	08db      	lsrs	r3, r3, #3
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d009      	beq.n	8006512 <I2C_Slave_ISR_DMA+0x1ae>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	08db      	lsrs	r3, r3, #3
 8006502:	f003 0301 	and.w	r3, r3, #1
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800650a:	68b9      	ldr	r1, [r7, #8]
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f000 f809 	bl	8006524 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3720      	adds	r7, #32
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006534:	b2db      	uxtb	r3, r3
 8006536:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800653a:	2b28      	cmp	r3, #40	; 0x28
 800653c:	d16a      	bne.n	8006614 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	0c1b      	lsrs	r3, r3, #16
 8006546:	b2db      	uxtb	r3, r3
 8006548:	f003 0301 	and.w	r3, r3, #1
 800654c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	0c1b      	lsrs	r3, r3, #16
 8006556:	b29b      	uxth	r3, r3
 8006558:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800655c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	b29b      	uxth	r3, r3
 8006566:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800656a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	b29b      	uxth	r3, r3
 8006574:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006578:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	2b02      	cmp	r3, #2
 8006580:	d138      	bne.n	80065f4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8006582:	897b      	ldrh	r3, [r7, #10]
 8006584:	09db      	lsrs	r3, r3, #7
 8006586:	b29a      	uxth	r2, r3
 8006588:	89bb      	ldrh	r3, [r7, #12]
 800658a:	4053      	eors	r3, r2
 800658c:	b29b      	uxth	r3, r3
 800658e:	f003 0306 	and.w	r3, r3, #6
 8006592:	2b00      	cmp	r3, #0
 8006594:	d11c      	bne.n	80065d0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006596:	897b      	ldrh	r3, [r7, #10]
 8006598:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800659e:	1c5a      	adds	r2, r3, #1
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d13b      	bne.n	8006624 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2208      	movs	r2, #8
 80065b8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80065c2:	89ba      	ldrh	r2, [r7, #12]
 80065c4:	7bfb      	ldrb	r3, [r7, #15]
 80065c6:	4619      	mov	r1, r3
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7ff fb6d 	bl	8005ca8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80065ce:	e029      	b.n	8006624 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80065d0:	893b      	ldrh	r3, [r7, #8]
 80065d2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80065d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 fef3 	bl	80073c4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80065e6:	89ba      	ldrh	r2, [r7, #12]
 80065e8:	7bfb      	ldrb	r3, [r7, #15]
 80065ea:	4619      	mov	r1, r3
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7ff fb5b 	bl	8005ca8 <HAL_I2C_AddrCallback>
}
 80065f2:	e017      	b.n	8006624 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80065f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 fee3 	bl	80073c4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006606:	89ba      	ldrh	r2, [r7, #12]
 8006608:	7bfb      	ldrb	r3, [r7, #15]
 800660a:	4619      	mov	r1, r3
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f7ff fb4b 	bl	8005ca8 <HAL_I2C_AddrCallback>
}
 8006612:	e007      	b.n	8006624 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2208      	movs	r2, #8
 800661a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8006624:	bf00      	nop
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006642:	b2db      	uxtb	r3, r3
 8006644:	2b21      	cmp	r3, #33	; 0x21
 8006646:	d115      	bne.n	8006674 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2220      	movs	r2, #32
 800664c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2211      	movs	r2, #17
 8006654:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800665c:	2101      	movs	r1, #1
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 feb0 	bl	80073c4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f7fc fb03 	bl	8002c78 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006672:	e014      	b.n	800669e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2220      	movs	r2, #32
 8006678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2212      	movs	r2, #18
 8006680:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006688:	2102      	movs	r1, #2
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 fe9a 	bl	80073c4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f7fc fb01 	bl	8002ca0 <HAL_I2C_MasterRxCpltCallback>
}
 800669e:	bf00      	nop
 80066a0:	3708      	adds	r7, #8
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b084      	sub	sp, #16
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	0b9b      	lsrs	r3, r3, #14
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d008      	beq.n	80066dc <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80066d8:	601a      	str	r2, [r3, #0]
 80066da:	e00d      	b.n	80066f8 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	0bdb      	lsrs	r3, r3, #15
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d007      	beq.n	80066f8 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066f6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2b29      	cmp	r3, #41	; 0x29
 8006702:	d112      	bne.n	800672a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2228      	movs	r2, #40	; 0x28
 8006708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2221      	movs	r2, #33	; 0x21
 8006710:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006712:	2101      	movs	r1, #1
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 fe55 	bl	80073c4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7ff faac 	bl	8005c80 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006728:	e017      	b.n	800675a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b2a      	cmp	r3, #42	; 0x2a
 8006734:	d111      	bne.n	800675a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2228      	movs	r2, #40	; 0x28
 800673a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2222      	movs	r2, #34	; 0x22
 8006742:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006744:	2102      	movs	r1, #2
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fe3c 	bl	80073c4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f7ff fa9d 	bl	8005c94 <HAL_I2C_SlaveRxCpltCallback>
}
 800675a:	bf00      	nop
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
	...

08006764 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b086      	sub	sp, #24
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2220      	movs	r2, #32
 8006778:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b21      	cmp	r3, #33	; 0x21
 8006784:	d107      	bne.n	8006796 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006786:	2101      	movs	r1, #1
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 fe1b 	bl	80073c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2211      	movs	r2, #17
 8006792:	631a      	str	r2, [r3, #48]	; 0x30
 8006794:	e00c      	b.n	80067b0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b22      	cmp	r3, #34	; 0x22
 80067a0:	d106      	bne.n	80067b0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80067a2:	2102      	movs	r1, #2
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 fe0d 	bl	80073c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2212      	movs	r2, #18
 80067ae:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6859      	ldr	r1, [r3, #4]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	4b4d      	ldr	r3, [pc, #308]	; (80068f0 <I2C_ITMasterCplt+0x18c>)
 80067bc:	400b      	ands	r3, r1
 80067be:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a4a      	ldr	r2, [pc, #296]	; (80068f4 <I2C_ITMasterCplt+0x190>)
 80067ca:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	091b      	lsrs	r3, r3, #4
 80067d0:	f003 0301 	and.w	r3, r3, #1
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d009      	beq.n	80067ec <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2210      	movs	r2, #16
 80067de:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067e4:	f043 0204 	orr.w	r2, r3, #4
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	2b60      	cmp	r3, #96	; 0x60
 80067f6:	d10b      	bne.n	8006810 <I2C_ITMasterCplt+0xac>
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	089b      	lsrs	r3, r3, #2
 80067fc:	f003 0301 	and.w	r3, r3, #1
 8006800:	2b00      	cmp	r3, #0
 8006802:	d005      	beq.n	8006810 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680a:	b2db      	uxtb	r3, r3
 800680c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800680e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fac8 	bl	8006da6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800681a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006822:	b2db      	uxtb	r3, r3
 8006824:	2b60      	cmp	r3, #96	; 0x60
 8006826:	d002      	beq.n	800682e <I2C_ITMasterCplt+0xca>
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d006      	beq.n	800683c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006832:	4619      	mov	r1, r3
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 f9bf 	bl	8006bb8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800683a:	e054      	b.n	80068e6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b21      	cmp	r3, #33	; 0x21
 8006846:	d124      	bne.n	8006892 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2220      	movs	r2, #32
 800684c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b40      	cmp	r3, #64	; 0x40
 8006860:	d10b      	bne.n	800687a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f7ff fa30 	bl	8005cd8 <HAL_I2C_MemTxCpltCallback>
}
 8006878:	e035      	b.n	80068e6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f7fc f9f4 	bl	8002c78 <HAL_I2C_MasterTxCpltCallback>
}
 8006890:	e029      	b.n	80068e6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b22      	cmp	r3, #34	; 0x22
 800689c:	d123      	bne.n	80068e6 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2220      	movs	r2, #32
 80068a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	2b40      	cmp	r3, #64	; 0x40
 80068b6:	d10b      	bne.n	80068d0 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f7ff fa0f 	bl	8005cec <HAL_I2C_MemRxCpltCallback>
}
 80068ce:	e00a      	b.n	80068e6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f7fc f9dd 	bl	8002ca0 <HAL_I2C_MasterRxCpltCallback>
}
 80068e6:	bf00      	nop
 80068e8:	3718      	adds	r7, #24
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	fe00e800 	.word	0xfe00e800
 80068f4:	ffff0000 	.word	0xffff0000

080068f8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006914:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2220      	movs	r2, #32
 800691c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800691e:	7bfb      	ldrb	r3, [r7, #15]
 8006920:	2b21      	cmp	r3, #33	; 0x21
 8006922:	d002      	beq.n	800692a <I2C_ITSlaveCplt+0x32>
 8006924:	7bfb      	ldrb	r3, [r7, #15]
 8006926:	2b29      	cmp	r3, #41	; 0x29
 8006928:	d108      	bne.n	800693c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800692a:	f248 0101 	movw	r1, #32769	; 0x8001
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 fd48 	bl	80073c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2221      	movs	r2, #33	; 0x21
 8006938:	631a      	str	r2, [r3, #48]	; 0x30
 800693a:	e00d      	b.n	8006958 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800693c:	7bfb      	ldrb	r3, [r7, #15]
 800693e:	2b22      	cmp	r3, #34	; 0x22
 8006940:	d002      	beq.n	8006948 <I2C_ITSlaveCplt+0x50>
 8006942:	7bfb      	ldrb	r3, [r7, #15]
 8006944:	2b2a      	cmp	r3, #42	; 0x2a
 8006946:	d107      	bne.n	8006958 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006948:	f248 0102 	movw	r1, #32770	; 0x8002
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 fd39 	bl	80073c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2222      	movs	r2, #34	; 0x22
 8006956:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006966:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	6859      	ldr	r1, [r3, #4]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	4b64      	ldr	r3, [pc, #400]	; (8006b04 <I2C_ITSlaveCplt+0x20c>)
 8006974:	400b      	ands	r3, r1
 8006976:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fa14 	bl	8006da6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	0b9b      	lsrs	r3, r3, #14
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	2b00      	cmp	r3, #0
 8006988:	d013      	beq.n	80069b2 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006998:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d020      	beq.n	80069e4 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80069b0:	e018      	b.n	80069e4 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	0bdb      	lsrs	r3, r3, #15
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d012      	beq.n	80069e4 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069cc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d006      	beq.n	80069e4 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	b29a      	uxth	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	089b      	lsrs	r3, r3, #2
 80069e8:	f003 0301 	and.w	r3, r3, #1
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d020      	beq.n	8006a32 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	f023 0304 	bic.w	r3, r3, #4
 80069f6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a02:	b2d2      	uxtb	r2, r2
 8006a04:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00c      	beq.n	8006a32 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d005      	beq.n	8006a48 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a40:	f043 0204 	orr.w	r2, r3, #4
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d010      	beq.n	8006a80 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a62:	4619      	mov	r1, r3
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f8a7 	bl	8006bb8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b28      	cmp	r3, #40	; 0x28
 8006a74:	d141      	bne.n	8006afa <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006a76:	6979      	ldr	r1, [r7, #20]
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f847 	bl	8006b0c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006a7e:	e03c      	b.n	8006afa <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a88:	d014      	beq.n	8006ab4 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f7ff fe0b 	bl	80066a6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a1d      	ldr	r2, [pc, #116]	; (8006b08 <I2C_ITSlaveCplt+0x210>)
 8006a94:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2220      	movs	r2, #32
 8006a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f7ff f909 	bl	8005cc4 <HAL_I2C_ListenCpltCallback>
}
 8006ab2:	e022      	b.n	8006afa <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b22      	cmp	r3, #34	; 0x22
 8006abe:	d10e      	bne.n	8006ade <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f7ff f8dc 	bl	8005c94 <HAL_I2C_SlaveRxCpltCallback>
}
 8006adc:	e00d      	b.n	8006afa <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f7ff f8c3 	bl	8005c80 <HAL_I2C_SlaveTxCpltCallback>
}
 8006afa:	bf00      	nop
 8006afc:	3718      	adds	r7, #24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	fe00e800 	.word	0xfe00e800
 8006b08:	ffff0000 	.word	0xffff0000

08006b0c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a26      	ldr	r2, [pc, #152]	; (8006bb4 <I2C_ITListenCplt+0xa8>)
 8006b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2220      	movs	r2, #32
 8006b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	089b      	lsrs	r3, r3, #2
 8006b3c:	f003 0301 	and.w	r3, r3, #1
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d022      	beq.n	8006b8a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4e:	b2d2      	uxtb	r2, r2
 8006b50:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b56:	1c5a      	adds	r2, r3, #1
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d012      	beq.n	8006b8a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	3b01      	subs	r3, #1
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b82:	f043 0204 	orr.w	r2, r3, #4
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006b8a:	f248 0103 	movw	r1, #32771	; 0x8003
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 fc18 	bl	80073c4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2210      	movs	r2, #16
 8006b9a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f7ff f88d 	bl	8005cc4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006baa:	bf00      	nop
 8006bac:	3708      	adds	r7, #8
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	ffff0000 	.word	0xffff0000

08006bb8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a5d      	ldr	r2, [pc, #372]	; (8006d4c <I2C_ITError+0x194>)
 8006bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	431a      	orrs	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006bea:	7bfb      	ldrb	r3, [r7, #15]
 8006bec:	2b28      	cmp	r3, #40	; 0x28
 8006bee:	d005      	beq.n	8006bfc <I2C_ITError+0x44>
 8006bf0:	7bfb      	ldrb	r3, [r7, #15]
 8006bf2:	2b29      	cmp	r3, #41	; 0x29
 8006bf4:	d002      	beq.n	8006bfc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
 8006bf8:	2b2a      	cmp	r3, #42	; 0x2a
 8006bfa:	d10b      	bne.n	8006c14 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006bfc:	2103      	movs	r1, #3
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 fbe0 	bl	80073c4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2228      	movs	r2, #40	; 0x28
 8006c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a50      	ldr	r2, [pc, #320]	; (8006d50 <I2C_ITError+0x198>)
 8006c10:	635a      	str	r2, [r3, #52]	; 0x34
 8006c12:	e011      	b.n	8006c38 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006c14:	f248 0103 	movw	r1, #32771	; 0x8003
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fbd3 	bl	80073c4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b60      	cmp	r3, #96	; 0x60
 8006c28:	d003      	beq.n	8006c32 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2220      	movs	r2, #32
 8006c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c3c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d039      	beq.n	8006cba <I2C_ITError+0x102>
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	2b11      	cmp	r3, #17
 8006c4a:	d002      	beq.n	8006c52 <I2C_ITError+0x9a>
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	2b21      	cmp	r3, #33	; 0x21
 8006c50:	d133      	bne.n	8006cba <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c60:	d107      	bne.n	8006c72 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006c70:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7fe f9ae 	bl	8004fd8 <HAL_DMA_GetState>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d017      	beq.n	8006cb2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c86:	4a33      	ldr	r2, [pc, #204]	; (8006d54 <I2C_ITError+0x19c>)
 8006c88:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7fe f8ae 	bl	8004df8 <HAL_DMA_Abort_IT>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d04d      	beq.n	8006d3e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006cac:	4610      	mov	r0, r2
 8006cae:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006cb0:	e045      	b.n	8006d3e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f850 	bl	8006d58 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006cb8:	e041      	b.n	8006d3e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d039      	beq.n	8006d36 <I2C_ITError+0x17e>
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2b12      	cmp	r3, #18
 8006cc6:	d002      	beq.n	8006cce <I2C_ITError+0x116>
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	2b22      	cmp	r3, #34	; 0x22
 8006ccc:	d133      	bne.n	8006d36 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cdc:	d107      	bne.n	8006cee <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006cec:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7fe f970 	bl	8004fd8 <HAL_DMA_GetState>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d017      	beq.n	8006d2e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d02:	4a14      	ldr	r2, [pc, #80]	; (8006d54 <I2C_ITError+0x19c>)
 8006d04:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7fe f870 	bl	8004df8 <HAL_DMA_Abort_IT>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d011      	beq.n	8006d42 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006d28:	4610      	mov	r0, r2
 8006d2a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006d2c:	e009      	b.n	8006d42 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f812 	bl	8006d58 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006d34:	e005      	b.n	8006d42 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f80e 	bl	8006d58 <I2C_TreatErrorCallback>
  }
}
 8006d3c:	e002      	b.n	8006d44 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006d3e:	bf00      	nop
 8006d40:	e000      	b.n	8006d44 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006d42:	bf00      	nop
}
 8006d44:	bf00      	nop
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	ffff0000 	.word	0xffff0000
 8006d50:	08005f79 	.word	0x08005f79
 8006d54:	08006f49 	.word	0x08006f49

08006d58 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b60      	cmp	r3, #96	; 0x60
 8006d6a:	d10e      	bne.n	8006d8a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2220      	movs	r2, #32
 8006d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f7fe ffc6 	bl	8005d14 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006d88:	e009      	b.n	8006d9e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f7fe ffb1 	bl	8005d00 <HAL_I2C_ErrorCallback>
}
 8006d9e:	bf00      	nop
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b083      	sub	sp, #12
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	f003 0302 	and.w	r3, r3, #2
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d103      	bne.n	8006dc4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d007      	beq.n	8006de2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	699a      	ldr	r2, [r3, #24]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f042 0201 	orr.w	r2, r2, #1
 8006de0:	619a      	str	r2, [r3, #24]
  }
}
 8006de2:	bf00      	nop
 8006de4:	370c      	adds	r7, #12
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr

08006dee <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b084      	sub	sp, #16
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfa:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006e0a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d104      	bne.n	8006e20 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006e16:	2120      	movs	r1, #32
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f000 fa6f 	bl	80072fc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006e1e:	e02d      	b.n	8006e7c <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006e28:	441a      	add	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	2bff      	cmp	r3, #255	; 0xff
 8006e36:	d903      	bls.n	8006e40 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	22ff      	movs	r2, #255	; 0xff
 8006e3c:	851a      	strh	r2, [r3, #40]	; 0x28
 8006e3e:	e004      	b.n	8006e4a <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e52:	4619      	mov	r1, r3
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	3328      	adds	r3, #40	; 0x28
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e60:	f7fd ff6a 	bl	8004d38 <HAL_DMA_Start_IT>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d004      	beq.n	8006e74 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006e6a:	2110      	movs	r1, #16
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f7ff fea3 	bl	8006bb8 <I2C_ITError>
}
 8006e72:	e003      	b.n	8006e7c <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006e74:	2140      	movs	r1, #64	; 0x40
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	f000 fa40 	bl	80072fc <I2C_Enable_IRQ>
}
 8006e7c:	bf00      	nop
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e90:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ea0:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d104      	bne.n	8006eb6 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006eac:	2120      	movs	r1, #32
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f000 fa24 	bl	80072fc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006eb4:	e02d      	b.n	8006f12 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006ebe:	441a      	add	r2, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	2bff      	cmp	r3, #255	; 0xff
 8006ecc:	d903      	bls.n	8006ed6 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	22ff      	movs	r2, #255	; 0xff
 8006ed2:	851a      	strh	r2, [r3, #40]	; 0x28
 8006ed4:	e004      	b.n	8006ee0 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	3324      	adds	r3, #36	; 0x24
 8006eea:	4619      	mov	r1, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ef6:	f7fd ff1f 	bl	8004d38 <HAL_DMA_Start_IT>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d004      	beq.n	8006f0a <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006f00:	2110      	movs	r1, #16
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f7ff fe58 	bl	8006bb8 <I2C_ITError>
}
 8006f08:	e003      	b.n	8006f12 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006f0a:	2140      	movs	r1, #64	; 0x40
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f000 f9f5 	bl	80072fc <I2C_Enable_IRQ>
}
 8006f12:	bf00      	nop
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b084      	sub	sp, #16
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f26:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f36:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006f38:	2110      	movs	r1, #16
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f7ff fe3c 	bl	8006bb8 <I2C_ITError>
}
 8006f40:	bf00      	nop
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f54:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d003      	beq.n	8006f66 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f62:	2200      	movs	r2, #0
 8006f64:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d003      	beq.n	8006f76 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f72:	2200      	movs	r2, #0
 8006f74:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f7ff feee 	bl	8006d58 <I2C_TreatErrorCallback>
}
 8006f7c:	bf00      	nop
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	603b      	str	r3, [r7, #0]
 8006f90:	4613      	mov	r3, r2
 8006f92:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f94:	e022      	b.n	8006fdc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f9c:	d01e      	beq.n	8006fdc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f9e:	f7fc fb91 	bl	80036c4 <HAL_GetTick>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	683a      	ldr	r2, [r7, #0]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d302      	bcc.n	8006fb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d113      	bne.n	8006fdc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb8:	f043 0220 	orr.w	r2, r3, #32
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2220      	movs	r2, #32
 8006fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e00f      	b.n	8006ffc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	699a      	ldr	r2, [r3, #24]
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	68ba      	ldr	r2, [r7, #8]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	bf0c      	ite	eq
 8006fec:	2301      	moveq	r3, #1
 8006fee:	2300      	movne	r3, #0
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	79fb      	ldrb	r3, [r7, #7]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d0cd      	beq.n	8006f96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007010:	e02c      	b.n	800706c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	68b9      	ldr	r1, [r7, #8]
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	f000 f8dc 	bl	80071d4 <I2C_IsAcknowledgeFailed>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d001      	beq.n	8007026 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e02a      	b.n	800707c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800702c:	d01e      	beq.n	800706c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800702e:	f7fc fb49 	bl	80036c4 <HAL_GetTick>
 8007032:	4602      	mov	r2, r0
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	68ba      	ldr	r2, [r7, #8]
 800703a:	429a      	cmp	r2, r3
 800703c:	d302      	bcc.n	8007044 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d113      	bne.n	800706c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007048:	f043 0220 	orr.w	r2, r3, #32
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2220      	movs	r2, #32
 8007054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2200      	movs	r2, #0
 800705c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	e007      	b.n	800707c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	f003 0302 	and.w	r3, r3, #2
 8007076:	2b02      	cmp	r3, #2
 8007078:	d1cb      	bne.n	8007012 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007090:	e028      	b.n	80070e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	68b9      	ldr	r1, [r7, #8]
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f000 f89c 	bl	80071d4 <I2C_IsAcknowledgeFailed>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d001      	beq.n	80070a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e026      	b.n	80070f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070a6:	f7fc fb0d 	bl	80036c4 <HAL_GetTick>
 80070aa:	4602      	mov	r2, r0
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d302      	bcc.n	80070bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d113      	bne.n	80070e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c0:	f043 0220 	orr.w	r2, r3, #32
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2220      	movs	r2, #32
 80070cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e007      	b.n	80070f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	f003 0320 	and.w	r3, r3, #32
 80070ee:	2b20      	cmp	r3, #32
 80070f0:	d1cf      	bne.n	8007092 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007108:	e055      	b.n	80071b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	68b9      	ldr	r1, [r7, #8]
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f000 f860 	bl	80071d4 <I2C_IsAcknowledgeFailed>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d001      	beq.n	800711e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e053      	b.n	80071c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	699b      	ldr	r3, [r3, #24]
 8007124:	f003 0320 	and.w	r3, r3, #32
 8007128:	2b20      	cmp	r3, #32
 800712a:	d129      	bne.n	8007180 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	f003 0304 	and.w	r3, r3, #4
 8007136:	2b04      	cmp	r3, #4
 8007138:	d105      	bne.n	8007146 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007142:	2300      	movs	r3, #0
 8007144:	e03f      	b.n	80071c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2220      	movs	r2, #32
 800714c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	6859      	ldr	r1, [r3, #4]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	4b1d      	ldr	r3, [pc, #116]	; (80071d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800715a:	400b      	ands	r3, r1
 800715c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2220      	movs	r2, #32
 8007168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e022      	b.n	80071c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007180:	f7fc faa0 	bl	80036c4 <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	68ba      	ldr	r2, [r7, #8]
 800718c:	429a      	cmp	r2, r3
 800718e:	d302      	bcc.n	8007196 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10f      	bne.n	80071b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800719a:	f043 0220 	orr.w	r2, r3, #32
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2220      	movs	r2, #32
 80071a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e007      	b.n	80071c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	f003 0304 	and.w	r3, r3, #4
 80071c0:	2b04      	cmp	r3, #4
 80071c2:	d1a2      	bne.n	800710a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	fe00e800 	.word	0xfe00e800

080071d4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	f003 0310 	and.w	r3, r3, #16
 80071ea:	2b10      	cmp	r3, #16
 80071ec:	d151      	bne.n	8007292 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071ee:	e022      	b.n	8007236 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071f6:	d01e      	beq.n	8007236 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071f8:	f7fc fa64 	bl	80036c4 <HAL_GetTick>
 80071fc:	4602      	mov	r2, r0
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	68ba      	ldr	r2, [r7, #8]
 8007204:	429a      	cmp	r2, r3
 8007206:	d302      	bcc.n	800720e <I2C_IsAcknowledgeFailed+0x3a>
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d113      	bne.n	8007236 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007212:	f043 0220 	orr.w	r2, r3, #32
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2220      	movs	r2, #32
 800721e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e02e      	b.n	8007294 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	f003 0320 	and.w	r3, r3, #32
 8007240:	2b20      	cmp	r3, #32
 8007242:	d1d5      	bne.n	80071f0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2210      	movs	r2, #16
 800724a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2220      	movs	r2, #32
 8007252:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f7ff fda6 	bl	8006da6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	6859      	ldr	r1, [r3, #4]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	4b0d      	ldr	r3, [pc, #52]	; (800729c <I2C_IsAcknowledgeFailed+0xc8>)
 8007266:	400b      	ands	r3, r1
 8007268:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800726e:	f043 0204 	orr.w	r2, r3, #4
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2220      	movs	r2, #32
 800727a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e000      	b.n	8007294 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	fe00e800 	.word	0xfe00e800

080072a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	607b      	str	r3, [r7, #4]
 80072aa:	460b      	mov	r3, r1
 80072ac:	817b      	strh	r3, [r7, #10]
 80072ae:	4613      	mov	r3, r2
 80072b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	685a      	ldr	r2, [r3, #4]
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	0d5b      	lsrs	r3, r3, #21
 80072bc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80072c0:	4b0d      	ldr	r3, [pc, #52]	; (80072f8 <I2C_TransferConfig+0x58>)
 80072c2:	430b      	orrs	r3, r1
 80072c4:	43db      	mvns	r3, r3
 80072c6:	ea02 0103 	and.w	r1, r2, r3
 80072ca:	897b      	ldrh	r3, [r7, #10]
 80072cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80072d0:	7a7b      	ldrb	r3, [r7, #9]
 80072d2:	041b      	lsls	r3, r3, #16
 80072d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80072d8:	431a      	orrs	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	431a      	orrs	r2, r3
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	431a      	orrs	r2, r3
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	430a      	orrs	r2, r1
 80072e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80072ea:	bf00      	nop
 80072ec:	3714      	adds	r7, #20
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr
 80072f6:	bf00      	nop
 80072f8:	03ff63ff 	.word	0x03ff63ff

080072fc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	460b      	mov	r3, r1
 8007306:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007308:	2300      	movs	r3, #0
 800730a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007310:	4a2a      	ldr	r2, [pc, #168]	; (80073bc <I2C_Enable_IRQ+0xc0>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d004      	beq.n	8007320 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800731a:	4a29      	ldr	r2, [pc, #164]	; (80073c0 <I2C_Enable_IRQ+0xc4>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d11d      	bne.n	800735c <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007320:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007324:	2b00      	cmp	r3, #0
 8007326:	da03      	bge.n	8007330 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800732e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007330:	887b      	ldrh	r3, [r7, #2]
 8007332:	2b10      	cmp	r3, #16
 8007334:	d103      	bne.n	800733e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800733c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800733e:	887b      	ldrh	r3, [r7, #2]
 8007340:	2b20      	cmp	r3, #32
 8007342:	d103      	bne.n	800734c <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800734a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800734c:	887b      	ldrh	r3, [r7, #2]
 800734e:	2b40      	cmp	r3, #64	; 0x40
 8007350:	d125      	bne.n	800739e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007358:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800735a:	e020      	b.n	800739e <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800735c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007360:	2b00      	cmp	r3, #0
 8007362:	da03      	bge.n	800736c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800736a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800736c:	887b      	ldrh	r3, [r7, #2]
 800736e:	f003 0301 	and.w	r3, r3, #1
 8007372:	2b00      	cmp	r3, #0
 8007374:	d003      	beq.n	800737e <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800737c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800737e:	887b      	ldrh	r3, [r7, #2]
 8007380:	f003 0302 	and.w	r3, r3, #2
 8007384:	2b00      	cmp	r3, #0
 8007386:	d003      	beq.n	8007390 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800738e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007390:	887b      	ldrh	r3, [r7, #2]
 8007392:	2b20      	cmp	r3, #32
 8007394:	d103      	bne.n	800739e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f043 0320 	orr.w	r3, r3, #32
 800739c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	6819      	ldr	r1, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	430a      	orrs	r2, r1
 80073ac:	601a      	str	r2, [r3, #0]
}
 80073ae:	bf00      	nop
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	0800617f 	.word	0x0800617f
 80073c0:	08006365 	.word	0x08006365

080073c4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	460b      	mov	r3, r1
 80073ce:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80073d0:	2300      	movs	r3, #0
 80073d2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80073d4:	887b      	ldrh	r3, [r7, #2]
 80073d6:	f003 0301 	and.w	r3, r3, #1
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00f      	beq.n	80073fe <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80073e4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80073f2:	2b28      	cmp	r3, #40	; 0x28
 80073f4:	d003      	beq.n	80073fe <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80073fc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80073fe:	887b      	ldrh	r3, [r7, #2]
 8007400:	f003 0302 	and.w	r3, r3, #2
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00f      	beq.n	8007428 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800740e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007416:	b2db      	uxtb	r3, r3
 8007418:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800741c:	2b28      	cmp	r3, #40	; 0x28
 800741e:	d003      	beq.n	8007428 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007426:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007428:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800742c:	2b00      	cmp	r3, #0
 800742e:	da03      	bge.n	8007438 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007436:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007438:	887b      	ldrh	r3, [r7, #2]
 800743a:	2b10      	cmp	r3, #16
 800743c:	d103      	bne.n	8007446 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007444:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007446:	887b      	ldrh	r3, [r7, #2]
 8007448:	2b20      	cmp	r3, #32
 800744a:	d103      	bne.n	8007454 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f043 0320 	orr.w	r3, r3, #32
 8007452:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007454:	887b      	ldrh	r3, [r7, #2]
 8007456:	2b40      	cmp	r3, #64	; 0x40
 8007458:	d103      	bne.n	8007462 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007460:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	6819      	ldr	r1, [r3, #0]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	43da      	mvns	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	400a      	ands	r2, r1
 8007472:	601a      	str	r2, [r3, #0]
}
 8007474:	bf00      	nop
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b20      	cmp	r3, #32
 8007494:	d138      	bne.n	8007508 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800749c:	2b01      	cmp	r3, #1
 800749e:	d101      	bne.n	80074a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80074a0:	2302      	movs	r3, #2
 80074a2:	e032      	b.n	800750a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2224      	movs	r2, #36	; 0x24
 80074b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f022 0201 	bic.w	r2, r2, #1
 80074c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80074d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	6819      	ldr	r1, [r3, #0]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	430a      	orrs	r2, r1
 80074e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f042 0201 	orr.w	r2, r2, #1
 80074f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2220      	movs	r2, #32
 80074f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007504:	2300      	movs	r3, #0
 8007506:	e000      	b.n	800750a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007508:	2302      	movs	r3, #2
  }
}
 800750a:	4618      	mov	r0, r3
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007516:	b480      	push	{r7}
 8007518:	b085      	sub	sp, #20
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
 800751e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007526:	b2db      	uxtb	r3, r3
 8007528:	2b20      	cmp	r3, #32
 800752a:	d139      	bne.n	80075a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007532:	2b01      	cmp	r3, #1
 8007534:	d101      	bne.n	800753a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007536:	2302      	movs	r3, #2
 8007538:	e033      	b.n	80075a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2224      	movs	r2, #36	; 0x24
 8007546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f022 0201 	bic.w	r2, r2, #1
 8007558:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007568:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	021b      	lsls	r3, r3, #8
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	4313      	orrs	r3, r2
 8007572:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f042 0201 	orr.w	r2, r2, #1
 800758a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2220      	movs	r2, #32
 8007590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800759c:	2300      	movs	r3, #0
 800759e:	e000      	b.n	80075a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80075a0:	2302      	movs	r3, #2
  }
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3714      	adds	r7, #20
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
	...

080075b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80075b0:	b480      	push	{r7}
 80075b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80075b4:	4b04      	ldr	r3, [pc, #16]	; (80075c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80075bc:	4618      	mov	r0, r3
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	40007000 	.word	0x40007000

080075cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075da:	d130      	bne.n	800763e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80075dc:	4b23      	ldr	r3, [pc, #140]	; (800766c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80075e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075e8:	d038      	beq.n	800765c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80075ea:	4b20      	ldr	r3, [pc, #128]	; (800766c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80075f2:	4a1e      	ldr	r2, [pc, #120]	; (800766c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80075f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80075f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80075fa:	4b1d      	ldr	r3, [pc, #116]	; (8007670 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2232      	movs	r2, #50	; 0x32
 8007600:	fb02 f303 	mul.w	r3, r2, r3
 8007604:	4a1b      	ldr	r2, [pc, #108]	; (8007674 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007606:	fba2 2303 	umull	r2, r3, r2, r3
 800760a:	0c9b      	lsrs	r3, r3, #18
 800760c:	3301      	adds	r3, #1
 800760e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007610:	e002      	b.n	8007618 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	3b01      	subs	r3, #1
 8007616:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007618:	4b14      	ldr	r3, [pc, #80]	; (800766c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800761a:	695b      	ldr	r3, [r3, #20]
 800761c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007624:	d102      	bne.n	800762c <HAL_PWREx_ControlVoltageScaling+0x60>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1f2      	bne.n	8007612 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800762c:	4b0f      	ldr	r3, [pc, #60]	; (800766c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800762e:	695b      	ldr	r3, [r3, #20]
 8007630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007638:	d110      	bne.n	800765c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e00f      	b.n	800765e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800763e:	4b0b      	ldr	r3, [pc, #44]	; (800766c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800764a:	d007      	beq.n	800765c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800764c:	4b07      	ldr	r3, [pc, #28]	; (800766c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007654:	4a05      	ldr	r2, [pc, #20]	; (800766c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007656:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800765a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3714      	adds	r7, #20
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	40007000 	.word	0x40007000
 8007670:	2000000c 	.word	0x2000000c
 8007674:	431bde83 	.word	0x431bde83

08007678 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b088      	sub	sp, #32
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d102      	bne.n	800768c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	f000 bc11 	b.w	8007eae <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800768c:	4ba0      	ldr	r3, [pc, #640]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f003 030c 	and.w	r3, r3, #12
 8007694:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007696:	4b9e      	ldr	r3, [pc, #632]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	f003 0303 	and.w	r3, r3, #3
 800769e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 0310 	and.w	r3, r3, #16
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f000 80e4 	beq.w	8007876 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d007      	beq.n	80076c4 <HAL_RCC_OscConfig+0x4c>
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	2b0c      	cmp	r3, #12
 80076b8:	f040 808b 	bne.w	80077d2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	f040 8087 	bne.w	80077d2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80076c4:	4b92      	ldr	r3, [pc, #584]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 0302 	and.w	r3, r3, #2
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d005      	beq.n	80076dc <HAL_RCC_OscConfig+0x64>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	699b      	ldr	r3, [r3, #24]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e3e8      	b.n	8007eae <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a1a      	ldr	r2, [r3, #32]
 80076e0:	4b8b      	ldr	r3, [pc, #556]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 0308 	and.w	r3, r3, #8
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d004      	beq.n	80076f6 <HAL_RCC_OscConfig+0x7e>
 80076ec:	4b88      	ldr	r3, [pc, #544]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076f4:	e005      	b.n	8007702 <HAL_RCC_OscConfig+0x8a>
 80076f6:	4b86      	ldr	r3, [pc, #536]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 80076f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076fc:	091b      	lsrs	r3, r3, #4
 80076fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007702:	4293      	cmp	r3, r2
 8007704:	d223      	bcs.n	800774e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a1b      	ldr	r3, [r3, #32]
 800770a:	4618      	mov	r0, r3
 800770c:	f000 fd7a 	bl	8008204 <RCC_SetFlashLatencyFromMSIRange>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d001      	beq.n	800771a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e3c9      	b.n	8007eae <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800771a:	4b7d      	ldr	r3, [pc, #500]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a7c      	ldr	r2, [pc, #496]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 8007720:	f043 0308 	orr.w	r3, r3, #8
 8007724:	6013      	str	r3, [r2, #0]
 8007726:	4b7a      	ldr	r3, [pc, #488]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a1b      	ldr	r3, [r3, #32]
 8007732:	4977      	ldr	r1, [pc, #476]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 8007734:	4313      	orrs	r3, r2
 8007736:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007738:	4b75      	ldr	r3, [pc, #468]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	69db      	ldr	r3, [r3, #28]
 8007744:	021b      	lsls	r3, r3, #8
 8007746:	4972      	ldr	r1, [pc, #456]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 8007748:	4313      	orrs	r3, r2
 800774a:	604b      	str	r3, [r1, #4]
 800774c:	e025      	b.n	800779a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800774e:	4b70      	ldr	r3, [pc, #448]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a6f      	ldr	r2, [pc, #444]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 8007754:	f043 0308 	orr.w	r3, r3, #8
 8007758:	6013      	str	r3, [r2, #0]
 800775a:	4b6d      	ldr	r3, [pc, #436]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a1b      	ldr	r3, [r3, #32]
 8007766:	496a      	ldr	r1, [pc, #424]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 8007768:	4313      	orrs	r3, r2
 800776a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800776c:	4b68      	ldr	r3, [pc, #416]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	69db      	ldr	r3, [r3, #28]
 8007778:	021b      	lsls	r3, r3, #8
 800777a:	4965      	ldr	r1, [pc, #404]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 800777c:	4313      	orrs	r3, r2
 800777e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d109      	bne.n	800779a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a1b      	ldr	r3, [r3, #32]
 800778a:	4618      	mov	r0, r3
 800778c:	f000 fd3a 	bl	8008204 <RCC_SetFlashLatencyFromMSIRange>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e389      	b.n	8007eae <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800779a:	f000 fc6f 	bl	800807c <HAL_RCC_GetSysClockFreq>
 800779e:	4602      	mov	r2, r0
 80077a0:	4b5b      	ldr	r3, [pc, #364]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	091b      	lsrs	r3, r3, #4
 80077a6:	f003 030f 	and.w	r3, r3, #15
 80077aa:	495a      	ldr	r1, [pc, #360]	; (8007914 <HAL_RCC_OscConfig+0x29c>)
 80077ac:	5ccb      	ldrb	r3, [r1, r3]
 80077ae:	f003 031f 	and.w	r3, r3, #31
 80077b2:	fa22 f303 	lsr.w	r3, r2, r3
 80077b6:	4a58      	ldr	r2, [pc, #352]	; (8007918 <HAL_RCC_OscConfig+0x2a0>)
 80077b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80077ba:	4b58      	ldr	r3, [pc, #352]	; (800791c <HAL_RCC_OscConfig+0x2a4>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4618      	mov	r0, r3
 80077c0:	f7fb ff30 	bl	8003624 <HAL_InitTick>
 80077c4:	4603      	mov	r3, r0
 80077c6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d052      	beq.n	8007874 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80077ce:	7bfb      	ldrb	r3, [r7, #15]
 80077d0:	e36d      	b.n	8007eae <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	699b      	ldr	r3, [r3, #24]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d032      	beq.n	8007840 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80077da:	4b4d      	ldr	r3, [pc, #308]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a4c      	ldr	r2, [pc, #304]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 80077e0:	f043 0301 	orr.w	r3, r3, #1
 80077e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80077e6:	f7fb ff6d 	bl	80036c4 <HAL_GetTick>
 80077ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80077ec:	e008      	b.n	8007800 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80077ee:	f7fb ff69 	bl	80036c4 <HAL_GetTick>
 80077f2:	4602      	mov	r2, r0
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d901      	bls.n	8007800 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e356      	b.n	8007eae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007800:	4b43      	ldr	r3, [pc, #268]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0302 	and.w	r3, r3, #2
 8007808:	2b00      	cmp	r3, #0
 800780a:	d0f0      	beq.n	80077ee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800780c:	4b40      	ldr	r3, [pc, #256]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a3f      	ldr	r2, [pc, #252]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 8007812:	f043 0308 	orr.w	r3, r3, #8
 8007816:	6013      	str	r3, [r2, #0]
 8007818:	4b3d      	ldr	r3, [pc, #244]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6a1b      	ldr	r3, [r3, #32]
 8007824:	493a      	ldr	r1, [pc, #232]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 8007826:	4313      	orrs	r3, r2
 8007828:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800782a:	4b39      	ldr	r3, [pc, #228]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	69db      	ldr	r3, [r3, #28]
 8007836:	021b      	lsls	r3, r3, #8
 8007838:	4935      	ldr	r1, [pc, #212]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 800783a:	4313      	orrs	r3, r2
 800783c:	604b      	str	r3, [r1, #4]
 800783e:	e01a      	b.n	8007876 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007840:	4b33      	ldr	r3, [pc, #204]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a32      	ldr	r2, [pc, #200]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 8007846:	f023 0301 	bic.w	r3, r3, #1
 800784a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800784c:	f7fb ff3a 	bl	80036c4 <HAL_GetTick>
 8007850:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007852:	e008      	b.n	8007866 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007854:	f7fb ff36 	bl	80036c4 <HAL_GetTick>
 8007858:	4602      	mov	r2, r0
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	2b02      	cmp	r3, #2
 8007860:	d901      	bls.n	8007866 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e323      	b.n	8007eae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007866:	4b2a      	ldr	r3, [pc, #168]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0302 	and.w	r3, r3, #2
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1f0      	bne.n	8007854 <HAL_RCC_OscConfig+0x1dc>
 8007872:	e000      	b.n	8007876 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007874:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 0301 	and.w	r3, r3, #1
 800787e:	2b00      	cmp	r3, #0
 8007880:	d073      	beq.n	800796a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	2b08      	cmp	r3, #8
 8007886:	d005      	beq.n	8007894 <HAL_RCC_OscConfig+0x21c>
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	2b0c      	cmp	r3, #12
 800788c:	d10e      	bne.n	80078ac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	2b03      	cmp	r3, #3
 8007892:	d10b      	bne.n	80078ac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007894:	4b1e      	ldr	r3, [pc, #120]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800789c:	2b00      	cmp	r3, #0
 800789e:	d063      	beq.n	8007968 <HAL_RCC_OscConfig+0x2f0>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d15f      	bne.n	8007968 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e300      	b.n	8007eae <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078b4:	d106      	bne.n	80078c4 <HAL_RCC_OscConfig+0x24c>
 80078b6:	4b16      	ldr	r3, [pc, #88]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a15      	ldr	r2, [pc, #84]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 80078bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078c0:	6013      	str	r3, [r2, #0]
 80078c2:	e01d      	b.n	8007900 <HAL_RCC_OscConfig+0x288>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80078cc:	d10c      	bne.n	80078e8 <HAL_RCC_OscConfig+0x270>
 80078ce:	4b10      	ldr	r3, [pc, #64]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a0f      	ldr	r2, [pc, #60]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 80078d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078d8:	6013      	str	r3, [r2, #0]
 80078da:	4b0d      	ldr	r3, [pc, #52]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a0c      	ldr	r2, [pc, #48]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 80078e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078e4:	6013      	str	r3, [r2, #0]
 80078e6:	e00b      	b.n	8007900 <HAL_RCC_OscConfig+0x288>
 80078e8:	4b09      	ldr	r3, [pc, #36]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a08      	ldr	r2, [pc, #32]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 80078ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078f2:	6013      	str	r3, [r2, #0]
 80078f4:	4b06      	ldr	r3, [pc, #24]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a05      	ldr	r2, [pc, #20]	; (8007910 <HAL_RCC_OscConfig+0x298>)
 80078fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d01b      	beq.n	8007940 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007908:	f7fb fedc 	bl	80036c4 <HAL_GetTick>
 800790c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800790e:	e010      	b.n	8007932 <HAL_RCC_OscConfig+0x2ba>
 8007910:	40021000 	.word	0x40021000
 8007914:	0800b888 	.word	0x0800b888
 8007918:	2000000c 	.word	0x2000000c
 800791c:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007920:	f7fb fed0 	bl	80036c4 <HAL_GetTick>
 8007924:	4602      	mov	r2, r0
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	2b64      	cmp	r3, #100	; 0x64
 800792c:	d901      	bls.n	8007932 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800792e:	2303      	movs	r3, #3
 8007930:	e2bd      	b.n	8007eae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007932:	4baf      	ldr	r3, [pc, #700]	; (8007bf0 <HAL_RCC_OscConfig+0x578>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800793a:	2b00      	cmp	r3, #0
 800793c:	d0f0      	beq.n	8007920 <HAL_RCC_OscConfig+0x2a8>
 800793e:	e014      	b.n	800796a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007940:	f7fb fec0 	bl	80036c4 <HAL_GetTick>
 8007944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007946:	e008      	b.n	800795a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007948:	f7fb febc 	bl	80036c4 <HAL_GetTick>
 800794c:	4602      	mov	r2, r0
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	2b64      	cmp	r3, #100	; 0x64
 8007954:	d901      	bls.n	800795a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007956:	2303      	movs	r3, #3
 8007958:	e2a9      	b.n	8007eae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800795a:	4ba5      	ldr	r3, [pc, #660]	; (8007bf0 <HAL_RCC_OscConfig+0x578>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1f0      	bne.n	8007948 <HAL_RCC_OscConfig+0x2d0>
 8007966:	e000      	b.n	800796a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 0302 	and.w	r3, r3, #2
 8007972:	2b00      	cmp	r3, #0
 8007974:	d060      	beq.n	8007a38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	2b04      	cmp	r3, #4
 800797a:	d005      	beq.n	8007988 <HAL_RCC_OscConfig+0x310>
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	2b0c      	cmp	r3, #12
 8007980:	d119      	bne.n	80079b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	2b02      	cmp	r3, #2
 8007986:	d116      	bne.n	80079b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007988:	4b99      	ldr	r3, [pc, #612]	; (8007bf0 <HAL_RCC_OscConfig+0x578>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007990:	2b00      	cmp	r3, #0
 8007992:	d005      	beq.n	80079a0 <HAL_RCC_OscConfig+0x328>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d101      	bne.n	80079a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e286      	b.n	8007eae <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079a0:	4b93      	ldr	r3, [pc, #588]	; (8007bf0 <HAL_RCC_OscConfig+0x578>)
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	061b      	lsls	r3, r3, #24
 80079ae:	4990      	ldr	r1, [pc, #576]	; (8007bf0 <HAL_RCC_OscConfig+0x578>)
 80079b0:	4313      	orrs	r3, r2
 80079b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80079b4:	e040      	b.n	8007a38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d023      	beq.n	8007a06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80079be:	4b8c      	ldr	r3, [pc, #560]	; (8007bf0 <HAL_RCC_OscConfig+0x578>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a8b      	ldr	r2, [pc, #556]	; (8007bf0 <HAL_RCC_OscConfig+0x578>)
 80079c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079ca:	f7fb fe7b 	bl	80036c4 <HAL_GetTick>
 80079ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80079d0:	e008      	b.n	80079e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079d2:	f7fb fe77 	bl	80036c4 <HAL_GetTick>
 80079d6:	4602      	mov	r2, r0
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d901      	bls.n	80079e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80079e0:	2303      	movs	r3, #3
 80079e2:	e264      	b.n	8007eae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80079e4:	4b82      	ldr	r3, [pc, #520]	; (8007bf0 <HAL_RCC_OscConfig+0x578>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d0f0      	beq.n	80079d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079f0:	4b7f      	ldr	r3, [pc, #508]	; (8007bf0 <HAL_RCC_OscConfig+0x578>)
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	691b      	ldr	r3, [r3, #16]
 80079fc:	061b      	lsls	r3, r3, #24
 80079fe:	497c      	ldr	r1, [pc, #496]	; (8007bf0 <HAL_RCC_OscConfig+0x578>)
 8007a00:	4313      	orrs	r3, r2
 8007a02:	604b      	str	r3, [r1, #4]
 8007a04:	e018      	b.n	8007a38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a06:	4b7a      	ldr	r3, [pc, #488]	; (8007bf0 <HAL_RCC_OscConfig+0x578>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a79      	ldr	r2, [pc, #484]	; (8007bf0 <HAL_RCC_OscConfig+0x578>)
 8007a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a12:	f7fb fe57 	bl	80036c4 <HAL_GetTick>
 8007a16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007a18:	e008      	b.n	8007a2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a1a:	f7fb fe53 	bl	80036c4 <HAL_GetTick>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	1ad3      	subs	r3, r2, r3
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d901      	bls.n	8007a2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	e240      	b.n	8007eae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007a2c:	4b70      	ldr	r3, [pc, #448]	; (8007bf0 <HAL_RCC_OscConfig+0x578>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1f0      	bne.n	8007a1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 0308 	and.w	r3, r3, #8
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d03c      	beq.n	8007abe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	695b      	ldr	r3, [r3, #20]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d01c      	beq.n	8007a86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a4c:	4b68      	ldr	r3, [pc, #416]	; (8007bf0 <HAL_RCC_OscConfig+0x578>)
 8007a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a52:	4a67      	ldr	r2, [pc, #412]	; (8007bf0 <HAL_RCC_OscConfig+0x578>)
 8007a54:	f043 0301 	orr.w	r3, r3, #1
 8007a58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a5c:	f7fb fe32 	bl	80036c4 <HAL_GetTick>
 8007a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007a62:	e008      	b.n	8007a76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a64:	f7fb fe2e 	bl	80036c4 <HAL_GetTick>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	1ad3      	subs	r3, r2, r3
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d901      	bls.n	8007a76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007a72:	2303      	movs	r3, #3
 8007a74:	e21b      	b.n	8007eae <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007a76:	4b5e      	ldr	r3, [pc, #376]	; (8007bf0 <HAL_RCC_OscConfig+0x578>)
 8007a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a7c:	f003 0302 	and.w	r3, r3, #2
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d0ef      	beq.n	8007a64 <HAL_RCC_OscConfig+0x3ec>
 8007a84:	e01b      	b.n	8007abe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a86:	4b5a      	ldr	r3, [pc, #360]	; (8007bf0 <HAL_RCC_OscConfig+0x578>)
 8007a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a8c:	4a58      	ldr	r2, [pc, #352]	; (8007bf0 <HAL_RCC_OscConfig+0x578>)
 8007a8e:	f023 0301 	bic.w	r3, r3, #1
 8007a92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a96:	f7fb fe15 	bl	80036c4 <HAL_GetTick>
 8007a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007a9c:	e008      	b.n	8007ab0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a9e:	f7fb fe11 	bl	80036c4 <HAL_GetTick>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	1ad3      	subs	r3, r2, r3
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d901      	bls.n	8007ab0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e1fe      	b.n	8007eae <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007ab0:	4b4f      	ldr	r3, [pc, #316]	; (8007bf0 <HAL_RCC_OscConfig+0x578>)
 8007ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ab6:	f003 0302 	and.w	r3, r3, #2
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1ef      	bne.n	8007a9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 0304 	and.w	r3, r3, #4
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f000 80a6 	beq.w	8007c18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007acc:	2300      	movs	r3, #0
 8007ace:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007ad0:	4b47      	ldr	r3, [pc, #284]	; (8007bf0 <HAL_RCC_OscConfig+0x578>)
 8007ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10d      	bne.n	8007af8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007adc:	4b44      	ldr	r3, [pc, #272]	; (8007bf0 <HAL_RCC_OscConfig+0x578>)
 8007ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ae0:	4a43      	ldr	r2, [pc, #268]	; (8007bf0 <HAL_RCC_OscConfig+0x578>)
 8007ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ae6:	6593      	str	r3, [r2, #88]	; 0x58
 8007ae8:	4b41      	ldr	r3, [pc, #260]	; (8007bf0 <HAL_RCC_OscConfig+0x578>)
 8007aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007af0:	60bb      	str	r3, [r7, #8]
 8007af2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007af4:	2301      	movs	r3, #1
 8007af6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007af8:	4b3e      	ldr	r3, [pc, #248]	; (8007bf4 <HAL_RCC_OscConfig+0x57c>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d118      	bne.n	8007b36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b04:	4b3b      	ldr	r3, [pc, #236]	; (8007bf4 <HAL_RCC_OscConfig+0x57c>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a3a      	ldr	r2, [pc, #232]	; (8007bf4 <HAL_RCC_OscConfig+0x57c>)
 8007b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b10:	f7fb fdd8 	bl	80036c4 <HAL_GetTick>
 8007b14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b16:	e008      	b.n	8007b2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b18:	f7fb fdd4 	bl	80036c4 <HAL_GetTick>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d901      	bls.n	8007b2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e1c1      	b.n	8007eae <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b2a:	4b32      	ldr	r3, [pc, #200]	; (8007bf4 <HAL_RCC_OscConfig+0x57c>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d0f0      	beq.n	8007b18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d108      	bne.n	8007b50 <HAL_RCC_OscConfig+0x4d8>
 8007b3e:	4b2c      	ldr	r3, [pc, #176]	; (8007bf0 <HAL_RCC_OscConfig+0x578>)
 8007b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b44:	4a2a      	ldr	r2, [pc, #168]	; (8007bf0 <HAL_RCC_OscConfig+0x578>)
 8007b46:	f043 0301 	orr.w	r3, r3, #1
 8007b4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007b4e:	e024      	b.n	8007b9a <HAL_RCC_OscConfig+0x522>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	2b05      	cmp	r3, #5
 8007b56:	d110      	bne.n	8007b7a <HAL_RCC_OscConfig+0x502>
 8007b58:	4b25      	ldr	r3, [pc, #148]	; (8007bf0 <HAL_RCC_OscConfig+0x578>)
 8007b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b5e:	4a24      	ldr	r2, [pc, #144]	; (8007bf0 <HAL_RCC_OscConfig+0x578>)
 8007b60:	f043 0304 	orr.w	r3, r3, #4
 8007b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007b68:	4b21      	ldr	r3, [pc, #132]	; (8007bf0 <HAL_RCC_OscConfig+0x578>)
 8007b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b6e:	4a20      	ldr	r2, [pc, #128]	; (8007bf0 <HAL_RCC_OscConfig+0x578>)
 8007b70:	f043 0301 	orr.w	r3, r3, #1
 8007b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007b78:	e00f      	b.n	8007b9a <HAL_RCC_OscConfig+0x522>
 8007b7a:	4b1d      	ldr	r3, [pc, #116]	; (8007bf0 <HAL_RCC_OscConfig+0x578>)
 8007b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b80:	4a1b      	ldr	r2, [pc, #108]	; (8007bf0 <HAL_RCC_OscConfig+0x578>)
 8007b82:	f023 0301 	bic.w	r3, r3, #1
 8007b86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007b8a:	4b19      	ldr	r3, [pc, #100]	; (8007bf0 <HAL_RCC_OscConfig+0x578>)
 8007b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b90:	4a17      	ldr	r2, [pc, #92]	; (8007bf0 <HAL_RCC_OscConfig+0x578>)
 8007b92:	f023 0304 	bic.w	r3, r3, #4
 8007b96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d016      	beq.n	8007bd0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ba2:	f7fb fd8f 	bl	80036c4 <HAL_GetTick>
 8007ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ba8:	e00a      	b.n	8007bc0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007baa:	f7fb fd8b 	bl	80036c4 <HAL_GetTick>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	1ad3      	subs	r3, r2, r3
 8007bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d901      	bls.n	8007bc0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e176      	b.n	8007eae <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bc0:	4b0b      	ldr	r3, [pc, #44]	; (8007bf0 <HAL_RCC_OscConfig+0x578>)
 8007bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bc6:	f003 0302 	and.w	r3, r3, #2
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d0ed      	beq.n	8007baa <HAL_RCC_OscConfig+0x532>
 8007bce:	e01a      	b.n	8007c06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bd0:	f7fb fd78 	bl	80036c4 <HAL_GetTick>
 8007bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007bd6:	e00f      	b.n	8007bf8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bd8:	f7fb fd74 	bl	80036c4 <HAL_GetTick>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d906      	bls.n	8007bf8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e15f      	b.n	8007eae <HAL_RCC_OscConfig+0x836>
 8007bee:	bf00      	nop
 8007bf0:	40021000 	.word	0x40021000
 8007bf4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007bf8:	4baa      	ldr	r3, [pc, #680]	; (8007ea4 <HAL_RCC_OscConfig+0x82c>)
 8007bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bfe:	f003 0302 	and.w	r3, r3, #2
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1e8      	bne.n	8007bd8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c06:	7ffb      	ldrb	r3, [r7, #31]
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d105      	bne.n	8007c18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c0c:	4ba5      	ldr	r3, [pc, #660]	; (8007ea4 <HAL_RCC_OscConfig+0x82c>)
 8007c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c10:	4aa4      	ldr	r2, [pc, #656]	; (8007ea4 <HAL_RCC_OscConfig+0x82c>)
 8007c12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c16:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f003 0320 	and.w	r3, r3, #32
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d03c      	beq.n	8007c9e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d01c      	beq.n	8007c66 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007c2c:	4b9d      	ldr	r3, [pc, #628]	; (8007ea4 <HAL_RCC_OscConfig+0x82c>)
 8007c2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c32:	4a9c      	ldr	r2, [pc, #624]	; (8007ea4 <HAL_RCC_OscConfig+0x82c>)
 8007c34:	f043 0301 	orr.w	r3, r3, #1
 8007c38:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c3c:	f7fb fd42 	bl	80036c4 <HAL_GetTick>
 8007c40:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007c42:	e008      	b.n	8007c56 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007c44:	f7fb fd3e 	bl	80036c4 <HAL_GetTick>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	2b02      	cmp	r3, #2
 8007c50:	d901      	bls.n	8007c56 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e12b      	b.n	8007eae <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007c56:	4b93      	ldr	r3, [pc, #588]	; (8007ea4 <HAL_RCC_OscConfig+0x82c>)
 8007c58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c5c:	f003 0302 	and.w	r3, r3, #2
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d0ef      	beq.n	8007c44 <HAL_RCC_OscConfig+0x5cc>
 8007c64:	e01b      	b.n	8007c9e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007c66:	4b8f      	ldr	r3, [pc, #572]	; (8007ea4 <HAL_RCC_OscConfig+0x82c>)
 8007c68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c6c:	4a8d      	ldr	r2, [pc, #564]	; (8007ea4 <HAL_RCC_OscConfig+0x82c>)
 8007c6e:	f023 0301 	bic.w	r3, r3, #1
 8007c72:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c76:	f7fb fd25 	bl	80036c4 <HAL_GetTick>
 8007c7a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007c7c:	e008      	b.n	8007c90 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007c7e:	f7fb fd21 	bl	80036c4 <HAL_GetTick>
 8007c82:	4602      	mov	r2, r0
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	1ad3      	subs	r3, r2, r3
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d901      	bls.n	8007c90 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	e10e      	b.n	8007eae <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007c90:	4b84      	ldr	r3, [pc, #528]	; (8007ea4 <HAL_RCC_OscConfig+0x82c>)
 8007c92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c96:	f003 0302 	and.w	r3, r3, #2
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d1ef      	bne.n	8007c7e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	f000 8102 	beq.w	8007eac <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cac:	2b02      	cmp	r3, #2
 8007cae:	f040 80c5 	bne.w	8007e3c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007cb2:	4b7c      	ldr	r3, [pc, #496]	; (8007ea4 <HAL_RCC_OscConfig+0x82c>)
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	f003 0203 	and.w	r2, r3, #3
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d12c      	bne.n	8007d20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d123      	bne.n	8007d20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ce2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d11b      	bne.n	8007d20 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d113      	bne.n	8007d20 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d02:	085b      	lsrs	r3, r3, #1
 8007d04:	3b01      	subs	r3, #1
 8007d06:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d109      	bne.n	8007d20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d16:	085b      	lsrs	r3, r3, #1
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d067      	beq.n	8007df0 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	2b0c      	cmp	r3, #12
 8007d24:	d062      	beq.n	8007dec <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007d26:	4b5f      	ldr	r3, [pc, #380]	; (8007ea4 <HAL_RCC_OscConfig+0x82c>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d001      	beq.n	8007d36 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e0bb      	b.n	8007eae <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007d36:	4b5b      	ldr	r3, [pc, #364]	; (8007ea4 <HAL_RCC_OscConfig+0x82c>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a5a      	ldr	r2, [pc, #360]	; (8007ea4 <HAL_RCC_OscConfig+0x82c>)
 8007d3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d40:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007d42:	f7fb fcbf 	bl	80036c4 <HAL_GetTick>
 8007d46:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d48:	e008      	b.n	8007d5c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d4a:	f7fb fcbb 	bl	80036c4 <HAL_GetTick>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	2b02      	cmp	r3, #2
 8007d56:	d901      	bls.n	8007d5c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	e0a8      	b.n	8007eae <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d5c:	4b51      	ldr	r3, [pc, #324]	; (8007ea4 <HAL_RCC_OscConfig+0x82c>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1f0      	bne.n	8007d4a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d68:	4b4e      	ldr	r3, [pc, #312]	; (8007ea4 <HAL_RCC_OscConfig+0x82c>)
 8007d6a:	68da      	ldr	r2, [r3, #12]
 8007d6c:	4b4e      	ldr	r3, [pc, #312]	; (8007ea8 <HAL_RCC_OscConfig+0x830>)
 8007d6e:	4013      	ands	r3, r2
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007d78:	3a01      	subs	r2, #1
 8007d7a:	0112      	lsls	r2, r2, #4
 8007d7c:	4311      	orrs	r1, r2
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007d82:	0212      	lsls	r2, r2, #8
 8007d84:	4311      	orrs	r1, r2
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007d8a:	0852      	lsrs	r2, r2, #1
 8007d8c:	3a01      	subs	r2, #1
 8007d8e:	0552      	lsls	r2, r2, #21
 8007d90:	4311      	orrs	r1, r2
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007d96:	0852      	lsrs	r2, r2, #1
 8007d98:	3a01      	subs	r2, #1
 8007d9a:	0652      	lsls	r2, r2, #25
 8007d9c:	4311      	orrs	r1, r2
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007da2:	06d2      	lsls	r2, r2, #27
 8007da4:	430a      	orrs	r2, r1
 8007da6:	493f      	ldr	r1, [pc, #252]	; (8007ea4 <HAL_RCC_OscConfig+0x82c>)
 8007da8:	4313      	orrs	r3, r2
 8007daa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007dac:	4b3d      	ldr	r3, [pc, #244]	; (8007ea4 <HAL_RCC_OscConfig+0x82c>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a3c      	ldr	r2, [pc, #240]	; (8007ea4 <HAL_RCC_OscConfig+0x82c>)
 8007db2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007db6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007db8:	4b3a      	ldr	r3, [pc, #232]	; (8007ea4 <HAL_RCC_OscConfig+0x82c>)
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	4a39      	ldr	r2, [pc, #228]	; (8007ea4 <HAL_RCC_OscConfig+0x82c>)
 8007dbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007dc2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007dc4:	f7fb fc7e 	bl	80036c4 <HAL_GetTick>
 8007dc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007dca:	e008      	b.n	8007dde <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dcc:	f7fb fc7a 	bl	80036c4 <HAL_GetTick>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	1ad3      	subs	r3, r2, r3
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d901      	bls.n	8007dde <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	e067      	b.n	8007eae <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007dde:	4b31      	ldr	r3, [pc, #196]	; (8007ea4 <HAL_RCC_OscConfig+0x82c>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d0f0      	beq.n	8007dcc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007dea:	e05f      	b.n	8007eac <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e05e      	b.n	8007eae <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007df0:	4b2c      	ldr	r3, [pc, #176]	; (8007ea4 <HAL_RCC_OscConfig+0x82c>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d157      	bne.n	8007eac <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007dfc:	4b29      	ldr	r3, [pc, #164]	; (8007ea4 <HAL_RCC_OscConfig+0x82c>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a28      	ldr	r2, [pc, #160]	; (8007ea4 <HAL_RCC_OscConfig+0x82c>)
 8007e02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007e08:	4b26      	ldr	r3, [pc, #152]	; (8007ea4 <HAL_RCC_OscConfig+0x82c>)
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	4a25      	ldr	r2, [pc, #148]	; (8007ea4 <HAL_RCC_OscConfig+0x82c>)
 8007e0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007e14:	f7fb fc56 	bl	80036c4 <HAL_GetTick>
 8007e18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e1a:	e008      	b.n	8007e2e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e1c:	f7fb fc52 	bl	80036c4 <HAL_GetTick>
 8007e20:	4602      	mov	r2, r0
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	1ad3      	subs	r3, r2, r3
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d901      	bls.n	8007e2e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	e03f      	b.n	8007eae <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e2e:	4b1d      	ldr	r3, [pc, #116]	; (8007ea4 <HAL_RCC_OscConfig+0x82c>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d0f0      	beq.n	8007e1c <HAL_RCC_OscConfig+0x7a4>
 8007e3a:	e037      	b.n	8007eac <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	2b0c      	cmp	r3, #12
 8007e40:	d02d      	beq.n	8007e9e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e42:	4b18      	ldr	r3, [pc, #96]	; (8007ea4 <HAL_RCC_OscConfig+0x82c>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a17      	ldr	r2, [pc, #92]	; (8007ea4 <HAL_RCC_OscConfig+0x82c>)
 8007e48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e4c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007e4e:	4b15      	ldr	r3, [pc, #84]	; (8007ea4 <HAL_RCC_OscConfig+0x82c>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d105      	bne.n	8007e66 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007e5a:	4b12      	ldr	r3, [pc, #72]	; (8007ea4 <HAL_RCC_OscConfig+0x82c>)
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	4a11      	ldr	r2, [pc, #68]	; (8007ea4 <HAL_RCC_OscConfig+0x82c>)
 8007e60:	f023 0303 	bic.w	r3, r3, #3
 8007e64:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8007e66:	4b0f      	ldr	r3, [pc, #60]	; (8007ea4 <HAL_RCC_OscConfig+0x82c>)
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	4a0e      	ldr	r2, [pc, #56]	; (8007ea4 <HAL_RCC_OscConfig+0x82c>)
 8007e6c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007e70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e74:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e76:	f7fb fc25 	bl	80036c4 <HAL_GetTick>
 8007e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e7c:	e008      	b.n	8007e90 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e7e:	f7fb fc21 	bl	80036c4 <HAL_GetTick>
 8007e82:	4602      	mov	r2, r0
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	1ad3      	subs	r3, r2, r3
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	d901      	bls.n	8007e90 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	e00e      	b.n	8007eae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e90:	4b04      	ldr	r3, [pc, #16]	; (8007ea4 <HAL_RCC_OscConfig+0x82c>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1f0      	bne.n	8007e7e <HAL_RCC_OscConfig+0x806>
 8007e9c:	e006      	b.n	8007eac <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e005      	b.n	8007eae <HAL_RCC_OscConfig+0x836>
 8007ea2:	bf00      	nop
 8007ea4:	40021000 	.word	0x40021000
 8007ea8:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3720      	adds	r7, #32
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop

08007eb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d101      	bne.n	8007ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e0c8      	b.n	800805e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ecc:	4b66      	ldr	r3, [pc, #408]	; (8008068 <HAL_RCC_ClockConfig+0x1b0>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 0307 	and.w	r3, r3, #7
 8007ed4:	683a      	ldr	r2, [r7, #0]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d910      	bls.n	8007efc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007eda:	4b63      	ldr	r3, [pc, #396]	; (8008068 <HAL_RCC_ClockConfig+0x1b0>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f023 0207 	bic.w	r2, r3, #7
 8007ee2:	4961      	ldr	r1, [pc, #388]	; (8008068 <HAL_RCC_ClockConfig+0x1b0>)
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eea:	4b5f      	ldr	r3, [pc, #380]	; (8008068 <HAL_RCC_ClockConfig+0x1b0>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f003 0307 	and.w	r3, r3, #7
 8007ef2:	683a      	ldr	r2, [r7, #0]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d001      	beq.n	8007efc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e0b0      	b.n	800805e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 0301 	and.w	r3, r3, #1
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d04c      	beq.n	8007fa2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	2b03      	cmp	r3, #3
 8007f0e:	d107      	bne.n	8007f20 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f10:	4b56      	ldr	r3, [pc, #344]	; (800806c <HAL_RCC_ClockConfig+0x1b4>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d121      	bne.n	8007f60 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e09e      	b.n	800805e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d107      	bne.n	8007f38 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f28:	4b50      	ldr	r3, [pc, #320]	; (800806c <HAL_RCC_ClockConfig+0x1b4>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d115      	bne.n	8007f60 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	e092      	b.n	800805e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d107      	bne.n	8007f50 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007f40:	4b4a      	ldr	r3, [pc, #296]	; (800806c <HAL_RCC_ClockConfig+0x1b4>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 0302 	and.w	r3, r3, #2
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d109      	bne.n	8007f60 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e086      	b.n	800805e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007f50:	4b46      	ldr	r3, [pc, #280]	; (800806c <HAL_RCC_ClockConfig+0x1b4>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d101      	bne.n	8007f60 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e07e      	b.n	800805e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007f60:	4b42      	ldr	r3, [pc, #264]	; (800806c <HAL_RCC_ClockConfig+0x1b4>)
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	f023 0203 	bic.w	r2, r3, #3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	493f      	ldr	r1, [pc, #252]	; (800806c <HAL_RCC_ClockConfig+0x1b4>)
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f72:	f7fb fba7 	bl	80036c4 <HAL_GetTick>
 8007f76:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f78:	e00a      	b.n	8007f90 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f7a:	f7fb fba3 	bl	80036c4 <HAL_GetTick>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d901      	bls.n	8007f90 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	e066      	b.n	800805e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f90:	4b36      	ldr	r3, [pc, #216]	; (800806c <HAL_RCC_ClockConfig+0x1b4>)
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	f003 020c 	and.w	r2, r3, #12
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d1eb      	bne.n	8007f7a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 0302 	and.w	r3, r3, #2
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d008      	beq.n	8007fc0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fae:	4b2f      	ldr	r3, [pc, #188]	; (800806c <HAL_RCC_ClockConfig+0x1b4>)
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	492c      	ldr	r1, [pc, #176]	; (800806c <HAL_RCC_ClockConfig+0x1b4>)
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007fc0:	4b29      	ldr	r3, [pc, #164]	; (8008068 <HAL_RCC_ClockConfig+0x1b0>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 0307 	and.w	r3, r3, #7
 8007fc8:	683a      	ldr	r2, [r7, #0]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d210      	bcs.n	8007ff0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fce:	4b26      	ldr	r3, [pc, #152]	; (8008068 <HAL_RCC_ClockConfig+0x1b0>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f023 0207 	bic.w	r2, r3, #7
 8007fd6:	4924      	ldr	r1, [pc, #144]	; (8008068 <HAL_RCC_ClockConfig+0x1b0>)
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fde:	4b22      	ldr	r3, [pc, #136]	; (8008068 <HAL_RCC_ClockConfig+0x1b0>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f003 0307 	and.w	r3, r3, #7
 8007fe6:	683a      	ldr	r2, [r7, #0]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d001      	beq.n	8007ff0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e036      	b.n	800805e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f003 0304 	and.w	r3, r3, #4
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d008      	beq.n	800800e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ffc:	4b1b      	ldr	r3, [pc, #108]	; (800806c <HAL_RCC_ClockConfig+0x1b4>)
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	4918      	ldr	r1, [pc, #96]	; (800806c <HAL_RCC_ClockConfig+0x1b4>)
 800800a:	4313      	orrs	r3, r2
 800800c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f003 0308 	and.w	r3, r3, #8
 8008016:	2b00      	cmp	r3, #0
 8008018:	d009      	beq.n	800802e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800801a:	4b14      	ldr	r3, [pc, #80]	; (800806c <HAL_RCC_ClockConfig+0x1b4>)
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	00db      	lsls	r3, r3, #3
 8008028:	4910      	ldr	r1, [pc, #64]	; (800806c <HAL_RCC_ClockConfig+0x1b4>)
 800802a:	4313      	orrs	r3, r2
 800802c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800802e:	f000 f825 	bl	800807c <HAL_RCC_GetSysClockFreq>
 8008032:	4602      	mov	r2, r0
 8008034:	4b0d      	ldr	r3, [pc, #52]	; (800806c <HAL_RCC_ClockConfig+0x1b4>)
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	091b      	lsrs	r3, r3, #4
 800803a:	f003 030f 	and.w	r3, r3, #15
 800803e:	490c      	ldr	r1, [pc, #48]	; (8008070 <HAL_RCC_ClockConfig+0x1b8>)
 8008040:	5ccb      	ldrb	r3, [r1, r3]
 8008042:	f003 031f 	and.w	r3, r3, #31
 8008046:	fa22 f303 	lsr.w	r3, r2, r3
 800804a:	4a0a      	ldr	r2, [pc, #40]	; (8008074 <HAL_RCC_ClockConfig+0x1bc>)
 800804c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800804e:	4b0a      	ldr	r3, [pc, #40]	; (8008078 <HAL_RCC_ClockConfig+0x1c0>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4618      	mov	r0, r3
 8008054:	f7fb fae6 	bl	8003624 <HAL_InitTick>
 8008058:	4603      	mov	r3, r0
 800805a:	72fb      	strb	r3, [r7, #11]

  return status;
 800805c:	7afb      	ldrb	r3, [r7, #11]
}
 800805e:	4618      	mov	r0, r3
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	40022000 	.word	0x40022000
 800806c:	40021000 	.word	0x40021000
 8008070:	0800b888 	.word	0x0800b888
 8008074:	2000000c 	.word	0x2000000c
 8008078:	20000010 	.word	0x20000010

0800807c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800807c:	b480      	push	{r7}
 800807e:	b089      	sub	sp, #36	; 0x24
 8008080:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008082:	2300      	movs	r3, #0
 8008084:	61fb      	str	r3, [r7, #28]
 8008086:	2300      	movs	r3, #0
 8008088:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800808a:	4b3e      	ldr	r3, [pc, #248]	; (8008184 <HAL_RCC_GetSysClockFreq+0x108>)
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	f003 030c 	and.w	r3, r3, #12
 8008092:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008094:	4b3b      	ldr	r3, [pc, #236]	; (8008184 <HAL_RCC_GetSysClockFreq+0x108>)
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	f003 0303 	and.w	r3, r3, #3
 800809c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d005      	beq.n	80080b0 <HAL_RCC_GetSysClockFreq+0x34>
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	2b0c      	cmp	r3, #12
 80080a8:	d121      	bne.n	80080ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d11e      	bne.n	80080ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80080b0:	4b34      	ldr	r3, [pc, #208]	; (8008184 <HAL_RCC_GetSysClockFreq+0x108>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 0308 	and.w	r3, r3, #8
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d107      	bne.n	80080cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80080bc:	4b31      	ldr	r3, [pc, #196]	; (8008184 <HAL_RCC_GetSysClockFreq+0x108>)
 80080be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080c2:	0a1b      	lsrs	r3, r3, #8
 80080c4:	f003 030f 	and.w	r3, r3, #15
 80080c8:	61fb      	str	r3, [r7, #28]
 80080ca:	e005      	b.n	80080d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80080cc:	4b2d      	ldr	r3, [pc, #180]	; (8008184 <HAL_RCC_GetSysClockFreq+0x108>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	091b      	lsrs	r3, r3, #4
 80080d2:	f003 030f 	and.w	r3, r3, #15
 80080d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80080d8:	4a2b      	ldr	r2, [pc, #172]	; (8008188 <HAL_RCC_GetSysClockFreq+0x10c>)
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10d      	bne.n	8008104 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80080ec:	e00a      	b.n	8008104 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	2b04      	cmp	r3, #4
 80080f2:	d102      	bne.n	80080fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80080f4:	4b25      	ldr	r3, [pc, #148]	; (800818c <HAL_RCC_GetSysClockFreq+0x110>)
 80080f6:	61bb      	str	r3, [r7, #24]
 80080f8:	e004      	b.n	8008104 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	2b08      	cmp	r3, #8
 80080fe:	d101      	bne.n	8008104 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008100:	4b23      	ldr	r3, [pc, #140]	; (8008190 <HAL_RCC_GetSysClockFreq+0x114>)
 8008102:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	2b0c      	cmp	r3, #12
 8008108:	d134      	bne.n	8008174 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800810a:	4b1e      	ldr	r3, [pc, #120]	; (8008184 <HAL_RCC_GetSysClockFreq+0x108>)
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	f003 0303 	and.w	r3, r3, #3
 8008112:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	2b02      	cmp	r3, #2
 8008118:	d003      	beq.n	8008122 <HAL_RCC_GetSysClockFreq+0xa6>
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	2b03      	cmp	r3, #3
 800811e:	d003      	beq.n	8008128 <HAL_RCC_GetSysClockFreq+0xac>
 8008120:	e005      	b.n	800812e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008122:	4b1a      	ldr	r3, [pc, #104]	; (800818c <HAL_RCC_GetSysClockFreq+0x110>)
 8008124:	617b      	str	r3, [r7, #20]
      break;
 8008126:	e005      	b.n	8008134 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008128:	4b19      	ldr	r3, [pc, #100]	; (8008190 <HAL_RCC_GetSysClockFreq+0x114>)
 800812a:	617b      	str	r3, [r7, #20]
      break;
 800812c:	e002      	b.n	8008134 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	617b      	str	r3, [r7, #20]
      break;
 8008132:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008134:	4b13      	ldr	r3, [pc, #76]	; (8008184 <HAL_RCC_GetSysClockFreq+0x108>)
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	091b      	lsrs	r3, r3, #4
 800813a:	f003 0307 	and.w	r3, r3, #7
 800813e:	3301      	adds	r3, #1
 8008140:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008142:	4b10      	ldr	r3, [pc, #64]	; (8008184 <HAL_RCC_GetSysClockFreq+0x108>)
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	0a1b      	lsrs	r3, r3, #8
 8008148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800814c:	697a      	ldr	r2, [r7, #20]
 800814e:	fb02 f203 	mul.w	r2, r2, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	fbb2 f3f3 	udiv	r3, r2, r3
 8008158:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800815a:	4b0a      	ldr	r3, [pc, #40]	; (8008184 <HAL_RCC_GetSysClockFreq+0x108>)
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	0e5b      	lsrs	r3, r3, #25
 8008160:	f003 0303 	and.w	r3, r3, #3
 8008164:	3301      	adds	r3, #1
 8008166:	005b      	lsls	r3, r3, #1
 8008168:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800816a:	697a      	ldr	r2, [r7, #20]
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008172:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008174:	69bb      	ldr	r3, [r7, #24]
}
 8008176:	4618      	mov	r0, r3
 8008178:	3724      	adds	r7, #36	; 0x24
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	40021000 	.word	0x40021000
 8008188:	0800b8a0 	.word	0x0800b8a0
 800818c:	00f42400 	.word	0x00f42400
 8008190:	007a1200 	.word	0x007a1200

08008194 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008194:	b480      	push	{r7}
 8008196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008198:	4b03      	ldr	r3, [pc, #12]	; (80081a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800819a:	681b      	ldr	r3, [r3, #0]
}
 800819c:	4618      	mov	r0, r3
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	2000000c 	.word	0x2000000c

080081ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80081b0:	f7ff fff0 	bl	8008194 <HAL_RCC_GetHCLKFreq>
 80081b4:	4602      	mov	r2, r0
 80081b6:	4b06      	ldr	r3, [pc, #24]	; (80081d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	0a1b      	lsrs	r3, r3, #8
 80081bc:	f003 0307 	and.w	r3, r3, #7
 80081c0:	4904      	ldr	r1, [pc, #16]	; (80081d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80081c2:	5ccb      	ldrb	r3, [r1, r3]
 80081c4:	f003 031f 	and.w	r3, r3, #31
 80081c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	40021000 	.word	0x40021000
 80081d4:	0800b898 	.word	0x0800b898

080081d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80081dc:	f7ff ffda 	bl	8008194 <HAL_RCC_GetHCLKFreq>
 80081e0:	4602      	mov	r2, r0
 80081e2:	4b06      	ldr	r3, [pc, #24]	; (80081fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	0adb      	lsrs	r3, r3, #11
 80081e8:	f003 0307 	and.w	r3, r3, #7
 80081ec:	4904      	ldr	r1, [pc, #16]	; (8008200 <HAL_RCC_GetPCLK2Freq+0x28>)
 80081ee:	5ccb      	ldrb	r3, [r1, r3]
 80081f0:	f003 031f 	and.w	r3, r3, #31
 80081f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	40021000 	.word	0x40021000
 8008200:	0800b898 	.word	0x0800b898

08008204 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800820c:	2300      	movs	r3, #0
 800820e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008210:	4b2a      	ldr	r3, [pc, #168]	; (80082bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008218:	2b00      	cmp	r3, #0
 800821a:	d003      	beq.n	8008224 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800821c:	f7ff f9c8 	bl	80075b0 <HAL_PWREx_GetVoltageRange>
 8008220:	6178      	str	r0, [r7, #20]
 8008222:	e014      	b.n	800824e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008224:	4b25      	ldr	r3, [pc, #148]	; (80082bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008228:	4a24      	ldr	r2, [pc, #144]	; (80082bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800822a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800822e:	6593      	str	r3, [r2, #88]	; 0x58
 8008230:	4b22      	ldr	r3, [pc, #136]	; (80082bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008238:	60fb      	str	r3, [r7, #12]
 800823a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800823c:	f7ff f9b8 	bl	80075b0 <HAL_PWREx_GetVoltageRange>
 8008240:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008242:	4b1e      	ldr	r3, [pc, #120]	; (80082bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008246:	4a1d      	ldr	r2, [pc, #116]	; (80082bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800824c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008254:	d10b      	bne.n	800826e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2b80      	cmp	r3, #128	; 0x80
 800825a:	d919      	bls.n	8008290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2ba0      	cmp	r3, #160	; 0xa0
 8008260:	d902      	bls.n	8008268 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008262:	2302      	movs	r3, #2
 8008264:	613b      	str	r3, [r7, #16]
 8008266:	e013      	b.n	8008290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008268:	2301      	movs	r3, #1
 800826a:	613b      	str	r3, [r7, #16]
 800826c:	e010      	b.n	8008290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2b80      	cmp	r3, #128	; 0x80
 8008272:	d902      	bls.n	800827a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008274:	2303      	movs	r3, #3
 8008276:	613b      	str	r3, [r7, #16]
 8008278:	e00a      	b.n	8008290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2b80      	cmp	r3, #128	; 0x80
 800827e:	d102      	bne.n	8008286 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008280:	2302      	movs	r3, #2
 8008282:	613b      	str	r3, [r7, #16]
 8008284:	e004      	b.n	8008290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2b70      	cmp	r3, #112	; 0x70
 800828a:	d101      	bne.n	8008290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800828c:	2301      	movs	r3, #1
 800828e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008290:	4b0b      	ldr	r3, [pc, #44]	; (80082c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f023 0207 	bic.w	r2, r3, #7
 8008298:	4909      	ldr	r1, [pc, #36]	; (80082c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	4313      	orrs	r3, r2
 800829e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80082a0:	4b07      	ldr	r3, [pc, #28]	; (80082c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f003 0307 	and.w	r3, r3, #7
 80082a8:	693a      	ldr	r2, [r7, #16]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d001      	beq.n	80082b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e000      	b.n	80082b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3718      	adds	r7, #24
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	40021000 	.word	0x40021000
 80082c0:	40022000 	.word	0x40022000

080082c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b086      	sub	sp, #24
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80082cc:	2300      	movs	r3, #0
 80082ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80082d0:	2300      	movs	r3, #0
 80082d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d031      	beq.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80082e8:	d01a      	beq.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80082ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80082ee:	d814      	bhi.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x56>
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d009      	beq.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80082f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80082f8:	d10f      	bne.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80082fa:	4bac      	ldr	r3, [pc, #688]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80082fc:	68db      	ldr	r3, [r3, #12]
 80082fe:	4aab      	ldr	r2, [pc, #684]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008304:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008306:	e00c      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	3304      	adds	r3, #4
 800830c:	2100      	movs	r1, #0
 800830e:	4618      	mov	r0, r3
 8008310:	f000 f9cc 	bl	80086ac <RCCEx_PLLSAI1_Config>
 8008314:	4603      	mov	r3, r0
 8008316:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008318:	e003      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	74fb      	strb	r3, [r7, #19]
      break;
 800831e:	e000      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8008320:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008322:	7cfb      	ldrb	r3, [r7, #19]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d10b      	bne.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008328:	4ba0      	ldr	r3, [pc, #640]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800832a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800832e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008336:	499d      	ldr	r1, [pc, #628]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008338:	4313      	orrs	r3, r2
 800833a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800833e:	e001      	b.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008340:	7cfb      	ldrb	r3, [r7, #19]
 8008342:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800834c:	2b00      	cmp	r3, #0
 800834e:	f000 8099 	beq.w	8008484 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008352:	2300      	movs	r3, #0
 8008354:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008356:	4b95      	ldr	r3, [pc, #596]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800835a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800835e:	2b00      	cmp	r3, #0
 8008360:	d101      	bne.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8008362:	2301      	movs	r3, #1
 8008364:	e000      	b.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8008366:	2300      	movs	r3, #0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00d      	beq.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800836c:	4b8f      	ldr	r3, [pc, #572]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800836e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008370:	4a8e      	ldr	r2, [pc, #568]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008376:	6593      	str	r3, [r2, #88]	; 0x58
 8008378:	4b8c      	ldr	r3, [pc, #560]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800837a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800837c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008380:	60bb      	str	r3, [r7, #8]
 8008382:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008384:	2301      	movs	r3, #1
 8008386:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008388:	4b89      	ldr	r3, [pc, #548]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a88      	ldr	r2, [pc, #544]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800838e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008392:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008394:	f7fb f996 	bl	80036c4 <HAL_GetTick>
 8008398:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800839a:	e009      	b.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800839c:	f7fb f992 	bl	80036c4 <HAL_GetTick>
 80083a0:	4602      	mov	r2, r0
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	d902      	bls.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80083aa:	2303      	movs	r3, #3
 80083ac:	74fb      	strb	r3, [r7, #19]
        break;
 80083ae:	e005      	b.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80083b0:	4b7f      	ldr	r3, [pc, #508]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d0ef      	beq.n	800839c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80083bc:	7cfb      	ldrb	r3, [r7, #19]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d155      	bne.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80083c2:	4b7a      	ldr	r3, [pc, #488]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80083c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d01e      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083d8:	697a      	ldr	r2, [r7, #20]
 80083da:	429a      	cmp	r2, r3
 80083dc:	d019      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80083de:	4b73      	ldr	r3, [pc, #460]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80083e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083e8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80083ea:	4b70      	ldr	r3, [pc, #448]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80083ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083f0:	4a6e      	ldr	r2, [pc, #440]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80083f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80083fa:	4b6c      	ldr	r3, [pc, #432]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80083fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008400:	4a6a      	ldr	r2, [pc, #424]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008406:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800840a:	4a68      	ldr	r2, [pc, #416]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	f003 0301 	and.w	r3, r3, #1
 8008418:	2b00      	cmp	r3, #0
 800841a:	d016      	beq.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800841c:	f7fb f952 	bl	80036c4 <HAL_GetTick>
 8008420:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008422:	e00b      	b.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008424:	f7fb f94e 	bl	80036c4 <HAL_GetTick>
 8008428:	4602      	mov	r2, r0
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	1ad3      	subs	r3, r2, r3
 800842e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008432:	4293      	cmp	r3, r2
 8008434:	d902      	bls.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8008436:	2303      	movs	r3, #3
 8008438:	74fb      	strb	r3, [r7, #19]
            break;
 800843a:	e006      	b.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800843c:	4b5b      	ldr	r3, [pc, #364]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800843e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008442:	f003 0302 	and.w	r3, r3, #2
 8008446:	2b00      	cmp	r3, #0
 8008448:	d0ec      	beq.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800844a:	7cfb      	ldrb	r3, [r7, #19]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d10b      	bne.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008450:	4b56      	ldr	r3, [pc, #344]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008456:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800845e:	4953      	ldr	r1, [pc, #332]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008460:	4313      	orrs	r3, r2
 8008462:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008466:	e004      	b.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008468:	7cfb      	ldrb	r3, [r7, #19]
 800846a:	74bb      	strb	r3, [r7, #18]
 800846c:	e001      	b.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800846e:	7cfb      	ldrb	r3, [r7, #19]
 8008470:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008472:	7c7b      	ldrb	r3, [r7, #17]
 8008474:	2b01      	cmp	r3, #1
 8008476:	d105      	bne.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008478:	4b4c      	ldr	r3, [pc, #304]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800847a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800847c:	4a4b      	ldr	r2, [pc, #300]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800847e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008482:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 0301 	and.w	r3, r3, #1
 800848c:	2b00      	cmp	r3, #0
 800848e:	d00a      	beq.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008490:	4b46      	ldr	r3, [pc, #280]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008496:	f023 0203 	bic.w	r2, r3, #3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a1b      	ldr	r3, [r3, #32]
 800849e:	4943      	ldr	r1, [pc, #268]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80084a0:	4313      	orrs	r3, r2
 80084a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f003 0302 	and.w	r3, r3, #2
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00a      	beq.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80084b2:	4b3e      	ldr	r3, [pc, #248]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80084b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084b8:	f023 020c 	bic.w	r2, r3, #12
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c0:	493a      	ldr	r1, [pc, #232]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80084c2:	4313      	orrs	r3, r2
 80084c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 0320 	and.w	r3, r3, #32
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00a      	beq.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80084d4:	4b35      	ldr	r3, [pc, #212]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80084d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e2:	4932      	ldr	r1, [pc, #200]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80084e4:	4313      	orrs	r3, r2
 80084e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d00a      	beq.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80084f6:	4b2d      	ldr	r3, [pc, #180]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80084f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008504:	4929      	ldr	r1, [pc, #164]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008506:	4313      	orrs	r3, r2
 8008508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00a      	beq.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008518:	4b24      	ldr	r3, [pc, #144]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800851a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800851e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008526:	4921      	ldr	r1, [pc, #132]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008528:	4313      	orrs	r3, r2
 800852a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00a      	beq.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800853a:	4b1c      	ldr	r3, [pc, #112]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800853c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008540:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008548:	4918      	ldr	r1, [pc, #96]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800854a:	4313      	orrs	r3, r2
 800854c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00a      	beq.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800855c:	4b13      	ldr	r3, [pc, #76]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800855e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008562:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800856a:	4910      	ldr	r1, [pc, #64]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800856c:	4313      	orrs	r3, r2
 800856e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800857a:	2b00      	cmp	r3, #0
 800857c:	d02c      	beq.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800857e:	4b0b      	ldr	r3, [pc, #44]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008584:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858c:	4907      	ldr	r1, [pc, #28]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800858e:	4313      	orrs	r3, r2
 8008590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008598:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800859c:	d10a      	bne.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800859e:	4b03      	ldr	r3, [pc, #12]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	4a02      	ldr	r2, [pc, #8]	; (80085ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80085a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085a8:	60d3      	str	r3, [r2, #12]
 80085aa:	e015      	b.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80085ac:	40021000 	.word	0x40021000
 80085b0:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80085bc:	d10c      	bne.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	3304      	adds	r3, #4
 80085c2:	2101      	movs	r1, #1
 80085c4:	4618      	mov	r0, r3
 80085c6:	f000 f871 	bl	80086ac <RCCEx_PLLSAI1_Config>
 80085ca:	4603      	mov	r3, r0
 80085cc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80085ce:	7cfb      	ldrb	r3, [r7, #19]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d001      	beq.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 80085d4:	7cfb      	ldrb	r3, [r7, #19]
 80085d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d028      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80085e4:	4b30      	ldr	r3, [pc, #192]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80085e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085f2:	492d      	ldr	r1, [pc, #180]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80085f4:	4313      	orrs	r3, r2
 80085f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008602:	d106      	bne.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008604:	4b28      	ldr	r3, [pc, #160]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	4a27      	ldr	r2, [pc, #156]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800860a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800860e:	60d3      	str	r3, [r2, #12]
 8008610:	e011      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008616:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800861a:	d10c      	bne.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	3304      	adds	r3, #4
 8008620:	2101      	movs	r1, #1
 8008622:	4618      	mov	r0, r3
 8008624:	f000 f842 	bl	80086ac <RCCEx_PLLSAI1_Config>
 8008628:	4603      	mov	r3, r0
 800862a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800862c:	7cfb      	ldrb	r3, [r7, #19]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d001      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8008632:	7cfb      	ldrb	r3, [r7, #19]
 8008634:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800863e:	2b00      	cmp	r3, #0
 8008640:	d01c      	beq.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008642:	4b19      	ldr	r3, [pc, #100]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008648:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008650:	4915      	ldr	r1, [pc, #84]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008652:	4313      	orrs	r3, r2
 8008654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800865c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008660:	d10c      	bne.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	3304      	adds	r3, #4
 8008666:	2102      	movs	r1, #2
 8008668:	4618      	mov	r0, r3
 800866a:	f000 f81f 	bl	80086ac <RCCEx_PLLSAI1_Config>
 800866e:	4603      	mov	r3, r0
 8008670:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008672:	7cfb      	ldrb	r3, [r7, #19]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d001      	beq.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8008678:	7cfb      	ldrb	r3, [r7, #19]
 800867a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00a      	beq.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008688:	4b07      	ldr	r3, [pc, #28]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800868a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800868e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008696:	4904      	ldr	r1, [pc, #16]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008698:	4313      	orrs	r3, r2
 800869a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800869e:	7cbb      	ldrb	r3, [r7, #18]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3718      	adds	r7, #24
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	40021000 	.word	0x40021000

080086ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80086b6:	2300      	movs	r3, #0
 80086b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80086ba:	4b74      	ldr	r3, [pc, #464]	; (800888c <RCCEx_PLLSAI1_Config+0x1e0>)
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	f003 0303 	and.w	r3, r3, #3
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d018      	beq.n	80086f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80086c6:	4b71      	ldr	r3, [pc, #452]	; (800888c <RCCEx_PLLSAI1_Config+0x1e0>)
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	f003 0203 	and.w	r2, r3, #3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d10d      	bne.n	80086f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
       ||
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d009      	beq.n	80086f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80086de:	4b6b      	ldr	r3, [pc, #428]	; (800888c <RCCEx_PLLSAI1_Config+0x1e0>)
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	091b      	lsrs	r3, r3, #4
 80086e4:	f003 0307 	and.w	r3, r3, #7
 80086e8:	1c5a      	adds	r2, r3, #1
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	685b      	ldr	r3, [r3, #4]
       ||
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d047      	beq.n	8008782 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	73fb      	strb	r3, [r7, #15]
 80086f6:	e044      	b.n	8008782 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2b03      	cmp	r3, #3
 80086fe:	d018      	beq.n	8008732 <RCCEx_PLLSAI1_Config+0x86>
 8008700:	2b03      	cmp	r3, #3
 8008702:	d825      	bhi.n	8008750 <RCCEx_PLLSAI1_Config+0xa4>
 8008704:	2b01      	cmp	r3, #1
 8008706:	d002      	beq.n	800870e <RCCEx_PLLSAI1_Config+0x62>
 8008708:	2b02      	cmp	r3, #2
 800870a:	d009      	beq.n	8008720 <RCCEx_PLLSAI1_Config+0x74>
 800870c:	e020      	b.n	8008750 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800870e:	4b5f      	ldr	r3, [pc, #380]	; (800888c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 0302 	and.w	r3, r3, #2
 8008716:	2b00      	cmp	r3, #0
 8008718:	d11d      	bne.n	8008756 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800871e:	e01a      	b.n	8008756 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008720:	4b5a      	ldr	r3, [pc, #360]	; (800888c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008728:	2b00      	cmp	r3, #0
 800872a:	d116      	bne.n	800875a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008730:	e013      	b.n	800875a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008732:	4b56      	ldr	r3, [pc, #344]	; (800888c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800873a:	2b00      	cmp	r3, #0
 800873c:	d10f      	bne.n	800875e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800873e:	4b53      	ldr	r3, [pc, #332]	; (800888c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008746:	2b00      	cmp	r3, #0
 8008748:	d109      	bne.n	800875e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800874e:	e006      	b.n	800875e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	73fb      	strb	r3, [r7, #15]
      break;
 8008754:	e004      	b.n	8008760 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008756:	bf00      	nop
 8008758:	e002      	b.n	8008760 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800875a:	bf00      	nop
 800875c:	e000      	b.n	8008760 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800875e:	bf00      	nop
    }

    if(status == HAL_OK)
 8008760:	7bfb      	ldrb	r3, [r7, #15]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d10d      	bne.n	8008782 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008766:	4b49      	ldr	r3, [pc, #292]	; (800888c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6819      	ldr	r1, [r3, #0]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	3b01      	subs	r3, #1
 8008778:	011b      	lsls	r3, r3, #4
 800877a:	430b      	orrs	r3, r1
 800877c:	4943      	ldr	r1, [pc, #268]	; (800888c <RCCEx_PLLSAI1_Config+0x1e0>)
 800877e:	4313      	orrs	r3, r2
 8008780:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008782:	7bfb      	ldrb	r3, [r7, #15]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d17c      	bne.n	8008882 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008788:	4b40      	ldr	r3, [pc, #256]	; (800888c <RCCEx_PLLSAI1_Config+0x1e0>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a3f      	ldr	r2, [pc, #252]	; (800888c <RCCEx_PLLSAI1_Config+0x1e0>)
 800878e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008792:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008794:	f7fa ff96 	bl	80036c4 <HAL_GetTick>
 8008798:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800879a:	e009      	b.n	80087b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800879c:	f7fa ff92 	bl	80036c4 <HAL_GetTick>
 80087a0:	4602      	mov	r2, r0
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	1ad3      	subs	r3, r2, r3
 80087a6:	2b02      	cmp	r3, #2
 80087a8:	d902      	bls.n	80087b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80087aa:	2303      	movs	r3, #3
 80087ac:	73fb      	strb	r3, [r7, #15]
        break;
 80087ae:	e005      	b.n	80087bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80087b0:	4b36      	ldr	r3, [pc, #216]	; (800888c <RCCEx_PLLSAI1_Config+0x1e0>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1ef      	bne.n	800879c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80087bc:	7bfb      	ldrb	r3, [r7, #15]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d15f      	bne.n	8008882 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d110      	bne.n	80087ea <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80087c8:	4b30      	ldr	r3, [pc, #192]	; (800888c <RCCEx_PLLSAI1_Config+0x1e0>)
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80087d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	6892      	ldr	r2, [r2, #8]
 80087d8:	0211      	lsls	r1, r2, #8
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	68d2      	ldr	r2, [r2, #12]
 80087de:	06d2      	lsls	r2, r2, #27
 80087e0:	430a      	orrs	r2, r1
 80087e2:	492a      	ldr	r1, [pc, #168]	; (800888c <RCCEx_PLLSAI1_Config+0x1e0>)
 80087e4:	4313      	orrs	r3, r2
 80087e6:	610b      	str	r3, [r1, #16]
 80087e8:	e027      	b.n	800883a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d112      	bne.n	8008816 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80087f0:	4b26      	ldr	r3, [pc, #152]	; (800888c <RCCEx_PLLSAI1_Config+0x1e0>)
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80087f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	6892      	ldr	r2, [r2, #8]
 8008800:	0211      	lsls	r1, r2, #8
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	6912      	ldr	r2, [r2, #16]
 8008806:	0852      	lsrs	r2, r2, #1
 8008808:	3a01      	subs	r2, #1
 800880a:	0552      	lsls	r2, r2, #21
 800880c:	430a      	orrs	r2, r1
 800880e:	491f      	ldr	r1, [pc, #124]	; (800888c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008810:	4313      	orrs	r3, r2
 8008812:	610b      	str	r3, [r1, #16]
 8008814:	e011      	b.n	800883a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008816:	4b1d      	ldr	r3, [pc, #116]	; (800888c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800881e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	6892      	ldr	r2, [r2, #8]
 8008826:	0211      	lsls	r1, r2, #8
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	6952      	ldr	r2, [r2, #20]
 800882c:	0852      	lsrs	r2, r2, #1
 800882e:	3a01      	subs	r2, #1
 8008830:	0652      	lsls	r2, r2, #25
 8008832:	430a      	orrs	r2, r1
 8008834:	4915      	ldr	r1, [pc, #84]	; (800888c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008836:	4313      	orrs	r3, r2
 8008838:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800883a:	4b14      	ldr	r3, [pc, #80]	; (800888c <RCCEx_PLLSAI1_Config+0x1e0>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a13      	ldr	r2, [pc, #76]	; (800888c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008840:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008844:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008846:	f7fa ff3d 	bl	80036c4 <HAL_GetTick>
 800884a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800884c:	e009      	b.n	8008862 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800884e:	f7fa ff39 	bl	80036c4 <HAL_GetTick>
 8008852:	4602      	mov	r2, r0
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	1ad3      	subs	r3, r2, r3
 8008858:	2b02      	cmp	r3, #2
 800885a:	d902      	bls.n	8008862 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800885c:	2303      	movs	r3, #3
 800885e:	73fb      	strb	r3, [r7, #15]
          break;
 8008860:	e005      	b.n	800886e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008862:	4b0a      	ldr	r3, [pc, #40]	; (800888c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800886a:	2b00      	cmp	r3, #0
 800886c:	d0ef      	beq.n	800884e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800886e:	7bfb      	ldrb	r3, [r7, #15]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d106      	bne.n	8008882 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008874:	4b05      	ldr	r3, [pc, #20]	; (800888c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008876:	691a      	ldr	r2, [r3, #16]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	699b      	ldr	r3, [r3, #24]
 800887c:	4903      	ldr	r1, [pc, #12]	; (800888c <RCCEx_PLLSAI1_Config+0x1e0>)
 800887e:	4313      	orrs	r3, r2
 8008880:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008882:	7bfb      	ldrb	r3, [r7, #15]
}
 8008884:	4618      	mov	r0, r3
 8008886:	3710      	adds	r7, #16
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}
 800888c:	40021000 	.word	0x40021000

08008890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d101      	bne.n	80088a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	e049      	b.n	8008936 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d106      	bne.n	80088bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f7fa fc8c 	bl	80031d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2202      	movs	r2, #2
 80088c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	3304      	adds	r3, #4
 80088cc:	4619      	mov	r1, r3
 80088ce:	4610      	mov	r0, r2
 80088d0:	f000 fcee 	bl	80092b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3708      	adds	r7, #8
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
	...

08008940 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008940:	b480      	push	{r7}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800894e:	b2db      	uxtb	r3, r3
 8008950:	2b01      	cmp	r3, #1
 8008952:	d001      	beq.n	8008958 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	e03b      	b.n	80089d0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2202      	movs	r2, #2
 800895c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68da      	ldr	r2, [r3, #12]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f042 0201 	orr.w	r2, r2, #1
 800896e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a19      	ldr	r2, [pc, #100]	; (80089dc <HAL_TIM_Base_Start_IT+0x9c>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d009      	beq.n	800898e <HAL_TIM_Base_Start_IT+0x4e>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008982:	d004      	beq.n	800898e <HAL_TIM_Base_Start_IT+0x4e>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a15      	ldr	r2, [pc, #84]	; (80089e0 <HAL_TIM_Base_Start_IT+0xa0>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d115      	bne.n	80089ba <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	689a      	ldr	r2, [r3, #8]
 8008994:	4b13      	ldr	r3, [pc, #76]	; (80089e4 <HAL_TIM_Base_Start_IT+0xa4>)
 8008996:	4013      	ands	r3, r2
 8008998:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2b06      	cmp	r3, #6
 800899e:	d015      	beq.n	80089cc <HAL_TIM_Base_Start_IT+0x8c>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089a6:	d011      	beq.n	80089cc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f042 0201 	orr.w	r2, r2, #1
 80089b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089b8:	e008      	b.n	80089cc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f042 0201 	orr.w	r2, r2, #1
 80089c8:	601a      	str	r2, [r3, #0]
 80089ca:	e000      	b.n	80089ce <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3714      	adds	r7, #20
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr
 80089dc:	40012c00 	.word	0x40012c00
 80089e0:	40014000 	.word	0x40014000
 80089e4:	00010007 	.word	0x00010007

080089e8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d101      	bne.n	80089fa <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80089f6:	2301      	movs	r3, #1
 80089f8:	e049      	b.n	8008a8e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d106      	bne.n	8008a14 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f7fa fbbc 	bl	800318c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2202      	movs	r2, #2
 8008a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	3304      	adds	r3, #4
 8008a24:	4619      	mov	r1, r3
 8008a26:	4610      	mov	r0, r2
 8008a28:	f000 fc42 	bl	80092b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3708      	adds	r7, #8
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}

08008a96 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b082      	sub	sp, #8
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d101      	bne.n	8008aa8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e049      	b.n	8008b3c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d106      	bne.n	8008ac2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f7fa fb45 	bl	800314c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2202      	movs	r2, #2
 8008ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	3304      	adds	r3, #4
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	4610      	mov	r0, r2
 8008ad6:	f000 fbeb 	bl	80092b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2201      	movs	r2, #1
 8008ade:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2201      	movs	r2, #1
 8008aee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2201      	movs	r2, #1
 8008af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2201      	movs	r2, #1
 8008afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2201      	movs	r2, #1
 8008b06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2201      	movs	r2, #1
 8008b16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2201      	movs	r2, #1
 8008b26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2201      	movs	r2, #1
 8008b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b3a:	2300      	movs	r3, #0
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3708      	adds	r7, #8
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d109      	bne.n	8008b68 <HAL_TIM_PWM_Start+0x24>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	bf14      	ite	ne
 8008b60:	2301      	movne	r3, #1
 8008b62:	2300      	moveq	r3, #0
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	e03c      	b.n	8008be2 <HAL_TIM_PWM_Start+0x9e>
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	2b04      	cmp	r3, #4
 8008b6c:	d109      	bne.n	8008b82 <HAL_TIM_PWM_Start+0x3e>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	bf14      	ite	ne
 8008b7a:	2301      	movne	r3, #1
 8008b7c:	2300      	moveq	r3, #0
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	e02f      	b.n	8008be2 <HAL_TIM_PWM_Start+0x9e>
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	2b08      	cmp	r3, #8
 8008b86:	d109      	bne.n	8008b9c <HAL_TIM_PWM_Start+0x58>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	bf14      	ite	ne
 8008b94:	2301      	movne	r3, #1
 8008b96:	2300      	moveq	r3, #0
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	e022      	b.n	8008be2 <HAL_TIM_PWM_Start+0x9e>
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	2b0c      	cmp	r3, #12
 8008ba0:	d109      	bne.n	8008bb6 <HAL_TIM_PWM_Start+0x72>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	bf14      	ite	ne
 8008bae:	2301      	movne	r3, #1
 8008bb0:	2300      	moveq	r3, #0
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	e015      	b.n	8008be2 <HAL_TIM_PWM_Start+0x9e>
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	2b10      	cmp	r3, #16
 8008bba:	d109      	bne.n	8008bd0 <HAL_TIM_PWM_Start+0x8c>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	bf14      	ite	ne
 8008bc8:	2301      	movne	r3, #1
 8008bca:	2300      	moveq	r3, #0
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	e008      	b.n	8008be2 <HAL_TIM_PWM_Start+0x9e>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008bd6:	b2db      	uxtb	r3, r3
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	bf14      	ite	ne
 8008bdc:	2301      	movne	r3, #1
 8008bde:	2300      	moveq	r3, #0
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d001      	beq.n	8008bea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008be6:	2301      	movs	r3, #1
 8008be8:	e07e      	b.n	8008ce8 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d104      	bne.n	8008bfa <HAL_TIM_PWM_Start+0xb6>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2202      	movs	r2, #2
 8008bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bf8:	e023      	b.n	8008c42 <HAL_TIM_PWM_Start+0xfe>
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	2b04      	cmp	r3, #4
 8008bfe:	d104      	bne.n	8008c0a <HAL_TIM_PWM_Start+0xc6>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2202      	movs	r2, #2
 8008c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c08:	e01b      	b.n	8008c42 <HAL_TIM_PWM_Start+0xfe>
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	2b08      	cmp	r3, #8
 8008c0e:	d104      	bne.n	8008c1a <HAL_TIM_PWM_Start+0xd6>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2202      	movs	r2, #2
 8008c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c18:	e013      	b.n	8008c42 <HAL_TIM_PWM_Start+0xfe>
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	2b0c      	cmp	r3, #12
 8008c1e:	d104      	bne.n	8008c2a <HAL_TIM_PWM_Start+0xe6>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2202      	movs	r2, #2
 8008c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008c28:	e00b      	b.n	8008c42 <HAL_TIM_PWM_Start+0xfe>
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	2b10      	cmp	r3, #16
 8008c2e:	d104      	bne.n	8008c3a <HAL_TIM_PWM_Start+0xf6>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2202      	movs	r2, #2
 8008c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c38:	e003      	b.n	8008c42 <HAL_TIM_PWM_Start+0xfe>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2202      	movs	r2, #2
 8008c3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2201      	movs	r2, #1
 8008c48:	6839      	ldr	r1, [r7, #0]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f000 fe12 	bl	8009874 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a26      	ldr	r2, [pc, #152]	; (8008cf0 <HAL_TIM_PWM_Start+0x1ac>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d009      	beq.n	8008c6e <HAL_TIM_PWM_Start+0x12a>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a25      	ldr	r2, [pc, #148]	; (8008cf4 <HAL_TIM_PWM_Start+0x1b0>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d004      	beq.n	8008c6e <HAL_TIM_PWM_Start+0x12a>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a23      	ldr	r2, [pc, #140]	; (8008cf8 <HAL_TIM_PWM_Start+0x1b4>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d101      	bne.n	8008c72 <HAL_TIM_PWM_Start+0x12e>
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e000      	b.n	8008c74 <HAL_TIM_PWM_Start+0x130>
 8008c72:	2300      	movs	r3, #0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d007      	beq.n	8008c88 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c86:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a18      	ldr	r2, [pc, #96]	; (8008cf0 <HAL_TIM_PWM_Start+0x1ac>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d009      	beq.n	8008ca6 <HAL_TIM_PWM_Start+0x162>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c9a:	d004      	beq.n	8008ca6 <HAL_TIM_PWM_Start+0x162>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a14      	ldr	r2, [pc, #80]	; (8008cf4 <HAL_TIM_PWM_Start+0x1b0>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d115      	bne.n	8008cd2 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	689a      	ldr	r2, [r3, #8]
 8008cac:	4b13      	ldr	r3, [pc, #76]	; (8008cfc <HAL_TIM_PWM_Start+0x1b8>)
 8008cae:	4013      	ands	r3, r2
 8008cb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2b06      	cmp	r3, #6
 8008cb6:	d015      	beq.n	8008ce4 <HAL_TIM_PWM_Start+0x1a0>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cbe:	d011      	beq.n	8008ce4 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f042 0201 	orr.w	r2, r2, #1
 8008cce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cd0:	e008      	b.n	8008ce4 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f042 0201 	orr.w	r2, r2, #1
 8008ce0:	601a      	str	r2, [r3, #0]
 8008ce2:	e000      	b.n	8008ce6 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ce4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ce6:	2300      	movs	r3, #0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3710      	adds	r7, #16
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	40012c00 	.word	0x40012c00
 8008cf4:	40014000 	.word	0x40014000
 8008cf8:	40014400 	.word	0x40014400
 8008cfc:	00010007 	.word	0x00010007

08008d00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	691b      	ldr	r3, [r3, #16]
 8008d0e:	f003 0302 	and.w	r3, r3, #2
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d122      	bne.n	8008d5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	f003 0302 	and.w	r3, r3, #2
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	d11b      	bne.n	8008d5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f06f 0202 	mvn.w	r2, #2
 8008d2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2201      	movs	r2, #1
 8008d32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	699b      	ldr	r3, [r3, #24]
 8008d3a:	f003 0303 	and.w	r3, r3, #3
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d003      	beq.n	8008d4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 fa96 	bl	8009274 <HAL_TIM_IC_CaptureCallback>
 8008d48:	e005      	b.n	8008d56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 fa88 	bl	8009260 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 fa99 	bl	8009288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	f003 0304 	and.w	r3, r3, #4
 8008d66:	2b04      	cmp	r3, #4
 8008d68:	d122      	bne.n	8008db0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	f003 0304 	and.w	r3, r3, #4
 8008d74:	2b04      	cmp	r3, #4
 8008d76:	d11b      	bne.n	8008db0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f06f 0204 	mvn.w	r2, #4
 8008d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2202      	movs	r2, #2
 8008d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	699b      	ldr	r3, [r3, #24]
 8008d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d003      	beq.n	8008d9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 fa6c 	bl	8009274 <HAL_TIM_IC_CaptureCallback>
 8008d9c:	e005      	b.n	8008daa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 fa5e 	bl	8009260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 fa6f 	bl	8009288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	f003 0308 	and.w	r3, r3, #8
 8008dba:	2b08      	cmp	r3, #8
 8008dbc:	d122      	bne.n	8008e04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	f003 0308 	and.w	r3, r3, #8
 8008dc8:	2b08      	cmp	r3, #8
 8008dca:	d11b      	bne.n	8008e04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f06f 0208 	mvn.w	r2, #8
 8008dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2204      	movs	r2, #4
 8008dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	69db      	ldr	r3, [r3, #28]
 8008de2:	f003 0303 	and.w	r3, r3, #3
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d003      	beq.n	8008df2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 fa42 	bl	8009274 <HAL_TIM_IC_CaptureCallback>
 8008df0:	e005      	b.n	8008dfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 fa34 	bl	8009260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 fa45 	bl	8009288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	691b      	ldr	r3, [r3, #16]
 8008e0a:	f003 0310 	and.w	r3, r3, #16
 8008e0e:	2b10      	cmp	r3, #16
 8008e10:	d122      	bne.n	8008e58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	f003 0310 	and.w	r3, r3, #16
 8008e1c:	2b10      	cmp	r3, #16
 8008e1e:	d11b      	bne.n	8008e58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f06f 0210 	mvn.w	r2, #16
 8008e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2208      	movs	r2, #8
 8008e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	69db      	ldr	r3, [r3, #28]
 8008e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d003      	beq.n	8008e46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 fa18 	bl	8009274 <HAL_TIM_IC_CaptureCallback>
 8008e44:	e005      	b.n	8008e52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 fa0a 	bl	8009260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 fa1b 	bl	8009288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	f003 0301 	and.w	r3, r3, #1
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d10e      	bne.n	8008e84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	f003 0301 	and.w	r3, r3, #1
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d107      	bne.n	8008e84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f06f 0201 	mvn.w	r2, #1
 8008e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 f9e4 	bl	800924c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	691b      	ldr	r3, [r3, #16]
 8008e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e8e:	2b80      	cmp	r3, #128	; 0x80
 8008e90:	d10e      	bne.n	8008eb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e9c:	2b80      	cmp	r3, #128	; 0x80
 8008e9e:	d107      	bne.n	8008eb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 fdf0 	bl	8009a90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ebe:	d10e      	bne.n	8008ede <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	68db      	ldr	r3, [r3, #12]
 8008ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eca:	2b80      	cmp	r3, #128	; 0x80
 8008ecc:	d107      	bne.n	8008ede <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 fde3 	bl	8009aa4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	691b      	ldr	r3, [r3, #16]
 8008ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ee8:	2b40      	cmp	r3, #64	; 0x40
 8008eea:	d10e      	bne.n	8008f0a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	68db      	ldr	r3, [r3, #12]
 8008ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ef6:	2b40      	cmp	r3, #64	; 0x40
 8008ef8:	d107      	bne.n	8008f0a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 f9c9 	bl	800929c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	691b      	ldr	r3, [r3, #16]
 8008f10:	f003 0320 	and.w	r3, r3, #32
 8008f14:	2b20      	cmp	r3, #32
 8008f16:	d10e      	bne.n	8008f36 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	f003 0320 	and.w	r3, r3, #32
 8008f22:	2b20      	cmp	r3, #32
 8008f24:	d107      	bne.n	8008f36 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f06f 0220 	mvn.w	r2, #32
 8008f2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 fda3 	bl	8009a7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f36:	bf00      	nop
 8008f38:	3708      	adds	r7, #8
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
	...

08008f40 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d101      	bne.n	8008f5a <HAL_TIM_OC_ConfigChannel+0x1a>
 8008f56:	2302      	movs	r3, #2
 8008f58:	e064      	b.n	8009024 <HAL_TIM_OC_ConfigChannel+0xe4>
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2b14      	cmp	r3, #20
 8008f66:	d857      	bhi.n	8009018 <HAL_TIM_OC_ConfigChannel+0xd8>
 8008f68:	a201      	add	r2, pc, #4	; (adr r2, 8008f70 <HAL_TIM_OC_ConfigChannel+0x30>)
 8008f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f6e:	bf00      	nop
 8008f70:	08008fc5 	.word	0x08008fc5
 8008f74:	08009019 	.word	0x08009019
 8008f78:	08009019 	.word	0x08009019
 8008f7c:	08009019 	.word	0x08009019
 8008f80:	08008fd3 	.word	0x08008fd3
 8008f84:	08009019 	.word	0x08009019
 8008f88:	08009019 	.word	0x08009019
 8008f8c:	08009019 	.word	0x08009019
 8008f90:	08008fe1 	.word	0x08008fe1
 8008f94:	08009019 	.word	0x08009019
 8008f98:	08009019 	.word	0x08009019
 8008f9c:	08009019 	.word	0x08009019
 8008fa0:	08008fef 	.word	0x08008fef
 8008fa4:	08009019 	.word	0x08009019
 8008fa8:	08009019 	.word	0x08009019
 8008fac:	08009019 	.word	0x08009019
 8008fb0:	08008ffd 	.word	0x08008ffd
 8008fb4:	08009019 	.word	0x08009019
 8008fb8:	08009019 	.word	0x08009019
 8008fbc:	08009019 	.word	0x08009019
 8008fc0:	0800900b 	.word	0x0800900b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	68b9      	ldr	r1, [r7, #8]
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f000 f9d4 	bl	8009378 <TIM_OC1_SetConfig>
      break;
 8008fd0:	e023      	b.n	800901a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	68b9      	ldr	r1, [r7, #8]
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f000 fa49 	bl	8009470 <TIM_OC2_SetConfig>
      break;
 8008fde:	e01c      	b.n	800901a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	68b9      	ldr	r1, [r7, #8]
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f000 fabc 	bl	8009564 <TIM_OC3_SetConfig>
      break;
 8008fec:	e015      	b.n	800901a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	68b9      	ldr	r1, [r7, #8]
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f000 fb2d 	bl	8009654 <TIM_OC4_SetConfig>
      break;
 8008ffa:	e00e      	b.n	800901a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68b9      	ldr	r1, [r7, #8]
 8009002:	4618      	mov	r0, r3
 8009004:	f000 fb84 	bl	8009710 <TIM_OC5_SetConfig>
      break;
 8009008:	e007      	b.n	800901a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	68b9      	ldr	r1, [r7, #8]
 8009010:	4618      	mov	r0, r3
 8009012:	f000 fbd5 	bl	80097c0 <TIM_OC6_SetConfig>
      break;
 8009016:	e000      	b.n	800901a <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8009018:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2200      	movs	r2, #0
 800901e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009022:	2300      	movs	r3, #0
}
 8009024:	4618      	mov	r0, r3
 8009026:	3710      	adds	r7, #16
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800903e:	2b01      	cmp	r3, #1
 8009040:	d101      	bne.n	8009046 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009042:	2302      	movs	r3, #2
 8009044:	e0fd      	b.n	8009242 <HAL_TIM_PWM_ConfigChannel+0x216>
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2201      	movs	r2, #1
 800904a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2b14      	cmp	r3, #20
 8009052:	f200 80f0 	bhi.w	8009236 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8009056:	a201      	add	r2, pc, #4	; (adr r2, 800905c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800905c:	080090b1 	.word	0x080090b1
 8009060:	08009237 	.word	0x08009237
 8009064:	08009237 	.word	0x08009237
 8009068:	08009237 	.word	0x08009237
 800906c:	080090f1 	.word	0x080090f1
 8009070:	08009237 	.word	0x08009237
 8009074:	08009237 	.word	0x08009237
 8009078:	08009237 	.word	0x08009237
 800907c:	08009133 	.word	0x08009133
 8009080:	08009237 	.word	0x08009237
 8009084:	08009237 	.word	0x08009237
 8009088:	08009237 	.word	0x08009237
 800908c:	08009173 	.word	0x08009173
 8009090:	08009237 	.word	0x08009237
 8009094:	08009237 	.word	0x08009237
 8009098:	08009237 	.word	0x08009237
 800909c:	080091b5 	.word	0x080091b5
 80090a0:	08009237 	.word	0x08009237
 80090a4:	08009237 	.word	0x08009237
 80090a8:	08009237 	.word	0x08009237
 80090ac:	080091f5 	.word	0x080091f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	68b9      	ldr	r1, [r7, #8]
 80090b6:	4618      	mov	r0, r3
 80090b8:	f000 f95e 	bl	8009378 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	699a      	ldr	r2, [r3, #24]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f042 0208 	orr.w	r2, r2, #8
 80090ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	699a      	ldr	r2, [r3, #24]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f022 0204 	bic.w	r2, r2, #4
 80090da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	6999      	ldr	r1, [r3, #24]
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	691a      	ldr	r2, [r3, #16]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	430a      	orrs	r2, r1
 80090ec:	619a      	str	r2, [r3, #24]
      break;
 80090ee:	e0a3      	b.n	8009238 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	68b9      	ldr	r1, [r7, #8]
 80090f6:	4618      	mov	r0, r3
 80090f8:	f000 f9ba 	bl	8009470 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	699a      	ldr	r2, [r3, #24]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800910a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	699a      	ldr	r2, [r3, #24]
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800911a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	6999      	ldr	r1, [r3, #24]
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	021a      	lsls	r2, r3, #8
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	430a      	orrs	r2, r1
 800912e:	619a      	str	r2, [r3, #24]
      break;
 8009130:	e082      	b.n	8009238 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	68b9      	ldr	r1, [r7, #8]
 8009138:	4618      	mov	r0, r3
 800913a:	f000 fa13 	bl	8009564 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	69da      	ldr	r2, [r3, #28]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f042 0208 	orr.w	r2, r2, #8
 800914c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	69da      	ldr	r2, [r3, #28]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f022 0204 	bic.w	r2, r2, #4
 800915c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	69d9      	ldr	r1, [r3, #28]
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	691a      	ldr	r2, [r3, #16]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	430a      	orrs	r2, r1
 800916e:	61da      	str	r2, [r3, #28]
      break;
 8009170:	e062      	b.n	8009238 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	68b9      	ldr	r1, [r7, #8]
 8009178:	4618      	mov	r0, r3
 800917a:	f000 fa6b 	bl	8009654 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	69da      	ldr	r2, [r3, #28]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800918c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	69da      	ldr	r2, [r3, #28]
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800919c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	69d9      	ldr	r1, [r3, #28]
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	691b      	ldr	r3, [r3, #16]
 80091a8:	021a      	lsls	r2, r3, #8
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	430a      	orrs	r2, r1
 80091b0:	61da      	str	r2, [r3, #28]
      break;
 80091b2:	e041      	b.n	8009238 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68b9      	ldr	r1, [r7, #8]
 80091ba:	4618      	mov	r0, r3
 80091bc:	f000 faa8 	bl	8009710 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f042 0208 	orr.w	r2, r2, #8
 80091ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f022 0204 	bic.w	r2, r2, #4
 80091de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	691a      	ldr	r2, [r3, #16]
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	430a      	orrs	r2, r1
 80091f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80091f2:	e021      	b.n	8009238 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	68b9      	ldr	r1, [r7, #8]
 80091fa:	4618      	mov	r0, r3
 80091fc:	f000 fae0 	bl	80097c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800920e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800921e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	691b      	ldr	r3, [r3, #16]
 800922a:	021a      	lsls	r2, r3, #8
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	430a      	orrs	r2, r1
 8009232:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009234:	e000      	b.n	8009238 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8009236:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2200      	movs	r2, #0
 800923c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop

0800924c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009254:	bf00      	nop
 8009256:	370c      	adds	r7, #12
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009268:	bf00      	nop
 800926a:	370c      	adds	r7, #12
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr

08009274 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800927c:	bf00      	nop
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009290:	bf00      	nop
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80092a4:	bf00      	nop
 80092a6:	370c      	adds	r7, #12
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b085      	sub	sp, #20
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a2a      	ldr	r2, [pc, #168]	; (800936c <TIM_Base_SetConfig+0xbc>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d003      	beq.n	80092d0 <TIM_Base_SetConfig+0x20>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092ce:	d108      	bne.n	80092e2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	4313      	orrs	r3, r2
 80092e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	4a21      	ldr	r2, [pc, #132]	; (800936c <TIM_Base_SetConfig+0xbc>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d00b      	beq.n	8009302 <TIM_Base_SetConfig+0x52>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092f0:	d007      	beq.n	8009302 <TIM_Base_SetConfig+0x52>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4a1e      	ldr	r2, [pc, #120]	; (8009370 <TIM_Base_SetConfig+0xc0>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d003      	beq.n	8009302 <TIM_Base_SetConfig+0x52>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	4a1d      	ldr	r2, [pc, #116]	; (8009374 <TIM_Base_SetConfig+0xc4>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d108      	bne.n	8009314 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	4313      	orrs	r3, r2
 8009312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	695b      	ldr	r3, [r3, #20]
 800931e:	4313      	orrs	r3, r2
 8009320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	68fa      	ldr	r2, [r7, #12]
 8009326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	689a      	ldr	r2, [r3, #8]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	4a0c      	ldr	r2, [pc, #48]	; (800936c <TIM_Base_SetConfig+0xbc>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d007      	beq.n	8009350 <TIM_Base_SetConfig+0xa0>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	4a0b      	ldr	r2, [pc, #44]	; (8009370 <TIM_Base_SetConfig+0xc0>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d003      	beq.n	8009350 <TIM_Base_SetConfig+0xa0>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4a0a      	ldr	r2, [pc, #40]	; (8009374 <TIM_Base_SetConfig+0xc4>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d103      	bne.n	8009358 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	691a      	ldr	r2, [r3, #16]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2201      	movs	r2, #1
 800935c:	615a      	str	r2, [r3, #20]
}
 800935e:	bf00      	nop
 8009360:	3714      	adds	r7, #20
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr
 800936a:	bf00      	nop
 800936c:	40012c00 	.word	0x40012c00
 8009370:	40014000 	.word	0x40014000
 8009374:	40014400 	.word	0x40014400

08009378 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009378:	b480      	push	{r7}
 800937a:	b087      	sub	sp, #28
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6a1b      	ldr	r3, [r3, #32]
 8009386:	f023 0201 	bic.w	r2, r3, #1
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6a1b      	ldr	r3, [r3, #32]
 8009392:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	699b      	ldr	r3, [r3, #24]
 800939e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f023 0303 	bic.w	r3, r3, #3
 80093b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	4313      	orrs	r3, r2
 80093bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	f023 0302 	bic.w	r3, r3, #2
 80093c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	697a      	ldr	r2, [r7, #20]
 80093cc:	4313      	orrs	r3, r2
 80093ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4a24      	ldr	r2, [pc, #144]	; (8009464 <TIM_OC1_SetConfig+0xec>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d007      	beq.n	80093e8 <TIM_OC1_SetConfig+0x70>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	4a23      	ldr	r2, [pc, #140]	; (8009468 <TIM_OC1_SetConfig+0xf0>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d003      	beq.n	80093e8 <TIM_OC1_SetConfig+0x70>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4a22      	ldr	r2, [pc, #136]	; (800946c <TIM_OC1_SetConfig+0xf4>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d10c      	bne.n	8009402 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	f023 0308 	bic.w	r3, r3, #8
 80093ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	697a      	ldr	r2, [r7, #20]
 80093f6:	4313      	orrs	r3, r2
 80093f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	f023 0304 	bic.w	r3, r3, #4
 8009400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	4a17      	ldr	r2, [pc, #92]	; (8009464 <TIM_OC1_SetConfig+0xec>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d007      	beq.n	800941a <TIM_OC1_SetConfig+0xa2>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4a16      	ldr	r2, [pc, #88]	; (8009468 <TIM_OC1_SetConfig+0xf0>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d003      	beq.n	800941a <TIM_OC1_SetConfig+0xa2>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a15      	ldr	r2, [pc, #84]	; (800946c <TIM_OC1_SetConfig+0xf4>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d111      	bne.n	800943e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	695b      	ldr	r3, [r3, #20]
 800942e:	693a      	ldr	r2, [r7, #16]
 8009430:	4313      	orrs	r3, r2
 8009432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	699b      	ldr	r3, [r3, #24]
 8009438:	693a      	ldr	r2, [r7, #16]
 800943a:	4313      	orrs	r3, r2
 800943c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	693a      	ldr	r2, [r7, #16]
 8009442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	68fa      	ldr	r2, [r7, #12]
 8009448:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	685a      	ldr	r2, [r3, #4]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	697a      	ldr	r2, [r7, #20]
 8009456:	621a      	str	r2, [r3, #32]
}
 8009458:	bf00      	nop
 800945a:	371c      	adds	r7, #28
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr
 8009464:	40012c00 	.word	0x40012c00
 8009468:	40014000 	.word	0x40014000
 800946c:	40014400 	.word	0x40014400

08009470 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009470:	b480      	push	{r7}
 8009472:	b087      	sub	sp, #28
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6a1b      	ldr	r3, [r3, #32]
 800947e:	f023 0210 	bic.w	r2, r3, #16
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a1b      	ldr	r3, [r3, #32]
 800948a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	699b      	ldr	r3, [r3, #24]
 8009496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800949e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	021b      	lsls	r3, r3, #8
 80094b2:	68fa      	ldr	r2, [r7, #12]
 80094b4:	4313      	orrs	r3, r2
 80094b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	f023 0320 	bic.w	r3, r3, #32
 80094be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	011b      	lsls	r3, r3, #4
 80094c6:	697a      	ldr	r2, [r7, #20]
 80094c8:	4313      	orrs	r3, r2
 80094ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4a22      	ldr	r2, [pc, #136]	; (8009558 <TIM_OC2_SetConfig+0xe8>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d10d      	bne.n	80094f0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	011b      	lsls	r3, r3, #4
 80094e2:	697a      	ldr	r2, [r7, #20]
 80094e4:	4313      	orrs	r3, r2
 80094e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a19      	ldr	r2, [pc, #100]	; (8009558 <TIM_OC2_SetConfig+0xe8>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d007      	beq.n	8009508 <TIM_OC2_SetConfig+0x98>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a18      	ldr	r2, [pc, #96]	; (800955c <TIM_OC2_SetConfig+0xec>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d003      	beq.n	8009508 <TIM_OC2_SetConfig+0x98>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4a17      	ldr	r2, [pc, #92]	; (8009560 <TIM_OC2_SetConfig+0xf0>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d113      	bne.n	8009530 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800950e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009516:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	695b      	ldr	r3, [r3, #20]
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	693a      	ldr	r2, [r7, #16]
 8009520:	4313      	orrs	r3, r2
 8009522:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	699b      	ldr	r3, [r3, #24]
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	693a      	ldr	r2, [r7, #16]
 800952c:	4313      	orrs	r3, r2
 800952e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	693a      	ldr	r2, [r7, #16]
 8009534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	68fa      	ldr	r2, [r7, #12]
 800953a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	685a      	ldr	r2, [r3, #4]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	697a      	ldr	r2, [r7, #20]
 8009548:	621a      	str	r2, [r3, #32]
}
 800954a:	bf00      	nop
 800954c:	371c      	adds	r7, #28
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr
 8009556:	bf00      	nop
 8009558:	40012c00 	.word	0x40012c00
 800955c:	40014000 	.word	0x40014000
 8009560:	40014400 	.word	0x40014400

08009564 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009564:	b480      	push	{r7}
 8009566:	b087      	sub	sp, #28
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6a1b      	ldr	r3, [r3, #32]
 8009572:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6a1b      	ldr	r3, [r3, #32]
 800957e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	69db      	ldr	r3, [r3, #28]
 800958a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f023 0303 	bic.w	r3, r3, #3
 800959e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	68fa      	ldr	r2, [r7, #12]
 80095a6:	4313      	orrs	r3, r2
 80095a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80095b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	021b      	lsls	r3, r3, #8
 80095b8:	697a      	ldr	r2, [r7, #20]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4a21      	ldr	r2, [pc, #132]	; (8009648 <TIM_OC3_SetConfig+0xe4>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d10d      	bne.n	80095e2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	68db      	ldr	r3, [r3, #12]
 80095d2:	021b      	lsls	r3, r3, #8
 80095d4:	697a      	ldr	r2, [r7, #20]
 80095d6:	4313      	orrs	r3, r2
 80095d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80095e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	4a18      	ldr	r2, [pc, #96]	; (8009648 <TIM_OC3_SetConfig+0xe4>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d007      	beq.n	80095fa <TIM_OC3_SetConfig+0x96>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	4a17      	ldr	r2, [pc, #92]	; (800964c <TIM_OC3_SetConfig+0xe8>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d003      	beq.n	80095fa <TIM_OC3_SetConfig+0x96>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	4a16      	ldr	r2, [pc, #88]	; (8009650 <TIM_OC3_SetConfig+0xec>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d113      	bne.n	8009622 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	695b      	ldr	r3, [r3, #20]
 800960e:	011b      	lsls	r3, r3, #4
 8009610:	693a      	ldr	r2, [r7, #16]
 8009612:	4313      	orrs	r3, r2
 8009614:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	699b      	ldr	r3, [r3, #24]
 800961a:	011b      	lsls	r3, r3, #4
 800961c:	693a      	ldr	r2, [r7, #16]
 800961e:	4313      	orrs	r3, r2
 8009620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	693a      	ldr	r2, [r7, #16]
 8009626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	685a      	ldr	r2, [r3, #4]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	697a      	ldr	r2, [r7, #20]
 800963a:	621a      	str	r2, [r3, #32]
}
 800963c:	bf00      	nop
 800963e:	371c      	adds	r7, #28
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr
 8009648:	40012c00 	.word	0x40012c00
 800964c:	40014000 	.word	0x40014000
 8009650:	40014400 	.word	0x40014400

08009654 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009654:	b480      	push	{r7}
 8009656:	b087      	sub	sp, #28
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6a1b      	ldr	r3, [r3, #32]
 8009662:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6a1b      	ldr	r3, [r3, #32]
 800966e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	69db      	ldr	r3, [r3, #28]
 800967a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800968e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	021b      	lsls	r3, r3, #8
 8009696:	68fa      	ldr	r2, [r7, #12]
 8009698:	4313      	orrs	r3, r2
 800969a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80096a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	031b      	lsls	r3, r3, #12
 80096aa:	693a      	ldr	r2, [r7, #16]
 80096ac:	4313      	orrs	r3, r2
 80096ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	4a14      	ldr	r2, [pc, #80]	; (8009704 <TIM_OC4_SetConfig+0xb0>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d007      	beq.n	80096c8 <TIM_OC4_SetConfig+0x74>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	4a13      	ldr	r2, [pc, #76]	; (8009708 <TIM_OC4_SetConfig+0xb4>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d003      	beq.n	80096c8 <TIM_OC4_SetConfig+0x74>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	4a12      	ldr	r2, [pc, #72]	; (800970c <TIM_OC4_SetConfig+0xb8>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d109      	bne.n	80096dc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	695b      	ldr	r3, [r3, #20]
 80096d4:	019b      	lsls	r3, r3, #6
 80096d6:	697a      	ldr	r2, [r7, #20]
 80096d8:	4313      	orrs	r3, r2
 80096da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	697a      	ldr	r2, [r7, #20]
 80096e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	68fa      	ldr	r2, [r7, #12]
 80096e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	685a      	ldr	r2, [r3, #4]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	693a      	ldr	r2, [r7, #16]
 80096f4:	621a      	str	r2, [r3, #32]
}
 80096f6:	bf00      	nop
 80096f8:	371c      	adds	r7, #28
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	40012c00 	.word	0x40012c00
 8009708:	40014000 	.word	0x40014000
 800970c:	40014400 	.word	0x40014400

08009710 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009710:	b480      	push	{r7}
 8009712:	b087      	sub	sp, #28
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a1b      	ldr	r3, [r3, #32]
 800971e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a1b      	ldr	r3, [r3, #32]
 800972a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800973e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	68fa      	ldr	r2, [r7, #12]
 800974a:	4313      	orrs	r3, r2
 800974c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009754:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	041b      	lsls	r3, r3, #16
 800975c:	693a      	ldr	r2, [r7, #16]
 800975e:	4313      	orrs	r3, r2
 8009760:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	4a13      	ldr	r2, [pc, #76]	; (80097b4 <TIM_OC5_SetConfig+0xa4>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d007      	beq.n	800977a <TIM_OC5_SetConfig+0x6a>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	4a12      	ldr	r2, [pc, #72]	; (80097b8 <TIM_OC5_SetConfig+0xa8>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d003      	beq.n	800977a <TIM_OC5_SetConfig+0x6a>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	4a11      	ldr	r2, [pc, #68]	; (80097bc <TIM_OC5_SetConfig+0xac>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d109      	bne.n	800978e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009780:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	695b      	ldr	r3, [r3, #20]
 8009786:	021b      	lsls	r3, r3, #8
 8009788:	697a      	ldr	r2, [r7, #20]
 800978a:	4313      	orrs	r3, r2
 800978c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	697a      	ldr	r2, [r7, #20]
 8009792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	68fa      	ldr	r2, [r7, #12]
 8009798:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	685a      	ldr	r2, [r3, #4]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	693a      	ldr	r2, [r7, #16]
 80097a6:	621a      	str	r2, [r3, #32]
}
 80097a8:	bf00      	nop
 80097aa:	371c      	adds	r7, #28
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr
 80097b4:	40012c00 	.word	0x40012c00
 80097b8:	40014000 	.word	0x40014000
 80097bc:	40014400 	.word	0x40014400

080097c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b087      	sub	sp, #28
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6a1b      	ldr	r3, [r3, #32]
 80097ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6a1b      	ldr	r3, [r3, #32]
 80097da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80097ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	021b      	lsls	r3, r3, #8
 80097fa:	68fa      	ldr	r2, [r7, #12]
 80097fc:	4313      	orrs	r3, r2
 80097fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009806:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	051b      	lsls	r3, r3, #20
 800980e:	693a      	ldr	r2, [r7, #16]
 8009810:	4313      	orrs	r3, r2
 8009812:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	4a14      	ldr	r2, [pc, #80]	; (8009868 <TIM_OC6_SetConfig+0xa8>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d007      	beq.n	800982c <TIM_OC6_SetConfig+0x6c>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	4a13      	ldr	r2, [pc, #76]	; (800986c <TIM_OC6_SetConfig+0xac>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d003      	beq.n	800982c <TIM_OC6_SetConfig+0x6c>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	4a12      	ldr	r2, [pc, #72]	; (8009870 <TIM_OC6_SetConfig+0xb0>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d109      	bne.n	8009840 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009832:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	695b      	ldr	r3, [r3, #20]
 8009838:	029b      	lsls	r3, r3, #10
 800983a:	697a      	ldr	r2, [r7, #20]
 800983c:	4313      	orrs	r3, r2
 800983e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	697a      	ldr	r2, [r7, #20]
 8009844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	68fa      	ldr	r2, [r7, #12]
 800984a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	685a      	ldr	r2, [r3, #4]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	693a      	ldr	r2, [r7, #16]
 8009858:	621a      	str	r2, [r3, #32]
}
 800985a:	bf00      	nop
 800985c:	371c      	adds	r7, #28
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop
 8009868:	40012c00 	.word	0x40012c00
 800986c:	40014000 	.word	0x40014000
 8009870:	40014400 	.word	0x40014400

08009874 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009874:	b480      	push	{r7}
 8009876:	b087      	sub	sp, #28
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	f003 031f 	and.w	r3, r3, #31
 8009886:	2201      	movs	r2, #1
 8009888:	fa02 f303 	lsl.w	r3, r2, r3
 800988c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	6a1a      	ldr	r2, [r3, #32]
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	43db      	mvns	r3, r3
 8009896:	401a      	ands	r2, r3
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	6a1a      	ldr	r2, [r3, #32]
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	f003 031f 	and.w	r3, r3, #31
 80098a6:	6879      	ldr	r1, [r7, #4]
 80098a8:	fa01 f303 	lsl.w	r3, r1, r3
 80098ac:	431a      	orrs	r2, r3
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	621a      	str	r2, [r3, #32]
}
 80098b2:	bf00      	nop
 80098b4:	371c      	adds	r7, #28
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr
	...

080098c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b085      	sub	sp, #20
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d101      	bne.n	80098d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80098d4:	2302      	movs	r3, #2
 80098d6:	e04f      	b.n	8009978 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2202      	movs	r2, #2
 80098e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a21      	ldr	r2, [pc, #132]	; (8009984 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d108      	bne.n	8009914 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009908:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	68fa      	ldr	r2, [r7, #12]
 8009910:	4313      	orrs	r3, r2
 8009912:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800991a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	68fa      	ldr	r2, [r7, #12]
 8009922:	4313      	orrs	r3, r2
 8009924:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	68fa      	ldr	r2, [r7, #12]
 800992c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a14      	ldr	r2, [pc, #80]	; (8009984 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d009      	beq.n	800994c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009940:	d004      	beq.n	800994c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a10      	ldr	r2, [pc, #64]	; (8009988 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d10c      	bne.n	8009966 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009952:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	68ba      	ldr	r2, [r7, #8]
 800995a:	4313      	orrs	r3, r2
 800995c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	68ba      	ldr	r2, [r7, #8]
 8009964:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2201      	movs	r2, #1
 800996a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009976:	2300      	movs	r3, #0
}
 8009978:	4618      	mov	r0, r3
 800997a:	3714      	adds	r7, #20
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr
 8009984:	40012c00 	.word	0x40012c00
 8009988:	40014000 	.word	0x40014000

0800998c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800998c:	b480      	push	{r7}
 800998e:	b085      	sub	sp, #20
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009996:	2300      	movs	r3, #0
 8009998:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d101      	bne.n	80099a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80099a4:	2302      	movs	r3, #2
 80099a6:	e060      	b.n	8009a6a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	68db      	ldr	r3, [r3, #12]
 80099ba:	4313      	orrs	r3, r2
 80099bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	4313      	orrs	r3, r2
 80099ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	4313      	orrs	r3, r2
 80099d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4313      	orrs	r3, r2
 80099e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	691b      	ldr	r3, [r3, #16]
 80099f2:	4313      	orrs	r3, r2
 80099f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	695b      	ldr	r3, [r3, #20]
 8009a00:	4313      	orrs	r3, r2
 8009a02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	699b      	ldr	r3, [r3, #24]
 8009a1c:	041b      	lsls	r3, r3, #16
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a14      	ldr	r2, [pc, #80]	; (8009a78 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d115      	bne.n	8009a58 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a36:	051b      	lsls	r3, r3, #20
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	69db      	ldr	r3, [r3, #28]
 8009a46:	4313      	orrs	r3, r2
 8009a48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	6a1b      	ldr	r3, [r3, #32]
 8009a54:	4313      	orrs	r3, r2
 8009a56:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	68fa      	ldr	r2, [r7, #12]
 8009a5e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3714      	adds	r7, #20
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	40012c00 	.word	0x40012c00

08009a7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a84:	bf00      	nop
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009a98:	bf00      	nop
 8009a9a:	370c      	adds	r7, #12
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009aac:	bf00      	nop
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b082      	sub	sp, #8
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d101      	bne.n	8009aca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e040      	b.n	8009b4c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d106      	bne.n	8009ae0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f7f9 fbf4 	bl	80032c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2224      	movs	r2, #36	; 0x24
 8009ae4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f022 0201 	bic.w	r2, r2, #1
 8009af4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 f92e 	bl	8009d58 <UART_SetConfig>
 8009afc:	4603      	mov	r3, r0
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d101      	bne.n	8009b06 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	e022      	b.n	8009b4c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d002      	beq.n	8009b14 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 fb2e 	bl	800a170 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	685a      	ldr	r2, [r3, #4]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	689a      	ldr	r2, [r3, #8]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f042 0201 	orr.w	r2, r2, #1
 8009b42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 fbb5 	bl	800a2b4 <UART_CheckIdleState>
 8009b4a:	4603      	mov	r3, r0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b08a      	sub	sp, #40	; 0x28
 8009b58:	af02      	add	r7, sp, #8
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	603b      	str	r3, [r7, #0]
 8009b60:	4613      	mov	r3, r2
 8009b62:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b68:	2b20      	cmp	r3, #32
 8009b6a:	f040 8082 	bne.w	8009c72 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d002      	beq.n	8009b7a <HAL_UART_Transmit+0x26>
 8009b74:	88fb      	ldrh	r3, [r7, #6]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d101      	bne.n	8009b7e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e07a      	b.n	8009c74 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d101      	bne.n	8009b8c <HAL_UART_Transmit+0x38>
 8009b88:	2302      	movs	r3, #2
 8009b8a:	e073      	b.n	8009c74 <HAL_UART_Transmit+0x120>
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2200      	movs	r2, #0
 8009b98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2221      	movs	r2, #33	; 0x21
 8009ba0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009ba2:	f7f9 fd8f 	bl	80036c4 <HAL_GetTick>
 8009ba6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	88fa      	ldrh	r2, [r7, #6]
 8009bac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	88fa      	ldrh	r2, [r7, #6]
 8009bb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	689b      	ldr	r3, [r3, #8]
 8009bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bc0:	d108      	bne.n	8009bd4 <HAL_UART_Transmit+0x80>
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	691b      	ldr	r3, [r3, #16]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d104      	bne.n	8009bd4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	61bb      	str	r3, [r7, #24]
 8009bd2:	e003      	b.n	8009bdc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2200      	movs	r2, #0
 8009be0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009be4:	e02d      	b.n	8009c42 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	9300      	str	r3, [sp, #0]
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	2200      	movs	r2, #0
 8009bee:	2180      	movs	r1, #128	; 0x80
 8009bf0:	68f8      	ldr	r0, [r7, #12]
 8009bf2:	f000 fba8 	bl	800a346 <UART_WaitOnFlagUntilTimeout>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d001      	beq.n	8009c00 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009bfc:	2303      	movs	r3, #3
 8009bfe:	e039      	b.n	8009c74 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d10b      	bne.n	8009c1e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	881a      	ldrh	r2, [r3, #0]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c12:	b292      	uxth	r2, r2
 8009c14:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	3302      	adds	r3, #2
 8009c1a:	61bb      	str	r3, [r7, #24]
 8009c1c:	e008      	b.n	8009c30 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009c1e:	69fb      	ldr	r3, [r7, #28]
 8009c20:	781a      	ldrb	r2, [r3, #0]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	b292      	uxth	r2, r2
 8009c28:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009c2a:	69fb      	ldr	r3, [r7, #28]
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	b29a      	uxth	r2, r3
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d1cb      	bne.n	8009be6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	9300      	str	r3, [sp, #0]
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	2200      	movs	r2, #0
 8009c56:	2140      	movs	r1, #64	; 0x40
 8009c58:	68f8      	ldr	r0, [r7, #12]
 8009c5a:	f000 fb74 	bl	800a346 <UART_WaitOnFlagUntilTimeout>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d001      	beq.n	8009c68 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8009c64:	2303      	movs	r3, #3
 8009c66:	e005      	b.n	8009c74 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2220      	movs	r2, #32
 8009c6c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	e000      	b.n	8009c74 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8009c72:	2302      	movs	r3, #2
  }
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3720      	adds	r7, #32
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	4613      	mov	r3, r2
 8009c88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c8e:	2b20      	cmp	r3, #32
 8009c90:	d131      	bne.n	8009cf6 <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d002      	beq.n	8009c9e <HAL_UART_Receive_DMA+0x22>
 8009c98:	88fb      	ldrh	r3, [r7, #6]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d101      	bne.n	8009ca2 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	e02a      	b.n	8009cf8 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d101      	bne.n	8009cb0 <HAL_UART_Receive_DMA+0x34>
 8009cac:	2302      	movs	r3, #2
 8009cae:	e023      	b.n	8009cf8 <HAL_UART_Receive_DMA+0x7c>
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a0f      	ldr	r2, [pc, #60]	; (8009d00 <HAL_UART_Receive_DMA+0x84>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d00e      	beq.n	8009ce6 <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d007      	beq.n	8009ce6 <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009ce4:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8009ce6:	88fb      	ldrh	r3, [r7, #6]
 8009ce8:	461a      	mov	r2, r3
 8009cea:	68b9      	ldr	r1, [r7, #8]
 8009cec:	68f8      	ldr	r0, [r7, #12]
 8009cee:	f000 fba7 	bl	800a440 <UART_Start_Receive_DMA>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	e000      	b.n	8009cf8 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8009cf6:	2302      	movs	r3, #2
  }
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3710      	adds	r7, #16
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	40008000 	.word	0x40008000

08009d04 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009d0c:	bf00      	nop
 8009d0e:	370c      	adds	r7, #12
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr

08009d18 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009d20:	bf00      	nop
 8009d22:	370c      	adds	r7, #12
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr

08009d2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009d34:	bf00      	nop
 8009d36:	370c      	adds	r7, #12
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr

08009d40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b083      	sub	sp, #12
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	460b      	mov	r3, r1
 8009d4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009d4c:	bf00      	nop
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d58:	b5b0      	push	{r4, r5, r7, lr}
 8009d5a:	b088      	sub	sp, #32
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009d60:	2300      	movs	r3, #0
 8009d62:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	689a      	ldr	r2, [r3, #8]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	691b      	ldr	r3, [r3, #16]
 8009d6c:	431a      	orrs	r2, r3
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	695b      	ldr	r3, [r3, #20]
 8009d72:	431a      	orrs	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	69db      	ldr	r3, [r3, #28]
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	4baf      	ldr	r3, [pc, #700]	; (800a040 <UART_SetConfig+0x2e8>)
 8009d84:	4013      	ands	r3, r2
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	6812      	ldr	r2, [r2, #0]
 8009d8a:	69f9      	ldr	r1, [r7, #28]
 8009d8c:	430b      	orrs	r3, r1
 8009d8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	68da      	ldr	r2, [r3, #12]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	430a      	orrs	r2, r1
 8009da4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	699b      	ldr	r3, [r3, #24]
 8009daa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4aa4      	ldr	r2, [pc, #656]	; (800a044 <UART_SetConfig+0x2ec>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d004      	beq.n	8009dc0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a1b      	ldr	r3, [r3, #32]
 8009dba:	69fa      	ldr	r2, [r7, #28]
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	69fa      	ldr	r2, [r7, #28]
 8009dd0:	430a      	orrs	r2, r1
 8009dd2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a9b      	ldr	r2, [pc, #620]	; (800a048 <UART_SetConfig+0x2f0>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d121      	bne.n	8009e22 <UART_SetConfig+0xca>
 8009dde:	4b9b      	ldr	r3, [pc, #620]	; (800a04c <UART_SetConfig+0x2f4>)
 8009de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009de4:	f003 0303 	and.w	r3, r3, #3
 8009de8:	2b03      	cmp	r3, #3
 8009dea:	d817      	bhi.n	8009e1c <UART_SetConfig+0xc4>
 8009dec:	a201      	add	r2, pc, #4	; (adr r2, 8009df4 <UART_SetConfig+0x9c>)
 8009dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df2:	bf00      	nop
 8009df4:	08009e05 	.word	0x08009e05
 8009df8:	08009e11 	.word	0x08009e11
 8009dfc:	08009e0b 	.word	0x08009e0b
 8009e00:	08009e17 	.word	0x08009e17
 8009e04:	2301      	movs	r3, #1
 8009e06:	76fb      	strb	r3, [r7, #27]
 8009e08:	e070      	b.n	8009eec <UART_SetConfig+0x194>
 8009e0a:	2302      	movs	r3, #2
 8009e0c:	76fb      	strb	r3, [r7, #27]
 8009e0e:	e06d      	b.n	8009eec <UART_SetConfig+0x194>
 8009e10:	2304      	movs	r3, #4
 8009e12:	76fb      	strb	r3, [r7, #27]
 8009e14:	e06a      	b.n	8009eec <UART_SetConfig+0x194>
 8009e16:	2308      	movs	r3, #8
 8009e18:	76fb      	strb	r3, [r7, #27]
 8009e1a:	e067      	b.n	8009eec <UART_SetConfig+0x194>
 8009e1c:	2310      	movs	r3, #16
 8009e1e:	76fb      	strb	r3, [r7, #27]
 8009e20:	e064      	b.n	8009eec <UART_SetConfig+0x194>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a8a      	ldr	r2, [pc, #552]	; (800a050 <UART_SetConfig+0x2f8>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d132      	bne.n	8009e92 <UART_SetConfig+0x13a>
 8009e2c:	4b87      	ldr	r3, [pc, #540]	; (800a04c <UART_SetConfig+0x2f4>)
 8009e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e32:	f003 030c 	and.w	r3, r3, #12
 8009e36:	2b0c      	cmp	r3, #12
 8009e38:	d828      	bhi.n	8009e8c <UART_SetConfig+0x134>
 8009e3a:	a201      	add	r2, pc, #4	; (adr r2, 8009e40 <UART_SetConfig+0xe8>)
 8009e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e40:	08009e75 	.word	0x08009e75
 8009e44:	08009e8d 	.word	0x08009e8d
 8009e48:	08009e8d 	.word	0x08009e8d
 8009e4c:	08009e8d 	.word	0x08009e8d
 8009e50:	08009e81 	.word	0x08009e81
 8009e54:	08009e8d 	.word	0x08009e8d
 8009e58:	08009e8d 	.word	0x08009e8d
 8009e5c:	08009e8d 	.word	0x08009e8d
 8009e60:	08009e7b 	.word	0x08009e7b
 8009e64:	08009e8d 	.word	0x08009e8d
 8009e68:	08009e8d 	.word	0x08009e8d
 8009e6c:	08009e8d 	.word	0x08009e8d
 8009e70:	08009e87 	.word	0x08009e87
 8009e74:	2300      	movs	r3, #0
 8009e76:	76fb      	strb	r3, [r7, #27]
 8009e78:	e038      	b.n	8009eec <UART_SetConfig+0x194>
 8009e7a:	2302      	movs	r3, #2
 8009e7c:	76fb      	strb	r3, [r7, #27]
 8009e7e:	e035      	b.n	8009eec <UART_SetConfig+0x194>
 8009e80:	2304      	movs	r3, #4
 8009e82:	76fb      	strb	r3, [r7, #27]
 8009e84:	e032      	b.n	8009eec <UART_SetConfig+0x194>
 8009e86:	2308      	movs	r3, #8
 8009e88:	76fb      	strb	r3, [r7, #27]
 8009e8a:	e02f      	b.n	8009eec <UART_SetConfig+0x194>
 8009e8c:	2310      	movs	r3, #16
 8009e8e:	76fb      	strb	r3, [r7, #27]
 8009e90:	e02c      	b.n	8009eec <UART_SetConfig+0x194>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a6b      	ldr	r2, [pc, #428]	; (800a044 <UART_SetConfig+0x2ec>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d125      	bne.n	8009ee8 <UART_SetConfig+0x190>
 8009e9c:	4b6b      	ldr	r3, [pc, #428]	; (800a04c <UART_SetConfig+0x2f4>)
 8009e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ea2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009ea6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009eaa:	d017      	beq.n	8009edc <UART_SetConfig+0x184>
 8009eac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009eb0:	d817      	bhi.n	8009ee2 <UART_SetConfig+0x18a>
 8009eb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009eb6:	d00b      	beq.n	8009ed0 <UART_SetConfig+0x178>
 8009eb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ebc:	d811      	bhi.n	8009ee2 <UART_SetConfig+0x18a>
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d003      	beq.n	8009eca <UART_SetConfig+0x172>
 8009ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ec6:	d006      	beq.n	8009ed6 <UART_SetConfig+0x17e>
 8009ec8:	e00b      	b.n	8009ee2 <UART_SetConfig+0x18a>
 8009eca:	2300      	movs	r3, #0
 8009ecc:	76fb      	strb	r3, [r7, #27]
 8009ece:	e00d      	b.n	8009eec <UART_SetConfig+0x194>
 8009ed0:	2302      	movs	r3, #2
 8009ed2:	76fb      	strb	r3, [r7, #27]
 8009ed4:	e00a      	b.n	8009eec <UART_SetConfig+0x194>
 8009ed6:	2304      	movs	r3, #4
 8009ed8:	76fb      	strb	r3, [r7, #27]
 8009eda:	e007      	b.n	8009eec <UART_SetConfig+0x194>
 8009edc:	2308      	movs	r3, #8
 8009ede:	76fb      	strb	r3, [r7, #27]
 8009ee0:	e004      	b.n	8009eec <UART_SetConfig+0x194>
 8009ee2:	2310      	movs	r3, #16
 8009ee4:	76fb      	strb	r3, [r7, #27]
 8009ee6:	e001      	b.n	8009eec <UART_SetConfig+0x194>
 8009ee8:	2310      	movs	r3, #16
 8009eea:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a54      	ldr	r2, [pc, #336]	; (800a044 <UART_SetConfig+0x2ec>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d173      	bne.n	8009fde <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009ef6:	7efb      	ldrb	r3, [r7, #27]
 8009ef8:	2b08      	cmp	r3, #8
 8009efa:	d824      	bhi.n	8009f46 <UART_SetConfig+0x1ee>
 8009efc:	a201      	add	r2, pc, #4	; (adr r2, 8009f04 <UART_SetConfig+0x1ac>)
 8009efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f02:	bf00      	nop
 8009f04:	08009f29 	.word	0x08009f29
 8009f08:	08009f47 	.word	0x08009f47
 8009f0c:	08009f31 	.word	0x08009f31
 8009f10:	08009f47 	.word	0x08009f47
 8009f14:	08009f37 	.word	0x08009f37
 8009f18:	08009f47 	.word	0x08009f47
 8009f1c:	08009f47 	.word	0x08009f47
 8009f20:	08009f47 	.word	0x08009f47
 8009f24:	08009f3f 	.word	0x08009f3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f28:	f7fe f940 	bl	80081ac <HAL_RCC_GetPCLK1Freq>
 8009f2c:	6178      	str	r0, [r7, #20]
        break;
 8009f2e:	e00f      	b.n	8009f50 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f30:	4b48      	ldr	r3, [pc, #288]	; (800a054 <UART_SetConfig+0x2fc>)
 8009f32:	617b      	str	r3, [r7, #20]
        break;
 8009f34:	e00c      	b.n	8009f50 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f36:	f7fe f8a1 	bl	800807c <HAL_RCC_GetSysClockFreq>
 8009f3a:	6178      	str	r0, [r7, #20]
        break;
 8009f3c:	e008      	b.n	8009f50 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f42:	617b      	str	r3, [r7, #20]
        break;
 8009f44:	e004      	b.n	8009f50 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8009f46:	2300      	movs	r3, #0
 8009f48:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	76bb      	strb	r3, [r7, #26]
        break;
 8009f4e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	f000 80fe 	beq.w	800a154 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	685a      	ldr	r2, [r3, #4]
 8009f5c:	4613      	mov	r3, r2
 8009f5e:	005b      	lsls	r3, r3, #1
 8009f60:	4413      	add	r3, r2
 8009f62:	697a      	ldr	r2, [r7, #20]
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d305      	bcc.n	8009f74 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009f6e:	697a      	ldr	r2, [r7, #20]
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d902      	bls.n	8009f7a <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8009f74:	2301      	movs	r3, #1
 8009f76:	76bb      	strb	r3, [r7, #26]
 8009f78:	e0ec      	b.n	800a154 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f04f 0100 	mov.w	r1, #0
 8009f82:	f04f 0200 	mov.w	r2, #0
 8009f86:	f04f 0300 	mov.w	r3, #0
 8009f8a:	020b      	lsls	r3, r1, #8
 8009f8c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009f90:	0202      	lsls	r2, r0, #8
 8009f92:	6879      	ldr	r1, [r7, #4]
 8009f94:	6849      	ldr	r1, [r1, #4]
 8009f96:	0849      	lsrs	r1, r1, #1
 8009f98:	4608      	mov	r0, r1
 8009f9a:	f04f 0100 	mov.w	r1, #0
 8009f9e:	1814      	adds	r4, r2, r0
 8009fa0:	eb43 0501 	adc.w	r5, r3, r1
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	461a      	mov	r2, r3
 8009faa:	f04f 0300 	mov.w	r3, #0
 8009fae:	4620      	mov	r0, r4
 8009fb0:	4629      	mov	r1, r5
 8009fb2:	f7f6 fddb 	bl	8000b6c <__aeabi_uldivmod>
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	460b      	mov	r3, r1
 8009fba:	4613      	mov	r3, r2
 8009fbc:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009fc4:	d308      	bcc.n	8009fd8 <UART_SetConfig+0x280>
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fcc:	d204      	bcs.n	8009fd8 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	693a      	ldr	r2, [r7, #16]
 8009fd4:	60da      	str	r2, [r3, #12]
 8009fd6:	e0bd      	b.n	800a154 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	76bb      	strb	r3, [r7, #26]
 8009fdc:	e0ba      	b.n	800a154 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	69db      	ldr	r3, [r3, #28]
 8009fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fe6:	d168      	bne.n	800a0ba <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8009fe8:	7efb      	ldrb	r3, [r7, #27]
 8009fea:	2b08      	cmp	r3, #8
 8009fec:	d834      	bhi.n	800a058 <UART_SetConfig+0x300>
 8009fee:	a201      	add	r2, pc, #4	; (adr r2, 8009ff4 <UART_SetConfig+0x29c>)
 8009ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff4:	0800a019 	.word	0x0800a019
 8009ff8:	0800a021 	.word	0x0800a021
 8009ffc:	0800a029 	.word	0x0800a029
 800a000:	0800a059 	.word	0x0800a059
 800a004:	0800a02f 	.word	0x0800a02f
 800a008:	0800a059 	.word	0x0800a059
 800a00c:	0800a059 	.word	0x0800a059
 800a010:	0800a059 	.word	0x0800a059
 800a014:	0800a037 	.word	0x0800a037
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a018:	f7fe f8c8 	bl	80081ac <HAL_RCC_GetPCLK1Freq>
 800a01c:	6178      	str	r0, [r7, #20]
        break;
 800a01e:	e020      	b.n	800a062 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a020:	f7fe f8da 	bl	80081d8 <HAL_RCC_GetPCLK2Freq>
 800a024:	6178      	str	r0, [r7, #20]
        break;
 800a026:	e01c      	b.n	800a062 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a028:	4b0a      	ldr	r3, [pc, #40]	; (800a054 <UART_SetConfig+0x2fc>)
 800a02a:	617b      	str	r3, [r7, #20]
        break;
 800a02c:	e019      	b.n	800a062 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a02e:	f7fe f825 	bl	800807c <HAL_RCC_GetSysClockFreq>
 800a032:	6178      	str	r0, [r7, #20]
        break;
 800a034:	e015      	b.n	800a062 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a03a:	617b      	str	r3, [r7, #20]
        break;
 800a03c:	e011      	b.n	800a062 <UART_SetConfig+0x30a>
 800a03e:	bf00      	nop
 800a040:	efff69f3 	.word	0xefff69f3
 800a044:	40008000 	.word	0x40008000
 800a048:	40013800 	.word	0x40013800
 800a04c:	40021000 	.word	0x40021000
 800a050:	40004400 	.word	0x40004400
 800a054:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a058:	2300      	movs	r3, #0
 800a05a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a05c:	2301      	movs	r3, #1
 800a05e:	76bb      	strb	r3, [r7, #26]
        break;
 800a060:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d075      	beq.n	800a154 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	005a      	lsls	r2, r3, #1
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	085b      	lsrs	r3, r3, #1
 800a072:	441a      	add	r2, r3
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	fbb2 f3f3 	udiv	r3, r2, r3
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	2b0f      	cmp	r3, #15
 800a084:	d916      	bls.n	800a0b4 <UART_SetConfig+0x35c>
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a08c:	d212      	bcs.n	800a0b4 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	b29b      	uxth	r3, r3
 800a092:	f023 030f 	bic.w	r3, r3, #15
 800a096:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	085b      	lsrs	r3, r3, #1
 800a09c:	b29b      	uxth	r3, r3
 800a09e:	f003 0307 	and.w	r3, r3, #7
 800a0a2:	b29a      	uxth	r2, r3
 800a0a4:	89fb      	ldrh	r3, [r7, #14]
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	89fa      	ldrh	r2, [r7, #14]
 800a0b0:	60da      	str	r2, [r3, #12]
 800a0b2:	e04f      	b.n	800a154 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	76bb      	strb	r3, [r7, #26]
 800a0b8:	e04c      	b.n	800a154 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a0ba:	7efb      	ldrb	r3, [r7, #27]
 800a0bc:	2b08      	cmp	r3, #8
 800a0be:	d828      	bhi.n	800a112 <UART_SetConfig+0x3ba>
 800a0c0:	a201      	add	r2, pc, #4	; (adr r2, 800a0c8 <UART_SetConfig+0x370>)
 800a0c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c6:	bf00      	nop
 800a0c8:	0800a0ed 	.word	0x0800a0ed
 800a0cc:	0800a0f5 	.word	0x0800a0f5
 800a0d0:	0800a0fd 	.word	0x0800a0fd
 800a0d4:	0800a113 	.word	0x0800a113
 800a0d8:	0800a103 	.word	0x0800a103
 800a0dc:	0800a113 	.word	0x0800a113
 800a0e0:	0800a113 	.word	0x0800a113
 800a0e4:	0800a113 	.word	0x0800a113
 800a0e8:	0800a10b 	.word	0x0800a10b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0ec:	f7fe f85e 	bl	80081ac <HAL_RCC_GetPCLK1Freq>
 800a0f0:	6178      	str	r0, [r7, #20]
        break;
 800a0f2:	e013      	b.n	800a11c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0f4:	f7fe f870 	bl	80081d8 <HAL_RCC_GetPCLK2Freq>
 800a0f8:	6178      	str	r0, [r7, #20]
        break;
 800a0fa:	e00f      	b.n	800a11c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0fc:	4b1b      	ldr	r3, [pc, #108]	; (800a16c <UART_SetConfig+0x414>)
 800a0fe:	617b      	str	r3, [r7, #20]
        break;
 800a100:	e00c      	b.n	800a11c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a102:	f7fd ffbb 	bl	800807c <HAL_RCC_GetSysClockFreq>
 800a106:	6178      	str	r0, [r7, #20]
        break;
 800a108:	e008      	b.n	800a11c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a10a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a10e:	617b      	str	r3, [r7, #20]
        break;
 800a110:	e004      	b.n	800a11c <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 800a112:	2300      	movs	r3, #0
 800a114:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a116:	2301      	movs	r3, #1
 800a118:	76bb      	strb	r3, [r7, #26]
        break;
 800a11a:	bf00      	nop
    }

    if (pclk != 0U)
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d018      	beq.n	800a154 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	085a      	lsrs	r2, r3, #1
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	441a      	add	r2, r3
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	fbb2 f3f3 	udiv	r3, r2, r3
 800a134:	b29b      	uxth	r3, r3
 800a136:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	2b0f      	cmp	r3, #15
 800a13c:	d908      	bls.n	800a150 <UART_SetConfig+0x3f8>
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a144:	d204      	bcs.n	800a150 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	693a      	ldr	r2, [r7, #16]
 800a14c:	60da      	str	r2, [r3, #12]
 800a14e:	e001      	b.n	800a154 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800a150:	2301      	movs	r3, #1
 800a152:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a160:	7ebb      	ldrb	r3, [r7, #26]
}
 800a162:	4618      	mov	r0, r3
 800a164:	3720      	adds	r7, #32
 800a166:	46bd      	mov	sp, r7
 800a168:	bdb0      	pop	{r4, r5, r7, pc}
 800a16a:	bf00      	nop
 800a16c:	00f42400 	.word	0x00f42400

0800a170 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a170:	b480      	push	{r7}
 800a172:	b083      	sub	sp, #12
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17c:	f003 0301 	and.w	r3, r3, #1
 800a180:	2b00      	cmp	r3, #0
 800a182:	d00a      	beq.n	800a19a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	430a      	orrs	r2, r1
 800a198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19e:	f003 0302 	and.w	r3, r3, #2
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d00a      	beq.n	800a1bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	430a      	orrs	r2, r1
 800a1ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c0:	f003 0304 	and.w	r3, r3, #4
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d00a      	beq.n	800a1de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	430a      	orrs	r2, r1
 800a1dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e2:	f003 0308 	and.w	r3, r3, #8
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00a      	beq.n	800a200 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	430a      	orrs	r2, r1
 800a1fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a204:	f003 0310 	and.w	r3, r3, #16
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d00a      	beq.n	800a222 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	689b      	ldr	r3, [r3, #8]
 800a212:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	430a      	orrs	r2, r1
 800a220:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a226:	f003 0320 	and.w	r3, r3, #32
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d00a      	beq.n	800a244 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	689b      	ldr	r3, [r3, #8]
 800a234:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	430a      	orrs	r2, r1
 800a242:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d01a      	beq.n	800a286 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	430a      	orrs	r2, r1
 800a264:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a26a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a26e:	d10a      	bne.n	800a286 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	430a      	orrs	r2, r1
 800a284:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d00a      	beq.n	800a2a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	430a      	orrs	r2, r1
 800a2a6:	605a      	str	r2, [r3, #4]
  }
}
 800a2a8:	bf00      	nop
 800a2aa:	370c      	adds	r7, #12
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr

0800a2b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b086      	sub	sp, #24
 800a2b8:	af02      	add	r7, sp, #8
 800a2ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a2c4:	f7f9 f9fe 	bl	80036c4 <HAL_GetTick>
 800a2c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f003 0308 	and.w	r3, r3, #8
 800a2d4:	2b08      	cmp	r3, #8
 800a2d6:	d10e      	bne.n	800a2f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a2d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a2dc:	9300      	str	r3, [sp, #0]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 f82d 	bl	800a346 <UART_WaitOnFlagUntilTimeout>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d001      	beq.n	800a2f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a2f2:	2303      	movs	r3, #3
 800a2f4:	e023      	b.n	800a33e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f003 0304 	and.w	r3, r3, #4
 800a300:	2b04      	cmp	r3, #4
 800a302:	d10e      	bne.n	800a322 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a304:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a308:	9300      	str	r3, [sp, #0]
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2200      	movs	r2, #0
 800a30e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 f817 	bl	800a346 <UART_WaitOnFlagUntilTimeout>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d001      	beq.n	800a322 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a31e:	2303      	movs	r3, #3
 800a320:	e00d      	b.n	800a33e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2220      	movs	r2, #32
 800a326:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2220      	movs	r2, #32
 800a32c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2200      	movs	r2, #0
 800a332:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2200      	movs	r2, #0
 800a338:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a33c:	2300      	movs	r3, #0
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3710      	adds	r7, #16
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}

0800a346 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a346:	b580      	push	{r7, lr}
 800a348:	b084      	sub	sp, #16
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	60f8      	str	r0, [r7, #12]
 800a34e:	60b9      	str	r1, [r7, #8]
 800a350:	603b      	str	r3, [r7, #0]
 800a352:	4613      	mov	r3, r2
 800a354:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a356:	e05e      	b.n	800a416 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a358:	69bb      	ldr	r3, [r7, #24]
 800a35a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a35e:	d05a      	beq.n	800a416 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a360:	f7f9 f9b0 	bl	80036c4 <HAL_GetTick>
 800a364:	4602      	mov	r2, r0
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	1ad3      	subs	r3, r2, r3
 800a36a:	69ba      	ldr	r2, [r7, #24]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d302      	bcc.n	800a376 <UART_WaitOnFlagUntilTimeout+0x30>
 800a370:	69bb      	ldr	r3, [r7, #24]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d11b      	bne.n	800a3ae <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	681a      	ldr	r2, [r3, #0]
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a384:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	689a      	ldr	r2, [r3, #8]
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f022 0201 	bic.w	r2, r2, #1
 800a394:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2220      	movs	r2, #32
 800a39a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	2220      	movs	r2, #32
 800a3a0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a3aa:	2303      	movs	r3, #3
 800a3ac:	e043      	b.n	800a436 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f003 0304 	and.w	r3, r3, #4
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d02c      	beq.n	800a416 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	69db      	ldr	r3, [r3, #28]
 800a3c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a3c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3ca:	d124      	bne.n	800a416 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a3d4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	681a      	ldr	r2, [r3, #0]
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a3e4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	689a      	ldr	r2, [r3, #8]
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f022 0201 	bic.w	r2, r2, #1
 800a3f4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2220      	movs	r2, #32
 800a3fa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2220      	movs	r2, #32
 800a400:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2220      	movs	r2, #32
 800a406:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2200      	movs	r2, #0
 800a40e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a412:	2303      	movs	r3, #3
 800a414:	e00f      	b.n	800a436 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	69da      	ldr	r2, [r3, #28]
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	4013      	ands	r3, r2
 800a420:	68ba      	ldr	r2, [r7, #8]
 800a422:	429a      	cmp	r2, r3
 800a424:	bf0c      	ite	eq
 800a426:	2301      	moveq	r3, #1
 800a428:	2300      	movne	r3, #0
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	461a      	mov	r2, r3
 800a42e:	79fb      	ldrb	r3, [r7, #7]
 800a430:	429a      	cmp	r2, r3
 800a432:	d091      	beq.n	800a358 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a434:	2300      	movs	r3, #0
}
 800a436:	4618      	mov	r0, r3
 800a438:	3710      	adds	r7, #16
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
	...

0800a440 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	4613      	mov	r3, r2
 800a44c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	68ba      	ldr	r2, [r7, #8]
 800a452:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	88fa      	ldrh	r2, [r7, #6]
 800a458:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2200      	movs	r2, #0
 800a460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2222      	movs	r2, #34	; 0x22
 800a468:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d02b      	beq.n	800a4ca <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a476:	4a25      	ldr	r2, [pc, #148]	; (800a50c <UART_Start_Receive_DMA+0xcc>)
 800a478:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a47e:	4a24      	ldr	r2, [pc, #144]	; (800a510 <UART_Start_Receive_DMA+0xd0>)
 800a480:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a486:	4a23      	ldr	r2, [pc, #140]	; (800a514 <UART_Start_Receive_DMA+0xd4>)
 800a488:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a48e:	2200      	movs	r2, #0
 800a490:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	3324      	adds	r3, #36	; 0x24
 800a49c:	4619      	mov	r1, r3
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	88fb      	ldrh	r3, [r7, #6]
 800a4a6:	f7fa fc47 	bl	8004d38 <HAL_DMA_Start_IT>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d00c      	beq.n	800a4ca <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2210      	movs	r2, #16
 800a4b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2220      	movs	r2, #32
 800a4c4:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e01c      	b.n	800a504 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a4e0:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	689a      	ldr	r2, [r3, #8]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f042 0201 	orr.w	r2, r2, #1
 800a4f0:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	689a      	ldr	r2, [r3, #8]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a500:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800a502:	2300      	movs	r3, #0
}
 800a504:	4618      	mov	r0, r3
 800a506:	3710      	adds	r7, #16
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}
 800a50c:	0800a5a1 	.word	0x0800a5a1
 800a510:	0800a639 	.word	0x0800a639
 800a514:	0800a671 	.word	0x0800a671

0800a518 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a52e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2220      	movs	r2, #32
 800a534:	679a      	str	r2, [r3, #120]	; 0x78
}
 800a536:	bf00      	nop
 800a538:	370c      	adds	r7, #12
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr

0800a542 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a542:	b480      	push	{r7}
 800a544:	b083      	sub	sp, #12
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a558:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	689a      	ldr	r2, [r3, #8]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f022 0201 	bic.w	r2, r2, #1
 800a568:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d107      	bne.n	800a582 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f022 0210 	bic.w	r2, r2, #16
 800a580:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2220      	movs	r2, #32
 800a586:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2200      	movs	r2, #0
 800a58c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2200      	movs	r2, #0
 800a592:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a594:	bf00      	nop
 800a596:	370c      	adds	r7, #12
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ac:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f003 0320 	and.w	r3, r3, #32
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d12a      	bne.n	800a612 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a5d2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	689a      	ldr	r2, [r3, #8]
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f022 0201 	bic.w	r2, r2, #1
 800a5e2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	689a      	ldr	r2, [r3, #8]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5f2:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2220      	movs	r2, #32
 800a5f8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d107      	bne.n	800a612 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f022 0210 	bic.w	r2, r2, #16
 800a610:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a616:	2b01      	cmp	r3, #1
 800a618:	d107      	bne.n	800a62a <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a620:	4619      	mov	r1, r3
 800a622:	68f8      	ldr	r0, [r7, #12]
 800a624:	f7ff fb8c 	bl	8009d40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a628:	e002      	b.n	800a630 <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 800a62a:	68f8      	ldr	r0, [r7, #12]
 800a62c:	f7ff fb6a 	bl	8009d04 <HAL_UART_RxCpltCallback>
}
 800a630:	bf00      	nop
 800a632:	3710      	adds	r7, #16
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a644:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d109      	bne.n	800a662 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a654:	085b      	lsrs	r3, r3, #1
 800a656:	b29b      	uxth	r3, r3
 800a658:	4619      	mov	r1, r3
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	f7ff fb70 	bl	8009d40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a660:	e002      	b.n	800a668 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800a662:	68f8      	ldr	r0, [r7, #12]
 800a664:	f7ff fb58 	bl	8009d18 <HAL_UART_RxHalfCpltCallback>
}
 800a668:	bf00      	nop
 800a66a:	3710      	adds	r7, #16
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b086      	sub	sp, #24
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a67c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a682:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a688:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	689b      	ldr	r3, [r3, #8]
 800a690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a694:	2b80      	cmp	r3, #128	; 0x80
 800a696:	d109      	bne.n	800a6ac <UART_DMAError+0x3c>
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	2b21      	cmp	r3, #33	; 0x21
 800a69c:	d106      	bne.n	800a6ac <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800a6a6:	6978      	ldr	r0, [r7, #20]
 800a6a8:	f7ff ff36 	bl	800a518 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	689b      	ldr	r3, [r3, #8]
 800a6b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6b6:	2b40      	cmp	r3, #64	; 0x40
 800a6b8:	d109      	bne.n	800a6ce <UART_DMAError+0x5e>
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2b22      	cmp	r3, #34	; 0x22
 800a6be:	d106      	bne.n	800a6ce <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800a6c8:	6978      	ldr	r0, [r7, #20]
 800a6ca:	f7ff ff3a 	bl	800a542 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6d4:	f043 0210 	orr.w	r2, r3, #16
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a6de:	6978      	ldr	r0, [r7, #20]
 800a6e0:	f7ff fb24 	bl	8009d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6e4:	bf00      	nop
 800a6e6:	3718      	adds	r7, #24
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <__libc_init_array>:
 800a6ec:	b570      	push	{r4, r5, r6, lr}
 800a6ee:	4d0d      	ldr	r5, [pc, #52]	; (800a724 <__libc_init_array+0x38>)
 800a6f0:	4c0d      	ldr	r4, [pc, #52]	; (800a728 <__libc_init_array+0x3c>)
 800a6f2:	1b64      	subs	r4, r4, r5
 800a6f4:	10a4      	asrs	r4, r4, #2
 800a6f6:	2600      	movs	r6, #0
 800a6f8:	42a6      	cmp	r6, r4
 800a6fa:	d109      	bne.n	800a710 <__libc_init_array+0x24>
 800a6fc:	4d0b      	ldr	r5, [pc, #44]	; (800a72c <__libc_init_array+0x40>)
 800a6fe:	4c0c      	ldr	r4, [pc, #48]	; (800a730 <__libc_init_array+0x44>)
 800a700:	f001 f8b4 	bl	800b86c <_init>
 800a704:	1b64      	subs	r4, r4, r5
 800a706:	10a4      	asrs	r4, r4, #2
 800a708:	2600      	movs	r6, #0
 800a70a:	42a6      	cmp	r6, r4
 800a70c:	d105      	bne.n	800a71a <__libc_init_array+0x2e>
 800a70e:	bd70      	pop	{r4, r5, r6, pc}
 800a710:	f855 3b04 	ldr.w	r3, [r5], #4
 800a714:	4798      	blx	r3
 800a716:	3601      	adds	r6, #1
 800a718:	e7ee      	b.n	800a6f8 <__libc_init_array+0xc>
 800a71a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a71e:	4798      	blx	r3
 800a720:	3601      	adds	r6, #1
 800a722:	e7f2      	b.n	800a70a <__libc_init_array+0x1e>
 800a724:	0800bab0 	.word	0x0800bab0
 800a728:	0800bab0 	.word	0x0800bab0
 800a72c:	0800bab0 	.word	0x0800bab0
 800a730:	0800bab4 	.word	0x0800bab4

0800a734 <memcpy>:
 800a734:	440a      	add	r2, r1
 800a736:	4291      	cmp	r1, r2
 800a738:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a73c:	d100      	bne.n	800a740 <memcpy+0xc>
 800a73e:	4770      	bx	lr
 800a740:	b510      	push	{r4, lr}
 800a742:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a746:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a74a:	4291      	cmp	r1, r2
 800a74c:	d1f9      	bne.n	800a742 <memcpy+0xe>
 800a74e:	bd10      	pop	{r4, pc}

0800a750 <memset>:
 800a750:	4402      	add	r2, r0
 800a752:	4603      	mov	r3, r0
 800a754:	4293      	cmp	r3, r2
 800a756:	d100      	bne.n	800a75a <memset+0xa>
 800a758:	4770      	bx	lr
 800a75a:	f803 1b01 	strb.w	r1, [r3], #1
 800a75e:	e7f9      	b.n	800a754 <memset+0x4>

0800a760 <cos>:
 800a760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a762:	ec53 2b10 	vmov	r2, r3, d0
 800a766:	4824      	ldr	r0, [pc, #144]	; (800a7f8 <cos+0x98>)
 800a768:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a76c:	4281      	cmp	r1, r0
 800a76e:	dc06      	bgt.n	800a77e <cos+0x1e>
 800a770:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800a7f0 <cos+0x90>
 800a774:	f000 faa4 	bl	800acc0 <__kernel_cos>
 800a778:	ec51 0b10 	vmov	r0, r1, d0
 800a77c:	e007      	b.n	800a78e <cos+0x2e>
 800a77e:	481f      	ldr	r0, [pc, #124]	; (800a7fc <cos+0x9c>)
 800a780:	4281      	cmp	r1, r0
 800a782:	dd09      	ble.n	800a798 <cos+0x38>
 800a784:	ee10 0a10 	vmov	r0, s0
 800a788:	4619      	mov	r1, r3
 800a78a:	f7f5 fd25 	bl	80001d8 <__aeabi_dsub>
 800a78e:	ec41 0b10 	vmov	d0, r0, r1
 800a792:	b005      	add	sp, #20
 800a794:	f85d fb04 	ldr.w	pc, [sp], #4
 800a798:	4668      	mov	r0, sp
 800a79a:	f000 f885 	bl	800a8a8 <__ieee754_rem_pio2>
 800a79e:	f000 0003 	and.w	r0, r0, #3
 800a7a2:	2801      	cmp	r0, #1
 800a7a4:	d007      	beq.n	800a7b6 <cos+0x56>
 800a7a6:	2802      	cmp	r0, #2
 800a7a8:	d012      	beq.n	800a7d0 <cos+0x70>
 800a7aa:	b9c0      	cbnz	r0, 800a7de <cos+0x7e>
 800a7ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a7b0:	ed9d 0b00 	vldr	d0, [sp]
 800a7b4:	e7de      	b.n	800a774 <cos+0x14>
 800a7b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a7ba:	ed9d 0b00 	vldr	d0, [sp]
 800a7be:	f000 fe87 	bl	800b4d0 <__kernel_sin>
 800a7c2:	ec53 2b10 	vmov	r2, r3, d0
 800a7c6:	ee10 0a10 	vmov	r0, s0
 800a7ca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a7ce:	e7de      	b.n	800a78e <cos+0x2e>
 800a7d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a7d4:	ed9d 0b00 	vldr	d0, [sp]
 800a7d8:	f000 fa72 	bl	800acc0 <__kernel_cos>
 800a7dc:	e7f1      	b.n	800a7c2 <cos+0x62>
 800a7de:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a7e2:	ed9d 0b00 	vldr	d0, [sp]
 800a7e6:	2001      	movs	r0, #1
 800a7e8:	f000 fe72 	bl	800b4d0 <__kernel_sin>
 800a7ec:	e7c4      	b.n	800a778 <cos+0x18>
 800a7ee:	bf00      	nop
	...
 800a7f8:	3fe921fb 	.word	0x3fe921fb
 800a7fc:	7fefffff 	.word	0x7fefffff

0800a800 <sin>:
 800a800:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a802:	ec53 2b10 	vmov	r2, r3, d0
 800a806:	4826      	ldr	r0, [pc, #152]	; (800a8a0 <sin+0xa0>)
 800a808:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a80c:	4281      	cmp	r1, r0
 800a80e:	dc07      	bgt.n	800a820 <sin+0x20>
 800a810:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a898 <sin+0x98>
 800a814:	2000      	movs	r0, #0
 800a816:	f000 fe5b 	bl	800b4d0 <__kernel_sin>
 800a81a:	ec51 0b10 	vmov	r0, r1, d0
 800a81e:	e007      	b.n	800a830 <sin+0x30>
 800a820:	4820      	ldr	r0, [pc, #128]	; (800a8a4 <sin+0xa4>)
 800a822:	4281      	cmp	r1, r0
 800a824:	dd09      	ble.n	800a83a <sin+0x3a>
 800a826:	ee10 0a10 	vmov	r0, s0
 800a82a:	4619      	mov	r1, r3
 800a82c:	f7f5 fcd4 	bl	80001d8 <__aeabi_dsub>
 800a830:	ec41 0b10 	vmov	d0, r0, r1
 800a834:	b005      	add	sp, #20
 800a836:	f85d fb04 	ldr.w	pc, [sp], #4
 800a83a:	4668      	mov	r0, sp
 800a83c:	f000 f834 	bl	800a8a8 <__ieee754_rem_pio2>
 800a840:	f000 0003 	and.w	r0, r0, #3
 800a844:	2801      	cmp	r0, #1
 800a846:	d008      	beq.n	800a85a <sin+0x5a>
 800a848:	2802      	cmp	r0, #2
 800a84a:	d00d      	beq.n	800a868 <sin+0x68>
 800a84c:	b9d0      	cbnz	r0, 800a884 <sin+0x84>
 800a84e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a852:	ed9d 0b00 	vldr	d0, [sp]
 800a856:	2001      	movs	r0, #1
 800a858:	e7dd      	b.n	800a816 <sin+0x16>
 800a85a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a85e:	ed9d 0b00 	vldr	d0, [sp]
 800a862:	f000 fa2d 	bl	800acc0 <__kernel_cos>
 800a866:	e7d8      	b.n	800a81a <sin+0x1a>
 800a868:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a86c:	ed9d 0b00 	vldr	d0, [sp]
 800a870:	2001      	movs	r0, #1
 800a872:	f000 fe2d 	bl	800b4d0 <__kernel_sin>
 800a876:	ec53 2b10 	vmov	r2, r3, d0
 800a87a:	ee10 0a10 	vmov	r0, s0
 800a87e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a882:	e7d5      	b.n	800a830 <sin+0x30>
 800a884:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a888:	ed9d 0b00 	vldr	d0, [sp]
 800a88c:	f000 fa18 	bl	800acc0 <__kernel_cos>
 800a890:	e7f1      	b.n	800a876 <sin+0x76>
 800a892:	bf00      	nop
 800a894:	f3af 8000 	nop.w
	...
 800a8a0:	3fe921fb 	.word	0x3fe921fb
 800a8a4:	7fefffff 	.word	0x7fefffff

0800a8a8 <__ieee754_rem_pio2>:
 800a8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ac:	ed2d 8b02 	vpush	{d8}
 800a8b0:	ec55 4b10 	vmov	r4, r5, d0
 800a8b4:	4bca      	ldr	r3, [pc, #808]	; (800abe0 <__ieee754_rem_pio2+0x338>)
 800a8b6:	b08b      	sub	sp, #44	; 0x2c
 800a8b8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a8bc:	4598      	cmp	r8, r3
 800a8be:	4682      	mov	sl, r0
 800a8c0:	9502      	str	r5, [sp, #8]
 800a8c2:	dc08      	bgt.n	800a8d6 <__ieee754_rem_pio2+0x2e>
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	ed80 0b00 	vstr	d0, [r0]
 800a8cc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a8d0:	f04f 0b00 	mov.w	fp, #0
 800a8d4:	e028      	b.n	800a928 <__ieee754_rem_pio2+0x80>
 800a8d6:	4bc3      	ldr	r3, [pc, #780]	; (800abe4 <__ieee754_rem_pio2+0x33c>)
 800a8d8:	4598      	cmp	r8, r3
 800a8da:	dc78      	bgt.n	800a9ce <__ieee754_rem_pio2+0x126>
 800a8dc:	9b02      	ldr	r3, [sp, #8]
 800a8de:	4ec2      	ldr	r6, [pc, #776]	; (800abe8 <__ieee754_rem_pio2+0x340>)
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	ee10 0a10 	vmov	r0, s0
 800a8e6:	a3b0      	add	r3, pc, #704	; (adr r3, 800aba8 <__ieee754_rem_pio2+0x300>)
 800a8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ec:	4629      	mov	r1, r5
 800a8ee:	dd39      	ble.n	800a964 <__ieee754_rem_pio2+0xbc>
 800a8f0:	f7f5 fc72 	bl	80001d8 <__aeabi_dsub>
 800a8f4:	45b0      	cmp	r8, r6
 800a8f6:	4604      	mov	r4, r0
 800a8f8:	460d      	mov	r5, r1
 800a8fa:	d01b      	beq.n	800a934 <__ieee754_rem_pio2+0x8c>
 800a8fc:	a3ac      	add	r3, pc, #688	; (adr r3, 800abb0 <__ieee754_rem_pio2+0x308>)
 800a8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a902:	f7f5 fc69 	bl	80001d8 <__aeabi_dsub>
 800a906:	4602      	mov	r2, r0
 800a908:	460b      	mov	r3, r1
 800a90a:	e9ca 2300 	strd	r2, r3, [sl]
 800a90e:	4620      	mov	r0, r4
 800a910:	4629      	mov	r1, r5
 800a912:	f7f5 fc61 	bl	80001d8 <__aeabi_dsub>
 800a916:	a3a6      	add	r3, pc, #664	; (adr r3, 800abb0 <__ieee754_rem_pio2+0x308>)
 800a918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91c:	f7f5 fc5c 	bl	80001d8 <__aeabi_dsub>
 800a920:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a924:	f04f 0b01 	mov.w	fp, #1
 800a928:	4658      	mov	r0, fp
 800a92a:	b00b      	add	sp, #44	; 0x2c
 800a92c:	ecbd 8b02 	vpop	{d8}
 800a930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a934:	a3a0      	add	r3, pc, #640	; (adr r3, 800abb8 <__ieee754_rem_pio2+0x310>)
 800a936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93a:	f7f5 fc4d 	bl	80001d8 <__aeabi_dsub>
 800a93e:	a3a0      	add	r3, pc, #640	; (adr r3, 800abc0 <__ieee754_rem_pio2+0x318>)
 800a940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a944:	4604      	mov	r4, r0
 800a946:	460d      	mov	r5, r1
 800a948:	f7f5 fc46 	bl	80001d8 <__aeabi_dsub>
 800a94c:	4602      	mov	r2, r0
 800a94e:	460b      	mov	r3, r1
 800a950:	e9ca 2300 	strd	r2, r3, [sl]
 800a954:	4620      	mov	r0, r4
 800a956:	4629      	mov	r1, r5
 800a958:	f7f5 fc3e 	bl	80001d8 <__aeabi_dsub>
 800a95c:	a398      	add	r3, pc, #608	; (adr r3, 800abc0 <__ieee754_rem_pio2+0x318>)
 800a95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a962:	e7db      	b.n	800a91c <__ieee754_rem_pio2+0x74>
 800a964:	f7f5 fc3a 	bl	80001dc <__adddf3>
 800a968:	45b0      	cmp	r8, r6
 800a96a:	4604      	mov	r4, r0
 800a96c:	460d      	mov	r5, r1
 800a96e:	d016      	beq.n	800a99e <__ieee754_rem_pio2+0xf6>
 800a970:	a38f      	add	r3, pc, #572	; (adr r3, 800abb0 <__ieee754_rem_pio2+0x308>)
 800a972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a976:	f7f5 fc31 	bl	80001dc <__adddf3>
 800a97a:	4602      	mov	r2, r0
 800a97c:	460b      	mov	r3, r1
 800a97e:	e9ca 2300 	strd	r2, r3, [sl]
 800a982:	4620      	mov	r0, r4
 800a984:	4629      	mov	r1, r5
 800a986:	f7f5 fc27 	bl	80001d8 <__aeabi_dsub>
 800a98a:	a389      	add	r3, pc, #548	; (adr r3, 800abb0 <__ieee754_rem_pio2+0x308>)
 800a98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a990:	f7f5 fc24 	bl	80001dc <__adddf3>
 800a994:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800a998:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a99c:	e7c4      	b.n	800a928 <__ieee754_rem_pio2+0x80>
 800a99e:	a386      	add	r3, pc, #536	; (adr r3, 800abb8 <__ieee754_rem_pio2+0x310>)
 800a9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a4:	f7f5 fc1a 	bl	80001dc <__adddf3>
 800a9a8:	a385      	add	r3, pc, #532	; (adr r3, 800abc0 <__ieee754_rem_pio2+0x318>)
 800a9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ae:	4604      	mov	r4, r0
 800a9b0:	460d      	mov	r5, r1
 800a9b2:	f7f5 fc13 	bl	80001dc <__adddf3>
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	460b      	mov	r3, r1
 800a9ba:	e9ca 2300 	strd	r2, r3, [sl]
 800a9be:	4620      	mov	r0, r4
 800a9c0:	4629      	mov	r1, r5
 800a9c2:	f7f5 fc09 	bl	80001d8 <__aeabi_dsub>
 800a9c6:	a37e      	add	r3, pc, #504	; (adr r3, 800abc0 <__ieee754_rem_pio2+0x318>)
 800a9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9cc:	e7e0      	b.n	800a990 <__ieee754_rem_pio2+0xe8>
 800a9ce:	4b87      	ldr	r3, [pc, #540]	; (800abec <__ieee754_rem_pio2+0x344>)
 800a9d0:	4598      	cmp	r8, r3
 800a9d2:	f300 80d9 	bgt.w	800ab88 <__ieee754_rem_pio2+0x2e0>
 800a9d6:	f000 fe39 	bl	800b64c <fabs>
 800a9da:	ec55 4b10 	vmov	r4, r5, d0
 800a9de:	ee10 0a10 	vmov	r0, s0
 800a9e2:	a379      	add	r3, pc, #484	; (adr r3, 800abc8 <__ieee754_rem_pio2+0x320>)
 800a9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e8:	4629      	mov	r1, r5
 800a9ea:	f7f5 fdad 	bl	8000548 <__aeabi_dmul>
 800a9ee:	4b80      	ldr	r3, [pc, #512]	; (800abf0 <__ieee754_rem_pio2+0x348>)
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f7f5 fbf3 	bl	80001dc <__adddf3>
 800a9f6:	f7f6 f841 	bl	8000a7c <__aeabi_d2iz>
 800a9fa:	4683      	mov	fp, r0
 800a9fc:	f7f5 fd3a 	bl	8000474 <__aeabi_i2d>
 800aa00:	4602      	mov	r2, r0
 800aa02:	460b      	mov	r3, r1
 800aa04:	ec43 2b18 	vmov	d8, r2, r3
 800aa08:	a367      	add	r3, pc, #412	; (adr r3, 800aba8 <__ieee754_rem_pio2+0x300>)
 800aa0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0e:	f7f5 fd9b 	bl	8000548 <__aeabi_dmul>
 800aa12:	4602      	mov	r2, r0
 800aa14:	460b      	mov	r3, r1
 800aa16:	4620      	mov	r0, r4
 800aa18:	4629      	mov	r1, r5
 800aa1a:	f7f5 fbdd 	bl	80001d8 <__aeabi_dsub>
 800aa1e:	a364      	add	r3, pc, #400	; (adr r3, 800abb0 <__ieee754_rem_pio2+0x308>)
 800aa20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa24:	4606      	mov	r6, r0
 800aa26:	460f      	mov	r7, r1
 800aa28:	ec51 0b18 	vmov	r0, r1, d8
 800aa2c:	f7f5 fd8c 	bl	8000548 <__aeabi_dmul>
 800aa30:	f1bb 0f1f 	cmp.w	fp, #31
 800aa34:	4604      	mov	r4, r0
 800aa36:	460d      	mov	r5, r1
 800aa38:	dc0d      	bgt.n	800aa56 <__ieee754_rem_pio2+0x1ae>
 800aa3a:	4b6e      	ldr	r3, [pc, #440]	; (800abf4 <__ieee754_rem_pio2+0x34c>)
 800aa3c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800aa40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa44:	4543      	cmp	r3, r8
 800aa46:	d006      	beq.n	800aa56 <__ieee754_rem_pio2+0x1ae>
 800aa48:	4622      	mov	r2, r4
 800aa4a:	462b      	mov	r3, r5
 800aa4c:	4630      	mov	r0, r6
 800aa4e:	4639      	mov	r1, r7
 800aa50:	f7f5 fbc2 	bl	80001d8 <__aeabi_dsub>
 800aa54:	e00f      	b.n	800aa76 <__ieee754_rem_pio2+0x1ce>
 800aa56:	462b      	mov	r3, r5
 800aa58:	4622      	mov	r2, r4
 800aa5a:	4630      	mov	r0, r6
 800aa5c:	4639      	mov	r1, r7
 800aa5e:	f7f5 fbbb 	bl	80001d8 <__aeabi_dsub>
 800aa62:	ea4f 5328 	mov.w	r3, r8, asr #20
 800aa66:	9303      	str	r3, [sp, #12]
 800aa68:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aa6c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800aa70:	f1b8 0f10 	cmp.w	r8, #16
 800aa74:	dc02      	bgt.n	800aa7c <__ieee754_rem_pio2+0x1d4>
 800aa76:	e9ca 0100 	strd	r0, r1, [sl]
 800aa7a:	e039      	b.n	800aaf0 <__ieee754_rem_pio2+0x248>
 800aa7c:	a34e      	add	r3, pc, #312	; (adr r3, 800abb8 <__ieee754_rem_pio2+0x310>)
 800aa7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa82:	ec51 0b18 	vmov	r0, r1, d8
 800aa86:	f7f5 fd5f 	bl	8000548 <__aeabi_dmul>
 800aa8a:	4604      	mov	r4, r0
 800aa8c:	460d      	mov	r5, r1
 800aa8e:	4602      	mov	r2, r0
 800aa90:	460b      	mov	r3, r1
 800aa92:	4630      	mov	r0, r6
 800aa94:	4639      	mov	r1, r7
 800aa96:	f7f5 fb9f 	bl	80001d8 <__aeabi_dsub>
 800aa9a:	4602      	mov	r2, r0
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	4680      	mov	r8, r0
 800aaa0:	4689      	mov	r9, r1
 800aaa2:	4630      	mov	r0, r6
 800aaa4:	4639      	mov	r1, r7
 800aaa6:	f7f5 fb97 	bl	80001d8 <__aeabi_dsub>
 800aaaa:	4622      	mov	r2, r4
 800aaac:	462b      	mov	r3, r5
 800aaae:	f7f5 fb93 	bl	80001d8 <__aeabi_dsub>
 800aab2:	a343      	add	r3, pc, #268	; (adr r3, 800abc0 <__ieee754_rem_pio2+0x318>)
 800aab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab8:	4604      	mov	r4, r0
 800aaba:	460d      	mov	r5, r1
 800aabc:	ec51 0b18 	vmov	r0, r1, d8
 800aac0:	f7f5 fd42 	bl	8000548 <__aeabi_dmul>
 800aac4:	4622      	mov	r2, r4
 800aac6:	462b      	mov	r3, r5
 800aac8:	f7f5 fb86 	bl	80001d8 <__aeabi_dsub>
 800aacc:	4602      	mov	r2, r0
 800aace:	460b      	mov	r3, r1
 800aad0:	4604      	mov	r4, r0
 800aad2:	460d      	mov	r5, r1
 800aad4:	4640      	mov	r0, r8
 800aad6:	4649      	mov	r1, r9
 800aad8:	f7f5 fb7e 	bl	80001d8 <__aeabi_dsub>
 800aadc:	9a03      	ldr	r2, [sp, #12]
 800aade:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aae2:	1ad3      	subs	r3, r2, r3
 800aae4:	2b31      	cmp	r3, #49	; 0x31
 800aae6:	dc24      	bgt.n	800ab32 <__ieee754_rem_pio2+0x28a>
 800aae8:	e9ca 0100 	strd	r0, r1, [sl]
 800aaec:	4646      	mov	r6, r8
 800aaee:	464f      	mov	r7, r9
 800aaf0:	e9da 8900 	ldrd	r8, r9, [sl]
 800aaf4:	4630      	mov	r0, r6
 800aaf6:	4642      	mov	r2, r8
 800aaf8:	464b      	mov	r3, r9
 800aafa:	4639      	mov	r1, r7
 800aafc:	f7f5 fb6c 	bl	80001d8 <__aeabi_dsub>
 800ab00:	462b      	mov	r3, r5
 800ab02:	4622      	mov	r2, r4
 800ab04:	f7f5 fb68 	bl	80001d8 <__aeabi_dsub>
 800ab08:	9b02      	ldr	r3, [sp, #8]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ab10:	f6bf af0a 	bge.w	800a928 <__ieee754_rem_pio2+0x80>
 800ab14:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ab18:	f8ca 3004 	str.w	r3, [sl, #4]
 800ab1c:	f8ca 8000 	str.w	r8, [sl]
 800ab20:	f8ca 0008 	str.w	r0, [sl, #8]
 800ab24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab28:	f8ca 300c 	str.w	r3, [sl, #12]
 800ab2c:	f1cb 0b00 	rsb	fp, fp, #0
 800ab30:	e6fa      	b.n	800a928 <__ieee754_rem_pio2+0x80>
 800ab32:	a327      	add	r3, pc, #156	; (adr r3, 800abd0 <__ieee754_rem_pio2+0x328>)
 800ab34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab38:	ec51 0b18 	vmov	r0, r1, d8
 800ab3c:	f7f5 fd04 	bl	8000548 <__aeabi_dmul>
 800ab40:	4604      	mov	r4, r0
 800ab42:	460d      	mov	r5, r1
 800ab44:	4602      	mov	r2, r0
 800ab46:	460b      	mov	r3, r1
 800ab48:	4640      	mov	r0, r8
 800ab4a:	4649      	mov	r1, r9
 800ab4c:	f7f5 fb44 	bl	80001d8 <__aeabi_dsub>
 800ab50:	4602      	mov	r2, r0
 800ab52:	460b      	mov	r3, r1
 800ab54:	4606      	mov	r6, r0
 800ab56:	460f      	mov	r7, r1
 800ab58:	4640      	mov	r0, r8
 800ab5a:	4649      	mov	r1, r9
 800ab5c:	f7f5 fb3c 	bl	80001d8 <__aeabi_dsub>
 800ab60:	4622      	mov	r2, r4
 800ab62:	462b      	mov	r3, r5
 800ab64:	f7f5 fb38 	bl	80001d8 <__aeabi_dsub>
 800ab68:	a31b      	add	r3, pc, #108	; (adr r3, 800abd8 <__ieee754_rem_pio2+0x330>)
 800ab6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab6e:	4604      	mov	r4, r0
 800ab70:	460d      	mov	r5, r1
 800ab72:	ec51 0b18 	vmov	r0, r1, d8
 800ab76:	f7f5 fce7 	bl	8000548 <__aeabi_dmul>
 800ab7a:	4622      	mov	r2, r4
 800ab7c:	462b      	mov	r3, r5
 800ab7e:	f7f5 fb2b 	bl	80001d8 <__aeabi_dsub>
 800ab82:	4604      	mov	r4, r0
 800ab84:	460d      	mov	r5, r1
 800ab86:	e75f      	b.n	800aa48 <__ieee754_rem_pio2+0x1a0>
 800ab88:	4b1b      	ldr	r3, [pc, #108]	; (800abf8 <__ieee754_rem_pio2+0x350>)
 800ab8a:	4598      	cmp	r8, r3
 800ab8c:	dd36      	ble.n	800abfc <__ieee754_rem_pio2+0x354>
 800ab8e:	ee10 2a10 	vmov	r2, s0
 800ab92:	462b      	mov	r3, r5
 800ab94:	4620      	mov	r0, r4
 800ab96:	4629      	mov	r1, r5
 800ab98:	f7f5 fb1e 	bl	80001d8 <__aeabi_dsub>
 800ab9c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aba0:	e9ca 0100 	strd	r0, r1, [sl]
 800aba4:	e694      	b.n	800a8d0 <__ieee754_rem_pio2+0x28>
 800aba6:	bf00      	nop
 800aba8:	54400000 	.word	0x54400000
 800abac:	3ff921fb 	.word	0x3ff921fb
 800abb0:	1a626331 	.word	0x1a626331
 800abb4:	3dd0b461 	.word	0x3dd0b461
 800abb8:	1a600000 	.word	0x1a600000
 800abbc:	3dd0b461 	.word	0x3dd0b461
 800abc0:	2e037073 	.word	0x2e037073
 800abc4:	3ba3198a 	.word	0x3ba3198a
 800abc8:	6dc9c883 	.word	0x6dc9c883
 800abcc:	3fe45f30 	.word	0x3fe45f30
 800abd0:	2e000000 	.word	0x2e000000
 800abd4:	3ba3198a 	.word	0x3ba3198a
 800abd8:	252049c1 	.word	0x252049c1
 800abdc:	397b839a 	.word	0x397b839a
 800abe0:	3fe921fb 	.word	0x3fe921fb
 800abe4:	4002d97b 	.word	0x4002d97b
 800abe8:	3ff921fb 	.word	0x3ff921fb
 800abec:	413921fb 	.word	0x413921fb
 800abf0:	3fe00000 	.word	0x3fe00000
 800abf4:	0800b8d0 	.word	0x0800b8d0
 800abf8:	7fefffff 	.word	0x7fefffff
 800abfc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ac00:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ac04:	ee10 0a10 	vmov	r0, s0
 800ac08:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ac0c:	ee10 6a10 	vmov	r6, s0
 800ac10:	460f      	mov	r7, r1
 800ac12:	f7f5 ff33 	bl	8000a7c <__aeabi_d2iz>
 800ac16:	f7f5 fc2d 	bl	8000474 <__aeabi_i2d>
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	4630      	mov	r0, r6
 800ac20:	4639      	mov	r1, r7
 800ac22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ac26:	f7f5 fad7 	bl	80001d8 <__aeabi_dsub>
 800ac2a:	4b22      	ldr	r3, [pc, #136]	; (800acb4 <__ieee754_rem_pio2+0x40c>)
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	f7f5 fc8b 	bl	8000548 <__aeabi_dmul>
 800ac32:	460f      	mov	r7, r1
 800ac34:	4606      	mov	r6, r0
 800ac36:	f7f5 ff21 	bl	8000a7c <__aeabi_d2iz>
 800ac3a:	f7f5 fc1b 	bl	8000474 <__aeabi_i2d>
 800ac3e:	4602      	mov	r2, r0
 800ac40:	460b      	mov	r3, r1
 800ac42:	4630      	mov	r0, r6
 800ac44:	4639      	mov	r1, r7
 800ac46:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ac4a:	f7f5 fac5 	bl	80001d8 <__aeabi_dsub>
 800ac4e:	4b19      	ldr	r3, [pc, #100]	; (800acb4 <__ieee754_rem_pio2+0x40c>)
 800ac50:	2200      	movs	r2, #0
 800ac52:	f7f5 fc79 	bl	8000548 <__aeabi_dmul>
 800ac56:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ac5a:	ad04      	add	r5, sp, #16
 800ac5c:	f04f 0803 	mov.w	r8, #3
 800ac60:	46a9      	mov	r9, r5
 800ac62:	2600      	movs	r6, #0
 800ac64:	2700      	movs	r7, #0
 800ac66:	4632      	mov	r2, r6
 800ac68:	463b      	mov	r3, r7
 800ac6a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800ac6e:	46c3      	mov	fp, r8
 800ac70:	3d08      	subs	r5, #8
 800ac72:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ac76:	f7f5 fecf 	bl	8000a18 <__aeabi_dcmpeq>
 800ac7a:	2800      	cmp	r0, #0
 800ac7c:	d1f3      	bne.n	800ac66 <__ieee754_rem_pio2+0x3be>
 800ac7e:	4b0e      	ldr	r3, [pc, #56]	; (800acb8 <__ieee754_rem_pio2+0x410>)
 800ac80:	9301      	str	r3, [sp, #4]
 800ac82:	2302      	movs	r3, #2
 800ac84:	9300      	str	r3, [sp, #0]
 800ac86:	4622      	mov	r2, r4
 800ac88:	465b      	mov	r3, fp
 800ac8a:	4651      	mov	r1, sl
 800ac8c:	4648      	mov	r0, r9
 800ac8e:	f000 f8df 	bl	800ae50 <__kernel_rem_pio2>
 800ac92:	9b02      	ldr	r3, [sp, #8]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	4683      	mov	fp, r0
 800ac98:	f6bf ae46 	bge.w	800a928 <__ieee754_rem_pio2+0x80>
 800ac9c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800aca0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800aca4:	f8ca 3004 	str.w	r3, [sl, #4]
 800aca8:	f8da 300c 	ldr.w	r3, [sl, #12]
 800acac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800acb0:	e73a      	b.n	800ab28 <__ieee754_rem_pio2+0x280>
 800acb2:	bf00      	nop
 800acb4:	41700000 	.word	0x41700000
 800acb8:	0800b950 	.word	0x0800b950
 800acbc:	00000000 	.word	0x00000000

0800acc0 <__kernel_cos>:
 800acc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acc4:	ec57 6b10 	vmov	r6, r7, d0
 800acc8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800accc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800acd0:	ed8d 1b00 	vstr	d1, [sp]
 800acd4:	da07      	bge.n	800ace6 <__kernel_cos+0x26>
 800acd6:	ee10 0a10 	vmov	r0, s0
 800acda:	4639      	mov	r1, r7
 800acdc:	f7f5 fece 	bl	8000a7c <__aeabi_d2iz>
 800ace0:	2800      	cmp	r0, #0
 800ace2:	f000 8088 	beq.w	800adf6 <__kernel_cos+0x136>
 800ace6:	4632      	mov	r2, r6
 800ace8:	463b      	mov	r3, r7
 800acea:	4630      	mov	r0, r6
 800acec:	4639      	mov	r1, r7
 800acee:	f7f5 fc2b 	bl	8000548 <__aeabi_dmul>
 800acf2:	4b51      	ldr	r3, [pc, #324]	; (800ae38 <__kernel_cos+0x178>)
 800acf4:	2200      	movs	r2, #0
 800acf6:	4604      	mov	r4, r0
 800acf8:	460d      	mov	r5, r1
 800acfa:	f7f5 fc25 	bl	8000548 <__aeabi_dmul>
 800acfe:	a340      	add	r3, pc, #256	; (adr r3, 800ae00 <__kernel_cos+0x140>)
 800ad00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad04:	4682      	mov	sl, r0
 800ad06:	468b      	mov	fp, r1
 800ad08:	4620      	mov	r0, r4
 800ad0a:	4629      	mov	r1, r5
 800ad0c:	f7f5 fc1c 	bl	8000548 <__aeabi_dmul>
 800ad10:	a33d      	add	r3, pc, #244	; (adr r3, 800ae08 <__kernel_cos+0x148>)
 800ad12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad16:	f7f5 fa61 	bl	80001dc <__adddf3>
 800ad1a:	4622      	mov	r2, r4
 800ad1c:	462b      	mov	r3, r5
 800ad1e:	f7f5 fc13 	bl	8000548 <__aeabi_dmul>
 800ad22:	a33b      	add	r3, pc, #236	; (adr r3, 800ae10 <__kernel_cos+0x150>)
 800ad24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad28:	f7f5 fa56 	bl	80001d8 <__aeabi_dsub>
 800ad2c:	4622      	mov	r2, r4
 800ad2e:	462b      	mov	r3, r5
 800ad30:	f7f5 fc0a 	bl	8000548 <__aeabi_dmul>
 800ad34:	a338      	add	r3, pc, #224	; (adr r3, 800ae18 <__kernel_cos+0x158>)
 800ad36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3a:	f7f5 fa4f 	bl	80001dc <__adddf3>
 800ad3e:	4622      	mov	r2, r4
 800ad40:	462b      	mov	r3, r5
 800ad42:	f7f5 fc01 	bl	8000548 <__aeabi_dmul>
 800ad46:	a336      	add	r3, pc, #216	; (adr r3, 800ae20 <__kernel_cos+0x160>)
 800ad48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad4c:	f7f5 fa44 	bl	80001d8 <__aeabi_dsub>
 800ad50:	4622      	mov	r2, r4
 800ad52:	462b      	mov	r3, r5
 800ad54:	f7f5 fbf8 	bl	8000548 <__aeabi_dmul>
 800ad58:	a333      	add	r3, pc, #204	; (adr r3, 800ae28 <__kernel_cos+0x168>)
 800ad5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad5e:	f7f5 fa3d 	bl	80001dc <__adddf3>
 800ad62:	4622      	mov	r2, r4
 800ad64:	462b      	mov	r3, r5
 800ad66:	f7f5 fbef 	bl	8000548 <__aeabi_dmul>
 800ad6a:	4622      	mov	r2, r4
 800ad6c:	462b      	mov	r3, r5
 800ad6e:	f7f5 fbeb 	bl	8000548 <__aeabi_dmul>
 800ad72:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad76:	4604      	mov	r4, r0
 800ad78:	460d      	mov	r5, r1
 800ad7a:	4630      	mov	r0, r6
 800ad7c:	4639      	mov	r1, r7
 800ad7e:	f7f5 fbe3 	bl	8000548 <__aeabi_dmul>
 800ad82:	460b      	mov	r3, r1
 800ad84:	4602      	mov	r2, r0
 800ad86:	4629      	mov	r1, r5
 800ad88:	4620      	mov	r0, r4
 800ad8a:	f7f5 fa25 	bl	80001d8 <__aeabi_dsub>
 800ad8e:	4b2b      	ldr	r3, [pc, #172]	; (800ae3c <__kernel_cos+0x17c>)
 800ad90:	4598      	cmp	r8, r3
 800ad92:	4606      	mov	r6, r0
 800ad94:	460f      	mov	r7, r1
 800ad96:	dc10      	bgt.n	800adba <__kernel_cos+0xfa>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	460b      	mov	r3, r1
 800ad9c:	4650      	mov	r0, sl
 800ad9e:	4659      	mov	r1, fp
 800ada0:	f7f5 fa1a 	bl	80001d8 <__aeabi_dsub>
 800ada4:	460b      	mov	r3, r1
 800ada6:	4926      	ldr	r1, [pc, #152]	; (800ae40 <__kernel_cos+0x180>)
 800ada8:	4602      	mov	r2, r0
 800adaa:	2000      	movs	r0, #0
 800adac:	f7f5 fa14 	bl	80001d8 <__aeabi_dsub>
 800adb0:	ec41 0b10 	vmov	d0, r0, r1
 800adb4:	b003      	add	sp, #12
 800adb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adba:	4b22      	ldr	r3, [pc, #136]	; (800ae44 <__kernel_cos+0x184>)
 800adbc:	4920      	ldr	r1, [pc, #128]	; (800ae40 <__kernel_cos+0x180>)
 800adbe:	4598      	cmp	r8, r3
 800adc0:	bfcc      	ite	gt
 800adc2:	4d21      	ldrgt	r5, [pc, #132]	; (800ae48 <__kernel_cos+0x188>)
 800adc4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800adc8:	2400      	movs	r4, #0
 800adca:	4622      	mov	r2, r4
 800adcc:	462b      	mov	r3, r5
 800adce:	2000      	movs	r0, #0
 800add0:	f7f5 fa02 	bl	80001d8 <__aeabi_dsub>
 800add4:	4622      	mov	r2, r4
 800add6:	4680      	mov	r8, r0
 800add8:	4689      	mov	r9, r1
 800adda:	462b      	mov	r3, r5
 800addc:	4650      	mov	r0, sl
 800adde:	4659      	mov	r1, fp
 800ade0:	f7f5 f9fa 	bl	80001d8 <__aeabi_dsub>
 800ade4:	4632      	mov	r2, r6
 800ade6:	463b      	mov	r3, r7
 800ade8:	f7f5 f9f6 	bl	80001d8 <__aeabi_dsub>
 800adec:	4602      	mov	r2, r0
 800adee:	460b      	mov	r3, r1
 800adf0:	4640      	mov	r0, r8
 800adf2:	4649      	mov	r1, r9
 800adf4:	e7da      	b.n	800adac <__kernel_cos+0xec>
 800adf6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ae30 <__kernel_cos+0x170>
 800adfa:	e7db      	b.n	800adb4 <__kernel_cos+0xf4>
 800adfc:	f3af 8000 	nop.w
 800ae00:	be8838d4 	.word	0xbe8838d4
 800ae04:	bda8fae9 	.word	0xbda8fae9
 800ae08:	bdb4b1c4 	.word	0xbdb4b1c4
 800ae0c:	3e21ee9e 	.word	0x3e21ee9e
 800ae10:	809c52ad 	.word	0x809c52ad
 800ae14:	3e927e4f 	.word	0x3e927e4f
 800ae18:	19cb1590 	.word	0x19cb1590
 800ae1c:	3efa01a0 	.word	0x3efa01a0
 800ae20:	16c15177 	.word	0x16c15177
 800ae24:	3f56c16c 	.word	0x3f56c16c
 800ae28:	5555554c 	.word	0x5555554c
 800ae2c:	3fa55555 	.word	0x3fa55555
 800ae30:	00000000 	.word	0x00000000
 800ae34:	3ff00000 	.word	0x3ff00000
 800ae38:	3fe00000 	.word	0x3fe00000
 800ae3c:	3fd33332 	.word	0x3fd33332
 800ae40:	3ff00000 	.word	0x3ff00000
 800ae44:	3fe90000 	.word	0x3fe90000
 800ae48:	3fd20000 	.word	0x3fd20000
 800ae4c:	00000000 	.word	0x00000000

0800ae50 <__kernel_rem_pio2>:
 800ae50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae54:	ed2d 8b02 	vpush	{d8}
 800ae58:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ae5c:	f112 0f14 	cmn.w	r2, #20
 800ae60:	9308      	str	r3, [sp, #32]
 800ae62:	9101      	str	r1, [sp, #4]
 800ae64:	4bc6      	ldr	r3, [pc, #792]	; (800b180 <__kernel_rem_pio2+0x330>)
 800ae66:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800ae68:	9009      	str	r0, [sp, #36]	; 0x24
 800ae6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ae6e:	9304      	str	r3, [sp, #16]
 800ae70:	9b08      	ldr	r3, [sp, #32]
 800ae72:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ae76:	bfa8      	it	ge
 800ae78:	1ed4      	subge	r4, r2, #3
 800ae7a:	9306      	str	r3, [sp, #24]
 800ae7c:	bfb2      	itee	lt
 800ae7e:	2400      	movlt	r4, #0
 800ae80:	2318      	movge	r3, #24
 800ae82:	fb94 f4f3 	sdivge	r4, r4, r3
 800ae86:	f06f 0317 	mvn.w	r3, #23
 800ae8a:	fb04 3303 	mla	r3, r4, r3, r3
 800ae8e:	eb03 0a02 	add.w	sl, r3, r2
 800ae92:	9b04      	ldr	r3, [sp, #16]
 800ae94:	9a06      	ldr	r2, [sp, #24]
 800ae96:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800b170 <__kernel_rem_pio2+0x320>
 800ae9a:	eb03 0802 	add.w	r8, r3, r2
 800ae9e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800aea0:	1aa7      	subs	r7, r4, r2
 800aea2:	ae20      	add	r6, sp, #128	; 0x80
 800aea4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800aea8:	2500      	movs	r5, #0
 800aeaa:	4545      	cmp	r5, r8
 800aeac:	dd18      	ble.n	800aee0 <__kernel_rem_pio2+0x90>
 800aeae:	9b08      	ldr	r3, [sp, #32]
 800aeb0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800aeb4:	aa20      	add	r2, sp, #128	; 0x80
 800aeb6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800b170 <__kernel_rem_pio2+0x320>
 800aeba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800aebe:	f1c3 0301 	rsb	r3, r3, #1
 800aec2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800aec6:	9307      	str	r3, [sp, #28]
 800aec8:	9b07      	ldr	r3, [sp, #28]
 800aeca:	9a04      	ldr	r2, [sp, #16]
 800aecc:	4443      	add	r3, r8
 800aece:	429a      	cmp	r2, r3
 800aed0:	db2f      	blt.n	800af32 <__kernel_rem_pio2+0xe2>
 800aed2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800aed6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800aeda:	462f      	mov	r7, r5
 800aedc:	2600      	movs	r6, #0
 800aede:	e01b      	b.n	800af18 <__kernel_rem_pio2+0xc8>
 800aee0:	42ef      	cmn	r7, r5
 800aee2:	d407      	bmi.n	800aef4 <__kernel_rem_pio2+0xa4>
 800aee4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800aee8:	f7f5 fac4 	bl	8000474 <__aeabi_i2d>
 800aeec:	e8e6 0102 	strd	r0, r1, [r6], #8
 800aef0:	3501      	adds	r5, #1
 800aef2:	e7da      	b.n	800aeaa <__kernel_rem_pio2+0x5a>
 800aef4:	ec51 0b18 	vmov	r0, r1, d8
 800aef8:	e7f8      	b.n	800aeec <__kernel_rem_pio2+0x9c>
 800aefa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aefe:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800af02:	f7f5 fb21 	bl	8000548 <__aeabi_dmul>
 800af06:	4602      	mov	r2, r0
 800af08:	460b      	mov	r3, r1
 800af0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af0e:	f7f5 f965 	bl	80001dc <__adddf3>
 800af12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af16:	3601      	adds	r6, #1
 800af18:	9b06      	ldr	r3, [sp, #24]
 800af1a:	429e      	cmp	r6, r3
 800af1c:	f1a7 0708 	sub.w	r7, r7, #8
 800af20:	ddeb      	ble.n	800aefa <__kernel_rem_pio2+0xaa>
 800af22:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af26:	3508      	adds	r5, #8
 800af28:	ecab 7b02 	vstmia	fp!, {d7}
 800af2c:	f108 0801 	add.w	r8, r8, #1
 800af30:	e7ca      	b.n	800aec8 <__kernel_rem_pio2+0x78>
 800af32:	9b04      	ldr	r3, [sp, #16]
 800af34:	aa0c      	add	r2, sp, #48	; 0x30
 800af36:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800af3a:	930b      	str	r3, [sp, #44]	; 0x2c
 800af3c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800af3e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800af42:	9c04      	ldr	r4, [sp, #16]
 800af44:	930a      	str	r3, [sp, #40]	; 0x28
 800af46:	ab98      	add	r3, sp, #608	; 0x260
 800af48:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800af4c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800af50:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800af54:	f8cd b008 	str.w	fp, [sp, #8]
 800af58:	4625      	mov	r5, r4
 800af5a:	2d00      	cmp	r5, #0
 800af5c:	dc78      	bgt.n	800b050 <__kernel_rem_pio2+0x200>
 800af5e:	ec47 6b10 	vmov	d0, r6, r7
 800af62:	4650      	mov	r0, sl
 800af64:	f000 fbfc 	bl	800b760 <scalbn>
 800af68:	ec57 6b10 	vmov	r6, r7, d0
 800af6c:	2200      	movs	r2, #0
 800af6e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800af72:	ee10 0a10 	vmov	r0, s0
 800af76:	4639      	mov	r1, r7
 800af78:	f7f5 fae6 	bl	8000548 <__aeabi_dmul>
 800af7c:	ec41 0b10 	vmov	d0, r0, r1
 800af80:	f000 fb6e 	bl	800b660 <floor>
 800af84:	4b7f      	ldr	r3, [pc, #508]	; (800b184 <__kernel_rem_pio2+0x334>)
 800af86:	ec51 0b10 	vmov	r0, r1, d0
 800af8a:	2200      	movs	r2, #0
 800af8c:	f7f5 fadc 	bl	8000548 <__aeabi_dmul>
 800af90:	4602      	mov	r2, r0
 800af92:	460b      	mov	r3, r1
 800af94:	4630      	mov	r0, r6
 800af96:	4639      	mov	r1, r7
 800af98:	f7f5 f91e 	bl	80001d8 <__aeabi_dsub>
 800af9c:	460f      	mov	r7, r1
 800af9e:	4606      	mov	r6, r0
 800afa0:	f7f5 fd6c 	bl	8000a7c <__aeabi_d2iz>
 800afa4:	9007      	str	r0, [sp, #28]
 800afa6:	f7f5 fa65 	bl	8000474 <__aeabi_i2d>
 800afaa:	4602      	mov	r2, r0
 800afac:	460b      	mov	r3, r1
 800afae:	4630      	mov	r0, r6
 800afb0:	4639      	mov	r1, r7
 800afb2:	f7f5 f911 	bl	80001d8 <__aeabi_dsub>
 800afb6:	f1ba 0f00 	cmp.w	sl, #0
 800afba:	4606      	mov	r6, r0
 800afbc:	460f      	mov	r7, r1
 800afbe:	dd70      	ble.n	800b0a2 <__kernel_rem_pio2+0x252>
 800afc0:	1e62      	subs	r2, r4, #1
 800afc2:	ab0c      	add	r3, sp, #48	; 0x30
 800afc4:	9d07      	ldr	r5, [sp, #28]
 800afc6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800afca:	f1ca 0118 	rsb	r1, sl, #24
 800afce:	fa40 f301 	asr.w	r3, r0, r1
 800afd2:	441d      	add	r5, r3
 800afd4:	408b      	lsls	r3, r1
 800afd6:	1ac0      	subs	r0, r0, r3
 800afd8:	ab0c      	add	r3, sp, #48	; 0x30
 800afda:	9507      	str	r5, [sp, #28]
 800afdc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800afe0:	f1ca 0317 	rsb	r3, sl, #23
 800afe4:	fa40 f303 	asr.w	r3, r0, r3
 800afe8:	9302      	str	r3, [sp, #8]
 800afea:	9b02      	ldr	r3, [sp, #8]
 800afec:	2b00      	cmp	r3, #0
 800afee:	dd66      	ble.n	800b0be <__kernel_rem_pio2+0x26e>
 800aff0:	9b07      	ldr	r3, [sp, #28]
 800aff2:	2200      	movs	r2, #0
 800aff4:	3301      	adds	r3, #1
 800aff6:	9307      	str	r3, [sp, #28]
 800aff8:	4615      	mov	r5, r2
 800affa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800affe:	4294      	cmp	r4, r2
 800b000:	f300 8099 	bgt.w	800b136 <__kernel_rem_pio2+0x2e6>
 800b004:	f1ba 0f00 	cmp.w	sl, #0
 800b008:	dd07      	ble.n	800b01a <__kernel_rem_pio2+0x1ca>
 800b00a:	f1ba 0f01 	cmp.w	sl, #1
 800b00e:	f000 80a5 	beq.w	800b15c <__kernel_rem_pio2+0x30c>
 800b012:	f1ba 0f02 	cmp.w	sl, #2
 800b016:	f000 80c1 	beq.w	800b19c <__kernel_rem_pio2+0x34c>
 800b01a:	9b02      	ldr	r3, [sp, #8]
 800b01c:	2b02      	cmp	r3, #2
 800b01e:	d14e      	bne.n	800b0be <__kernel_rem_pio2+0x26e>
 800b020:	4632      	mov	r2, r6
 800b022:	463b      	mov	r3, r7
 800b024:	4958      	ldr	r1, [pc, #352]	; (800b188 <__kernel_rem_pio2+0x338>)
 800b026:	2000      	movs	r0, #0
 800b028:	f7f5 f8d6 	bl	80001d8 <__aeabi_dsub>
 800b02c:	4606      	mov	r6, r0
 800b02e:	460f      	mov	r7, r1
 800b030:	2d00      	cmp	r5, #0
 800b032:	d044      	beq.n	800b0be <__kernel_rem_pio2+0x26e>
 800b034:	4650      	mov	r0, sl
 800b036:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800b178 <__kernel_rem_pio2+0x328>
 800b03a:	f000 fb91 	bl	800b760 <scalbn>
 800b03e:	4630      	mov	r0, r6
 800b040:	4639      	mov	r1, r7
 800b042:	ec53 2b10 	vmov	r2, r3, d0
 800b046:	f7f5 f8c7 	bl	80001d8 <__aeabi_dsub>
 800b04a:	4606      	mov	r6, r0
 800b04c:	460f      	mov	r7, r1
 800b04e:	e036      	b.n	800b0be <__kernel_rem_pio2+0x26e>
 800b050:	4b4e      	ldr	r3, [pc, #312]	; (800b18c <__kernel_rem_pio2+0x33c>)
 800b052:	2200      	movs	r2, #0
 800b054:	4630      	mov	r0, r6
 800b056:	4639      	mov	r1, r7
 800b058:	f7f5 fa76 	bl	8000548 <__aeabi_dmul>
 800b05c:	f7f5 fd0e 	bl	8000a7c <__aeabi_d2iz>
 800b060:	f7f5 fa08 	bl	8000474 <__aeabi_i2d>
 800b064:	4b4a      	ldr	r3, [pc, #296]	; (800b190 <__kernel_rem_pio2+0x340>)
 800b066:	2200      	movs	r2, #0
 800b068:	4680      	mov	r8, r0
 800b06a:	4689      	mov	r9, r1
 800b06c:	f7f5 fa6c 	bl	8000548 <__aeabi_dmul>
 800b070:	4602      	mov	r2, r0
 800b072:	460b      	mov	r3, r1
 800b074:	4630      	mov	r0, r6
 800b076:	4639      	mov	r1, r7
 800b078:	f7f5 f8ae 	bl	80001d8 <__aeabi_dsub>
 800b07c:	f7f5 fcfe 	bl	8000a7c <__aeabi_d2iz>
 800b080:	9b02      	ldr	r3, [sp, #8]
 800b082:	f843 0b04 	str.w	r0, [r3], #4
 800b086:	3d01      	subs	r5, #1
 800b088:	9302      	str	r3, [sp, #8]
 800b08a:	ab70      	add	r3, sp, #448	; 0x1c0
 800b08c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b094:	4640      	mov	r0, r8
 800b096:	4649      	mov	r1, r9
 800b098:	f7f5 f8a0 	bl	80001dc <__adddf3>
 800b09c:	4606      	mov	r6, r0
 800b09e:	460f      	mov	r7, r1
 800b0a0:	e75b      	b.n	800af5a <__kernel_rem_pio2+0x10a>
 800b0a2:	d105      	bne.n	800b0b0 <__kernel_rem_pio2+0x260>
 800b0a4:	1e63      	subs	r3, r4, #1
 800b0a6:	aa0c      	add	r2, sp, #48	; 0x30
 800b0a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b0ac:	15c3      	asrs	r3, r0, #23
 800b0ae:	e79b      	b.n	800afe8 <__kernel_rem_pio2+0x198>
 800b0b0:	4b38      	ldr	r3, [pc, #224]	; (800b194 <__kernel_rem_pio2+0x344>)
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f7f5 fcce 	bl	8000a54 <__aeabi_dcmpge>
 800b0b8:	2800      	cmp	r0, #0
 800b0ba:	d139      	bne.n	800b130 <__kernel_rem_pio2+0x2e0>
 800b0bc:	9002      	str	r0, [sp, #8]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	4630      	mov	r0, r6
 800b0c4:	4639      	mov	r1, r7
 800b0c6:	f7f5 fca7 	bl	8000a18 <__aeabi_dcmpeq>
 800b0ca:	2800      	cmp	r0, #0
 800b0cc:	f000 80b4 	beq.w	800b238 <__kernel_rem_pio2+0x3e8>
 800b0d0:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800b0d4:	465b      	mov	r3, fp
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	9904      	ldr	r1, [sp, #16]
 800b0da:	428b      	cmp	r3, r1
 800b0dc:	da65      	bge.n	800b1aa <__kernel_rem_pio2+0x35a>
 800b0de:	2a00      	cmp	r2, #0
 800b0e0:	d07b      	beq.n	800b1da <__kernel_rem_pio2+0x38a>
 800b0e2:	ab0c      	add	r3, sp, #48	; 0x30
 800b0e4:	f1aa 0a18 	sub.w	sl, sl, #24
 800b0e8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	f000 80a0 	beq.w	800b232 <__kernel_rem_pio2+0x3e2>
 800b0f2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800b178 <__kernel_rem_pio2+0x328>
 800b0f6:	4650      	mov	r0, sl
 800b0f8:	f000 fb32 	bl	800b760 <scalbn>
 800b0fc:	4f23      	ldr	r7, [pc, #140]	; (800b18c <__kernel_rem_pio2+0x33c>)
 800b0fe:	ec55 4b10 	vmov	r4, r5, d0
 800b102:	46d8      	mov	r8, fp
 800b104:	2600      	movs	r6, #0
 800b106:	f1b8 0f00 	cmp.w	r8, #0
 800b10a:	f280 80cf 	bge.w	800b2ac <__kernel_rem_pio2+0x45c>
 800b10e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800b170 <__kernel_rem_pio2+0x320>
 800b112:	465f      	mov	r7, fp
 800b114:	f04f 0800 	mov.w	r8, #0
 800b118:	2f00      	cmp	r7, #0
 800b11a:	f2c0 80fd 	blt.w	800b318 <__kernel_rem_pio2+0x4c8>
 800b11e:	ab70      	add	r3, sp, #448	; 0x1c0
 800b120:	f8df a074 	ldr.w	sl, [pc, #116]	; 800b198 <__kernel_rem_pio2+0x348>
 800b124:	ec55 4b18 	vmov	r4, r5, d8
 800b128:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800b12c:	2600      	movs	r6, #0
 800b12e:	e0e5      	b.n	800b2fc <__kernel_rem_pio2+0x4ac>
 800b130:	2302      	movs	r3, #2
 800b132:	9302      	str	r3, [sp, #8]
 800b134:	e75c      	b.n	800aff0 <__kernel_rem_pio2+0x1a0>
 800b136:	f8db 3000 	ldr.w	r3, [fp]
 800b13a:	b955      	cbnz	r5, 800b152 <__kernel_rem_pio2+0x302>
 800b13c:	b123      	cbz	r3, 800b148 <__kernel_rem_pio2+0x2f8>
 800b13e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b142:	f8cb 3000 	str.w	r3, [fp]
 800b146:	2301      	movs	r3, #1
 800b148:	3201      	adds	r2, #1
 800b14a:	f10b 0b04 	add.w	fp, fp, #4
 800b14e:	461d      	mov	r5, r3
 800b150:	e755      	b.n	800affe <__kernel_rem_pio2+0x1ae>
 800b152:	1acb      	subs	r3, r1, r3
 800b154:	f8cb 3000 	str.w	r3, [fp]
 800b158:	462b      	mov	r3, r5
 800b15a:	e7f5      	b.n	800b148 <__kernel_rem_pio2+0x2f8>
 800b15c:	1e62      	subs	r2, r4, #1
 800b15e:	ab0c      	add	r3, sp, #48	; 0x30
 800b160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b164:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b168:	a90c      	add	r1, sp, #48	; 0x30
 800b16a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b16e:	e754      	b.n	800b01a <__kernel_rem_pio2+0x1ca>
	...
 800b17c:	3ff00000 	.word	0x3ff00000
 800b180:	0800ba98 	.word	0x0800ba98
 800b184:	40200000 	.word	0x40200000
 800b188:	3ff00000 	.word	0x3ff00000
 800b18c:	3e700000 	.word	0x3e700000
 800b190:	41700000 	.word	0x41700000
 800b194:	3fe00000 	.word	0x3fe00000
 800b198:	0800ba58 	.word	0x0800ba58
 800b19c:	1e62      	subs	r2, r4, #1
 800b19e:	ab0c      	add	r3, sp, #48	; 0x30
 800b1a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1a4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b1a8:	e7de      	b.n	800b168 <__kernel_rem_pio2+0x318>
 800b1aa:	a90c      	add	r1, sp, #48	; 0x30
 800b1ac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b1b0:	3b01      	subs	r3, #1
 800b1b2:	430a      	orrs	r2, r1
 800b1b4:	e790      	b.n	800b0d8 <__kernel_rem_pio2+0x288>
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b1bc:	2900      	cmp	r1, #0
 800b1be:	d0fa      	beq.n	800b1b6 <__kernel_rem_pio2+0x366>
 800b1c0:	9a08      	ldr	r2, [sp, #32]
 800b1c2:	18e3      	adds	r3, r4, r3
 800b1c4:	18a6      	adds	r6, r4, r2
 800b1c6:	aa20      	add	r2, sp, #128	; 0x80
 800b1c8:	1c65      	adds	r5, r4, #1
 800b1ca:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800b1ce:	9302      	str	r3, [sp, #8]
 800b1d0:	9b02      	ldr	r3, [sp, #8]
 800b1d2:	42ab      	cmp	r3, r5
 800b1d4:	da04      	bge.n	800b1e0 <__kernel_rem_pio2+0x390>
 800b1d6:	461c      	mov	r4, r3
 800b1d8:	e6b5      	b.n	800af46 <__kernel_rem_pio2+0xf6>
 800b1da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b1dc:	2301      	movs	r3, #1
 800b1de:	e7eb      	b.n	800b1b8 <__kernel_rem_pio2+0x368>
 800b1e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b1e6:	f7f5 f945 	bl	8000474 <__aeabi_i2d>
 800b1ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b1ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1f0:	46b3      	mov	fp, r6
 800b1f2:	461c      	mov	r4, r3
 800b1f4:	2700      	movs	r7, #0
 800b1f6:	f04f 0800 	mov.w	r8, #0
 800b1fa:	f04f 0900 	mov.w	r9, #0
 800b1fe:	9b06      	ldr	r3, [sp, #24]
 800b200:	429f      	cmp	r7, r3
 800b202:	dd06      	ble.n	800b212 <__kernel_rem_pio2+0x3c2>
 800b204:	ab70      	add	r3, sp, #448	; 0x1c0
 800b206:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b20a:	e9c3 8900 	strd	r8, r9, [r3]
 800b20e:	3501      	adds	r5, #1
 800b210:	e7de      	b.n	800b1d0 <__kernel_rem_pio2+0x380>
 800b212:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b216:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b21a:	f7f5 f995 	bl	8000548 <__aeabi_dmul>
 800b21e:	4602      	mov	r2, r0
 800b220:	460b      	mov	r3, r1
 800b222:	4640      	mov	r0, r8
 800b224:	4649      	mov	r1, r9
 800b226:	f7f4 ffd9 	bl	80001dc <__adddf3>
 800b22a:	3701      	adds	r7, #1
 800b22c:	4680      	mov	r8, r0
 800b22e:	4689      	mov	r9, r1
 800b230:	e7e5      	b.n	800b1fe <__kernel_rem_pio2+0x3ae>
 800b232:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b236:	e754      	b.n	800b0e2 <__kernel_rem_pio2+0x292>
 800b238:	ec47 6b10 	vmov	d0, r6, r7
 800b23c:	f1ca 0000 	rsb	r0, sl, #0
 800b240:	f000 fa8e 	bl	800b760 <scalbn>
 800b244:	ec57 6b10 	vmov	r6, r7, d0
 800b248:	4b9f      	ldr	r3, [pc, #636]	; (800b4c8 <__kernel_rem_pio2+0x678>)
 800b24a:	ee10 0a10 	vmov	r0, s0
 800b24e:	2200      	movs	r2, #0
 800b250:	4639      	mov	r1, r7
 800b252:	f7f5 fbff 	bl	8000a54 <__aeabi_dcmpge>
 800b256:	b300      	cbz	r0, 800b29a <__kernel_rem_pio2+0x44a>
 800b258:	4b9c      	ldr	r3, [pc, #624]	; (800b4cc <__kernel_rem_pio2+0x67c>)
 800b25a:	2200      	movs	r2, #0
 800b25c:	4630      	mov	r0, r6
 800b25e:	4639      	mov	r1, r7
 800b260:	f7f5 f972 	bl	8000548 <__aeabi_dmul>
 800b264:	f7f5 fc0a 	bl	8000a7c <__aeabi_d2iz>
 800b268:	4605      	mov	r5, r0
 800b26a:	f7f5 f903 	bl	8000474 <__aeabi_i2d>
 800b26e:	4b96      	ldr	r3, [pc, #600]	; (800b4c8 <__kernel_rem_pio2+0x678>)
 800b270:	2200      	movs	r2, #0
 800b272:	f7f5 f969 	bl	8000548 <__aeabi_dmul>
 800b276:	460b      	mov	r3, r1
 800b278:	4602      	mov	r2, r0
 800b27a:	4639      	mov	r1, r7
 800b27c:	4630      	mov	r0, r6
 800b27e:	f7f4 ffab 	bl	80001d8 <__aeabi_dsub>
 800b282:	f7f5 fbfb 	bl	8000a7c <__aeabi_d2iz>
 800b286:	f104 0b01 	add.w	fp, r4, #1
 800b28a:	ab0c      	add	r3, sp, #48	; 0x30
 800b28c:	f10a 0a18 	add.w	sl, sl, #24
 800b290:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b294:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800b298:	e72b      	b.n	800b0f2 <__kernel_rem_pio2+0x2a2>
 800b29a:	4630      	mov	r0, r6
 800b29c:	4639      	mov	r1, r7
 800b29e:	f7f5 fbed 	bl	8000a7c <__aeabi_d2iz>
 800b2a2:	ab0c      	add	r3, sp, #48	; 0x30
 800b2a4:	46a3      	mov	fp, r4
 800b2a6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b2aa:	e722      	b.n	800b0f2 <__kernel_rem_pio2+0x2a2>
 800b2ac:	ab70      	add	r3, sp, #448	; 0x1c0
 800b2ae:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800b2b2:	ab0c      	add	r3, sp, #48	; 0x30
 800b2b4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b2b8:	f7f5 f8dc 	bl	8000474 <__aeabi_i2d>
 800b2bc:	4622      	mov	r2, r4
 800b2be:	462b      	mov	r3, r5
 800b2c0:	f7f5 f942 	bl	8000548 <__aeabi_dmul>
 800b2c4:	4632      	mov	r2, r6
 800b2c6:	e9c9 0100 	strd	r0, r1, [r9]
 800b2ca:	463b      	mov	r3, r7
 800b2cc:	4620      	mov	r0, r4
 800b2ce:	4629      	mov	r1, r5
 800b2d0:	f7f5 f93a 	bl	8000548 <__aeabi_dmul>
 800b2d4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b2d8:	4604      	mov	r4, r0
 800b2da:	460d      	mov	r5, r1
 800b2dc:	e713      	b.n	800b106 <__kernel_rem_pio2+0x2b6>
 800b2de:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b2e2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b2e6:	f7f5 f92f 	bl	8000548 <__aeabi_dmul>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	4629      	mov	r1, r5
 800b2f2:	f7f4 ff73 	bl	80001dc <__adddf3>
 800b2f6:	3601      	adds	r6, #1
 800b2f8:	4604      	mov	r4, r0
 800b2fa:	460d      	mov	r5, r1
 800b2fc:	9b04      	ldr	r3, [sp, #16]
 800b2fe:	429e      	cmp	r6, r3
 800b300:	dc01      	bgt.n	800b306 <__kernel_rem_pio2+0x4b6>
 800b302:	45b0      	cmp	r8, r6
 800b304:	daeb      	bge.n	800b2de <__kernel_rem_pio2+0x48e>
 800b306:	ab48      	add	r3, sp, #288	; 0x120
 800b308:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b30c:	e9c3 4500 	strd	r4, r5, [r3]
 800b310:	3f01      	subs	r7, #1
 800b312:	f108 0801 	add.w	r8, r8, #1
 800b316:	e6ff      	b.n	800b118 <__kernel_rem_pio2+0x2c8>
 800b318:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b31a:	2b02      	cmp	r3, #2
 800b31c:	dc0b      	bgt.n	800b336 <__kernel_rem_pio2+0x4e6>
 800b31e:	2b00      	cmp	r3, #0
 800b320:	dc6e      	bgt.n	800b400 <__kernel_rem_pio2+0x5b0>
 800b322:	d045      	beq.n	800b3b0 <__kernel_rem_pio2+0x560>
 800b324:	9b07      	ldr	r3, [sp, #28]
 800b326:	f003 0007 	and.w	r0, r3, #7
 800b32a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b32e:	ecbd 8b02 	vpop	{d8}
 800b332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b336:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b338:	2b03      	cmp	r3, #3
 800b33a:	d1f3      	bne.n	800b324 <__kernel_rem_pio2+0x4d4>
 800b33c:	ab48      	add	r3, sp, #288	; 0x120
 800b33e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800b342:	46d0      	mov	r8, sl
 800b344:	46d9      	mov	r9, fp
 800b346:	f1b9 0f00 	cmp.w	r9, #0
 800b34a:	f1a8 0808 	sub.w	r8, r8, #8
 800b34e:	dc64      	bgt.n	800b41a <__kernel_rem_pio2+0x5ca>
 800b350:	465c      	mov	r4, fp
 800b352:	2c01      	cmp	r4, #1
 800b354:	f1aa 0a08 	sub.w	sl, sl, #8
 800b358:	dc7e      	bgt.n	800b458 <__kernel_rem_pio2+0x608>
 800b35a:	2000      	movs	r0, #0
 800b35c:	2100      	movs	r1, #0
 800b35e:	f1bb 0f01 	cmp.w	fp, #1
 800b362:	f300 8097 	bgt.w	800b494 <__kernel_rem_pio2+0x644>
 800b366:	9b02      	ldr	r3, [sp, #8]
 800b368:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800b36c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800b370:	2b00      	cmp	r3, #0
 800b372:	f040 8099 	bne.w	800b4a8 <__kernel_rem_pio2+0x658>
 800b376:	9b01      	ldr	r3, [sp, #4]
 800b378:	e9c3 5600 	strd	r5, r6, [r3]
 800b37c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b380:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b384:	e7ce      	b.n	800b324 <__kernel_rem_pio2+0x4d4>
 800b386:	ab48      	add	r3, sp, #288	; 0x120
 800b388:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b390:	f7f4 ff24 	bl	80001dc <__adddf3>
 800b394:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b398:	f1bb 0f00 	cmp.w	fp, #0
 800b39c:	daf3      	bge.n	800b386 <__kernel_rem_pio2+0x536>
 800b39e:	9b02      	ldr	r3, [sp, #8]
 800b3a0:	b113      	cbz	r3, 800b3a8 <__kernel_rem_pio2+0x558>
 800b3a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	9b01      	ldr	r3, [sp, #4]
 800b3aa:	e9c3 0100 	strd	r0, r1, [r3]
 800b3ae:	e7b9      	b.n	800b324 <__kernel_rem_pio2+0x4d4>
 800b3b0:	2000      	movs	r0, #0
 800b3b2:	2100      	movs	r1, #0
 800b3b4:	e7f0      	b.n	800b398 <__kernel_rem_pio2+0x548>
 800b3b6:	ab48      	add	r3, sp, #288	; 0x120
 800b3b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c0:	f7f4 ff0c 	bl	80001dc <__adddf3>
 800b3c4:	3c01      	subs	r4, #1
 800b3c6:	2c00      	cmp	r4, #0
 800b3c8:	daf5      	bge.n	800b3b6 <__kernel_rem_pio2+0x566>
 800b3ca:	9b02      	ldr	r3, [sp, #8]
 800b3cc:	b1e3      	cbz	r3, 800b408 <__kernel_rem_pio2+0x5b8>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b3d4:	9c01      	ldr	r4, [sp, #4]
 800b3d6:	e9c4 2300 	strd	r2, r3, [r4]
 800b3da:	4602      	mov	r2, r0
 800b3dc:	460b      	mov	r3, r1
 800b3de:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800b3e2:	f7f4 fef9 	bl	80001d8 <__aeabi_dsub>
 800b3e6:	ad4a      	add	r5, sp, #296	; 0x128
 800b3e8:	2401      	movs	r4, #1
 800b3ea:	45a3      	cmp	fp, r4
 800b3ec:	da0f      	bge.n	800b40e <__kernel_rem_pio2+0x5be>
 800b3ee:	9b02      	ldr	r3, [sp, #8]
 800b3f0:	b113      	cbz	r3, 800b3f8 <__kernel_rem_pio2+0x5a8>
 800b3f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b3f6:	4619      	mov	r1, r3
 800b3f8:	9b01      	ldr	r3, [sp, #4]
 800b3fa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b3fe:	e791      	b.n	800b324 <__kernel_rem_pio2+0x4d4>
 800b400:	465c      	mov	r4, fp
 800b402:	2000      	movs	r0, #0
 800b404:	2100      	movs	r1, #0
 800b406:	e7de      	b.n	800b3c6 <__kernel_rem_pio2+0x576>
 800b408:	4602      	mov	r2, r0
 800b40a:	460b      	mov	r3, r1
 800b40c:	e7e2      	b.n	800b3d4 <__kernel_rem_pio2+0x584>
 800b40e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800b412:	f7f4 fee3 	bl	80001dc <__adddf3>
 800b416:	3401      	adds	r4, #1
 800b418:	e7e7      	b.n	800b3ea <__kernel_rem_pio2+0x59a>
 800b41a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800b41e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800b422:	4620      	mov	r0, r4
 800b424:	4632      	mov	r2, r6
 800b426:	463b      	mov	r3, r7
 800b428:	4629      	mov	r1, r5
 800b42a:	f7f4 fed7 	bl	80001dc <__adddf3>
 800b42e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b432:	4602      	mov	r2, r0
 800b434:	460b      	mov	r3, r1
 800b436:	4620      	mov	r0, r4
 800b438:	4629      	mov	r1, r5
 800b43a:	f7f4 fecd 	bl	80001d8 <__aeabi_dsub>
 800b43e:	4632      	mov	r2, r6
 800b440:	463b      	mov	r3, r7
 800b442:	f7f4 fecb 	bl	80001dc <__adddf3>
 800b446:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b44a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800b44e:	ed88 7b00 	vstr	d7, [r8]
 800b452:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b456:	e776      	b.n	800b346 <__kernel_rem_pio2+0x4f6>
 800b458:	e9da 8900 	ldrd	r8, r9, [sl]
 800b45c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b460:	4640      	mov	r0, r8
 800b462:	4632      	mov	r2, r6
 800b464:	463b      	mov	r3, r7
 800b466:	4649      	mov	r1, r9
 800b468:	f7f4 feb8 	bl	80001dc <__adddf3>
 800b46c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b470:	4602      	mov	r2, r0
 800b472:	460b      	mov	r3, r1
 800b474:	4640      	mov	r0, r8
 800b476:	4649      	mov	r1, r9
 800b478:	f7f4 feae 	bl	80001d8 <__aeabi_dsub>
 800b47c:	4632      	mov	r2, r6
 800b47e:	463b      	mov	r3, r7
 800b480:	f7f4 feac 	bl	80001dc <__adddf3>
 800b484:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b488:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b48c:	ed8a 7b00 	vstr	d7, [sl]
 800b490:	3c01      	subs	r4, #1
 800b492:	e75e      	b.n	800b352 <__kernel_rem_pio2+0x502>
 800b494:	ab48      	add	r3, sp, #288	; 0x120
 800b496:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49e:	f7f4 fe9d 	bl	80001dc <__adddf3>
 800b4a2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b4a6:	e75a      	b.n	800b35e <__kernel_rem_pio2+0x50e>
 800b4a8:	9b01      	ldr	r3, [sp, #4]
 800b4aa:	9a01      	ldr	r2, [sp, #4]
 800b4ac:	601d      	str	r5, [r3, #0]
 800b4ae:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b4b2:	605c      	str	r4, [r3, #4]
 800b4b4:	609f      	str	r7, [r3, #8]
 800b4b6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b4ba:	60d3      	str	r3, [r2, #12]
 800b4bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b4c0:	6110      	str	r0, [r2, #16]
 800b4c2:	6153      	str	r3, [r2, #20]
 800b4c4:	e72e      	b.n	800b324 <__kernel_rem_pio2+0x4d4>
 800b4c6:	bf00      	nop
 800b4c8:	41700000 	.word	0x41700000
 800b4cc:	3e700000 	.word	0x3e700000

0800b4d0 <__kernel_sin>:
 800b4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4d4:	ed2d 8b04 	vpush	{d8-d9}
 800b4d8:	eeb0 8a41 	vmov.f32	s16, s2
 800b4dc:	eef0 8a61 	vmov.f32	s17, s3
 800b4e0:	ec55 4b10 	vmov	r4, r5, d0
 800b4e4:	b083      	sub	sp, #12
 800b4e6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b4ea:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b4ee:	9001      	str	r0, [sp, #4]
 800b4f0:	da06      	bge.n	800b500 <__kernel_sin+0x30>
 800b4f2:	ee10 0a10 	vmov	r0, s0
 800b4f6:	4629      	mov	r1, r5
 800b4f8:	f7f5 fac0 	bl	8000a7c <__aeabi_d2iz>
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	d051      	beq.n	800b5a4 <__kernel_sin+0xd4>
 800b500:	4622      	mov	r2, r4
 800b502:	462b      	mov	r3, r5
 800b504:	4620      	mov	r0, r4
 800b506:	4629      	mov	r1, r5
 800b508:	f7f5 f81e 	bl	8000548 <__aeabi_dmul>
 800b50c:	4682      	mov	sl, r0
 800b50e:	468b      	mov	fp, r1
 800b510:	4602      	mov	r2, r0
 800b512:	460b      	mov	r3, r1
 800b514:	4620      	mov	r0, r4
 800b516:	4629      	mov	r1, r5
 800b518:	f7f5 f816 	bl	8000548 <__aeabi_dmul>
 800b51c:	a341      	add	r3, pc, #260	; (adr r3, 800b624 <__kernel_sin+0x154>)
 800b51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b522:	4680      	mov	r8, r0
 800b524:	4689      	mov	r9, r1
 800b526:	4650      	mov	r0, sl
 800b528:	4659      	mov	r1, fp
 800b52a:	f7f5 f80d 	bl	8000548 <__aeabi_dmul>
 800b52e:	a33f      	add	r3, pc, #252	; (adr r3, 800b62c <__kernel_sin+0x15c>)
 800b530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b534:	f7f4 fe50 	bl	80001d8 <__aeabi_dsub>
 800b538:	4652      	mov	r2, sl
 800b53a:	465b      	mov	r3, fp
 800b53c:	f7f5 f804 	bl	8000548 <__aeabi_dmul>
 800b540:	a33c      	add	r3, pc, #240	; (adr r3, 800b634 <__kernel_sin+0x164>)
 800b542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b546:	f7f4 fe49 	bl	80001dc <__adddf3>
 800b54a:	4652      	mov	r2, sl
 800b54c:	465b      	mov	r3, fp
 800b54e:	f7f4 fffb 	bl	8000548 <__aeabi_dmul>
 800b552:	a33a      	add	r3, pc, #232	; (adr r3, 800b63c <__kernel_sin+0x16c>)
 800b554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b558:	f7f4 fe3e 	bl	80001d8 <__aeabi_dsub>
 800b55c:	4652      	mov	r2, sl
 800b55e:	465b      	mov	r3, fp
 800b560:	f7f4 fff2 	bl	8000548 <__aeabi_dmul>
 800b564:	a337      	add	r3, pc, #220	; (adr r3, 800b644 <__kernel_sin+0x174>)
 800b566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56a:	f7f4 fe37 	bl	80001dc <__adddf3>
 800b56e:	9b01      	ldr	r3, [sp, #4]
 800b570:	4606      	mov	r6, r0
 800b572:	460f      	mov	r7, r1
 800b574:	b9eb      	cbnz	r3, 800b5b2 <__kernel_sin+0xe2>
 800b576:	4602      	mov	r2, r0
 800b578:	460b      	mov	r3, r1
 800b57a:	4650      	mov	r0, sl
 800b57c:	4659      	mov	r1, fp
 800b57e:	f7f4 ffe3 	bl	8000548 <__aeabi_dmul>
 800b582:	a325      	add	r3, pc, #148	; (adr r3, 800b618 <__kernel_sin+0x148>)
 800b584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b588:	f7f4 fe26 	bl	80001d8 <__aeabi_dsub>
 800b58c:	4642      	mov	r2, r8
 800b58e:	464b      	mov	r3, r9
 800b590:	f7f4 ffda 	bl	8000548 <__aeabi_dmul>
 800b594:	4602      	mov	r2, r0
 800b596:	460b      	mov	r3, r1
 800b598:	4620      	mov	r0, r4
 800b59a:	4629      	mov	r1, r5
 800b59c:	f7f4 fe1e 	bl	80001dc <__adddf3>
 800b5a0:	4604      	mov	r4, r0
 800b5a2:	460d      	mov	r5, r1
 800b5a4:	ec45 4b10 	vmov	d0, r4, r5
 800b5a8:	b003      	add	sp, #12
 800b5aa:	ecbd 8b04 	vpop	{d8-d9}
 800b5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5b2:	4b1b      	ldr	r3, [pc, #108]	; (800b620 <__kernel_sin+0x150>)
 800b5b4:	ec51 0b18 	vmov	r0, r1, d8
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	f7f4 ffc5 	bl	8000548 <__aeabi_dmul>
 800b5be:	4632      	mov	r2, r6
 800b5c0:	ec41 0b19 	vmov	d9, r0, r1
 800b5c4:	463b      	mov	r3, r7
 800b5c6:	4640      	mov	r0, r8
 800b5c8:	4649      	mov	r1, r9
 800b5ca:	f7f4 ffbd 	bl	8000548 <__aeabi_dmul>
 800b5ce:	4602      	mov	r2, r0
 800b5d0:	460b      	mov	r3, r1
 800b5d2:	ec51 0b19 	vmov	r0, r1, d9
 800b5d6:	f7f4 fdff 	bl	80001d8 <__aeabi_dsub>
 800b5da:	4652      	mov	r2, sl
 800b5dc:	465b      	mov	r3, fp
 800b5de:	f7f4 ffb3 	bl	8000548 <__aeabi_dmul>
 800b5e2:	ec53 2b18 	vmov	r2, r3, d8
 800b5e6:	f7f4 fdf7 	bl	80001d8 <__aeabi_dsub>
 800b5ea:	a30b      	add	r3, pc, #44	; (adr r3, 800b618 <__kernel_sin+0x148>)
 800b5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f0:	4606      	mov	r6, r0
 800b5f2:	460f      	mov	r7, r1
 800b5f4:	4640      	mov	r0, r8
 800b5f6:	4649      	mov	r1, r9
 800b5f8:	f7f4 ffa6 	bl	8000548 <__aeabi_dmul>
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	460b      	mov	r3, r1
 800b600:	4630      	mov	r0, r6
 800b602:	4639      	mov	r1, r7
 800b604:	f7f4 fdea 	bl	80001dc <__adddf3>
 800b608:	4602      	mov	r2, r0
 800b60a:	460b      	mov	r3, r1
 800b60c:	4620      	mov	r0, r4
 800b60e:	4629      	mov	r1, r5
 800b610:	f7f4 fde2 	bl	80001d8 <__aeabi_dsub>
 800b614:	e7c4      	b.n	800b5a0 <__kernel_sin+0xd0>
 800b616:	bf00      	nop
 800b618:	55555549 	.word	0x55555549
 800b61c:	3fc55555 	.word	0x3fc55555
 800b620:	3fe00000 	.word	0x3fe00000
 800b624:	5acfd57c 	.word	0x5acfd57c
 800b628:	3de5d93a 	.word	0x3de5d93a
 800b62c:	8a2b9ceb 	.word	0x8a2b9ceb
 800b630:	3e5ae5e6 	.word	0x3e5ae5e6
 800b634:	57b1fe7d 	.word	0x57b1fe7d
 800b638:	3ec71de3 	.word	0x3ec71de3
 800b63c:	19c161d5 	.word	0x19c161d5
 800b640:	3f2a01a0 	.word	0x3f2a01a0
 800b644:	1110f8a6 	.word	0x1110f8a6
 800b648:	3f811111 	.word	0x3f811111

0800b64c <fabs>:
 800b64c:	ec51 0b10 	vmov	r0, r1, d0
 800b650:	ee10 2a10 	vmov	r2, s0
 800b654:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b658:	ec43 2b10 	vmov	d0, r2, r3
 800b65c:	4770      	bx	lr
	...

0800b660 <floor>:
 800b660:	ec51 0b10 	vmov	r0, r1, d0
 800b664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b668:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b66c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b670:	2e13      	cmp	r6, #19
 800b672:	ee10 5a10 	vmov	r5, s0
 800b676:	ee10 8a10 	vmov	r8, s0
 800b67a:	460c      	mov	r4, r1
 800b67c:	dc32      	bgt.n	800b6e4 <floor+0x84>
 800b67e:	2e00      	cmp	r6, #0
 800b680:	da14      	bge.n	800b6ac <floor+0x4c>
 800b682:	a333      	add	r3, pc, #204	; (adr r3, 800b750 <floor+0xf0>)
 800b684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b688:	f7f4 fda8 	bl	80001dc <__adddf3>
 800b68c:	2200      	movs	r2, #0
 800b68e:	2300      	movs	r3, #0
 800b690:	f7f5 f9ea 	bl	8000a68 <__aeabi_dcmpgt>
 800b694:	b138      	cbz	r0, 800b6a6 <floor+0x46>
 800b696:	2c00      	cmp	r4, #0
 800b698:	da57      	bge.n	800b74a <floor+0xea>
 800b69a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b69e:	431d      	orrs	r5, r3
 800b6a0:	d001      	beq.n	800b6a6 <floor+0x46>
 800b6a2:	4c2d      	ldr	r4, [pc, #180]	; (800b758 <floor+0xf8>)
 800b6a4:	2500      	movs	r5, #0
 800b6a6:	4621      	mov	r1, r4
 800b6a8:	4628      	mov	r0, r5
 800b6aa:	e025      	b.n	800b6f8 <floor+0x98>
 800b6ac:	4f2b      	ldr	r7, [pc, #172]	; (800b75c <floor+0xfc>)
 800b6ae:	4137      	asrs	r7, r6
 800b6b0:	ea01 0307 	and.w	r3, r1, r7
 800b6b4:	4303      	orrs	r3, r0
 800b6b6:	d01f      	beq.n	800b6f8 <floor+0x98>
 800b6b8:	a325      	add	r3, pc, #148	; (adr r3, 800b750 <floor+0xf0>)
 800b6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6be:	f7f4 fd8d 	bl	80001dc <__adddf3>
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	f7f5 f9cf 	bl	8000a68 <__aeabi_dcmpgt>
 800b6ca:	2800      	cmp	r0, #0
 800b6cc:	d0eb      	beq.n	800b6a6 <floor+0x46>
 800b6ce:	2c00      	cmp	r4, #0
 800b6d0:	bfbe      	ittt	lt
 800b6d2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b6d6:	fa43 f606 	asrlt.w	r6, r3, r6
 800b6da:	19a4      	addlt	r4, r4, r6
 800b6dc:	ea24 0407 	bic.w	r4, r4, r7
 800b6e0:	2500      	movs	r5, #0
 800b6e2:	e7e0      	b.n	800b6a6 <floor+0x46>
 800b6e4:	2e33      	cmp	r6, #51	; 0x33
 800b6e6:	dd0b      	ble.n	800b700 <floor+0xa0>
 800b6e8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b6ec:	d104      	bne.n	800b6f8 <floor+0x98>
 800b6ee:	ee10 2a10 	vmov	r2, s0
 800b6f2:	460b      	mov	r3, r1
 800b6f4:	f7f4 fd72 	bl	80001dc <__adddf3>
 800b6f8:	ec41 0b10 	vmov	d0, r0, r1
 800b6fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b700:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b704:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b708:	fa23 f707 	lsr.w	r7, r3, r7
 800b70c:	4207      	tst	r7, r0
 800b70e:	d0f3      	beq.n	800b6f8 <floor+0x98>
 800b710:	a30f      	add	r3, pc, #60	; (adr r3, 800b750 <floor+0xf0>)
 800b712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b716:	f7f4 fd61 	bl	80001dc <__adddf3>
 800b71a:	2200      	movs	r2, #0
 800b71c:	2300      	movs	r3, #0
 800b71e:	f7f5 f9a3 	bl	8000a68 <__aeabi_dcmpgt>
 800b722:	2800      	cmp	r0, #0
 800b724:	d0bf      	beq.n	800b6a6 <floor+0x46>
 800b726:	2c00      	cmp	r4, #0
 800b728:	da02      	bge.n	800b730 <floor+0xd0>
 800b72a:	2e14      	cmp	r6, #20
 800b72c:	d103      	bne.n	800b736 <floor+0xd6>
 800b72e:	3401      	adds	r4, #1
 800b730:	ea25 0507 	bic.w	r5, r5, r7
 800b734:	e7b7      	b.n	800b6a6 <floor+0x46>
 800b736:	2301      	movs	r3, #1
 800b738:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b73c:	fa03 f606 	lsl.w	r6, r3, r6
 800b740:	4435      	add	r5, r6
 800b742:	4545      	cmp	r5, r8
 800b744:	bf38      	it	cc
 800b746:	18e4      	addcc	r4, r4, r3
 800b748:	e7f2      	b.n	800b730 <floor+0xd0>
 800b74a:	2500      	movs	r5, #0
 800b74c:	462c      	mov	r4, r5
 800b74e:	e7aa      	b.n	800b6a6 <floor+0x46>
 800b750:	8800759c 	.word	0x8800759c
 800b754:	7e37e43c 	.word	0x7e37e43c
 800b758:	bff00000 	.word	0xbff00000
 800b75c:	000fffff 	.word	0x000fffff

0800b760 <scalbn>:
 800b760:	b570      	push	{r4, r5, r6, lr}
 800b762:	ec55 4b10 	vmov	r4, r5, d0
 800b766:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b76a:	4606      	mov	r6, r0
 800b76c:	462b      	mov	r3, r5
 800b76e:	b99a      	cbnz	r2, 800b798 <scalbn+0x38>
 800b770:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b774:	4323      	orrs	r3, r4
 800b776:	d036      	beq.n	800b7e6 <scalbn+0x86>
 800b778:	4b39      	ldr	r3, [pc, #228]	; (800b860 <scalbn+0x100>)
 800b77a:	4629      	mov	r1, r5
 800b77c:	ee10 0a10 	vmov	r0, s0
 800b780:	2200      	movs	r2, #0
 800b782:	f7f4 fee1 	bl	8000548 <__aeabi_dmul>
 800b786:	4b37      	ldr	r3, [pc, #220]	; (800b864 <scalbn+0x104>)
 800b788:	429e      	cmp	r6, r3
 800b78a:	4604      	mov	r4, r0
 800b78c:	460d      	mov	r5, r1
 800b78e:	da10      	bge.n	800b7b2 <scalbn+0x52>
 800b790:	a32b      	add	r3, pc, #172	; (adr r3, 800b840 <scalbn+0xe0>)
 800b792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b796:	e03a      	b.n	800b80e <scalbn+0xae>
 800b798:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b79c:	428a      	cmp	r2, r1
 800b79e:	d10c      	bne.n	800b7ba <scalbn+0x5a>
 800b7a0:	ee10 2a10 	vmov	r2, s0
 800b7a4:	4620      	mov	r0, r4
 800b7a6:	4629      	mov	r1, r5
 800b7a8:	f7f4 fd18 	bl	80001dc <__adddf3>
 800b7ac:	4604      	mov	r4, r0
 800b7ae:	460d      	mov	r5, r1
 800b7b0:	e019      	b.n	800b7e6 <scalbn+0x86>
 800b7b2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b7b6:	460b      	mov	r3, r1
 800b7b8:	3a36      	subs	r2, #54	; 0x36
 800b7ba:	4432      	add	r2, r6
 800b7bc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b7c0:	428a      	cmp	r2, r1
 800b7c2:	dd08      	ble.n	800b7d6 <scalbn+0x76>
 800b7c4:	2d00      	cmp	r5, #0
 800b7c6:	a120      	add	r1, pc, #128	; (adr r1, 800b848 <scalbn+0xe8>)
 800b7c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7cc:	da1c      	bge.n	800b808 <scalbn+0xa8>
 800b7ce:	a120      	add	r1, pc, #128	; (adr r1, 800b850 <scalbn+0xf0>)
 800b7d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7d4:	e018      	b.n	800b808 <scalbn+0xa8>
 800b7d6:	2a00      	cmp	r2, #0
 800b7d8:	dd08      	ble.n	800b7ec <scalbn+0x8c>
 800b7da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b7de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b7e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b7e6:	ec45 4b10 	vmov	d0, r4, r5
 800b7ea:	bd70      	pop	{r4, r5, r6, pc}
 800b7ec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b7f0:	da19      	bge.n	800b826 <scalbn+0xc6>
 800b7f2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b7f6:	429e      	cmp	r6, r3
 800b7f8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b7fc:	dd0a      	ble.n	800b814 <scalbn+0xb4>
 800b7fe:	a112      	add	r1, pc, #72	; (adr r1, 800b848 <scalbn+0xe8>)
 800b800:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d1e2      	bne.n	800b7ce <scalbn+0x6e>
 800b808:	a30f      	add	r3, pc, #60	; (adr r3, 800b848 <scalbn+0xe8>)
 800b80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80e:	f7f4 fe9b 	bl	8000548 <__aeabi_dmul>
 800b812:	e7cb      	b.n	800b7ac <scalbn+0x4c>
 800b814:	a10a      	add	r1, pc, #40	; (adr r1, 800b840 <scalbn+0xe0>)
 800b816:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d0b8      	beq.n	800b790 <scalbn+0x30>
 800b81e:	a10e      	add	r1, pc, #56	; (adr r1, 800b858 <scalbn+0xf8>)
 800b820:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b824:	e7b4      	b.n	800b790 <scalbn+0x30>
 800b826:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b82a:	3236      	adds	r2, #54	; 0x36
 800b82c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b830:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b834:	4620      	mov	r0, r4
 800b836:	4b0c      	ldr	r3, [pc, #48]	; (800b868 <scalbn+0x108>)
 800b838:	2200      	movs	r2, #0
 800b83a:	e7e8      	b.n	800b80e <scalbn+0xae>
 800b83c:	f3af 8000 	nop.w
 800b840:	c2f8f359 	.word	0xc2f8f359
 800b844:	01a56e1f 	.word	0x01a56e1f
 800b848:	8800759c 	.word	0x8800759c
 800b84c:	7e37e43c 	.word	0x7e37e43c
 800b850:	8800759c 	.word	0x8800759c
 800b854:	fe37e43c 	.word	0xfe37e43c
 800b858:	c2f8f359 	.word	0xc2f8f359
 800b85c:	81a56e1f 	.word	0x81a56e1f
 800b860:	43500000 	.word	0x43500000
 800b864:	ffff3cb0 	.word	0xffff3cb0
 800b868:	3c900000 	.word	0x3c900000

0800b86c <_init>:
 800b86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b86e:	bf00      	nop
 800b870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b872:	bc08      	pop	{r3}
 800b874:	469e      	mov	lr, r3
 800b876:	4770      	bx	lr

0800b878 <_fini>:
 800b878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b87a:	bf00      	nop
 800b87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b87e:	bc08      	pop	{r3}
 800b880:	469e      	mov	lr, r3
 800b882:	4770      	bx	lr
