
MotorController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a4c  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08008be0  08008be0  00018be0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e00  08008e00  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08008e00  08008e00  00018e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e08  08008e08  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e08  08008e08  00018e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e0c  08008e0c  00018e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08008e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004cc  20000018  08008e28  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  08008e28  000204e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c59  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a61  00000000  00000000  00036ca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  00039708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d0  00000000  00000000  0003aad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000374f  00000000  00000000  0003bda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000147df  00000000  00000000  0003f4ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbefd  00000000  00000000  00053cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012fbcb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058bc  00000000  00000000  0012fc20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008bc4 	.word	0x08008bc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	08008bc4 	.word	0x08008bc4

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b80:	f000 b96e 	b.w	8000e60 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	468c      	mov	ip, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 8083 	bne.w	8000cb2 <__udivmoddi4+0x116>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	4617      	mov	r7, r2
 8000bb0:	d947      	bls.n	8000c42 <__udivmoddi4+0xa6>
 8000bb2:	fab2 f282 	clz	r2, r2
 8000bb6:	b142      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb8:	f1c2 0020 	rsb	r0, r2, #32
 8000bbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000bc0:	4091      	lsls	r1, r2
 8000bc2:	4097      	lsls	r7, r2
 8000bc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000bc8:	4094      	lsls	r4, r2
 8000bca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000bd4:	fa1f fe87 	uxth.w	lr, r7
 8000bd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be0:	fb06 f10e 	mul.w	r1, r6, lr
 8000be4:	4299      	cmp	r1, r3
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x60>
 8000be8:	18fb      	adds	r3, r7, r3
 8000bea:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bee:	f080 8119 	bcs.w	8000e24 <__udivmoddi4+0x288>
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	f240 8116 	bls.w	8000e24 <__udivmoddi4+0x288>
 8000bf8:	3e02      	subs	r6, #2
 8000bfa:	443b      	add	r3, r7
 8000bfc:	1a5b      	subs	r3, r3, r1
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c04:	fb08 3310 	mls	r3, r8, r0, r3
 8000c08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	45a6      	cmp	lr, r4
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x8c>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c1a:	f080 8105 	bcs.w	8000e28 <__udivmoddi4+0x28c>
 8000c1e:	45a6      	cmp	lr, r4
 8000c20:	f240 8102 	bls.w	8000e28 <__udivmoddi4+0x28c>
 8000c24:	3802      	subs	r0, #2
 8000c26:	443c      	add	r4, r7
 8000c28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	2600      	movs	r6, #0
 8000c32:	b11d      	cbz	r5, 8000c3c <__udivmoddi4+0xa0>
 8000c34:	40d4      	lsrs	r4, r2
 8000c36:	2300      	movs	r3, #0
 8000c38:	e9c5 4300 	strd	r4, r3, [r5]
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	b902      	cbnz	r2, 8000c46 <__udivmoddi4+0xaa>
 8000c44:	deff      	udf	#255	; 0xff
 8000c46:	fab2 f282 	clz	r2, r2
 8000c4a:	2a00      	cmp	r2, #0
 8000c4c:	d150      	bne.n	8000cf0 <__udivmoddi4+0x154>
 8000c4e:	1bcb      	subs	r3, r1, r7
 8000c50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c54:	fa1f f887 	uxth.w	r8, r7
 8000c58:	2601      	movs	r6, #1
 8000c5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c5e:	0c21      	lsrs	r1, r4, #16
 8000c60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c68:	fb08 f30c 	mul.w	r3, r8, ip
 8000c6c:	428b      	cmp	r3, r1
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0xe4>
 8000c70:	1879      	adds	r1, r7, r1
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0xe2>
 8000c78:	428b      	cmp	r3, r1
 8000c7a:	f200 80e9 	bhi.w	8000e50 <__udivmoddi4+0x2b4>
 8000c7e:	4684      	mov	ip, r0
 8000c80:	1ac9      	subs	r1, r1, r3
 8000c82:	b2a3      	uxth	r3, r4
 8000c84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c90:	fb08 f800 	mul.w	r8, r8, r0
 8000c94:	45a0      	cmp	r8, r4
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0x10c>
 8000c98:	193c      	adds	r4, r7, r4
 8000c9a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x10a>
 8000ca0:	45a0      	cmp	r8, r4
 8000ca2:	f200 80d9 	bhi.w	8000e58 <__udivmoddi4+0x2bc>
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	eba4 0408 	sub.w	r4, r4, r8
 8000cac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cb0:	e7bf      	b.n	8000c32 <__udivmoddi4+0x96>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0x12e>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80b1 	beq.w	8000e1e <__udivmoddi4+0x282>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x1cc>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0x140>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80b8 	bhi.w	8000e4c <__udivmoddi4+0x2b0>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0103 	sbc.w	r1, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	468c      	mov	ip, r1
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0a8      	beq.n	8000c3c <__udivmoddi4+0xa0>
 8000cea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cee:	e7a5      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f603 	lsr.w	r6, r0, r3
 8000cf8:	4097      	lsls	r7, r2
 8000cfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000cfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d02:	40d9      	lsrs	r1, r3
 8000d04:	4330      	orrs	r0, r6
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d0c:	fa1f f887 	uxth.w	r8, r7
 8000d10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d18:	fb06 f108 	mul.w	r1, r6, r8
 8000d1c:	4299      	cmp	r1, r3
 8000d1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x19c>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d2a:	f080 808d 	bcs.w	8000e48 <__udivmoddi4+0x2ac>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 808a 	bls.w	8000e48 <__udivmoddi4+0x2ac>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b281      	uxth	r1, r0
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d48:	fb00 f308 	mul.w	r3, r0, r8
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	d907      	bls.n	8000d60 <__udivmoddi4+0x1c4>
 8000d50:	1879      	adds	r1, r7, r1
 8000d52:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d56:	d273      	bcs.n	8000e40 <__udivmoddi4+0x2a4>
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d971      	bls.n	8000e40 <__udivmoddi4+0x2a4>
 8000d5c:	3802      	subs	r0, #2
 8000d5e:	4439      	add	r1, r7
 8000d60:	1acb      	subs	r3, r1, r3
 8000d62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d66:	e778      	b.n	8000c5a <__udivmoddi4+0xbe>
 8000d68:	f1c6 0c20 	rsb	ip, r6, #32
 8000d6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d74:	431c      	orrs	r4, r3
 8000d76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d86:	431f      	orrs	r7, r3
 8000d88:	0c3b      	lsrs	r3, r7, #16
 8000d8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d8e:	fa1f f884 	uxth.w	r8, r4
 8000d92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d9e:	458a      	cmp	sl, r1
 8000da0:	fa02 f206 	lsl.w	r2, r2, r6
 8000da4:	fa00 f306 	lsl.w	r3, r0, r6
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x220>
 8000daa:	1861      	adds	r1, r4, r1
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000db0:	d248      	bcs.n	8000e44 <__udivmoddi4+0x2a8>
 8000db2:	458a      	cmp	sl, r1
 8000db4:	d946      	bls.n	8000e44 <__udivmoddi4+0x2a8>
 8000db6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dba:	4421      	add	r1, r4
 8000dbc:	eba1 010a 	sub.w	r1, r1, sl
 8000dc0:	b2bf      	uxth	r7, r7
 8000dc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dce:	fb00 f808 	mul.w	r8, r0, r8
 8000dd2:	45b8      	cmp	r8, r7
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x24a>
 8000dd6:	19e7      	adds	r7, r4, r7
 8000dd8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ddc:	d22e      	bcs.n	8000e3c <__udivmoddi4+0x2a0>
 8000dde:	45b8      	cmp	r8, r7
 8000de0:	d92c      	bls.n	8000e3c <__udivmoddi4+0x2a0>
 8000de2:	3802      	subs	r0, #2
 8000de4:	4427      	add	r7, r4
 8000de6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dea:	eba7 0708 	sub.w	r7, r7, r8
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	454f      	cmp	r7, r9
 8000df4:	46c6      	mov	lr, r8
 8000df6:	4649      	mov	r1, r9
 8000df8:	d31a      	bcc.n	8000e30 <__udivmoddi4+0x294>
 8000dfa:	d017      	beq.n	8000e2c <__udivmoddi4+0x290>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x27a>
 8000dfe:	ebb3 020e 	subs.w	r2, r3, lr
 8000e02:	eb67 0701 	sbc.w	r7, r7, r1
 8000e06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e0a:	40f2      	lsrs	r2, r6
 8000e0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e10:	40f7      	lsrs	r7, r6
 8000e12:	e9c5 2700 	strd	r2, r7, [r5]
 8000e16:	2600      	movs	r6, #0
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	462e      	mov	r6, r5
 8000e20:	4628      	mov	r0, r5
 8000e22:	e70b      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000e24:	4606      	mov	r6, r0
 8000e26:	e6e9      	b.n	8000bfc <__udivmoddi4+0x60>
 8000e28:	4618      	mov	r0, r3
 8000e2a:	e6fd      	b.n	8000c28 <__udivmoddi4+0x8c>
 8000e2c:	4543      	cmp	r3, r8
 8000e2e:	d2e5      	bcs.n	8000dfc <__udivmoddi4+0x260>
 8000e30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e34:	eb69 0104 	sbc.w	r1, r9, r4
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e7df      	b.n	8000dfc <__udivmoddi4+0x260>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	e7d2      	b.n	8000de6 <__udivmoddi4+0x24a>
 8000e40:	4660      	mov	r0, ip
 8000e42:	e78d      	b.n	8000d60 <__udivmoddi4+0x1c4>
 8000e44:	4681      	mov	r9, r0
 8000e46:	e7b9      	b.n	8000dbc <__udivmoddi4+0x220>
 8000e48:	4666      	mov	r6, ip
 8000e4a:	e775      	b.n	8000d38 <__udivmoddi4+0x19c>
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	e74a      	b.n	8000ce6 <__udivmoddi4+0x14a>
 8000e50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e54:	4439      	add	r1, r7
 8000e56:	e713      	b.n	8000c80 <__udivmoddi4+0xe4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	443c      	add	r4, r7
 8000e5c:	e724      	b.n	8000ca8 <__udivmoddi4+0x10c>
 8000e5e:	bf00      	nop

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <to_frame>:

#include "comm_relay.h"
#include "stdint.h"
#include "main.h"

int to_frame(char * frame, uint8_t *revolutionAddr, uint8_t *ID) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]

	int i = 2, j = 0, PACKAGE_SIZE = 0;
 8000e70:	2302      	movs	r3, #2
 8000e72:	61fb      	str	r3, [r7, #28]
 8000e74:	2300      	movs	r3, #0
 8000e76:	61bb      	str	r3, [r7, #24]
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]

	frame[0] = COMM_DEL_START;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2224      	movs	r2, #36	; 0x24
 8000e80:	701a      	strb	r2, [r3, #0]
	frame[1] = ID;
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	3301      	adds	r3, #1
 8000e88:	b2d2      	uxtb	r2, r2
 8000e8a:	701a      	strb	r2, [r3, #0]

	if (ID == 3) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b03      	cmp	r3, #3
 8000e90:	d102      	bne.n	8000e98 <to_frame+0x34>
		PACKAGE_SIZE = 5;
 8000e92:	2305      	movs	r3, #5
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	e02d      	b.n	8000ef4 <to_frame+0x90>
	} else if (ID == 2) {
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d12a      	bne.n	8000ef4 <to_frame+0x90>
		PACKAGE_SIZE = 24;
 8000e9e:	2318      	movs	r3, #24
 8000ea0:	617b      	str	r3, [r7, #20]
	}

	for (; i < FRAME_SIZE && j < PACKAGE_SIZE; i++, j++) {
 8000ea2:	e027      	b.n	8000ef4 <to_frame+0x90>
		char c;
		c = *(revolutionAddr + j);
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	68ba      	ldr	r2, [r7, #8]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	74fb      	strb	r3, [r7, #19]

		if (is_special_character(c)) {
 8000eae:	7cfb      	ldrb	r3, [r7, #19]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f000 f830 	bl	8000f16 <is_special_character>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d010      	beq.n	8000ede <to_frame+0x7a>
			frame[i] = COMM_ESCAPE;
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	2223      	movs	r2, #35	; 0x23
 8000ec4:	701a      	strb	r2, [r3, #0]
			frame[i+1] = c + 2;
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	4413      	add	r3, r2
 8000ece:	7cfa      	ldrb	r2, [r7, #19]
 8000ed0:	3202      	adds	r2, #2
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	701a      	strb	r2, [r3, #0]
			i++;
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	61fb      	str	r3, [r7, #28]
 8000edc:	e004      	b.n	8000ee8 <to_frame+0x84>
		} else {
			frame[i] = c;
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	68fa      	ldr	r2, [r7, #12]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	7cfa      	ldrb	r2, [r7, #19]
 8000ee6:	701a      	strb	r2, [r3, #0]
	for (; i < FRAME_SIZE && j < PACKAGE_SIZE; i++, j++) {
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	3301      	adds	r3, #1
 8000eec:	61fb      	str	r3, [r7, #28]
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	61bb      	str	r3, [r7, #24]
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	2b32      	cmp	r3, #50	; 0x32
 8000ef8:	dc03      	bgt.n	8000f02 <to_frame+0x9e>
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	dbd0      	blt.n	8000ea4 <to_frame+0x40>
		}
	}

	frame[i] = COMM_DEL_STOP;
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	68fa      	ldr	r2, [r7, #12]
 8000f06:	4413      	add	r3, r2
 8000f08:	2240      	movs	r2, #64	; 0x40
 8000f0a:	701a      	strb	r2, [r3, #0]

	return 1;
 8000f0c:	2301      	movs	r3, #1
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3720      	adds	r7, #32
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <is_special_character>:


int is_special_character(char c) {
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	71fb      	strb	r3, [r7, #7]
	if ((c == COMM_DEL_START) || (c == COMM_DEL_STOP) || (c == COMM_ESCAPE) || (c == 0)) return 1;
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	2b24      	cmp	r3, #36	; 0x24
 8000f24:	d008      	beq.n	8000f38 <is_special_character+0x22>
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	2b40      	cmp	r3, #64	; 0x40
 8000f2a:	d005      	beq.n	8000f38 <is_special_character+0x22>
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	2b23      	cmp	r3, #35	; 0x23
 8000f30:	d002      	beq.n	8000f38 <is_special_character+0x22>
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d101      	bne.n	8000f3c <is_special_character+0x26>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e000      	b.n	8000f3e <is_special_character+0x28>
	return 0;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <from_frame>:

int from_frame(const char * frame, size_t len, char * destination, uint32_t *outputLen) {
 8000f4a:	b480      	push	{r7}
 8000f4c:	b089      	sub	sp, #36	; 0x24
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	60f8      	str	r0, [r7, #12]
 8000f52:	60b9      	str	r1, [r7, #8]
 8000f54:	607a      	str	r2, [r7, #4]
 8000f56:	603b      	str	r3, [r7, #0]
	uint32_t indexFrame = 0, indexDest = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61bb      	str	r3, [r7, #24]

	if (frame[0] == COMM_DEL_START) indexFrame++;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b24      	cmp	r3, #36	; 0x24
 8000f66:	d137      	bne.n	8000fd8 <from_frame+0x8e>
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	61fb      	str	r3, [r7, #28]

	for (; indexFrame < len - 1; indexFrame++, indexDest++) {
 8000f6e:	e033      	b.n	8000fd8 <from_frame+0x8e>
		char c = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	75fb      	strb	r3, [r7, #23]

		if (frame[indexFrame] == COMM_DEL_START) return -1; // If we meet start delimiter inside frame data, something's wrong.
 8000f74:	68fa      	ldr	r2, [r7, #12]
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	4413      	add	r3, r2
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b24      	cmp	r3, #36	; 0x24
 8000f7e:	d102      	bne.n	8000f86 <from_frame+0x3c>
 8000f80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f84:	e044      	b.n	8001010 <from_frame+0xc6>
		if (frame[indexFrame] == COMM_DEL_STOP) return 1; // If we meet stop delimiter inside frame data, it is just a shorter message.
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b40      	cmp	r3, #64	; 0x40
 8000f90:	d101      	bne.n	8000f96 <from_frame+0x4c>
 8000f92:	2301      	movs	r3, #1
 8000f94:	e03c      	b.n	8001010 <from_frame+0xc6>

		if (frame[indexFrame] == COMM_ESCAPE) {
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b23      	cmp	r3, #35	; 0x23
 8000fa0:	d10a      	bne.n	8000fb8 <from_frame+0x6e>
			c = frame[indexFrame+1] - 2; // Return the character after the escape character minus 2
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	3b02      	subs	r3, #2
 8000fae:	75fb      	strb	r3, [r7, #23]
			indexFrame++;
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	61fb      	str	r3, [r7, #28]
 8000fb6:	e004      	b.n	8000fc2 <from_frame+0x78>
		}
		else c = frame[indexFrame]; // There was no escape character, so return it
 8000fb8:	68fa      	ldr	r2, [r7, #12]
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	75fb      	strb	r3, [r7, #23]

		destination[indexDest] = c; 	// Insert the data
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	7dfa      	ldrb	r2, [r7, #23]
 8000fca:	701a      	strb	r2, [r3, #0]
	for (; indexFrame < len - 1; indexFrame++, indexDest++) {
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	61fb      	str	r3, [r7, #28]
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	61bb      	str	r3, [r7, #24]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	69fa      	ldr	r2, [r7, #28]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d3c6      	bcc.n	8000f70 <from_frame+0x26>
	}

	// Check whether the last character is either the specified stop delimiter or '0'
	if (indexFrame < len) {
 8000fe2:	69fa      	ldr	r2, [r7, #28]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d20e      	bcs.n	8001008 <from_frame+0xbe>
		if (!(frame[indexFrame] == COMM_DEL_STOP || frame[indexFrame] == 0)) return -1;
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	4413      	add	r3, r2
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b40      	cmp	r3, #64	; 0x40
 8000ff4:	d008      	beq.n	8001008 <from_frame+0xbe>
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d002      	beq.n	8001008 <from_frame+0xbe>
 8001002:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001006:	e003      	b.n	8001010 <from_frame+0xc6>
	}

	*outputLen = indexDest;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	601a      	str	r2, [r3, #0]

	return 1;
 800100e:	2301      	movs	r3, #1
}
 8001010:	4618      	mov	r0, r3
 8001012:	3724      	adds	r7, #36	; 0x24
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	0000      	movs	r0, r0
	...

08001020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001020:	b5b0      	push	{r4, r5, r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001024:	f001 fed1 	bl	8002dca <HAL_Init>

  /* USER CODE BEGIN Init */

	// Motor Initialization
	motor_init(&motorR, 'R');
 8001028:	2152      	movs	r1, #82	; 0x52
 800102a:	4855      	ldr	r0, [pc, #340]	; (8001180 <main+0x160>)
 800102c:	f000 fc0e 	bl	800184c <motor_init>
	motor_init(&motorL, 'L');
 8001030:	214c      	movs	r1, #76	; 0x4c
 8001032:	4854      	ldr	r0, [pc, #336]	; (8001184 <main+0x164>)
 8001034:	f000 fc0a 	bl	800184c <motor_init>

	motorEncoder_init(&encoderR);
 8001038:	4853      	ldr	r0, [pc, #332]	; (8001188 <main+0x168>)
 800103a:	f000 fc1d 	bl	8001878 <motorEncoder_init>
	motorEncoder_init(&encoderL);
 800103e:	4853      	ldr	r0, [pc, #332]	; (800118c <main+0x16c>)
 8001040:	f000 fc1a 	bl	8001878 <motorEncoder_init>

	motorController_init(&controllerR, &motorR, &encoderR);
 8001044:	4a50      	ldr	r2, [pc, #320]	; (8001188 <main+0x168>)
 8001046:	494e      	ldr	r1, [pc, #312]	; (8001180 <main+0x160>)
 8001048:	4851      	ldr	r0, [pc, #324]	; (8001190 <main+0x170>)
 800104a:	f000 fc30 	bl	80018ae <motorController_init>
	motorController_init(&controllerL, &motorL, &encoderL);
 800104e:	4a4f      	ldr	r2, [pc, #316]	; (800118c <main+0x16c>)
 8001050:	494c      	ldr	r1, [pc, #304]	; (8001184 <main+0x164>)
 8001052:	4850      	ldr	r0, [pc, #320]	; (8001194 <main+0x174>)
 8001054:	f000 fc2b 	bl	80018ae <motorController_init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001058:	f000 f8b0 	bl	80011bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105c:	f000 fb54 	bl	8001708 <MX_GPIO_Init>
  MX_DMA_Init();
 8001060:	f000 fb34 	bl	80016cc <MX_DMA_Init>
  MX_TIM1_Init();
 8001064:	f000 f9a2 	bl	80013ac <MX_TIM1_Init>
  MX_TIM6_Init();
 8001068:	f000 fa92 	bl	8001590 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 800106c:	f000 fafe 	bl	800166c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001070:	f000 f928 	bl	80012c4 <MX_ADC1_Init>
  MX_TIM7_Init();
 8001074:	f000 fac2 	bl	80015fc <MX_TIM7_Init>
  MX_TIM2_Init();
 8001078:	f000 fa34 	bl	80014e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_DMA(&huart2, uart_in, UART_IN_BUF_SIZE);
 800107c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001080:	4945      	ldr	r1, [pc, #276]	; (8001198 <main+0x178>)
 8001082:	4846      	ldr	r0, [pc, #280]	; (800119c <main+0x17c>)
 8001084:	f005 ffa4 	bl	8006fd0 <HAL_UART_Receive_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 8001088:	4845      	ldr	r0, [pc, #276]	; (80011a0 <main+0x180>)
 800108a:	f004 ff07 	bl	8005e9c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 800108e:	4845      	ldr	r0, [pc, #276]	; (80011a4 <main+0x184>)
 8001090:	f004 ff04 	bl	8005e9c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8001094:	4844      	ldr	r0, [pc, #272]	; (80011a8 <main+0x188>)
 8001096:	f004 ff01 	bl	8005e9c <HAL_TIM_Base_Start_IT>

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800109a:	217f      	movs	r1, #127	; 0x7f
 800109c:	4843      	ldr	r0, [pc, #268]	; (80011ac <main+0x18c>)
 800109e:	f003 f80d 	bl	80040bc <HAL_ADCEx_Calibration_Start>

	positionCalculationPeriod = ((htim6.Instance->ARR + 1) / (80000000.0 / (htim6.Instance->PSC + 1)));
 80010a2:	4b40      	ldr	r3, [pc, #256]	; (80011a4 <main+0x184>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a8:	3301      	adds	r3, #1
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff f9d2 	bl	8000454 <__aeabi_ui2d>
 80010b0:	4604      	mov	r4, r0
 80010b2:	460d      	mov	r5, r1
 80010b4:	4b3b      	ldr	r3, [pc, #236]	; (80011a4 <main+0x184>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ba:	3301      	adds	r3, #1
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff f9c9 	bl	8000454 <__aeabi_ui2d>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	a12c      	add	r1, pc, #176	; (adr r1, 8001178 <main+0x158>)
 80010c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010cc:	f7ff fb66 	bl	800079c <__aeabi_ddiv>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	4620      	mov	r0, r4
 80010d6:	4629      	mov	r1, r5
 80010d8:	f7ff fb60 	bl	800079c <__aeabi_ddiv>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4610      	mov	r0, r2
 80010e2:	4619      	mov	r1, r3
 80010e4:	f7ff fcf2 	bl	8000acc <__aeabi_d2f>
 80010e8:	4603      	mov	r3, r0
 80010ea:	4a31      	ldr	r2, [pc, #196]	; (80011b0 <main+0x190>)
 80010ec:	6013      	str	r3, [r2, #0]
	controllerPeriod = ((htim2.Instance->ARR + 1) / (80000000.0 / (htim2.Instance->PSC + 1)));
 80010ee:	4b2c      	ldr	r3, [pc, #176]	; (80011a0 <main+0x180>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f4:	3301      	adds	r3, #1
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff f9ac 	bl	8000454 <__aeabi_ui2d>
 80010fc:	4604      	mov	r4, r0
 80010fe:	460d      	mov	r5, r1
 8001100:	4b27      	ldr	r3, [pc, #156]	; (80011a0 <main+0x180>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001106:	3301      	adds	r3, #1
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff f9a3 	bl	8000454 <__aeabi_ui2d>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	a119      	add	r1, pc, #100	; (adr r1, 8001178 <main+0x158>)
 8001114:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001118:	f7ff fb40 	bl	800079c <__aeabi_ddiv>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4620      	mov	r0, r4
 8001122:	4629      	mov	r1, r5
 8001124:	f7ff fb3a 	bl	800079c <__aeabi_ddiv>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4610      	mov	r0, r2
 800112e:	4619      	mov	r1, r3
 8001130:	f7ff fccc 	bl	8000acc <__aeabi_d2f>
 8001134:	4603      	mov	r3, r0
 8001136:	4a1f      	ldr	r2, [pc, #124]	; (80011b4 <main+0x194>)
 8001138:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		controllerR.reference = 5.0;
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <main+0x170>)
 800113c:	4a1e      	ldr	r2, [pc, #120]	; (80011b8 <main+0x198>)
 800113e:	601a      	str	r2, [r3, #0]
		if (controllerR.reference == 5.0) {
 8001140:	4b13      	ldr	r3, [pc, #76]	; (8001190 <main+0x170>)
 8001142:	edd3 7a00 	vldr	s15, [r3]
 8001146:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800114a:	eef4 7a47 	vcmp.f32	s15, s14
 800114e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001152:	d107      	bne.n	8001164 <main+0x144>
			HAL_GPIO_WritePin(testLED_GPIO_Port, testLED_Pin, GPIO_PIN_SET);
 8001154:	2201      	movs	r2, #1
 8001156:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800115a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115e:	f003 fc99 	bl	8004a94 <HAL_GPIO_WritePin>
 8001162:	e7ea      	b.n	800113a <main+0x11a>
		} else {
			HAL_GPIO_WritePin(testLED_GPIO_Port, testLED_Pin, GPIO_PIN_RESET);
 8001164:	2200      	movs	r2, #0
 8001166:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800116a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116e:	f003 fc91 	bl	8004a94 <HAL_GPIO_WritePin>
		controllerR.reference = 5.0;
 8001172:	e7e2      	b.n	800113a <main+0x11a>
 8001174:	f3af 8000 	nop.w
 8001178:	00000000 	.word	0x00000000
 800117c:	419312d0 	.word	0x419312d0
 8001180:	20000258 	.word	0x20000258
 8001184:	20000260 	.word	0x20000260
 8001188:	200004cc 	.word	0x200004cc
 800118c:	2000046c 	.word	0x2000046c
 8001190:	20000338 	.word	0x20000338
 8001194:	2000026c 	.word	0x2000026c
 8001198:	20000040 	.word	0x20000040
 800119c:	200003e8 	.word	0x200003e8
 80011a0:	2000039c 	.word	0x2000039c
 80011a4:	200002ec 	.word	0x200002ec
 80011a8:	20000480 	.word	0x20000480
 80011ac:	20000284 	.word	0x20000284
 80011b0:	20000268 	.word	0x20000268
 80011b4:	200002e8 	.word	0x200002e8
 80011b8:	40a00000 	.word	0x40a00000

080011bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b0ac      	sub	sp, #176	; 0xb0
 80011c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011c6:	2244      	movs	r2, #68	; 0x44
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f006 fc6a 	bl	8007aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	2254      	movs	r2, #84	; 0x54
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f006 fc5c 	bl	8007aa4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80011ec:	2310      	movs	r3, #16
 80011ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011f0:	2301      	movs	r3, #1
 80011f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011fc:	2360      	movs	r3, #96	; 0x60
 80011fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001202:	2302      	movs	r3, #2
 8001204:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001208:	2301      	movs	r3, #1
 800120a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 800120e:	2301      	movs	r3, #1
 8001210:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001214:	2328      	movs	r3, #40	; 0x28
 8001216:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800121a:	2307      	movs	r3, #7
 800121c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001220:	2302      	movs	r3, #2
 8001222:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001226:	2302      	movs	r3, #2
 8001228:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800122c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001230:	4618      	mov	r0, r3
 8001232:	f003 fccf 	bl	8004bd4 <HAL_RCC_OscConfig>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800123c:	f001 f9fa 	bl	8002634 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001240:	230f      	movs	r3, #15
 8001242:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001244:	2303      	movs	r3, #3
 8001246:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001248:	2300      	movs	r3, #0
 800124a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800124c:	2300      	movs	r3, #0
 800124e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001250:	2300      	movs	r3, #0
 8001252:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001254:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001258:	2104      	movs	r1, #4
 800125a:	4618      	mov	r0, r3
 800125c:	f004 f8da 	bl	8005414 <HAL_RCC_ClockConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001266:	f001 f9e5 	bl	8002634 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 800126a:	f244 0302 	movw	r3, #16386	; 0x4002
 800126e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001270:	2300      	movs	r3, #0
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001274:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001278:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800127a:	2301      	movs	r3, #1
 800127c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800127e:	2301      	movs	r3, #1
 8001280:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001282:	2310      	movs	r3, #16
 8001284:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001286:	2307      	movs	r3, #7
 8001288:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800128a:	2302      	movs	r3, #2
 800128c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 800128e:	2308      	movs	r3, #8
 8001290:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001292:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001296:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	4618      	mov	r0, r3
 800129c:	f004 fac0 	bl	8005820 <HAL_RCCEx_PeriphCLKConfig>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <SystemClock_Config+0xee>
  {
    Error_Handler();
 80012a6:	f001 f9c5 	bl	8002634 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012ae:	f003 fc3b 	bl	8004b28 <HAL_PWREx_ControlVoltageScaling>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <SystemClock_Config+0x100>
  {
    Error_Handler();
 80012b8:	f001 f9bc 	bl	8002634 <Error_Handler>
  }
}
 80012bc:	bf00      	nop
 80012be:	37b0      	adds	r7, #176	; 0xb0
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b088      	sub	sp, #32
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012ca:	f107 0308 	add.w	r3, r7, #8
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
 80012d8:	611a      	str	r2, [r3, #16]
 80012da:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80012dc:	4b2f      	ldr	r3, [pc, #188]	; (800139c <MX_ADC1_Init+0xd8>)
 80012de:	4a30      	ldr	r2, [pc, #192]	; (80013a0 <MX_ADC1_Init+0xdc>)
 80012e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012e2:	4b2e      	ldr	r3, [pc, #184]	; (800139c <MX_ADC1_Init+0xd8>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012e8:	4b2c      	ldr	r3, [pc, #176]	; (800139c <MX_ADC1_Init+0xd8>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012ee:	4b2b      	ldr	r3, [pc, #172]	; (800139c <MX_ADC1_Init+0xd8>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012f4:	4b29      	ldr	r3, [pc, #164]	; (800139c <MX_ADC1_Init+0xd8>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012fa:	4b28      	ldr	r3, [pc, #160]	; (800139c <MX_ADC1_Init+0xd8>)
 80012fc:	2204      	movs	r2, #4
 80012fe:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001300:	4b26      	ldr	r3, [pc, #152]	; (800139c <MX_ADC1_Init+0xd8>)
 8001302:	2200      	movs	r2, #0
 8001304:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001306:	4b25      	ldr	r3, [pc, #148]	; (800139c <MX_ADC1_Init+0xd8>)
 8001308:	2200      	movs	r2, #0
 800130a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800130c:	4b23      	ldr	r3, [pc, #140]	; (800139c <MX_ADC1_Init+0xd8>)
 800130e:	2201      	movs	r2, #1
 8001310:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001312:	4b22      	ldr	r3, [pc, #136]	; (800139c <MX_ADC1_Init+0xd8>)
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800131a:	4b20      	ldr	r3, [pc, #128]	; (800139c <MX_ADC1_Init+0xd8>)
 800131c:	2200      	movs	r2, #0
 800131e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001320:	4b1e      	ldr	r3, [pc, #120]	; (800139c <MX_ADC1_Init+0xd8>)
 8001322:	2200      	movs	r2, #0
 8001324:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001326:	4b1d      	ldr	r3, [pc, #116]	; (800139c <MX_ADC1_Init+0xd8>)
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800132e:	4b1b      	ldr	r3, [pc, #108]	; (800139c <MX_ADC1_Init+0xd8>)
 8001330:	2200      	movs	r2, #0
 8001332:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001334:	4b19      	ldr	r3, [pc, #100]	; (800139c <MX_ADC1_Init+0xd8>)
 8001336:	2200      	movs	r2, #0
 8001338:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800133c:	4817      	ldr	r0, [pc, #92]	; (800139c <MX_ADC1_Init+0xd8>)
 800133e:	f001 ffa7 	bl	8003290 <HAL_ADC_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001348:	f001 f974 	bl	8002634 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800134c:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <MX_ADC1_Init+0xe0>)
 800134e:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001350:	2306      	movs	r3, #6
 8001352:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001354:	2300      	movs	r3, #0
 8001356:	613b      	str	r3, [r7, #16]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001358:	237f      	movs	r3, #127	; 0x7f
 800135a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800135c:	2304      	movs	r3, #4
 800135e:	61bb      	str	r3, [r7, #24]
  sConfig.Offset = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001364:	f107 0308 	add.w	r3, r7, #8
 8001368:	4619      	mov	r1, r3
 800136a:	480c      	ldr	r0, [pc, #48]	; (800139c <MX_ADC1_Init+0xd8>)
 800136c:	f002 f9d8 	bl	8003720 <HAL_ADC_ConfigChannel>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001376:	f001 f95d 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
	__HAL_RCC_ADC_CLK_ENABLE();
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <MX_ADC1_Init+0xe4>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <MX_ADC1_Init+0xe4>)
 8001380:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001384:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001386:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <MX_ADC1_Init+0xe4>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END ADC1_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	3720      	adds	r7, #32
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000284 	.word	0x20000284
 80013a0:	50040000 	.word	0x50040000
 80013a4:	21800100 	.word	0x21800100
 80013a8:	40021000 	.word	0x40021000

080013ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b096      	sub	sp, #88	; 0x58
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
 80013cc:	611a      	str	r2, [r3, #16]
 80013ce:	615a      	str	r2, [r3, #20]
 80013d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	222c      	movs	r2, #44	; 0x2c
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f006 fb63 	bl	8007aa4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013de:	4b3f      	ldr	r3, [pc, #252]	; (80014dc <MX_TIM1_Init+0x130>)
 80013e0:	4a3f      	ldr	r2, [pc, #252]	; (80014e0 <MX_TIM1_Init+0x134>)
 80013e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013e4:	4b3d      	ldr	r3, [pc, #244]	; (80014dc <MX_TIM1_Init+0x130>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ea:	4b3c      	ldr	r3, [pc, #240]	; (80014dc <MX_TIM1_Init+0x130>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80013f0:	4b3a      	ldr	r3, [pc, #232]	; (80014dc <MX_TIM1_Init+0x130>)
 80013f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f8:	4b38      	ldr	r3, [pc, #224]	; (80014dc <MX_TIM1_Init+0x130>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013fe:	4b37      	ldr	r3, [pc, #220]	; (80014dc <MX_TIM1_Init+0x130>)
 8001400:	2200      	movs	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001404:	4b35      	ldr	r3, [pc, #212]	; (80014dc <MX_TIM1_Init+0x130>)
 8001406:	2280      	movs	r2, #128	; 0x80
 8001408:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800140a:	4834      	ldr	r0, [pc, #208]	; (80014dc <MX_TIM1_Init+0x130>)
 800140c:	f004 fdf1 	bl	8005ff2 <HAL_TIM_PWM_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001416:	f001 f90d 	bl	8002634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800141a:	2300      	movs	r3, #0
 800141c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800141e:	2300      	movs	r3, #0
 8001420:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001426:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800142a:	4619      	mov	r1, r3
 800142c:	482b      	ldr	r0, [pc, #172]	; (80014dc <MX_TIM1_Init+0x130>)
 800142e:	f005 fbf1 	bl	8006c14 <HAL_TIMEx_MasterConfigSynchronization>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001438:	f001 f8fc 	bl	8002634 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800143c:	2360      	movs	r3, #96	; 0x60
 800143e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001444:	2300      	movs	r3, #0
 8001446:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001448:	2300      	movs	r3, #0
 800144a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800144c:	2300      	movs	r3, #0
 800144e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001450:	2300      	movs	r3, #0
 8001452:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001454:	2300      	movs	r3, #0
 8001456:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001458:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800145c:	2200      	movs	r2, #0
 800145e:	4619      	mov	r1, r3
 8001460:	481e      	ldr	r0, [pc, #120]	; (80014dc <MX_TIM1_Init+0x130>)
 8001462:	f004 ffb3 	bl	80063cc <HAL_TIM_PWM_ConfigChannel>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800146c:	f001 f8e2 	bl	8002634 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001470:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001474:	2204      	movs	r2, #4
 8001476:	4619      	mov	r1, r3
 8001478:	4818      	ldr	r0, [pc, #96]	; (80014dc <MX_TIM1_Init+0x130>)
 800147a:	f004 ffa7 	bl	80063cc <HAL_TIM_PWM_ConfigChannel>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001484:	f001 f8d6 	bl	8002634 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001488:	2300      	movs	r3, #0
 800148a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800149c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	4619      	mov	r1, r3
 80014bc:	4807      	ldr	r0, [pc, #28]	; (80014dc <MX_TIM1_Init+0x130>)
 80014be:	f005 fc0f 	bl	8006ce0 <HAL_TIMEx_ConfigBreakDeadTime>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 80014c8:	f001 f8b4 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014cc:	4803      	ldr	r0, [pc, #12]	; (80014dc <MX_TIM1_Init+0x130>)
 80014ce:	f001 fad7 	bl	8002a80 <HAL_TIM_MspPostInit>

}
 80014d2:	bf00      	nop
 80014d4:	3758      	adds	r7, #88	; 0x58
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000350 	.word	0x20000350
 80014e0:	40012c00 	.word	0x40012c00

080014e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08a      	sub	sp, #40	; 0x28
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ea:	f107 031c 	add.w	r3, r7, #28
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014f6:	463b      	mov	r3, r7
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
 8001504:	615a      	str	r2, [r3, #20]
 8001506:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001508:	4b20      	ldr	r3, [pc, #128]	; (800158c <MX_TIM2_Init+0xa8>)
 800150a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800150e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8001510:	4b1e      	ldr	r3, [pc, #120]	; (800158c <MX_TIM2_Init+0xa8>)
 8001512:	224f      	movs	r2, #79	; 0x4f
 8001514:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001516:	4b1d      	ldr	r3, [pc, #116]	; (800158c <MX_TIM2_Init+0xa8>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800151c:	4b1b      	ldr	r3, [pc, #108]	; (800158c <MX_TIM2_Init+0xa8>)
 800151e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001522:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <MX_TIM2_Init+0xa8>)
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800152a:	4b18      	ldr	r3, [pc, #96]	; (800158c <MX_TIM2_Init+0xa8>)
 800152c:	2280      	movs	r2, #128	; 0x80
 800152e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001530:	4816      	ldr	r0, [pc, #88]	; (800158c <MX_TIM2_Init+0xa8>)
 8001532:	f004 fd07 	bl	8005f44 <HAL_TIM_OC_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800153c:	f001 f87a 	bl	8002634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001540:	2300      	movs	r3, #0
 8001542:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001548:	f107 031c 	add.w	r3, r7, #28
 800154c:	4619      	mov	r1, r3
 800154e:	480f      	ldr	r0, [pc, #60]	; (800158c <MX_TIM2_Init+0xa8>)
 8001550:	f005 fb60 	bl	8006c14 <HAL_TIMEx_MasterConfigSynchronization>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800155a:	f001 f86b 	bl	8002634 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800155e:	2300      	movs	r3, #0
 8001560:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800156e:	463b      	mov	r3, r7
 8001570:	2204      	movs	r2, #4
 8001572:	4619      	mov	r1, r3
 8001574:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_TIM2_Init+0xa8>)
 8001576:	f004 feb3 	bl	80062e0 <HAL_TIM_OC_ConfigChannel>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001580:	f001 f858 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	3728      	adds	r7, #40	; 0x28
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	2000039c 	.word	0x2000039c

08001590 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80015a0:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <MX_TIM6_Init+0x64>)
 80015a2:	4a15      	ldr	r2, [pc, #84]	; (80015f8 <MX_TIM6_Init+0x68>)
 80015a4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 160-1;
 80015a6:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <MX_TIM6_Init+0x64>)
 80015a8:	229f      	movs	r2, #159	; 0x9f
 80015aa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <MX_TIM6_Init+0x64>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50000-1;
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <MX_TIM6_Init+0x64>)
 80015b4:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80015b8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015ba:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <MX_TIM6_Init+0x64>)
 80015bc:	2280      	movs	r2, #128	; 0x80
 80015be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80015c0:	480c      	ldr	r0, [pc, #48]	; (80015f4 <MX_TIM6_Init+0x64>)
 80015c2:	f004 fc13 	bl	8005dec <HAL_TIM_Base_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80015cc:	f001 f832 	bl	8002634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d0:	2300      	movs	r3, #0
 80015d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	4619      	mov	r1, r3
 80015dc:	4805      	ldr	r0, [pc, #20]	; (80015f4 <MX_TIM6_Init+0x64>)
 80015de:	f005 fb19 	bl	8006c14 <HAL_TIMEx_MasterConfigSynchronization>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80015e8:	f001 f824 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80015ec:	bf00      	nop
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	200002ec 	.word	0x200002ec
 80015f8:	40001000 	.word	0x40001000

080015fc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800160c:	4b15      	ldr	r3, [pc, #84]	; (8001664 <MX_TIM7_Init+0x68>)
 800160e:	4a16      	ldr	r2, [pc, #88]	; (8001668 <MX_TIM7_Init+0x6c>)
 8001610:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 65535;
 8001612:	4b14      	ldr	r3, [pc, #80]	; (8001664 <MX_TIM7_Init+0x68>)
 8001614:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001618:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <MX_TIM7_Init+0x68>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 12207-1;
 8001620:	4b10      	ldr	r3, [pc, #64]	; (8001664 <MX_TIM7_Init+0x68>)
 8001622:	f642 72ae 	movw	r2, #12206	; 0x2fae
 8001626:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001628:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <MX_TIM7_Init+0x68>)
 800162a:	2280      	movs	r2, #128	; 0x80
 800162c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800162e:	480d      	ldr	r0, [pc, #52]	; (8001664 <MX_TIM7_Init+0x68>)
 8001630:	f004 fbdc 	bl	8005dec <HAL_TIM_Base_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800163a:	f000 fffb 	bl	8002634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	4619      	mov	r1, r3
 800164a:	4806      	ldr	r0, [pc, #24]	; (8001664 <MX_TIM7_Init+0x68>)
 800164c:	f005 fae2 	bl	8006c14 <HAL_TIMEx_MasterConfigSynchronization>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001656:	f000 ffed 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000480 	.word	0x20000480
 8001668:	40001400 	.word	0x40001400

0800166c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001670:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <MX_USART2_UART_Init+0x58>)
 8001672:	4a15      	ldr	r2, [pc, #84]	; (80016c8 <MX_USART2_UART_Init+0x5c>)
 8001674:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001676:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <MX_USART2_UART_Init+0x58>)
 8001678:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800167c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <MX_USART2_UART_Init+0x58>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <MX_USART2_UART_Init+0x58>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <MX_USART2_UART_Init+0x58>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <MX_USART2_UART_Init+0x58>)
 8001692:	220c      	movs	r2, #12
 8001694:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <MX_USART2_UART_Init+0x58>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <MX_USART2_UART_Init+0x58>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016a2:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <MX_USART2_UART_Init+0x58>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <MX_USART2_UART_Init+0x58>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ae:	4805      	ldr	r0, [pc, #20]	; (80016c4 <MX_USART2_UART_Init+0x58>)
 80016b0:	f005 fbac 	bl	8006e0c <HAL_UART_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016ba:	f000 ffbb 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	200003e8 	.word	0x200003e8
 80016c8:	40004400 	.word	0x40004400

080016cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016d2:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <MX_DMA_Init+0x38>)
 80016d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016d6:	4a0b      	ldr	r2, [pc, #44]	; (8001704 <MX_DMA_Init+0x38>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6493      	str	r3, [r2, #72]	; 0x48
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <MX_DMA_Init+0x38>)
 80016e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2100      	movs	r1, #0
 80016ee:	2010      	movs	r0, #16
 80016f0:	f002 fe1f 	bl	8004332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80016f4:	2010      	movs	r0, #16
 80016f6:	f002 fe38 	bl	800436a <HAL_NVIC_EnableIRQ>

}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40021000 	.word	0x40021000

08001708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170e:	f107 030c 	add.w	r3, r7, #12
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
 800171c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800171e:	4b48      	ldr	r3, [pc, #288]	; (8001840 <MX_GPIO_Init+0x138>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001722:	4a47      	ldr	r2, [pc, #284]	; (8001840 <MX_GPIO_Init+0x138>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800172a:	4b45      	ldr	r3, [pc, #276]	; (8001840 <MX_GPIO_Init+0x138>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001736:	4b42      	ldr	r3, [pc, #264]	; (8001840 <MX_GPIO_Init+0x138>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173a:	4a41      	ldr	r2, [pc, #260]	; (8001840 <MX_GPIO_Init+0x138>)
 800173c:	f043 0302 	orr.w	r3, r3, #2
 8001740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001742:	4b3f      	ldr	r3, [pc, #252]	; (8001840 <MX_GPIO_Init+0x138>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_L1_Pin|DIR_L2_Pin|testLED_Pin, GPIO_PIN_RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 8001754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001758:	f003 f99c 	bl	8004a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_R1_Pin|DIR_R2_Pin, GPIO_PIN_RESET);
 800175c:	2200      	movs	r2, #0
 800175e:	21c0      	movs	r1, #192	; 0xc0
 8001760:	4838      	ldr	r0, [pc, #224]	; (8001844 <MX_GPIO_Init+0x13c>)
 8001762:	f003 f997 	bl	8004a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Motor_Left_clock_Pin orientation_counterclock_Pin */
  GPIO_InitStruct.Pin = Motor_Left_clock_Pin|orientation_counterclock_Pin;
 8001766:	f44f 6302 	mov.w	r3, #2080	; 0x820
 800176a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800176c:	4b36      	ldr	r3, [pc, #216]	; (8001848 <MX_GPIO_Init+0x140>)
 800176e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001770:	2302      	movs	r3, #2
 8001772:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001774:	f107 030c 	add.w	r3, r7, #12
 8001778:	4619      	mov	r1, r3
 800177a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800177e:	f003 f807 	bl	8004790 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_L1_Pin DIR_L2_Pin testLED_Pin */
  GPIO_InitStruct.Pin = DIR_L1_Pin|DIR_L2_Pin|testLED_Pin;
 8001782:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001788:	2301      	movs	r3, #1
 800178a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001794:	f107 030c 	add.w	r3, r7, #12
 8001798:	4619      	mov	r1, r3
 800179a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179e:	f002 fff7 	bl	8004790 <HAL_GPIO_Init>

  /*Configure GPIO pins : motor_Right_clock_Pin Motor_left_counterclock_Pin orientation_clock_Pin Motor_counterclock_right_Pin */
  GPIO_InitStruct.Pin = motor_Right_clock_Pin|Motor_left_counterclock_Pin|orientation_clock_Pin|Motor_counterclock_right_Pin;
 80017a2:	231b      	movs	r3, #27
 80017a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80017a6:	4b28      	ldr	r3, [pc, #160]	; (8001848 <MX_GPIO_Init+0x140>)
 80017a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017aa:	2302      	movs	r3, #2
 80017ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ae:	f107 030c 	add.w	r3, r7, #12
 80017b2:	4619      	mov	r1, r3
 80017b4:	4823      	ldr	r0, [pc, #140]	; (8001844 <MX_GPIO_Init+0x13c>)
 80017b6:	f002 ffeb 	bl	8004790 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_R1_Pin DIR_R2_Pin */
  GPIO_InitStruct.Pin = DIR_R1_Pin|DIR_R2_Pin;
 80017ba:	23c0      	movs	r3, #192	; 0xc0
 80017bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017be:	2301      	movs	r3, #1
 80017c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ca:	f107 030c 	add.w	r3, r7, #12
 80017ce:	4619      	mov	r1, r3
 80017d0:	481c      	ldr	r0, [pc, #112]	; (8001844 <MX_GPIO_Init+0x13c>)
 80017d2:	f002 ffdd 	bl	8004790 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2100      	movs	r1, #0
 80017da:	2006      	movs	r0, #6
 80017dc:	f002 fda9 	bl	8004332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80017e0:	2006      	movs	r0, #6
 80017e2:	f002 fdc2 	bl	800436a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80017e6:	2200      	movs	r2, #0
 80017e8:	2100      	movs	r1, #0
 80017ea:	2007      	movs	r0, #7
 80017ec:	f002 fda1 	bl	8004332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80017f0:	2007      	movs	r0, #7
 80017f2:	f002 fdba 	bl	800436a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2100      	movs	r1, #0
 80017fa:	2009      	movs	r0, #9
 80017fc:	f002 fd99 	bl	8004332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001800:	2009      	movs	r0, #9
 8001802:	f002 fdb2 	bl	800436a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001806:	2200      	movs	r2, #0
 8001808:	2100      	movs	r1, #0
 800180a:	200a      	movs	r0, #10
 800180c:	f002 fd91 	bl	8004332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001810:	200a      	movs	r0, #10
 8001812:	f002 fdaa 	bl	800436a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001816:	2200      	movs	r2, #0
 8001818:	2100      	movs	r1, #0
 800181a:	2017      	movs	r0, #23
 800181c:	f002 fd89 	bl	8004332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001820:	2017      	movs	r0, #23
 8001822:	f002 fda2 	bl	800436a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2100      	movs	r1, #0
 800182a:	2028      	movs	r0, #40	; 0x28
 800182c:	f002 fd81 	bl	8004332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001830:	2028      	movs	r0, #40	; 0x28
 8001832:	f002 fd9a 	bl	800436a <HAL_NVIC_EnableIRQ>

}
 8001836:	bf00      	nop
 8001838:	3720      	adds	r7, #32
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40021000 	.word	0x40021000
 8001844:	48000400 	.word	0x48000400
 8001848:	10310000 	.word	0x10310000

0800184c <motor_init>:

/* USER CODE BEGIN 4 */
void motor_init(Motor *m, char name) {
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	70fb      	strb	r3, [r7, #3]
	m->name = name;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	78fa      	ldrb	r2, [r7, #3]
 800185c:	701a      	strb	r2, [r3, #0]
	m->direction = 0;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	705a      	strb	r2, [r3, #1]
	m->dutyCycle = 0.0;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	605a      	str	r2, [r3, #4]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <motorEncoder_init>:

void motorEncoder_init(MotorEncoder *e) {
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	e->fineAdjustment = 0;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	811a      	strh	r2, [r3, #8]
	e->lastAngle = 0.0;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	605a      	str	r2, [r3, #4]
	e->lastTicks = 0;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
	e->output = 0.0;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
	e->revolutions = 0;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	60da      	str	r2, [r3, #12]
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <motorController_init>:

void motorController_init(MotorController *c, Motor *m, MotorEncoder *e) {
 80018ae:	b480      	push	{r7}
 80018b0:	b085      	sub	sp, #20
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
	c->Encoder = e;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	615a      	str	r2, [r3, #20]
	c->lastError = 0.0;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
	c->motor = m;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	611a      	str	r2, [r3, #16]
	c->reference = 0.0;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
	c->voltage = 0.0;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	60da      	str	r2, [r3, #12]
	c->measAngVel = 0.0;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	605a      	str	r2, [r3, #4]
}
 80018e6:	bf00      	nop
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <uart_in_read>:

void uart_in_read(void (*formattingFunc)(char*, uint32_t)) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b092      	sub	sp, #72	; 0x48
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	// The position at which the DMA writes (can be larger than queue size, if DMA is a lap ahead)
	int dma_ptr = (UART_IN_BUF_SIZE - huart2.hdmarx->Instance->CNDTR) + UART_IN_BUF_SIZE * uart_dma_laps_ahead;
 80018fc:	4b5d      	ldr	r3, [pc, #372]	; (8001a74 <uart_in_read+0x180>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	021b      	lsls	r3, r3, #8
 8001902:	461a      	mov	r2, r3
 8001904:	4b5c      	ldr	r3, [pc, #368]	; (8001a78 <uart_in_read+0x184>)
 8001906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001912:	647b      	str	r3, [r7, #68]	; 0x44

	// dma_ptr - uart_in_read_ptr is the number of unread/uninterpreted bytes in queue
	for (; dma_ptr - uart_in_read_ptr > 0; uart_in_read_ptr++) {
 8001914:	e0a1      	b.n	8001a5a <uart_in_read+0x166>

		// If read pointer crosses "queue border"
		if (uart_in_read_ptr >= UART_IN_BUF_SIZE) {
 8001916:	4b59      	ldr	r3, [pc, #356]	; (8001a7c <uart_in_read+0x188>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2bff      	cmp	r3, #255	; 0xff
 800191c:	dd19      	ble.n	8001952 <uart_in_read+0x5e>
			uart_in_read_ptr = 0;
 800191e:	4b57      	ldr	r3, [pc, #348]	; (8001a7c <uart_in_read+0x188>)
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
			uart_in_lastStart -= UART_IN_BUF_SIZE;
 8001924:	4b56      	ldr	r3, [pc, #344]	; (8001a80 <uart_in_read+0x18c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800192c:	4a54      	ldr	r2, [pc, #336]	; (8001a80 <uart_in_read+0x18c>)
 800192e:	6013      	str	r3, [r2, #0]
			uart_dma_laps_ahead--;
 8001930:	4b50      	ldr	r3, [pc, #320]	; (8001a74 <uart_in_read+0x180>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	3b01      	subs	r3, #1
 8001936:	4a4f      	ldr	r2, [pc, #316]	; (8001a74 <uart_in_read+0x180>)
 8001938:	6013      	str	r3, [r2, #0]
			dma_ptr = (UART_IN_BUF_SIZE - huart2.hdmarx->Instance->CNDTR) + UART_IN_BUF_SIZE * uart_dma_laps_ahead;
 800193a:	4b4e      	ldr	r3, [pc, #312]	; (8001a74 <uart_in_read+0x180>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	021b      	lsls	r3, r3, #8
 8001940:	461a      	mov	r2, r3
 8001942:	4b4d      	ldr	r3, [pc, #308]	; (8001a78 <uart_in_read+0x184>)
 8001944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001950:	647b      	str	r3, [r7, #68]	; 0x44
		}

		// If we find the beginning of a message
		if (uart_in[uart_in_read_ptr] == COMM_DEL_START) {
 8001952:	4b4a      	ldr	r3, [pc, #296]	; (8001a7c <uart_in_read+0x188>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a4b      	ldr	r2, [pc, #300]	; (8001a84 <uart_in_read+0x190>)
 8001958:	5cd3      	ldrb	r3, [r2, r3]
 800195a:	2b24      	cmp	r3, #36	; 0x24
 800195c:	d10a      	bne.n	8001974 <uart_in_read+0x80>
			validStartDelimiter = true;
 800195e:	4b4a      	ldr	r3, [pc, #296]	; (8001a88 <uart_in_read+0x194>)
 8001960:	2201      	movs	r2, #1
 8001962:	701a      	strb	r2, [r3, #0]
			uart_in_lastStart = uart_in_read_ptr;
 8001964:	4b45      	ldr	r3, [pc, #276]	; (8001a7c <uart_in_read+0x188>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a45      	ldr	r2, [pc, #276]	; (8001a80 <uart_in_read+0x18c>)
 800196a:	6013      	str	r3, [r2, #0]
			uart_in_escapes = 0;
 800196c:	4b47      	ldr	r3, [pc, #284]	; (8001a8c <uart_in_read+0x198>)
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	e06d      	b.n	8001a50 <uart_in_read+0x15c>
		} else if (uart_in[uart_in_read_ptr] == COMM_ESCAPE)
 8001974:	4b41      	ldr	r3, [pc, #260]	; (8001a7c <uart_in_read+0x188>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a42      	ldr	r2, [pc, #264]	; (8001a84 <uart_in_read+0x190>)
 800197a:	5cd3      	ldrb	r3, [r2, r3]
 800197c:	2b23      	cmp	r3, #35	; 0x23
 800197e:	d105      	bne.n	800198c <uart_in_read+0x98>
			uart_in_escapes++;
 8001980:	4b42      	ldr	r3, [pc, #264]	; (8001a8c <uart_in_read+0x198>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	3301      	adds	r3, #1
 8001986:	4a41      	ldr	r2, [pc, #260]	; (8001a8c <uart_in_read+0x198>)
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	e061      	b.n	8001a50 <uart_in_read+0x15c>

		// If we find the end of a message
		else if (uart_in[uart_in_read_ptr] == COMM_DEL_STOP) {
 800198c:	4b3b      	ldr	r3, [pc, #236]	; (8001a7c <uart_in_read+0x188>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a3c      	ldr	r2, [pc, #240]	; (8001a84 <uart_in_read+0x190>)
 8001992:	5cd3      	ldrb	r3, [r2, r3]
 8001994:	2b40      	cmp	r3, #64	; 0x40
 8001996:	d15b      	bne.n	8001a50 <uart_in_read+0x15c>

			int frameLength = uart_in_read_ptr - uart_in_lastStart + 1;
 8001998:	4b38      	ldr	r3, [pc, #224]	; (8001a7c <uart_in_read+0x188>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4b38      	ldr	r3, [pc, #224]	; (8001a80 <uart_in_read+0x18c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	3301      	adds	r3, #1
 80019a4:	643b      	str	r3, [r7, #64]	; 0x40

			char frame[COMM_MAX_FRAME_SIZE] = { 0 };
 80019a6:	2300      	movs	r3, #0
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
 80019aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
 80019b8:	821a      	strh	r2, [r3, #16]

			// If the start and stop delimiter are on opposite sides of the "queue border"
			if (uart_in_lastStart < 0) {
 80019ba:	4b31      	ldr	r3, [pc, #196]	; (8001a80 <uart_in_read+0x18c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	da1c      	bge.n	80019fc <uart_in_read+0x108>
				memcpy(frame, uart_in + UART_IN_BUF_SIZE + uart_in_lastStart, -uart_in_lastStart);
 80019c2:	4b2f      	ldr	r3, [pc, #188]	; (8001a80 <uart_in_read+0x18c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80019ca:	4a2e      	ldr	r2, [pc, #184]	; (8001a84 <uart_in_read+0x190>)
 80019cc:	1899      	adds	r1, r3, r2
 80019ce:	4b2c      	ldr	r3, [pc, #176]	; (8001a80 <uart_in_read+0x18c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	425b      	negs	r3, r3
 80019d4:	461a      	mov	r2, r3
 80019d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019da:	4618      	mov	r0, r3
 80019dc:	f006 f854 	bl	8007a88 <memcpy>
				memcpy(frame - uart_in_lastStart, uart_in, uart_in_read_ptr + 1);
 80019e0:	4b27      	ldr	r3, [pc, #156]	; (8001a80 <uart_in_read+0x18c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	425b      	negs	r3, r3
 80019e6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80019ea:	18d0      	adds	r0, r2, r3
 80019ec:	4b23      	ldr	r3, [pc, #140]	; (8001a7c <uart_in_read+0x188>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	3301      	adds	r3, #1
 80019f2:	461a      	mov	r2, r3
 80019f4:	4923      	ldr	r1, [pc, #140]	; (8001a84 <uart_in_read+0x190>)
 80019f6:	f006 f847 	bl	8007a88 <memcpy>
 80019fa:	e00a      	b.n	8001a12 <uart_in_read+0x11e>
			} else
				memcpy(frame, uart_in + uart_in_lastStart, frameLength);
 80019fc:	4b20      	ldr	r3, [pc, #128]	; (8001a80 <uart_in_read+0x18c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <uart_in_read+0x190>)
 8001a04:	18d1      	adds	r1, r2, r3
 8001a06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f006 f83b 	bl	8007a88 <memcpy>
			validStartDelimiter = false;
 8001a12:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <uart_in_read+0x194>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	701a      	strb	r2, [r3, #0]

			char data[COMM_MAX_FRAME_SIZE] = { 0 };
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	f107 0310 	add.w	r3, r7, #16
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	821a      	strh	r2, [r3, #16]
			uint32_t *dataLength;

			if (from_frame(frame, frameLength, data, dataLength) == 1) {
 8001a2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001a2e:	f107 020c 	add.w	r2, r7, #12
 8001a32:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a38:	f7ff fa87 	bl	8000f4a <from_frame>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d106      	bne.n	8001a50 <uart_in_read+0x15c>
				(*formattingFunc)(data, *dataLength);
 8001a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a44:	6819      	ldr	r1, [r3, #0]
 8001a46:	f107 020c 	add.w	r2, r7, #12
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	4798      	blx	r3
	for (; dma_ptr - uart_in_read_ptr > 0; uart_in_read_ptr++) {
 8001a50:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <uart_in_read+0x188>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	3301      	adds	r3, #1
 8001a56:	4a09      	ldr	r2, [pc, #36]	; (8001a7c <uart_in_read+0x188>)
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <uart_in_read+0x188>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f73f af57 	bgt.w	8001916 <uart_in_read+0x22>
			}
		}
	}
}
 8001a68:	bf00      	nop
 8001a6a:	bf00      	nop
 8001a6c:	3748      	adds	r7, #72	; 0x48
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	2000003c 	.word	0x2000003c
 8001a78:	200003e8 	.word	0x200003e8
 8001a7c:	20000038 	.word	0x20000038
 8001a80:	20000000 	.word	0x20000000
 8001a84:	20000040 	.word	0x20000040
 8001a88:	20000034 	.word	0x20000034
 8001a8c:	20000140 	.word	0x20000140

08001a90 <referenceFormatting>:

void referenceFormatting(char *uart_msg, uint32_t len) {
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]

	// Check length of msg
	if (len != 10) return;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	2b0a      	cmp	r3, #10
 8001a9e:	d115      	bne.n	8001acc <referenceFormatting+0x3c>

	// Retrieve reference for right wheel
	if (uart_msg[0] == 'R') {
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b52      	cmp	r3, #82	; 0x52
 8001aa6:	d113      	bne.n	8001ad0 <referenceFormatting+0x40>
		memcpy(&controllerR.reference, uart_msg + 1, 4);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <referenceFormatting+0x50>)
 8001ab2:	601a      	str	r2, [r3, #0]
	} else {
		return;
	}

	// Retrieve reference for left wheel
	if (uart_msg[5] == 'L') {
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3305      	adds	r3, #5
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b4c      	cmp	r3, #76	; 0x4c
 8001abc:	d10a      	bne.n	8001ad4 <referenceFormatting+0x44>
		memcpy(&controllerL.reference, uart_msg + 6, 4);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3306      	adds	r3, #6
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <referenceFormatting+0x54>)
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	e004      	b.n	8001ad6 <referenceFormatting+0x46>
	if (len != 10) return;
 8001acc:	bf00      	nop
 8001ace:	e002      	b.n	8001ad6 <referenceFormatting+0x46>
		return;
 8001ad0:	bf00      	nop
 8001ad2:	e000      	b.n	8001ad6 <referenceFormatting+0x46>
	} else {
		return;
 8001ad4:	bf00      	nop
	}
}
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	20000338 	.word	0x20000338
 8001ae4:	2000026c 	.word	0x2000026c

08001ae8 <calcDistance>:

float calcDistance(MotorController *c) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	float deltaTicks = c->Encoder->output * TOTAL_WHEEL_TICKS - c->Encoder->lastTicks;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001af8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001b58 <calcDistance+0x70>
 8001afc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	695b      	ldr	r3, [r3, #20]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	ee07 3a90 	vmov	s15, r3
 8001b0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b12:	edc7 7a03 	vstr	s15, [r7, #12]
	return M_PI * WHEELDIA * (deltaTicks / TOTAL_WHEEL_TICKS);
 8001b16:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b1a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001b58 <calcDistance+0x70>
 8001b1e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001b22:	ee16 0a90 	vmov	r0, s13
 8001b26:	f7fe fcb7 	bl	8000498 <__aeabi_f2d>
 8001b2a:	a309      	add	r3, pc, #36	; (adr r3, 8001b50 <calcDistance+0x68>)
 8001b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b30:	f7fe fd0a 	bl	8000548 <__aeabi_dmul>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f7fe ffc6 	bl	8000acc <__aeabi_d2f>
 8001b40:	4603      	mov	r3, r0
 8001b42:	ee07 3a90 	vmov	s15, r3
}
 8001b46:	eeb0 0a67 	vmov.f32	s0, s15
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	9217271a 	.word	0x9217271a
 8001b54:	3fd015bf 	.word	0x3fd015bf
 8001b58:	44f00000 	.word	0x44f00000
 8001b5c:	00000000 	.word	0x00000000

08001b60 <calcPositionAndVelocity>:

void calcPositionAndVelocity() {
 8001b60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b64:	b084      	sub	sp, #16
 8001b66:	af00      	add	r7, sp, #0
	float distR = calcDistance(&controllerR);
 8001b68:	487b      	ldr	r0, [pc, #492]	; (8001d58 <calcPositionAndVelocity+0x1f8>)
 8001b6a:	f7ff ffbd 	bl	8001ae8 <calcDistance>
 8001b6e:	ed87 0a03 	vstr	s0, [r7, #12]
	float distL = calcDistance(&controllerL);
 8001b72:	487a      	ldr	r0, [pc, #488]	; (8001d5c <calcPositionAndVelocity+0x1fc>)
 8001b74:	f7ff ffb8 	bl	8001ae8 <calcDistance>
 8001b78:	ed87 0a02 	vstr	s0, [r7, #8]
	controllerR.Encoder->lastTicks = controllerR.Encoder->output * TOTAL_WHEEL_TICKS;
 8001b7c:	4b76      	ldr	r3, [pc, #472]	; (8001d58 <calcPositionAndVelocity+0x1f8>)
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b84:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001d60 <calcPositionAndVelocity+0x200>
 8001b88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b8c:	4b72      	ldr	r3, [pc, #456]	; (8001d58 <calcPositionAndVelocity+0x1f8>)
 8001b8e:	695b      	ldr	r3, [r3, #20]
 8001b90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b94:	ee17 2a90 	vmov	r2, s15
 8001b98:	601a      	str	r2, [r3, #0]
	controllerL.Encoder->lastTicks = controllerL.Encoder->output * TOTAL_WHEEL_TICKS;
 8001b9a:	4b70      	ldr	r3, [pc, #448]	; (8001d5c <calcPositionAndVelocity+0x1fc>)
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ba2:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8001d60 <calcPositionAndVelocity+0x200>
 8001ba6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001baa:	4b6c      	ldr	r3, [pc, #432]	; (8001d5c <calcPositionAndVelocity+0x1fc>)
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bb2:	ee17 2a90 	vmov	r2, s15
 8001bb6:	601a      	str	r2, [r3, #0]
	float dist = (distL + distR) / 2;
 8001bb8:	ed97 7a02 	vldr	s14, [r7, #8]
 8001bbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bc4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001bc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bcc:	edc7 7a01 	vstr	s15, [r7, #4]
	posX = posX + dist * cos(posPhi);
 8001bd0:	4b64      	ldr	r3, [pc, #400]	; (8001d64 <calcPositionAndVelocity+0x204>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fc5f 	bl	8000498 <__aeabi_f2d>
 8001bda:	4604      	mov	r4, r0
 8001bdc:	460d      	mov	r5, r1
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7fe fc5a 	bl	8000498 <__aeabi_f2d>
 8001be4:	4680      	mov	r8, r0
 8001be6:	4689      	mov	r9, r1
 8001be8:	4b5f      	ldr	r3, [pc, #380]	; (8001d68 <calcPositionAndVelocity+0x208>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe fc53 	bl	8000498 <__aeabi_f2d>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	ec43 2b10 	vmov	d0, r2, r3
 8001bfa:	f005 ff5d 	bl	8007ab8 <cos>
 8001bfe:	ec53 2b10 	vmov	r2, r3, d0
 8001c02:	4640      	mov	r0, r8
 8001c04:	4649      	mov	r1, r9
 8001c06:	f7fe fc9f 	bl	8000548 <__aeabi_dmul>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4620      	mov	r0, r4
 8001c10:	4629      	mov	r1, r5
 8001c12:	f7fe fae3 	bl	80001dc <__adddf3>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4610      	mov	r0, r2
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f7fe ff55 	bl	8000acc <__aeabi_d2f>
 8001c22:	4603      	mov	r3, r0
 8001c24:	4a4f      	ldr	r2, [pc, #316]	; (8001d64 <calcPositionAndVelocity+0x204>)
 8001c26:	6013      	str	r3, [r2, #0]
	posY = posY + dist * sin(posPhi);
 8001c28:	4b50      	ldr	r3, [pc, #320]	; (8001d6c <calcPositionAndVelocity+0x20c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fc33 	bl	8000498 <__aeabi_f2d>
 8001c32:	4604      	mov	r4, r0
 8001c34:	460d      	mov	r5, r1
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7fe fc2e 	bl	8000498 <__aeabi_f2d>
 8001c3c:	4680      	mov	r8, r0
 8001c3e:	4689      	mov	r9, r1
 8001c40:	4b49      	ldr	r3, [pc, #292]	; (8001d68 <calcPositionAndVelocity+0x208>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe fc27 	bl	8000498 <__aeabi_f2d>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	ec43 2b10 	vmov	d0, r2, r3
 8001c52:	f005 ff81 	bl	8007b58 <sin>
 8001c56:	ec53 2b10 	vmov	r2, r3, d0
 8001c5a:	4640      	mov	r0, r8
 8001c5c:	4649      	mov	r1, r9
 8001c5e:	f7fe fc73 	bl	8000548 <__aeabi_dmul>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4620      	mov	r0, r4
 8001c68:	4629      	mov	r1, r5
 8001c6a:	f7fe fab7 	bl	80001dc <__adddf3>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4610      	mov	r0, r2
 8001c74:	4619      	mov	r1, r3
 8001c76:	f7fe ff29 	bl	8000acc <__aeabi_d2f>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	4a3b      	ldr	r2, [pc, #236]	; (8001d6c <calcPositionAndVelocity+0x20c>)
 8001c7e:	6013      	str	r3, [r2, #0]
	posPhi = posPhi + (distR - distL) / DISBETWHEEL;
 8001c80:	4b39      	ldr	r3, [pc, #228]	; (8001d68 <calcPositionAndVelocity+0x208>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe fc07 	bl	8000498 <__aeabi_f2d>
 8001c8a:	4604      	mov	r4, r0
 8001c8c:	460d      	mov	r5, r1
 8001c8e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c92:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c9a:	ee17 0a90 	vmov	r0, s15
 8001c9e:	f7fe fbfb 	bl	8000498 <__aeabi_f2d>
 8001ca2:	a32b      	add	r3, pc, #172	; (adr r3, 8001d50 <calcPositionAndVelocity+0x1f0>)
 8001ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca8:	f7fe fd78 	bl	800079c <__aeabi_ddiv>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4620      	mov	r0, r4
 8001cb2:	4629      	mov	r1, r5
 8001cb4:	f7fe fa92 	bl	80001dc <__adddf3>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f7fe ff04 	bl	8000acc <__aeabi_d2f>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	4a28      	ldr	r2, [pc, #160]	; (8001d68 <calcPositionAndVelocity+0x208>)
 8001cc8:	6013      	str	r3, [r2, #0]

	velPhi = ((posPhi - posPhiPrev)) / positionCalculationPeriod;
 8001cca:	4b27      	ldr	r3, [pc, #156]	; (8001d68 <calcPositionAndVelocity+0x208>)
 8001ccc:	ed93 7a00 	vldr	s14, [r3]
 8001cd0:	4b27      	ldr	r3, [pc, #156]	; (8001d70 <calcPositionAndVelocity+0x210>)
 8001cd2:	edd3 7a00 	vldr	s15, [r3]
 8001cd6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001cda:	4b26      	ldr	r3, [pc, #152]	; (8001d74 <calcPositionAndVelocity+0x214>)
 8001cdc:	ed93 7a00 	vldr	s14, [r3]
 8001ce0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ce4:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <calcPositionAndVelocity+0x218>)
 8001ce6:	edc3 7a00 	vstr	s15, [r3]
	velX = (posX - posXPrev) / positionCalculationPeriod;
 8001cea:	4b1e      	ldr	r3, [pc, #120]	; (8001d64 <calcPositionAndVelocity+0x204>)
 8001cec:	ed93 7a00 	vldr	s14, [r3]
 8001cf0:	4b22      	ldr	r3, [pc, #136]	; (8001d7c <calcPositionAndVelocity+0x21c>)
 8001cf2:	edd3 7a00 	vldr	s15, [r3]
 8001cf6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001cfa:	4b1e      	ldr	r3, [pc, #120]	; (8001d74 <calcPositionAndVelocity+0x214>)
 8001cfc:	ed93 7a00 	vldr	s14, [r3]
 8001d00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d04:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <calcPositionAndVelocity+0x220>)
 8001d06:	edc3 7a00 	vstr	s15, [r3]
	velY = (posY - posYPrev) / positionCalculationPeriod;
 8001d0a:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <calcPositionAndVelocity+0x20c>)
 8001d0c:	ed93 7a00 	vldr	s14, [r3]
 8001d10:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <calcPositionAndVelocity+0x224>)
 8001d12:	edd3 7a00 	vldr	s15, [r3]
 8001d16:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d1a:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <calcPositionAndVelocity+0x214>)
 8001d1c:	ed93 7a00 	vldr	s14, [r3]
 8001d20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d24:	4b18      	ldr	r3, [pc, #96]	; (8001d88 <calcPositionAndVelocity+0x228>)
 8001d26:	edc3 7a00 	vstr	s15, [r3]

	posPhiPrev = posPhi;
 8001d2a:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <calcPositionAndVelocity+0x208>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a10      	ldr	r2, [pc, #64]	; (8001d70 <calcPositionAndVelocity+0x210>)
 8001d30:	6013      	str	r3, [r2, #0]
	posXPrev = posX;
 8001d32:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <calcPositionAndVelocity+0x204>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a11      	ldr	r2, [pc, #68]	; (8001d7c <calcPositionAndVelocity+0x21c>)
 8001d38:	6013      	str	r3, [r2, #0]
	posYPrev = posY;
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <calcPositionAndVelocity+0x20c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a11      	ldr	r2, [pc, #68]	; (8001d84 <calcPositionAndVelocity+0x224>)
 8001d40:	6013      	str	r3, [r2, #0]
}
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d4c:	f3af 8000 	nop.w
 8001d50:	851eb852 	.word	0x851eb852
 8001d54:	3fd851eb 	.word	0x3fd851eb
 8001d58:	20000338 	.word	0x20000338
 8001d5c:	2000026c 	.word	0x2000026c
 8001d60:	44f00000 	.word	0x44f00000
 8001d64:	20000188 	.word	0x20000188
 8001d68:	20000198 	.word	0x20000198
 8001d6c:	20000190 	.word	0x20000190
 8001d70:	2000019c 	.word	0x2000019c
 8001d74:	20000268 	.word	0x20000268
 8001d78:	200001a8 	.word	0x200001a8
 8001d7c:	2000018c 	.word	0x2000018c
 8001d80:	200001a0 	.word	0x200001a0
 8001d84:	20000194 	.word	0x20000194
 8001d88:	200001a4 	.word	0x200001a4

08001d8c <updatePositionsAndVelocities>:

void updatePositionsAndVelocities() {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0

	// Position and velocity data from wheel encoders
	calcPositionAndVelocity();
 8001d90:	f7ff fee6 	bl	8001b60 <calcPositionAndVelocity>
	sendPositionAndVelocity();
 8001d94:	f000 f89c 	bl	8001ed0 <sendPositionAndVelocity>

	// Encoder data from top plate
	calcOrientOutput();
 8001d98:	f000 fc52 	bl	8002640 <calcOrientOutput>
	sendOrientData();
 8001d9c:	f000 fd4a 	bl	8002834 <sendOrientData>
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <packThe6Floats>:

void packThe6Floats() {
 8001da4:	b480      	push	{r7}
 8001da6:	b089      	sub	sp, #36	; 0x24
 8001da8:	af00      	add	r7, sp, #0
	uint8_t *pointer = &posX;
 8001daa:	4b42      	ldr	r3, [pc, #264]	; (8001eb4 <packThe6Floats+0x110>)
 8001dac:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 4; i++) {
 8001dae:	2300      	movs	r3, #0
 8001db0:	61fb      	str	r3, [r7, #28]
 8001db2:	e00b      	b.n	8001dcc <packThe6Floats+0x28>
		position[i] = *(pointer + i);
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	7819      	ldrb	r1, [r3, #0]
 8001dbc:	4a3e      	ldr	r2, [pc, #248]	; (8001eb8 <packThe6Floats+0x114>)
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	460a      	mov	r2, r1
 8001dc4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	61fb      	str	r3, [r7, #28]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	2b03      	cmp	r3, #3
 8001dd0:	ddf0      	ble.n	8001db4 <packThe6Floats+0x10>
	}

	pointer = &posY;
 8001dd2:	4b3a      	ldr	r3, [pc, #232]	; (8001ebc <packThe6Floats+0x118>)
 8001dd4:	607b      	str	r3, [r7, #4]
	for (int k = 4; k < 8; k++) {
 8001dd6:	2304      	movs	r3, #4
 8001dd8:	61bb      	str	r3, [r7, #24]
 8001dda:	e00c      	b.n	8001df6 <packThe6Floats+0x52>
		position[k] = *(pointer + k - 4);
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	3b04      	subs	r3, #4
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	4413      	add	r3, r2
 8001de4:	7819      	ldrb	r1, [r3, #0]
 8001de6:	4a34      	ldr	r2, [pc, #208]	; (8001eb8 <packThe6Floats+0x114>)
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	4413      	add	r3, r2
 8001dec:	460a      	mov	r2, r1
 8001dee:	701a      	strb	r2, [r3, #0]
	for (int k = 4; k < 8; k++) {
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	3301      	adds	r3, #1
 8001df4:	61bb      	str	r3, [r7, #24]
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	2b07      	cmp	r3, #7
 8001dfa:	ddef      	ble.n	8001ddc <packThe6Floats+0x38>
	}
	pointer = &posPhi;
 8001dfc:	4b30      	ldr	r3, [pc, #192]	; (8001ec0 <packThe6Floats+0x11c>)
 8001dfe:	607b      	str	r3, [r7, #4]
	for (int j = 8; j < 12; j++) {
 8001e00:	2308      	movs	r3, #8
 8001e02:	617b      	str	r3, [r7, #20]
 8001e04:	e00c      	b.n	8001e20 <packThe6Floats+0x7c>
		position[j] = *(pointer + j - 8);
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	3b08      	subs	r3, #8
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	7819      	ldrb	r1, [r3, #0]
 8001e10:	4a29      	ldr	r2, [pc, #164]	; (8001eb8 <packThe6Floats+0x114>)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	4413      	add	r3, r2
 8001e16:	460a      	mov	r2, r1
 8001e18:	701a      	strb	r2, [r3, #0]
	for (int j = 8; j < 12; j++) {
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	2b0b      	cmp	r3, #11
 8001e24:	ddef      	ble.n	8001e06 <packThe6Floats+0x62>
	}
	pointer = &velX;
 8001e26:	4b27      	ldr	r3, [pc, #156]	; (8001ec4 <packThe6Floats+0x120>)
 8001e28:	607b      	str	r3, [r7, #4]
	for (int m = 12; m < 16; m++) {
 8001e2a:	230c      	movs	r3, #12
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	e00c      	b.n	8001e4a <packThe6Floats+0xa6>
		position[m] = *(pointer + m - 12);
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	3b0c      	subs	r3, #12
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	4413      	add	r3, r2
 8001e38:	7819      	ldrb	r1, [r3, #0]
 8001e3a:	4a1f      	ldr	r2, [pc, #124]	; (8001eb8 <packThe6Floats+0x114>)
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4413      	add	r3, r2
 8001e40:	460a      	mov	r2, r1
 8001e42:	701a      	strb	r2, [r3, #0]
	for (int m = 12; m < 16; m++) {
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	3301      	adds	r3, #1
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	2b0f      	cmp	r3, #15
 8001e4e:	ddef      	ble.n	8001e30 <packThe6Floats+0x8c>
	}
	pointer = &velY;
 8001e50:	4b1d      	ldr	r3, [pc, #116]	; (8001ec8 <packThe6Floats+0x124>)
 8001e52:	607b      	str	r3, [r7, #4]
	for (int n = 16; n < 20; n++) {
 8001e54:	2310      	movs	r3, #16
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	e00c      	b.n	8001e74 <packThe6Floats+0xd0>
		position[n] = *(pointer + n - 16);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	3b10      	subs	r3, #16
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	7819      	ldrb	r1, [r3, #0]
 8001e64:	4a14      	ldr	r2, [pc, #80]	; (8001eb8 <packThe6Floats+0x114>)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	4413      	add	r3, r2
 8001e6a:	460a      	mov	r2, r1
 8001e6c:	701a      	strb	r2, [r3, #0]
	for (int n = 16; n < 20; n++) {
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	3301      	adds	r3, #1
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2b13      	cmp	r3, #19
 8001e78:	ddef      	ble.n	8001e5a <packThe6Floats+0xb6>
	}
	pointer = &velPhi;
 8001e7a:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <packThe6Floats+0x128>)
 8001e7c:	607b      	str	r3, [r7, #4]
	for (int o = 20; o < 24; o++) {
 8001e7e:	2314      	movs	r3, #20
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	e00c      	b.n	8001e9e <packThe6Floats+0xfa>
		position[o] = *(pointer + o - 20);
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	3b14      	subs	r3, #20
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	7819      	ldrb	r1, [r3, #0]
 8001e8e:	4a0a      	ldr	r2, [pc, #40]	; (8001eb8 <packThe6Floats+0x114>)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	4413      	add	r3, r2
 8001e94:	460a      	mov	r2, r1
 8001e96:	701a      	strb	r2, [r3, #0]
	for (int o = 20; o < 24; o++) {
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	2b17      	cmp	r3, #23
 8001ea2:	ddef      	ble.n	8001e84 <packThe6Floats+0xe0>
	}
}
 8001ea4:	bf00      	nop
 8001ea6:	bf00      	nop
 8001ea8:	3724      	adds	r7, #36	; 0x24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	20000188 	.word	0x20000188
 8001eb8:	200001ac 	.word	0x200001ac
 8001ebc:	20000190 	.word	0x20000190
 8001ec0:	20000198 	.word	0x20000198
 8001ec4:	200001a0 	.word	0x200001a0
 8001ec8:	200001a4 	.word	0x200001a4
 8001ecc:	200001a8 	.word	0x200001a8

08001ed0 <sendPositionAndVelocity>:

void sendPositionAndVelocity() {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
	if (spamCheckX != posX || spamCheckY != posY || spamCheckPhi != posPhi) {
 8001ed4:	4b20      	ldr	r3, [pc, #128]	; (8001f58 <sendPositionAndVelocity+0x88>)
 8001ed6:	ed93 7a00 	vldr	s14, [r3]
 8001eda:	4b20      	ldr	r3, [pc, #128]	; (8001f5c <sendPositionAndVelocity+0x8c>)
 8001edc:	edd3 7a00 	vldr	s15, [r3]
 8001ee0:	eeb4 7a67 	vcmp.f32	s14, s15
 8001ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee8:	d115      	bne.n	8001f16 <sendPositionAndVelocity+0x46>
 8001eea:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <sendPositionAndVelocity+0x90>)
 8001eec:	ed93 7a00 	vldr	s14, [r3]
 8001ef0:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <sendPositionAndVelocity+0x94>)
 8001ef2:	edd3 7a00 	vldr	s15, [r3]
 8001ef6:	eeb4 7a67 	vcmp.f32	s14, s15
 8001efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efe:	d10a      	bne.n	8001f16 <sendPositionAndVelocity+0x46>
 8001f00:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <sendPositionAndVelocity+0x98>)
 8001f02:	ed93 7a00 	vldr	s14, [r3]
 8001f06:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <sendPositionAndVelocity+0x9c>)
 8001f08:	edd3 7a00 	vldr	s15, [r3]
 8001f0c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f14:	d01e      	beq.n	8001f54 <sendPositionAndVelocity+0x84>
		spamCheckX = posX;
 8001f16:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <sendPositionAndVelocity+0x8c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a0f      	ldr	r2, [pc, #60]	; (8001f58 <sendPositionAndVelocity+0x88>)
 8001f1c:	6013      	str	r3, [r2, #0]
		spamCheckY = posY;
 8001f1e:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <sendPositionAndVelocity+0x94>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a0f      	ldr	r2, [pc, #60]	; (8001f60 <sendPositionAndVelocity+0x90>)
 8001f24:	6013      	str	r3, [r2, #0]
		spamCheckPhi = posPhi;
 8001f26:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <sendPositionAndVelocity+0x9c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a0f      	ldr	r2, [pc, #60]	; (8001f68 <sendPositionAndVelocity+0x98>)
 8001f2c:	6013      	str	r3, [r2, #0]
		packThe6Floats();
 8001f2e:	f7ff ff39 	bl	8001da4 <packThe6Floats>
		memset(packedMotorData, 0, sizeof(packedMotorData));
 8001f32:	2232      	movs	r2, #50	; 0x32
 8001f34:	2100      	movs	r1, #0
 8001f36:	480e      	ldr	r0, [pc, #56]	; (8001f70 <sendPositionAndVelocity+0xa0>)
 8001f38:	f005 fdb4 	bl	8007aa4 <memset>

		to_frame(packedMotorData, position, 3);
 8001f3c:	2203      	movs	r2, #3
 8001f3e:	490d      	ldr	r1, [pc, #52]	; (8001f74 <sendPositionAndVelocity+0xa4>)
 8001f40:	480b      	ldr	r0, [pc, #44]	; (8001f70 <sendPositionAndVelocity+0xa0>)
 8001f42:	f7fe ff8f 	bl	8000e64 <to_frame>
		HAL_UART_Transmit(&huart2, packedMotorData, sizeof(packedMotorData), HAL_MAX_DELAY);
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f4a:	2232      	movs	r2, #50	; 0x32
 8001f4c:	4908      	ldr	r1, [pc, #32]	; (8001f70 <sendPositionAndVelocity+0xa0>)
 8001f4e:	480a      	ldr	r0, [pc, #40]	; (8001f78 <sendPositionAndVelocity+0xa8>)
 8001f50:	f004 ffaa 	bl	8006ea8 <HAL_UART_Transmit>
	}
}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	2000014c 	.word	0x2000014c
 8001f5c:	20000188 	.word	0x20000188
 8001f60:	20000148 	.word	0x20000148
 8001f64:	20000190 	.word	0x20000190
 8001f68:	20000150 	.word	0x20000150
 8001f6c:	20000198 	.word	0x20000198
 8001f70:	20000154 	.word	0x20000154
 8001f74:	200001ac 	.word	0x200001ac
 8001f78:	200003e8 	.word	0x200003e8

08001f7c <clockcheckRight>:
	c->Encoder->output = 0.0;
	c->Encoder->fineAdjustment = 0;
	c->Encoder->revolutions = 0;
}

void clockcheckRight() {
 8001f7c:	b598      	push	{r3, r4, r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(motor_Right_clock_GPIO_Port, motor_Right_clock_Pin) == HAL_GPIO_ReadPin(Motor_counterclock_right_GPIO_Port, Motor_counterclock_right_Pin)) {
 8001f80:	2101      	movs	r1, #1
 8001f82:	482a      	ldr	r0, [pc, #168]	; (800202c <clockcheckRight+0xb0>)
 8001f84:	f002 fd6e 	bl	8004a64 <HAL_GPIO_ReadPin>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	461c      	mov	r4, r3
 8001f8c:	2110      	movs	r1, #16
 8001f8e:	4827      	ldr	r0, [pc, #156]	; (800202c <clockcheckRight+0xb0>)
 8001f90:	f002 fd68 	bl	8004a64 <HAL_GPIO_ReadPin>
 8001f94:	4603      	mov	r3, r0
 8001f96:	429c      	cmp	r4, r3
 8001f98:	d122      	bne.n	8001fe0 <clockcheckRight+0x64>
		controllerR.motor->direction = -1;
 8001f9a:	4b25      	ldr	r3, [pc, #148]	; (8002030 <clockcheckRight+0xb4>)
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	22ff      	movs	r2, #255	; 0xff
 8001fa0:	705a      	strb	r2, [r3, #1]
		controllerR.Encoder->fineAdjustment = abs((controllerR.Encoder->fineAdjustment + controllerR.motor->direction) % TOTAL_WHEEL_TICKS);
 8001fa2:	4b23      	ldr	r3, [pc, #140]	; (8002030 <clockcheckRight+0xb4>)
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001faa:	461a      	mov	r2, r3
 8001fac:	4b20      	ldr	r3, [pc, #128]	; (8002030 <clockcheckRight+0xb4>)
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001fb4:	441a      	add	r2, r3
 8001fb6:	4b1f      	ldr	r3, [pc, #124]	; (8002034 <clockcheckRight+0xb8>)
 8001fb8:	fb83 1302 	smull	r1, r3, r3, r2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	1299      	asrs	r1, r3, #10
 8001fc0:	17d3      	asrs	r3, r2, #31
 8001fc2:	1ac9      	subs	r1, r1, r3
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	011b      	lsls	r3, r3, #4
 8001fc8:	1a5b      	subs	r3, r3, r1
 8001fca:	01db      	lsls	r3, r3, #7
 8001fcc:	1ad1      	subs	r1, r2, r3
 8001fce:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 8001fd2:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 8001fd6:	4b16      	ldr	r3, [pc, #88]	; (8002030 <clockcheckRight+0xb4>)
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	b212      	sxth	r2, r2
 8001fdc:	811a      	strh	r2, [r3, #8]
 8001fde:	e020      	b.n	8002022 <clockcheckRight+0xa6>
	} else {
		controllerR.motor->direction = 1;
 8001fe0:	4b13      	ldr	r3, [pc, #76]	; (8002030 <clockcheckRight+0xb4>)
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	705a      	strb	r2, [r3, #1]
		controllerR.Encoder->fineAdjustment = abs((controllerR.Encoder->fineAdjustment + controllerR.motor->direction) % (TOTAL_WHEEL_TICKS + 1));
 8001fe8:	4b11      	ldr	r3, [pc, #68]	; (8002030 <clockcheckRight+0xb4>)
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <clockcheckRight+0xb4>)
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001ffa:	18d1      	adds	r1, r2, r3
 8001ffc:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <clockcheckRight+0xbc>)
 8001ffe:	fb83 2301 	smull	r2, r3, r3, r1
 8002002:	115a      	asrs	r2, r3, #5
 8002004:	17cb      	asrs	r3, r1, #31
 8002006:	1ad2      	subs	r2, r2, r3
 8002008:	4613      	mov	r3, r2
 800200a:	011b      	lsls	r3, r3, #4
 800200c:	1a9b      	subs	r3, r3, r2
 800200e:	01db      	lsls	r3, r3, #7
 8002010:	4413      	add	r3, r2
 8002012:	1aca      	subs	r2, r1, r3
 8002014:	2a00      	cmp	r2, #0
 8002016:	bfb8      	it	lt
 8002018:	4252      	neglt	r2, r2
 800201a:	4b05      	ldr	r3, [pc, #20]	; (8002030 <clockcheckRight+0xb4>)
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	b212      	sxth	r2, r2
 8002020:	811a      	strh	r2, [r3, #8]
	}

	checkRevolutions(&controllerR);
 8002022:	4803      	ldr	r0, [pc, #12]	; (8002030 <clockcheckRight+0xb4>)
 8002024:	f000 f92e 	bl	8002284 <checkRevolutions>
}
 8002028:	bf00      	nop
 800202a:	bd98      	pop	{r3, r4, r7, pc}
 800202c:	48000400 	.word	0x48000400
 8002030:	20000338 	.word	0x20000338
 8002034:	88888889 	.word	0x88888889
 8002038:	0443b2b5 	.word	0x0443b2b5

0800203c <counterclockcheckRight>:

void counterclockcheckRight() {
 800203c:	b598      	push	{r3, r4, r7, lr}
 800203e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(motor_Right_clock_GPIO_Port, motor_Right_clock_Pin) == HAL_GPIO_ReadPin(Motor_counterclock_right_GPIO_Port, Motor_counterclock_right_Pin)) {
 8002040:	2101      	movs	r1, #1
 8002042:	482a      	ldr	r0, [pc, #168]	; (80020ec <counterclockcheckRight+0xb0>)
 8002044:	f002 fd0e 	bl	8004a64 <HAL_GPIO_ReadPin>
 8002048:	4603      	mov	r3, r0
 800204a:	461c      	mov	r4, r3
 800204c:	2110      	movs	r1, #16
 800204e:	4827      	ldr	r0, [pc, #156]	; (80020ec <counterclockcheckRight+0xb0>)
 8002050:	f002 fd08 	bl	8004a64 <HAL_GPIO_ReadPin>
 8002054:	4603      	mov	r3, r0
 8002056:	429c      	cmp	r4, r3
 8002058:	d121      	bne.n	800209e <counterclockcheckRight+0x62>
		controllerR.motor->direction = 1;
 800205a:	4b25      	ldr	r3, [pc, #148]	; (80020f0 <counterclockcheckRight+0xb4>)
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	2201      	movs	r2, #1
 8002060:	705a      	strb	r2, [r3, #1]
		controllerR.Encoder->fineAdjustment = abs((controllerR.Encoder->fineAdjustment + controllerR.motor->direction) % (TOTAL_WHEEL_TICKS + 1));
 8002062:	4b23      	ldr	r3, [pc, #140]	; (80020f0 <counterclockcheckRight+0xb4>)
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800206a:	461a      	mov	r2, r3
 800206c:	4b20      	ldr	r3, [pc, #128]	; (80020f0 <counterclockcheckRight+0xb4>)
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002074:	18d1      	adds	r1, r2, r3
 8002076:	4b1f      	ldr	r3, [pc, #124]	; (80020f4 <counterclockcheckRight+0xb8>)
 8002078:	fb83 2301 	smull	r2, r3, r3, r1
 800207c:	115a      	asrs	r2, r3, #5
 800207e:	17cb      	asrs	r3, r1, #31
 8002080:	1ad2      	subs	r2, r2, r3
 8002082:	4613      	mov	r3, r2
 8002084:	011b      	lsls	r3, r3, #4
 8002086:	1a9b      	subs	r3, r3, r2
 8002088:	01db      	lsls	r3, r3, #7
 800208a:	4413      	add	r3, r2
 800208c:	1aca      	subs	r2, r1, r3
 800208e:	2a00      	cmp	r2, #0
 8002090:	bfb8      	it	lt
 8002092:	4252      	neglt	r2, r2
 8002094:	4b16      	ldr	r3, [pc, #88]	; (80020f0 <counterclockcheckRight+0xb4>)
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	b212      	sxth	r2, r2
 800209a:	811a      	strh	r2, [r3, #8]
 800209c:	e021      	b.n	80020e2 <counterclockcheckRight+0xa6>
	} else {
		controllerR.motor->direction = -1;
 800209e:	4b14      	ldr	r3, [pc, #80]	; (80020f0 <counterclockcheckRight+0xb4>)
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	22ff      	movs	r2, #255	; 0xff
 80020a4:	705a      	strb	r2, [r3, #1]
		controllerR.Encoder->fineAdjustment = abs((controllerR.Encoder->fineAdjustment + controllerR.motor->direction) % TOTAL_WHEEL_TICKS);
 80020a6:	4b12      	ldr	r3, [pc, #72]	; (80020f0 <counterclockcheckRight+0xb4>)
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80020ae:	461a      	mov	r2, r3
 80020b0:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <counterclockcheckRight+0xb4>)
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80020b8:	441a      	add	r2, r3
 80020ba:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <counterclockcheckRight+0xbc>)
 80020bc:	fb83 1302 	smull	r1, r3, r3, r2
 80020c0:	4413      	add	r3, r2
 80020c2:	1299      	asrs	r1, r3, #10
 80020c4:	17d3      	asrs	r3, r2, #31
 80020c6:	1ac9      	subs	r1, r1, r3
 80020c8:	460b      	mov	r3, r1
 80020ca:	011b      	lsls	r3, r3, #4
 80020cc:	1a5b      	subs	r3, r3, r1
 80020ce:	01db      	lsls	r3, r3, #7
 80020d0:	1ad1      	subs	r1, r2, r3
 80020d2:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 80020d6:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 80020da:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <counterclockcheckRight+0xb4>)
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	b212      	sxth	r2, r2
 80020e0:	811a      	strh	r2, [r3, #8]
	}

	checkRevolutions(&controllerR);
 80020e2:	4803      	ldr	r0, [pc, #12]	; (80020f0 <counterclockcheckRight+0xb4>)
 80020e4:	f000 f8ce 	bl	8002284 <checkRevolutions>
}
 80020e8:	bf00      	nop
 80020ea:	bd98      	pop	{r3, r4, r7, pc}
 80020ec:	48000400 	.word	0x48000400
 80020f0:	20000338 	.word	0x20000338
 80020f4:	0443b2b5 	.word	0x0443b2b5
 80020f8:	88888889 	.word	0x88888889

080020fc <clockcheckLeft>:

void clockcheckLeft() {
 80020fc:	b598      	push	{r3, r4, r7, lr}
 80020fe:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(Motor_Left_clock_GPIO_Port, Motor_Left_clock_Pin) == HAL_GPIO_ReadPin(Motor_left_counterclock_GPIO_Port, Motor_left_counterclock_Pin)) {
 8002100:	2120      	movs	r1, #32
 8002102:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002106:	f002 fcad 	bl	8004a64 <HAL_GPIO_ReadPin>
 800210a:	4603      	mov	r3, r0
 800210c:	461c      	mov	r4, r3
 800210e:	2102      	movs	r1, #2
 8002110:	4827      	ldr	r0, [pc, #156]	; (80021b0 <clockcheckLeft+0xb4>)
 8002112:	f002 fca7 	bl	8004a64 <HAL_GPIO_ReadPin>
 8002116:	4603      	mov	r3, r0
 8002118:	429c      	cmp	r4, r3
 800211a:	d122      	bne.n	8002162 <clockcheckLeft+0x66>
		controllerL.motor->direction = -1;
 800211c:	4b25      	ldr	r3, [pc, #148]	; (80021b4 <clockcheckLeft+0xb8>)
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	22ff      	movs	r2, #255	; 0xff
 8002122:	705a      	strb	r2, [r3, #1]
		controllerL.Encoder->fineAdjustment = abs((controllerL.Encoder->fineAdjustment + controllerL.motor->direction) % TOTAL_WHEEL_TICKS);
 8002124:	4b23      	ldr	r3, [pc, #140]	; (80021b4 <clockcheckLeft+0xb8>)
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800212c:	461a      	mov	r2, r3
 800212e:	4b21      	ldr	r3, [pc, #132]	; (80021b4 <clockcheckLeft+0xb8>)
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002136:	441a      	add	r2, r3
 8002138:	4b1f      	ldr	r3, [pc, #124]	; (80021b8 <clockcheckLeft+0xbc>)
 800213a:	fb83 1302 	smull	r1, r3, r3, r2
 800213e:	4413      	add	r3, r2
 8002140:	1299      	asrs	r1, r3, #10
 8002142:	17d3      	asrs	r3, r2, #31
 8002144:	1ac9      	subs	r1, r1, r3
 8002146:	460b      	mov	r3, r1
 8002148:	011b      	lsls	r3, r3, #4
 800214a:	1a5b      	subs	r3, r3, r1
 800214c:	01db      	lsls	r3, r3, #7
 800214e:	1ad1      	subs	r1, r2, r3
 8002150:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 8002154:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 8002158:	4b16      	ldr	r3, [pc, #88]	; (80021b4 <clockcheckLeft+0xb8>)
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	b212      	sxth	r2, r2
 800215e:	811a      	strh	r2, [r3, #8]
 8002160:	e020      	b.n	80021a4 <clockcheckLeft+0xa8>
	} else {
		controllerL.motor->direction = 1;
 8002162:	4b14      	ldr	r3, [pc, #80]	; (80021b4 <clockcheckLeft+0xb8>)
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	2201      	movs	r2, #1
 8002168:	705a      	strb	r2, [r3, #1]
		controllerL.Encoder->fineAdjustment = abs((controllerL.Encoder->fineAdjustment + controllerL.motor->direction) % (TOTAL_WHEEL_TICKS + 1));
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <clockcheckLeft+0xb8>)
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002172:	461a      	mov	r2, r3
 8002174:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <clockcheckLeft+0xb8>)
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800217c:	18d1      	adds	r1, r2, r3
 800217e:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <clockcheckLeft+0xc0>)
 8002180:	fb83 2301 	smull	r2, r3, r3, r1
 8002184:	115a      	asrs	r2, r3, #5
 8002186:	17cb      	asrs	r3, r1, #31
 8002188:	1ad2      	subs	r2, r2, r3
 800218a:	4613      	mov	r3, r2
 800218c:	011b      	lsls	r3, r3, #4
 800218e:	1a9b      	subs	r3, r3, r2
 8002190:	01db      	lsls	r3, r3, #7
 8002192:	4413      	add	r3, r2
 8002194:	1aca      	subs	r2, r1, r3
 8002196:	2a00      	cmp	r2, #0
 8002198:	bfb8      	it	lt
 800219a:	4252      	neglt	r2, r2
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <clockcheckLeft+0xb8>)
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	b212      	sxth	r2, r2
 80021a2:	811a      	strh	r2, [r3, #8]
	}

	checkRevolutions(&controllerL);
 80021a4:	4803      	ldr	r0, [pc, #12]	; (80021b4 <clockcheckLeft+0xb8>)
 80021a6:	f000 f86d 	bl	8002284 <checkRevolutions>
}
 80021aa:	bf00      	nop
 80021ac:	bd98      	pop	{r3, r4, r7, pc}
 80021ae:	bf00      	nop
 80021b0:	48000400 	.word	0x48000400
 80021b4:	2000026c 	.word	0x2000026c
 80021b8:	88888889 	.word	0x88888889
 80021bc:	0443b2b5 	.word	0x0443b2b5

080021c0 <counterclockcheckLeft>:

void counterclockcheckLeft() {
 80021c0:	b598      	push	{r3, r4, r7, lr}
 80021c2:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(Motor_Left_clock_GPIO_Port, Motor_Left_clock_Pin) == HAL_GPIO_ReadPin(Motor_left_counterclock_GPIO_Port, Motor_left_counterclock_Pin)) {
 80021c4:	2120      	movs	r1, #32
 80021c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ca:	f002 fc4b 	bl	8004a64 <HAL_GPIO_ReadPin>
 80021ce:	4603      	mov	r3, r0
 80021d0:	461c      	mov	r4, r3
 80021d2:	2102      	movs	r1, #2
 80021d4:	4827      	ldr	r0, [pc, #156]	; (8002274 <counterclockcheckLeft+0xb4>)
 80021d6:	f002 fc45 	bl	8004a64 <HAL_GPIO_ReadPin>
 80021da:	4603      	mov	r3, r0
 80021dc:	429c      	cmp	r4, r3
 80021de:	d121      	bne.n	8002224 <counterclockcheckLeft+0x64>
		controllerL.motor->direction = 1;
 80021e0:	4b25      	ldr	r3, [pc, #148]	; (8002278 <counterclockcheckLeft+0xb8>)
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	2201      	movs	r2, #1
 80021e6:	705a      	strb	r2, [r3, #1]
		controllerL.Encoder->fineAdjustment = abs((controllerL.Encoder->fineAdjustment + controllerL.motor->direction) % (TOTAL_WHEEL_TICKS + 1));
 80021e8:	4b23      	ldr	r3, [pc, #140]	; (8002278 <counterclockcheckLeft+0xb8>)
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80021f0:	461a      	mov	r2, r3
 80021f2:	4b21      	ldr	r3, [pc, #132]	; (8002278 <counterclockcheckLeft+0xb8>)
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80021fa:	18d1      	adds	r1, r2, r3
 80021fc:	4b1f      	ldr	r3, [pc, #124]	; (800227c <counterclockcheckLeft+0xbc>)
 80021fe:	fb83 2301 	smull	r2, r3, r3, r1
 8002202:	115a      	asrs	r2, r3, #5
 8002204:	17cb      	asrs	r3, r1, #31
 8002206:	1ad2      	subs	r2, r2, r3
 8002208:	4613      	mov	r3, r2
 800220a:	011b      	lsls	r3, r3, #4
 800220c:	1a9b      	subs	r3, r3, r2
 800220e:	01db      	lsls	r3, r3, #7
 8002210:	4413      	add	r3, r2
 8002212:	1aca      	subs	r2, r1, r3
 8002214:	2a00      	cmp	r2, #0
 8002216:	bfb8      	it	lt
 8002218:	4252      	neglt	r2, r2
 800221a:	4b17      	ldr	r3, [pc, #92]	; (8002278 <counterclockcheckLeft+0xb8>)
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	b212      	sxth	r2, r2
 8002220:	811a      	strh	r2, [r3, #8]
 8002222:	e021      	b.n	8002268 <counterclockcheckLeft+0xa8>
	} else {
		controllerL.motor->direction = -1;
 8002224:	4b14      	ldr	r3, [pc, #80]	; (8002278 <counterclockcheckLeft+0xb8>)
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	22ff      	movs	r2, #255	; 0xff
 800222a:	705a      	strb	r2, [r3, #1]
		controllerL.Encoder->fineAdjustment = abs((controllerL.Encoder->fineAdjustment + controllerL.motor->direction) % TOTAL_WHEEL_TICKS);
 800222c:	4b12      	ldr	r3, [pc, #72]	; (8002278 <counterclockcheckLeft+0xb8>)
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002234:	461a      	mov	r2, r3
 8002236:	4b10      	ldr	r3, [pc, #64]	; (8002278 <counterclockcheckLeft+0xb8>)
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800223e:	441a      	add	r2, r3
 8002240:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <counterclockcheckLeft+0xc0>)
 8002242:	fb83 1302 	smull	r1, r3, r3, r2
 8002246:	4413      	add	r3, r2
 8002248:	1299      	asrs	r1, r3, #10
 800224a:	17d3      	asrs	r3, r2, #31
 800224c:	1ac9      	subs	r1, r1, r3
 800224e:	460b      	mov	r3, r1
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	1a5b      	subs	r3, r3, r1
 8002254:	01db      	lsls	r3, r3, #7
 8002256:	1ad1      	subs	r1, r2, r3
 8002258:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 800225c:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 8002260:	4b05      	ldr	r3, [pc, #20]	; (8002278 <counterclockcheckLeft+0xb8>)
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	b212      	sxth	r2, r2
 8002266:	811a      	strh	r2, [r3, #8]
	}

	checkRevolutions(&controllerL);
 8002268:	4803      	ldr	r0, [pc, #12]	; (8002278 <counterclockcheckLeft+0xb8>)
 800226a:	f000 f80b 	bl	8002284 <checkRevolutions>
}
 800226e:	bf00      	nop
 8002270:	bd98      	pop	{r3, r4, r7, pc}
 8002272:	bf00      	nop
 8002274:	48000400 	.word	0x48000400
 8002278:	2000026c 	.word	0x2000026c
 800227c:	0443b2b5 	.word	0x0443b2b5
 8002280:	88888889 	.word	0x88888889

08002284 <checkRevolutions>:

void checkRevolutions(MotorController *c) {
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
	if (c->Encoder->fineAdjustment == 0 && c->motor->direction == 1) {
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d116      	bne.n	80022c6 <checkRevolutions+0x42>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d110      	bne.n	80022c6 <checkRevolutions+0x42>
		c->Encoder->revolutions = c->Encoder->revolutions + c->motor->direction;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80022b2:	4619      	mov	r1, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	440a      	add	r2, r1
 80022ba:	60da      	str	r2, [r3, #12]
		c->Encoder->fineAdjustment = 1;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	2201      	movs	r2, #1
 80022c2:	811a      	strh	r2, [r3, #8]
	 fineadjustmentRight = 1;
	 } else if (fineadjustmentRight == 0 && directionRight == -1) {
	 revolutionRight = revolutionRight + directionRight;
	 fineadjustmentRight = TOTAL_WHEEL_TICKS;
	 }*/
}
 80022c4:	e01d      	b.n	8002302 <checkRevolutions+0x7e>
	} else if (c->Encoder->fineAdjustment == 0 && c->motor->direction == -1) {
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d117      	bne.n	8002302 <checkRevolutions+0x7e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80022da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022de:	d110      	bne.n	8002302 <checkRevolutions+0x7e>
		c->Encoder->revolutions = c->Encoder->revolutions + c->motor->direction;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80022ee:	4619      	mov	r1, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	440a      	add	r2, r1
 80022f6:	60da      	str	r2, [r3, #12]
		c->Encoder->fineAdjustment = TOTAL_WHEEL_TICKS;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8002300:	811a      	strh	r2, [r3, #8]
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <calcOutput>:

void calcOutput(MotorEncoder *e) {
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
	e->output = e->revolutions + ((float)e->fineAdjustment / TOTAL_WHEEL_TICKS);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	ee07 3a90 	vmov	s15, r3
 8002320:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800232a:	ee07 3a90 	vmov	s15, r3
 800232e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002332:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8002350 <calcOutput+0x40>
 8002336:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800233a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	44f00000 	.word	0x44f00000

08002354 <calculateError>:

void calculateError(MotorController *c) {
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
	c->lastError = c->reference - c->measAngVel;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	ed93 7a00 	vldr	s14, [r3]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	edd3 7a01 	vldr	s15, [r3, #4]
 8002368:	ee77 7a67 	vsub.f32	s15, s14, s15
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <nextVoltage>:

void nextVoltage(MotorController *c) {
 8002380:	b5b0      	push	{r4, r5, r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
	c->voltage = c->lastError * 2.82 * controllerPeriod + c->voltage;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	4618      	mov	r0, r3
 800238e:	f7fe f883 	bl	8000498 <__aeabi_f2d>
 8002392:	a31a      	add	r3, pc, #104	; (adr r3, 80023fc <nextVoltage+0x7c>)
 8002394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002398:	f7fe f8d6 	bl	8000548 <__aeabi_dmul>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	4614      	mov	r4, r2
 80023a2:	461d      	mov	r5, r3
 80023a4:	4b14      	ldr	r3, [pc, #80]	; (80023f8 <nextVoltage+0x78>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe f875 	bl	8000498 <__aeabi_f2d>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	4620      	mov	r0, r4
 80023b4:	4629      	mov	r1, r5
 80023b6:	f7fe f8c7 	bl	8000548 <__aeabi_dmul>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	4614      	mov	r4, r2
 80023c0:	461d      	mov	r5, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fe f866 	bl	8000498 <__aeabi_f2d>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4620      	mov	r0, r4
 80023d2:	4629      	mov	r1, r5
 80023d4:	f7fd ff02 	bl	80001dc <__adddf3>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4610      	mov	r0, r2
 80023de:	4619      	mov	r1, r3
 80023e0:	f7fe fb74 	bl	8000acc <__aeabi_d2f>
 80023e4:	4602      	mov	r2, r0
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	60da      	str	r2, [r3, #12]
}
 80023ea:	bf00      	nop
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bdb0      	pop	{r4, r5, r7, pc}
 80023f2:	bf00      	nop
 80023f4:	f3af 8000 	nop.w
 80023f8:	200002e8 	.word	0x200002e8
 80023fc:	28f5c28f 	.word	0x28f5c28f
 8002400:	40068f5c 	.word	0x40068f5c
 8002404:	00000000 	.word	0x00000000

08002408 <updateAngularVelocity>:

void updateAngularVelocity(MotorController *c) {
 8002408:	b5b0      	push	{r4, r5, r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
	float deltaAngle = c->Encoder->output * 2 * M_PI - c->Encoder->lastAngle;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	edd3 7a04 	vldr	s15, [r3, #16]
 8002418:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800241c:	ee17 0a90 	vmov	r0, s15
 8002420:	f7fe f83a 	bl	8000498 <__aeabi_f2d>
 8002424:	a323      	add	r3, pc, #140	; (adr r3, 80024b4 <updateAngularVelocity+0xac>)
 8002426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242a:	f7fe f88d 	bl	8000548 <__aeabi_dmul>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4614      	mov	r4, r2
 8002434:	461d      	mov	r5, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	4618      	mov	r0, r3
 800243e:	f7fe f82b 	bl	8000498 <__aeabi_f2d>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	4620      	mov	r0, r4
 8002448:	4629      	mov	r1, r5
 800244a:	f7fd fec5 	bl	80001d8 <__aeabi_dsub>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4610      	mov	r0, r2
 8002454:	4619      	mov	r1, r3
 8002456:	f7fe fb39 	bl	8000acc <__aeabi_d2f>
 800245a:	4603      	mov	r3, r0
 800245c:	60fb      	str	r3, [r7, #12]
	c->Encoder->lastAngle = c->Encoder->output * 2 * M_PI;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	edd3 7a04 	vldr	s15, [r3, #16]
 8002466:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800246a:	ee17 0a90 	vmov	r0, s15
 800246e:	f7fe f813 	bl	8000498 <__aeabi_f2d>
 8002472:	a310      	add	r3, pc, #64	; (adr r3, 80024b4 <updateAngularVelocity+0xac>)
 8002474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002478:	f7fe f866 	bl	8000548 <__aeabi_dmul>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	695c      	ldr	r4, [r3, #20]
 8002488:	f7fe fb20 	bl	8000acc <__aeabi_d2f>
 800248c:	4603      	mov	r3, r0
 800248e:	6063      	str	r3, [r4, #4]
	c->measAngVel = deltaAngle / controllerPeriod;
 8002490:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <updateAngularVelocity+0xa8>)
 8002492:	ed93 7a00 	vldr	s14, [r3]
 8002496:	edd7 6a03 	vldr	s13, [r7, #12]
 800249a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80024a4:	bf00      	nop
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bdb0      	pop	{r4, r5, r7, pc}
 80024ac:	f3af 8000 	nop.w
 80024b0:	200002e8 	.word	0x200002e8
 80024b4:	54442d18 	.word	0x54442d18
 80024b8:	400921fb 	.word	0x400921fb

080024bc <updateDutyCycle>:

void updateDutyCycle(MotorController *c) {
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
	float pwm = c->voltage / batteryVoltage;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	edd3 6a03 	vldr	s13, [r3, #12]
 80024ca:	4b0e      	ldr	r3, [pc, #56]	; (8002504 <updateDutyCycle+0x48>)
 80024cc:	ed93 7a00 	vldr	s14, [r3]
 80024d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024d4:	edc7 7a03 	vstr	s15, [r7, #12]
	if (pwm > 1.0)
 80024d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80024dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80024e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e8:	dd02      	ble.n	80024f0 <updateDutyCycle+0x34>
		pwm = 1.0;
 80024ea:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80024ee:	60fb      	str	r3, [r7, #12]
	c->motor->dutyCycle = pwm;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	605a      	str	r2, [r3, #4]
}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	20000144 	.word	0x20000144

08002508 <setDutyCycle>:

void setDutyCycle(MotorController *c) {
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	if (c->motor->name == 'R') {
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b52      	cmp	r3, #82	; 0x52
 8002518:	d114      	bne.n	8002544 <setDutyCycle+0x3c>
		htim1.Instance->CCR1 = (uint32_t) ((htim1.Instance->ARR) * c->motor->dutyCycle);
 800251a:	4b1a      	ldr	r3, [pc, #104]	; (8002584 <setDutyCycle+0x7c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002520:	ee07 3a90 	vmov	s15, r3
 8002524:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002534:	4b13      	ldr	r3, [pc, #76]	; (8002584 <setDutyCycle+0x7c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800253c:	ee17 2a90 	vmov	r2, s15
 8002540:	635a      	str	r2, [r3, #52]	; 0x34
 8002542:	e01a      	b.n	800257a <setDutyCycle+0x72>
	} else if (c->motor->name == 'L') {
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b4c      	cmp	r3, #76	; 0x4c
 800254c:	d114      	bne.n	8002578 <setDutyCycle+0x70>
		htim1.Instance->CCR2 = (uint32_t) ((htim1.Instance->ARR) * c->motor->dutyCycle);
 800254e:	4b0d      	ldr	r3, [pc, #52]	; (8002584 <setDutyCycle+0x7c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002554:	ee07 3a90 	vmov	s15, r3
 8002558:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	edd3 7a01 	vldr	s15, [r3, #4]
 8002564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <setDutyCycle+0x7c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002570:	ee17 2a90 	vmov	r2, s15
 8002574:	639a      	str	r2, [r3, #56]	; 0x38
 8002576:	e000      	b.n	800257a <setDutyCycle+0x72>
	} else {
		return;
 8002578:	bf00      	nop
	}
}
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	20000350 	.word	0x20000350

08002588 <controller>:

void controller(MotorController *c) {
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
	calcOutput(c->Encoder);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff febb 	bl	8002310 <calcOutput>

	// Measure the angular velocity (feedback)
	updateAngularVelocity(c);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff ff34 	bl	8002408 <updateAngularVelocity>

	// Calculate next voltage according to the controller design
	nextVoltage(c);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff feed 	bl	8002380 <nextVoltage>

	// Calculate current error to use for next iteration
	calculateError(c);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7ff fed4 	bl	8002354 <calculateError>

	// Update the duty cycle
	updateDutyCycle(c);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7ff ff85 	bl	80024bc <updateDutyCycle>

	setDutyCycle(c);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff ffa8 	bl	8002508 <setDutyCycle>
}
 80025b8:	bf00      	nop
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <controlBothMotors>:

void controlBothMotors() {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
	uart_in_read(&referenceFormatting);
 80025c4:	4805      	ldr	r0, [pc, #20]	; (80025dc <controlBothMotors+0x1c>)
 80025c6:	f7ff f995 	bl	80018f4 <uart_in_read>
	controller(&controllerR);
 80025ca:	4805      	ldr	r0, [pc, #20]	; (80025e0 <controlBothMotors+0x20>)
 80025cc:	f7ff ffdc 	bl	8002588 <controller>
	controller(&controllerL);
 80025d0:	4804      	ldr	r0, [pc, #16]	; (80025e4 <controlBothMotors+0x24>)
 80025d2:	f7ff ffd9 	bl	8002588 <controller>
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	08001a91 	.word	0x08001a91
 80025e0:	20000338 	.word	0x20000338
 80025e4:	2000026c 	.word	0x2000026c

080025e8 <UpdateBatteryVoltage>:

void UpdateBatteryVoltage() {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1); // Start ADC conversion
 80025ee:	480e      	ldr	r0, [pc, #56]	; (8002628 <UpdateBatteryVoltage+0x40>)
 80025f0:	f000 ff96 	bl	8003520 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY); // Wait for conversion to complete
 80025f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025f8:	480b      	ldr	r0, [pc, #44]	; (8002628 <UpdateBatteryVoltage+0x40>)
 80025fa:	f000 fff4 	bl	80035e6 <HAL_ADC_PollForConversion>
	uint32_t adc_val = HAL_ADC_GetValue(&hadc1); // Get the ADC value
 80025fe:	480a      	ldr	r0, [pc, #40]	; (8002628 <UpdateBatteryVoltage+0x40>)
 8002600:	f001 f880 	bl	8003704 <HAL_ADC_GetValue>
 8002604:	6078      	str	r0, [r7, #4]
	batteryVoltage = adc_val * voltageMeasScaling;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	ee07 3a90 	vmov	s15, r3
 800260c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002610:	4b06      	ldr	r3, [pc, #24]	; (800262c <UpdateBatteryVoltage+0x44>)
 8002612:	edd3 7a00 	vldr	s15, [r3]
 8002616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800261a:	4b05      	ldr	r3, [pc, #20]	; (8002630 <UpdateBatteryVoltage+0x48>)
 800261c:	edc3 7a00 	vstr	s15, [r3]
}
 8002620:	bf00      	nop
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20000284 	.word	0x20000284
 800262c:	20000004 	.word	0x20000004
 8002630:	20000144 	.word	0x20000144

08002634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002638:	b672      	cpsid	i
}
 800263a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800263c:	e7fe      	b.n	800263c <Error_Handler+0x8>
	...

08002640 <calcOrientOutput>:
char packedOrientData[50] = { 0 };
uint8_t angularPosition[5] = { 0 };
float angularResolution = 360.0/TOOTHRESOLUTION;


void calcOrientOutput() {
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
	 orientAngle = (float) orientIncrement * angularResolution; // Antallet af målte inkrementer ganges med hvor stor en grad hver inkrement er
 8002644:	4b09      	ldr	r3, [pc, #36]	; (800266c <calcOrientOutput+0x2c>)
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	ee07 3a90 	vmov	s15, r3
 800264c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002650:	4b07      	ldr	r3, [pc, #28]	; (8002670 <calcOrientOutput+0x30>)
 8002652:	edd3 7a00 	vldr	s15, [r3]
 8002656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800265a:	4b06      	ldr	r3, [pc, #24]	; (8002674 <calcOrientOutput+0x34>)
 800265c:	edc3 7a00 	vstr	s15, [r3]
 }
 8002660:	bf00      	nop
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	200001c6 	.word	0x200001c6
 8002670:	20000008 	.word	0x20000008
 8002674:	200001c8 	.word	0x200001c8

08002678 <packOrient>:

void packOrient() {
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
	uint8_t *angularPointer = &directionOrient;
 800267e:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <packOrient+0x4c>)
 8002680:	603b      	str	r3, [r7, #0]
	angularPosition[0] = *(angularPointer);
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	781a      	ldrb	r2, [r3, #0]
 8002686:	4b10      	ldr	r3, [pc, #64]	; (80026c8 <packOrient+0x50>)
 8002688:	701a      	strb	r2, [r3, #0]

	angularPointer = &orientAngle;
 800268a:	4b10      	ldr	r3, [pc, #64]	; (80026cc <packOrient+0x54>)
 800268c:	603b      	str	r3, [r7, #0]
		for (int x = 1; x < 5 ; x++) {
 800268e:	2301      	movs	r3, #1
 8002690:	607b      	str	r3, [r7, #4]
 8002692:	e00c      	b.n	80026ae <packOrient+0x36>
		angularPosition[x] = *(angularPointer + (x-1));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3b01      	subs	r3, #1
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	4413      	add	r3, r2
 800269c:	7819      	ldrb	r1, [r3, #0]
 800269e:	4a0a      	ldr	r2, [pc, #40]	; (80026c8 <packOrient+0x50>)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4413      	add	r3, r2
 80026a4:	460a      	mov	r2, r1
 80026a6:	701a      	strb	r2, [r3, #0]
		for (int x = 1; x < 5 ; x++) {
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3301      	adds	r3, #1
 80026ac:	607b      	str	r3, [r7, #4]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	ddef      	ble.n	8002694 <packOrient+0x1c>
	}
}
 80026b4:	bf00      	nop
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	200001c5 	.word	0x200001c5
 80026c8:	20000208 	.word	0x20000208
 80026cc:	200001c8 	.word	0x200001c8

080026d0 <checkOrientClock>:

void checkOrientClock() {
 80026d0:	b598      	push	{r3, r4, r7, lr}
 80026d2:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3)
 80026d4:	2108      	movs	r1, #8
 80026d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026da:	f002 f9c3 	bl	8004a64 <HAL_GPIO_ReadPin>
 80026de:	4603      	mov	r3, r0
 80026e0:	461c      	mov	r4, r3
				== HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)) {
 80026e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026ea:	f002 f9bb 	bl	8004a64 <HAL_GPIO_ReadPin>
 80026ee:	4603      	mov	r3, r0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3)
 80026f0:	429c      	cmp	r4, r3
 80026f2:	d117      	bne.n	8002724 <checkOrientClock+0x54>
			directionOrient = -1;
 80026f4:	4b19      	ldr	r3, [pc, #100]	; (800275c <checkOrientClock+0x8c>)
 80026f6:	22ff      	movs	r2, #255	; 0xff
 80026f8:	701a      	strb	r2, [r3, #0]
			orientIncrement = abs((orientIncrement + directionOrient) % TOOTHRESOLUTION);
 80026fa:	4b19      	ldr	r3, [pc, #100]	; (8002760 <checkOrientClock+0x90>)
 80026fc:	881b      	ldrh	r3, [r3, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	4b16      	ldr	r3, [pc, #88]	; (800275c <checkOrientClock+0x8c>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	441a      	add	r2, r3
 8002706:	4b17      	ldr	r3, [pc, #92]	; (8002764 <checkOrientClock+0x94>)
 8002708:	fb83 1302 	smull	r1, r3, r3, r2
 800270c:	1199      	asrs	r1, r3, #6
 800270e:	17d3      	asrs	r3, r2, #31
 8002710:	1ac9      	subs	r1, r1, r3
 8002712:	460b      	mov	r3, r1
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	440b      	add	r3, r1
 8002718:	01db      	lsls	r3, r3, #7
 800271a:	1ad1      	subs	r1, r2, r3
 800271c:	b28a      	uxth	r2, r1
 800271e:	4b10      	ldr	r3, [pc, #64]	; (8002760 <checkOrientClock+0x90>)
 8002720:	801a      	strh	r2, [r3, #0]
 8002722:	e017      	b.n	8002754 <checkOrientClock+0x84>
		} else {

			directionOrient = 1;
 8002724:	4b0d      	ldr	r3, [pc, #52]	; (800275c <checkOrientClock+0x8c>)
 8002726:	2201      	movs	r2, #1
 8002728:	701a      	strb	r2, [r3, #0]
			orientIncrement = abs((orientIncrement + directionOrient) % (TOOTHRESOLUTION + 1));
 800272a:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <checkOrientClock+0x90>)
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	461a      	mov	r2, r3
 8002730:	4b0a      	ldr	r3, [pc, #40]	; (800275c <checkOrientClock+0x8c>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	18d1      	adds	r1, r2, r3
 8002736:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <checkOrientClock+0x98>)
 8002738:	fb83 2301 	smull	r2, r3, r3, r1
 800273c:	11da      	asrs	r2, r3, #7
 800273e:	17cb      	asrs	r3, r1, #31
 8002740:	1ad2      	subs	r2, r2, r3
 8002742:	4613      	mov	r3, r2
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	4413      	add	r3, r2
 8002748:	01db      	lsls	r3, r3, #7
 800274a:	4413      	add	r3, r2
 800274c:	1aca      	subs	r2, r1, r3
 800274e:	b292      	uxth	r2, r2
 8002750:	4b03      	ldr	r3, [pc, #12]	; (8002760 <checkOrientClock+0x90>)
 8002752:	801a      	strh	r2, [r3, #0]
		}

		checkRevolutionsOrient();
 8002754:	f000 f858 	bl	8002808 <checkRevolutionsOrient>
}
 8002758:	bf00      	nop
 800275a:	bd98      	pop	{r3, r4, r7, pc}
 800275c:	200001c5 	.word	0x200001c5
 8002760:	200001c6 	.word	0x200001c6
 8002764:	2aaaaaab 	.word	0x2aaaaaab
 8002768:	551c979b 	.word	0x551c979b

0800276c <checkOrientCounterClock>:

void checkOrientCounterClock() {
 800276c:	b598      	push	{r3, r4, r7, lr}
 800276e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3)
 8002770:	2108      	movs	r1, #8
 8002772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002776:	f002 f975 	bl	8004a64 <HAL_GPIO_ReadPin>
 800277a:	4603      	mov	r3, r0
 800277c:	461c      	mov	r4, r3
				== HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)) {
 800277e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002782:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002786:	f002 f96d 	bl	8004a64 <HAL_GPIO_ReadPin>
 800278a:	4603      	mov	r3, r0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3)
 800278c:	429c      	cmp	r4, r3
 800278e:	d117      	bne.n	80027c0 <checkOrientCounterClock+0x54>
			directionOrient = 1;
 8002790:	4b19      	ldr	r3, [pc, #100]	; (80027f8 <checkOrientCounterClock+0x8c>)
 8002792:	2201      	movs	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
			orientIncrement = abs((orientIncrement + directionOrient) % TOOTHRESOLUTION);
 8002796:	4b19      	ldr	r3, [pc, #100]	; (80027fc <checkOrientCounterClock+0x90>)
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	461a      	mov	r2, r3
 800279c:	4b16      	ldr	r3, [pc, #88]	; (80027f8 <checkOrientCounterClock+0x8c>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	441a      	add	r2, r3
 80027a2:	4b17      	ldr	r3, [pc, #92]	; (8002800 <checkOrientCounterClock+0x94>)
 80027a4:	fb83 1302 	smull	r1, r3, r3, r2
 80027a8:	1199      	asrs	r1, r3, #6
 80027aa:	17d3      	asrs	r3, r2, #31
 80027ac:	1ac9      	subs	r1, r1, r3
 80027ae:	460b      	mov	r3, r1
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	440b      	add	r3, r1
 80027b4:	01db      	lsls	r3, r3, #7
 80027b6:	1ad1      	subs	r1, r2, r3
 80027b8:	b28a      	uxth	r2, r1
 80027ba:	4b10      	ldr	r3, [pc, #64]	; (80027fc <checkOrientCounterClock+0x90>)
 80027bc:	801a      	strh	r2, [r3, #0]
 80027be:	e017      	b.n	80027f0 <checkOrientCounterClock+0x84>
		} else {
			directionOrient = -1;
 80027c0:	4b0d      	ldr	r3, [pc, #52]	; (80027f8 <checkOrientCounterClock+0x8c>)
 80027c2:	22ff      	movs	r2, #255	; 0xff
 80027c4:	701a      	strb	r2, [r3, #0]
			orientIncrement = abs((orientIncrement + directionOrient) % (TOOTHRESOLUTION + 1));
 80027c6:	4b0d      	ldr	r3, [pc, #52]	; (80027fc <checkOrientCounterClock+0x90>)
 80027c8:	881b      	ldrh	r3, [r3, #0]
 80027ca:	461a      	mov	r2, r3
 80027cc:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <checkOrientCounterClock+0x8c>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	18d1      	adds	r1, r2, r3
 80027d2:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <checkOrientCounterClock+0x98>)
 80027d4:	fb83 2301 	smull	r2, r3, r3, r1
 80027d8:	11da      	asrs	r2, r3, #7
 80027da:	17cb      	asrs	r3, r1, #31
 80027dc:	1ad2      	subs	r2, r2, r3
 80027de:	4613      	mov	r3, r2
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	4413      	add	r3, r2
 80027e4:	01db      	lsls	r3, r3, #7
 80027e6:	4413      	add	r3, r2
 80027e8:	1aca      	subs	r2, r1, r3
 80027ea:	b292      	uxth	r2, r2
 80027ec:	4b03      	ldr	r3, [pc, #12]	; (80027fc <checkOrientCounterClock+0x90>)
 80027ee:	801a      	strh	r2, [r3, #0]
		}

		checkRevolutionsOrient();
 80027f0:	f000 f80a 	bl	8002808 <checkRevolutionsOrient>
}
 80027f4:	bf00      	nop
 80027f6:	bd98      	pop	{r3, r4, r7, pc}
 80027f8:	200001c5 	.word	0x200001c5
 80027fc:	200001c6 	.word	0x200001c6
 8002800:	2aaaaaab 	.word	0x2aaaaaab
 8002804:	551c979b 	.word	0x551c979b

08002808 <checkRevolutionsOrient>:

void checkRevolutionsOrient() {
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
	if (orientIncrement == 0 && directionOrient == 1) {
 800280c:	4b07      	ldr	r3, [pc, #28]	; (800282c <checkRevolutionsOrient+0x24>)
 800280e:	881b      	ldrh	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d106      	bne.n	8002822 <checkRevolutionsOrient+0x1a>
 8002814:	4b06      	ldr	r3, [pc, #24]	; (8002830 <checkRevolutionsOrient+0x28>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d102      	bne.n	8002822 <checkRevolutionsOrient+0x1a>
		orientIncrement = 1;
 800281c:	4b03      	ldr	r3, [pc, #12]	; (800282c <checkRevolutionsOrient+0x24>)
 800281e:	2201      	movs	r2, #1
 8002820:	801a      	strh	r2, [r3, #0]
	}
	else if (orientIncrement == 0 && directionOrient == -1){
		orientIncrement = TOOTHRESOLUTION;
	}
}
 8002822:	bf00      	nop
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	200001c6 	.word	0x200001c6
 8002830:	200001c5 	.word	0x200001c5

08002834 <sendOrientData>:

void sendOrientData() {
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
	if (spamCheckDirOrient != directionOrient || spamCheckOrientAngle != orientAngle) {
 8002838:	4b16      	ldr	r3, [pc, #88]	; (8002894 <sendOrientData+0x60>)
 800283a:	781a      	ldrb	r2, [r3, #0]
 800283c:	4b16      	ldr	r3, [pc, #88]	; (8002898 <sendOrientData+0x64>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	429a      	cmp	r2, r3
 8002842:	d10a      	bne.n	800285a <sendOrientData+0x26>
 8002844:	4b15      	ldr	r3, [pc, #84]	; (800289c <sendOrientData+0x68>)
 8002846:	ed93 7a00 	vldr	s14, [r3]
 800284a:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <sendOrientData+0x6c>)
 800284c:	edd3 7a00 	vldr	s15, [r3]
 8002850:	eeb4 7a67 	vcmp.f32	s14, s15
 8002854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002858:	d01a      	beq.n	8002890 <sendOrientData+0x5c>
		spamCheckDirOrient = directionOrient;
 800285a:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <sendOrientData+0x64>)
 800285c:	781a      	ldrb	r2, [r3, #0]
 800285e:	4b0d      	ldr	r3, [pc, #52]	; (8002894 <sendOrientData+0x60>)
 8002860:	701a      	strb	r2, [r3, #0]
		spamCheckOrientAngle = orientAngle;
 8002862:	4b0f      	ldr	r3, [pc, #60]	; (80028a0 <sendOrientData+0x6c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a0d      	ldr	r2, [pc, #52]	; (800289c <sendOrientData+0x68>)
 8002868:	6013      	str	r3, [r2, #0]
		packOrient();
 800286a:	f7ff ff05 	bl	8002678 <packOrient>
		memset(packedOrientData, 0, sizeof(packedOrientData));
 800286e:	2232      	movs	r2, #50	; 0x32
 8002870:	2100      	movs	r1, #0
 8002872:	480c      	ldr	r0, [pc, #48]	; (80028a4 <sendOrientData+0x70>)
 8002874:	f005 f916 	bl	8007aa4 <memset>

		to_frame(packedOrientData, angularPosition, ORIENTID);
 8002878:	2203      	movs	r2, #3
 800287a:	490b      	ldr	r1, [pc, #44]	; (80028a8 <sendOrientData+0x74>)
 800287c:	4809      	ldr	r0, [pc, #36]	; (80028a4 <sendOrientData+0x70>)
 800287e:	f7fe faf1 	bl	8000e64 <to_frame>
		HAL_UART_Transmit(&huart2, packedOrientData, sizeof(packedOrientData), HAL_MAX_DELAY);
 8002882:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002886:	2232      	movs	r2, #50	; 0x32
 8002888:	4906      	ldr	r1, [pc, #24]	; (80028a4 <sendOrientData+0x70>)
 800288a:	4808      	ldr	r0, [pc, #32]	; (80028ac <sendOrientData+0x78>)
 800288c:	f004 fb0c 	bl	8006ea8 <HAL_UART_Transmit>
	}
}
 8002890:	bf00      	nop
 8002892:	bd80      	pop	{r7, pc}
 8002894:	200001cc 	.word	0x200001cc
 8002898:	200001c5 	.word	0x200001c5
 800289c:	200001d0 	.word	0x200001d0
 80028a0:	200001c8 	.word	0x200001c8
 80028a4:	200001d4 	.word	0x200001d4
 80028a8:	20000208 	.word	0x20000208
 80028ac:	200003e8 	.word	0x200003e8

080028b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028b6:	4b0f      	ldr	r3, [pc, #60]	; (80028f4 <HAL_MspInit+0x44>)
 80028b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ba:	4a0e      	ldr	r2, [pc, #56]	; (80028f4 <HAL_MspInit+0x44>)
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	6613      	str	r3, [r2, #96]	; 0x60
 80028c2:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <HAL_MspInit+0x44>)
 80028c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	607b      	str	r3, [r7, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028ce:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <HAL_MspInit+0x44>)
 80028d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d2:	4a08      	ldr	r2, [pc, #32]	; (80028f4 <HAL_MspInit+0x44>)
 80028d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d8:	6593      	str	r3, [r2, #88]	; 0x58
 80028da:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <HAL_MspInit+0x44>)
 80028dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	40021000 	.word	0x40021000

080028f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08a      	sub	sp, #40	; 0x28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002900:	f107 0314 	add.w	r3, r7, #20
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
 800290e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a15      	ldr	r2, [pc, #84]	; (800296c <HAL_ADC_MspInit+0x74>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d124      	bne.n	8002964 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800291a:	4b15      	ldr	r3, [pc, #84]	; (8002970 <HAL_ADC_MspInit+0x78>)
 800291c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291e:	4a14      	ldr	r2, [pc, #80]	; (8002970 <HAL_ADC_MspInit+0x78>)
 8002920:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002926:	4b12      	ldr	r3, [pc, #72]	; (8002970 <HAL_ADC_MspInit+0x78>)
 8002928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800292e:	613b      	str	r3, [r7, #16]
 8002930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002932:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <HAL_ADC_MspInit+0x78>)
 8002934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002936:	4a0e      	ldr	r2, [pc, #56]	; (8002970 <HAL_ADC_MspInit+0x78>)
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800293e:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <HAL_ADC_MspInit+0x78>)
 8002940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = BatteryVoltage_Pin;
 800294a:	2308      	movs	r3, #8
 800294c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800294e:	230b      	movs	r3, #11
 8002950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BatteryVoltage_GPIO_Port, &GPIO_InitStruct);
 8002956:	f107 0314 	add.w	r3, r7, #20
 800295a:	4619      	mov	r1, r3
 800295c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002960:	f001 ff16 	bl	8004790 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002964:	bf00      	nop
 8002966:	3728      	adds	r7, #40	; 0x28
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	50040000 	.word	0x50040000
 8002970:	40021000 	.word	0x40021000

08002974 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a0a      	ldr	r2, [pc, #40]	; (80029ac <HAL_TIM_PWM_MspInit+0x38>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d10b      	bne.n	800299e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002986:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800298a:	4a09      	ldr	r2, [pc, #36]	; (80029b0 <HAL_TIM_PWM_MspInit+0x3c>)
 800298c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002990:	6613      	str	r3, [r2, #96]	; 0x60
 8002992:	4b07      	ldr	r3, [pc, #28]	; (80029b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002996:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800299e:	bf00      	nop
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40012c00 	.word	0x40012c00
 80029b0:	40021000 	.word	0x40021000

080029b4 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c4:	d113      	bne.n	80029ee <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029c6:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <HAL_TIM_OC_MspInit+0x44>)
 80029c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ca:	4a0b      	ldr	r2, [pc, #44]	; (80029f8 <HAL_TIM_OC_MspInit+0x44>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	6593      	str	r3, [r2, #88]	; 0x58
 80029d2:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <HAL_TIM_OC_MspInit+0x44>)
 80029d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029de:	2200      	movs	r2, #0
 80029e0:	2100      	movs	r1, #0
 80029e2:	201c      	movs	r0, #28
 80029e4:	f001 fca5 	bl	8004332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029e8:	201c      	movs	r0, #28
 80029ea:	f001 fcbe 	bl	800436a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80029ee:	bf00      	nop
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40021000 	.word	0x40021000

080029fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a1a      	ldr	r2, [pc, #104]	; (8002a74 <HAL_TIM_Base_MspInit+0x78>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d114      	bne.n	8002a38 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002a0e:	4b1a      	ldr	r3, [pc, #104]	; (8002a78 <HAL_TIM_Base_MspInit+0x7c>)
 8002a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a12:	4a19      	ldr	r2, [pc, #100]	; (8002a78 <HAL_TIM_Base_MspInit+0x7c>)
 8002a14:	f043 0310 	orr.w	r3, r3, #16
 8002a18:	6593      	str	r3, [r2, #88]	; 0x58
 8002a1a:	4b17      	ldr	r3, [pc, #92]	; (8002a78 <HAL_TIM_Base_MspInit+0x7c>)
 8002a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1e:	f003 0310 	and.w	r3, r3, #16
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002a26:	2200      	movs	r2, #0
 8002a28:	2100      	movs	r1, #0
 8002a2a:	2036      	movs	r0, #54	; 0x36
 8002a2c:	f001 fc81 	bl	8004332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a30:	2036      	movs	r0, #54	; 0x36
 8002a32:	f001 fc9a 	bl	800436a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002a36:	e018      	b.n	8002a6a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a0f      	ldr	r2, [pc, #60]	; (8002a7c <HAL_TIM_Base_MspInit+0x80>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d113      	bne.n	8002a6a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002a42:	4b0d      	ldr	r3, [pc, #52]	; (8002a78 <HAL_TIM_Base_MspInit+0x7c>)
 8002a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a46:	4a0c      	ldr	r2, [pc, #48]	; (8002a78 <HAL_TIM_Base_MspInit+0x7c>)
 8002a48:	f043 0320 	orr.w	r3, r3, #32
 8002a4c:	6593      	str	r3, [r2, #88]	; 0x58
 8002a4e:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <HAL_TIM_Base_MspInit+0x7c>)
 8002a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a52:	f003 0320 	and.w	r3, r3, #32
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	2037      	movs	r0, #55	; 0x37
 8002a60:	f001 fc67 	bl	8004332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002a64:	2037      	movs	r0, #55	; 0x37
 8002a66:	f001 fc80 	bl	800436a <HAL_NVIC_EnableIRQ>
}
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40001000 	.word	0x40001000
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40001400 	.word	0x40001400

08002a80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b088      	sub	sp, #32
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a88:	f107 030c 	add.w	r3, r7, #12
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	60da      	str	r2, [r3, #12]
 8002a96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a12      	ldr	r2, [pc, #72]	; (8002ae8 <HAL_TIM_MspPostInit+0x68>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d11d      	bne.n	8002ade <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa2:	4b12      	ldr	r3, [pc, #72]	; (8002aec <HAL_TIM_MspPostInit+0x6c>)
 8002aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa6:	4a11      	ldr	r2, [pc, #68]	; (8002aec <HAL_TIM_MspPostInit+0x6c>)
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aae:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <HAL_TIM_MspPostInit+0x6c>)
 8002ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	60bb      	str	r3, [r7, #8]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_R_Pin|PWM_L_Pin;
 8002aba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002abe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002acc:	2301      	movs	r3, #1
 8002ace:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad0:	f107 030c 	add.w	r3, r7, #12
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ada:	f001 fe59 	bl	8004790 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002ade:	bf00      	nop
 8002ae0:	3720      	adds	r7, #32
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40012c00 	.word	0x40012c00
 8002aec:	40021000 	.word	0x40021000

08002af0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08a      	sub	sp, #40	; 0x28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af8:	f107 0314 	add.w	r3, r7, #20
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	609a      	str	r2, [r3, #8]
 8002b04:	60da      	str	r2, [r3, #12]
 8002b06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a35      	ldr	r2, [pc, #212]	; (8002be4 <HAL_UART_MspInit+0xf4>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d163      	bne.n	8002bda <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b12:	4b35      	ldr	r3, [pc, #212]	; (8002be8 <HAL_UART_MspInit+0xf8>)
 8002b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b16:	4a34      	ldr	r2, [pc, #208]	; (8002be8 <HAL_UART_MspInit+0xf8>)
 8002b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b1c:	6593      	str	r3, [r2, #88]	; 0x58
 8002b1e:	4b32      	ldr	r3, [pc, #200]	; (8002be8 <HAL_UART_MspInit+0xf8>)
 8002b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2a:	4b2f      	ldr	r3, [pc, #188]	; (8002be8 <HAL_UART_MspInit+0xf8>)
 8002b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b2e:	4a2e      	ldr	r2, [pc, #184]	; (8002be8 <HAL_UART_MspInit+0xf8>)
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b36:	4b2c      	ldr	r3, [pc, #176]	; (8002be8 <HAL_UART_MspInit+0xf8>)
 8002b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b42:	2304      	movs	r3, #4
 8002b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b46:	2302      	movs	r3, #2
 8002b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b52:	2307      	movs	r3, #7
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b56:	f107 0314 	add.w	r3, r7, #20
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b60:	f001 fe16 	bl	8004790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002b64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b72:	2303      	movs	r3, #3
 8002b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002b76:	2303      	movs	r3, #3
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b7a:	f107 0314 	add.w	r3, r7, #20
 8002b7e:	4619      	mov	r1, r3
 8002b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b84:	f001 fe04 	bl	8004790 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002b88:	4b18      	ldr	r3, [pc, #96]	; (8002bec <HAL_UART_MspInit+0xfc>)
 8002b8a:	4a19      	ldr	r2, [pc, #100]	; (8002bf0 <HAL_UART_MspInit+0x100>)
 8002b8c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8002b8e:	4b17      	ldr	r3, [pc, #92]	; (8002bec <HAL_UART_MspInit+0xfc>)
 8002b90:	2202      	movs	r2, #2
 8002b92:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b94:	4b15      	ldr	r3, [pc, #84]	; (8002bec <HAL_UART_MspInit+0xfc>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b9a:	4b14      	ldr	r3, [pc, #80]	; (8002bec <HAL_UART_MspInit+0xfc>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ba0:	4b12      	ldr	r3, [pc, #72]	; (8002bec <HAL_UART_MspInit+0xfc>)
 8002ba2:	2280      	movs	r2, #128	; 0x80
 8002ba4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ba6:	4b11      	ldr	r3, [pc, #68]	; (8002bec <HAL_UART_MspInit+0xfc>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bac:	4b0f      	ldr	r3, [pc, #60]	; (8002bec <HAL_UART_MspInit+0xfc>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002bb2:	4b0e      	ldr	r3, [pc, #56]	; (8002bec <HAL_UART_MspInit+0xfc>)
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002bb8:	4b0c      	ldr	r3, [pc, #48]	; (8002bec <HAL_UART_MspInit+0xfc>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002bbe:	480b      	ldr	r0, [pc, #44]	; (8002bec <HAL_UART_MspInit+0xfc>)
 8002bc0:	f001 fbee 	bl	80043a0 <HAL_DMA_Init>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 8002bca:	f7ff fd33 	bl	8002634 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a06      	ldr	r2, [pc, #24]	; (8002bec <HAL_UART_MspInit+0xfc>)
 8002bd2:	671a      	str	r2, [r3, #112]	; 0x70
 8002bd4:	4a05      	ldr	r2, [pc, #20]	; (8002bec <HAL_UART_MspInit+0xfc>)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002bda:	bf00      	nop
 8002bdc:	3728      	adds	r7, #40	; 0x28
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40004400 	.word	0x40004400
 8002be8:	40021000 	.word	0x40021000
 8002bec:	20000210 	.word	0x20000210
 8002bf0:	4002006c 	.word	0x4002006c

08002bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002bf8:	e7fe      	b.n	8002bf8 <NMI_Handler+0x4>

08002bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bfe:	e7fe      	b.n	8002bfe <HardFault_Handler+0x4>

08002c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c04:	e7fe      	b.n	8002c04 <MemManage_Handler+0x4>

08002c06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c06:	b480      	push	{r7}
 8002c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c0a:	e7fe      	b.n	8002c0a <BusFault_Handler+0x4>

08002c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c10:	e7fe      	b.n	8002c10 <UsageFault_Handler+0x4>

08002c12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c12:	b480      	push	{r7}
 8002c14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c16:	bf00      	nop
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c24:	bf00      	nop
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c40:	f000 f918 	bl	8002e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c44:	bf00      	nop
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002c4c:	2001      	movs	r0, #1
 8002c4e:	f001 ff39 	bl	8004ac4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	clockcheckRight();
 8002c52:	f7ff f993 	bl	8001f7c <clockcheckRight>
  /* USER CODE END EXTI0_IRQn 1 */
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002c5e:	2002      	movs	r0, #2
 8002c60:	f001 ff30 	bl	8004ac4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  counterclockcheckLeft();
 8002c64:	f7ff faac 	bl	80021c0 <counterclockcheckLeft>
  /* USER CODE END EXTI1_IRQn 1 */
}
 8002c68:	bf00      	nop
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002c70:	2008      	movs	r0, #8
 8002c72:	f001 ff27 	bl	8004ac4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
	checkOrientClock();
 8002c76:	f7ff fd2b 	bl	80026d0 <checkOrientClock>
  /* USER CODE END EXTI3_IRQn 1 */
}
 8002c7a:	bf00      	nop
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002c82:	2010      	movs	r0, #16
 8002c84:	f001 ff1e 	bl	8004ac4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
	counterclockcheckRight();
 8002c88:	f7ff f9d8 	bl	800203c <counterclockcheckRight>
  /* USER CODE END EXTI4_IRQn 1 */
}
 8002c8c:	bf00      	nop
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002c94:	4802      	ldr	r0, [pc, #8]	; (8002ca0 <DMA1_Channel6_IRQHandler+0x10>)
 8002c96:	f001 fc9b 	bl	80045d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20000210 	.word	0x20000210

08002ca4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002ca8:	2020      	movs	r0, #32
 8002caa:	f001 ff0b 	bl	8004ac4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  	clockcheckLeft();
 8002cae:	f7ff fa25 	bl	80020fc <clockcheckLeft>

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002cbc:	4803      	ldr	r0, [pc, #12]	; (8002ccc <TIM2_IRQHandler+0x14>)
 8002cbe:	f003 f9ef 	bl	80060a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
	controlBothMotors();
 8002cc2:	f7ff fc7d 	bl	80025c0 <controlBothMotors>
  /* USER CODE END TIM2_IRQn 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	2000039c 	.word	0x2000039c

08002cd0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002cd4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002cd8:	f001 fef4 	bl	8004ac4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
	checkOrientCounterClock();
 8002cdc:	f7ff fd46 	bl	800276c <checkOrientCounterClock>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ce0:	bf00      	nop
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ce8:	4803      	ldr	r0, [pc, #12]	; (8002cf8 <TIM6_DAC_IRQHandler+0x14>)
 8002cea:	f003 f9d9 	bl	80060a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
	updatePositionsAndVelocities();
 8002cee:	f7ff f84d 	bl	8001d8c <updatePositionsAndVelocities>
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	200002ec 	.word	0x200002ec

08002cfc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002d00:	4803      	ldr	r0, [pc, #12]	; (8002d10 <TIM7_IRQHandler+0x14>)
 8002d02:	f003 f9cd 	bl	80060a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
	UpdateBatteryVoltage();
 8002d06:	f7ff fc6f 	bl	80025e8 <UpdateBatteryVoltage>

  /* USER CODE END TIM7_IRQn 1 */
}
 8002d0a:	bf00      	nop
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	20000480 	.word	0x20000480

08002d14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002d18:	4b15      	ldr	r3, [pc, #84]	; (8002d70 <SystemInit+0x5c>)
 8002d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1e:	4a14      	ldr	r2, [pc, #80]	; (8002d70 <SystemInit+0x5c>)
 8002d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002d28:	4b12      	ldr	r3, [pc, #72]	; (8002d74 <SystemInit+0x60>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a11      	ldr	r2, [pc, #68]	; (8002d74 <SystemInit+0x60>)
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002d34:	4b0f      	ldr	r3, [pc, #60]	; (8002d74 <SystemInit+0x60>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <SystemInit+0x60>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a0d      	ldr	r2, [pc, #52]	; (8002d74 <SystemInit+0x60>)
 8002d40:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002d44:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002d48:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002d4a:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <SystemInit+0x60>)
 8002d4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d50:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002d52:	4b08      	ldr	r3, [pc, #32]	; (8002d74 <SystemInit+0x60>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a07      	ldr	r2, [pc, #28]	; (8002d74 <SystemInit+0x60>)
 8002d58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d5c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002d5e:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <SystemInit+0x60>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	619a      	str	r2, [r3, #24]
}
 8002d64:	bf00      	nop
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	e000ed00 	.word	0xe000ed00
 8002d74:	40021000 	.word	0x40021000

08002d78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002db0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d7c:	f7ff ffca 	bl	8002d14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002d80:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002d82:	e003      	b.n	8002d8c <LoopCopyDataInit>

08002d84 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002d84:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002d86:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002d88:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002d8a:	3104      	adds	r1, #4

08002d8c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002d8c:	480a      	ldr	r0, [pc, #40]	; (8002db8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002d8e:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <LoopForever+0xe>)
	adds	r2, r0, r1
 8002d90:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002d92:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002d94:	d3f6      	bcc.n	8002d84 <CopyDataInit>
	ldr	r2, =_sbss
 8002d96:	4a0a      	ldr	r2, [pc, #40]	; (8002dc0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002d98:	e002      	b.n	8002da0 <LoopFillZerobss>

08002d9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002d9a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002d9c:	f842 3b04 	str.w	r3, [r2], #4

08002da0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002da0:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <LoopForever+0x16>)
	cmp	r2, r3
 8002da2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002da4:	d3f9      	bcc.n	8002d9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002da6:	f004 fe4b 	bl	8007a40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002daa:	f7fe f939 	bl	8001020 <main>

08002dae <LoopForever>:

LoopForever:
    b LoopForever
 8002dae:	e7fe      	b.n	8002dae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002db0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002db4:	08008e10 	.word	0x08008e10
	ldr	r0, =_sdata
 8002db8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002dbc:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 8002dc0:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8002dc4:	200004e4 	.word	0x200004e4

08002dc8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002dc8:	e7fe      	b.n	8002dc8 <ADC1_IRQHandler>

08002dca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b082      	sub	sp, #8
 8002dce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dd4:	2003      	movs	r0, #3
 8002dd6:	f001 faa1 	bl	800431c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002dda:	2000      	movs	r0, #0
 8002ddc:	f000 f80e 	bl	8002dfc <HAL_InitTick>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d002      	beq.n	8002dec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	71fb      	strb	r3, [r7, #7]
 8002dea:	e001      	b.n	8002df0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002dec:	f7ff fd60 	bl	80028b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002df0:	79fb      	ldrb	r3, [r7, #7]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
	...

08002dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002e08:	4b17      	ldr	r3, [pc, #92]	; (8002e68 <HAL_InitTick+0x6c>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d023      	beq.n	8002e58 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002e10:	4b16      	ldr	r3, [pc, #88]	; (8002e6c <HAL_InitTick+0x70>)
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	4b14      	ldr	r3, [pc, #80]	; (8002e68 <HAL_InitTick+0x6c>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e26:	4618      	mov	r0, r3
 8002e28:	f001 faad 	bl	8004386 <HAL_SYSTICK_Config>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10f      	bne.n	8002e52 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b0f      	cmp	r3, #15
 8002e36:	d809      	bhi.n	8002e4c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e38:	2200      	movs	r2, #0
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e40:	f001 fa77 	bl	8004332 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e44:	4a0a      	ldr	r2, [pc, #40]	; (8002e70 <HAL_InitTick+0x74>)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	e007      	b.n	8002e5c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	73fb      	strb	r3, [r7, #15]
 8002e50:	e004      	b.n	8002e5c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	73fb      	strb	r3, [r7, #15]
 8002e56:	e001      	b.n	8002e5c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20000014 	.word	0x20000014
 8002e6c:	2000000c 	.word	0x2000000c
 8002e70:	20000010 	.word	0x20000010

08002e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e78:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <HAL_IncTick+0x20>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <HAL_IncTick+0x24>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4413      	add	r3, r2
 8002e84:	4a04      	ldr	r2, [pc, #16]	; (8002e98 <HAL_IncTick+0x24>)
 8002e86:	6013      	str	r3, [r2, #0]
}
 8002e88:	bf00      	nop
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	20000014 	.word	0x20000014
 8002e98:	200004e0 	.word	0x200004e0

08002e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002ea0:	4b03      	ldr	r3, [pc, #12]	; (8002eb0 <HAL_GetTick+0x14>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	200004e0 	.word	0x200004e0

08002eb4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	609a      	str	r2, [r3, #8]
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	609a      	str	r2, [r3, #8]
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
 8002f28:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	3360      	adds	r3, #96	; 0x60
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	4b08      	ldr	r3, [pc, #32]	; (8002f60 <LL_ADC_SetOffset+0x44>)
 8002f3e:	4013      	ands	r3, r2
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002f54:	bf00      	nop
 8002f56:	371c      	adds	r7, #28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	03fff000 	.word	0x03fff000

08002f64 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	3360      	adds	r3, #96	; 0x60
 8002f72:	461a      	mov	r2, r3
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b087      	sub	sp, #28
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	3360      	adds	r3, #96	; 0x60
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002fba:	bf00      	nop
 8002fbc:	371c      	adds	r7, #28
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	3330      	adds	r3, #48	; 0x30
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	0a1b      	lsrs	r3, r3, #8
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	f003 030c 	and.w	r3, r3, #12
 8003008:	4413      	add	r3, r2
 800300a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	f003 031f 	and.w	r3, r3, #31
 8003016:	211f      	movs	r1, #31
 8003018:	fa01 f303 	lsl.w	r3, r1, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	401a      	ands	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	0e9b      	lsrs	r3, r3, #26
 8003024:	f003 011f 	and.w	r1, r3, #31
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	f003 031f 	and.w	r3, r3, #31
 800302e:	fa01 f303 	lsl.w	r3, r1, r3
 8003032:	431a      	orrs	r2, r3
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003038:	bf00      	nop
 800303a:	371c      	adds	r7, #28
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	3314      	adds	r3, #20
 8003054:	461a      	mov	r2, r3
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	0e5b      	lsrs	r3, r3, #25
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	4413      	add	r3, r2
 8003062:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	0d1b      	lsrs	r3, r3, #20
 800306c:	f003 031f 	and.w	r3, r3, #31
 8003070:	2107      	movs	r1, #7
 8003072:	fa01 f303 	lsl.w	r3, r1, r3
 8003076:	43db      	mvns	r3, r3
 8003078:	401a      	ands	r2, r3
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	0d1b      	lsrs	r3, r3, #20
 800307e:	f003 031f 	and.w	r3, r3, #31
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	fa01 f303 	lsl.w	r3, r1, r3
 8003088:	431a      	orrs	r2, r3
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800308e:	bf00      	nop
 8003090:	371c      	adds	r7, #28
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
	...

0800309c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030b4:	43db      	mvns	r3, r3
 80030b6:	401a      	ands	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f003 0318 	and.w	r3, r3, #24
 80030be:	4908      	ldr	r1, [pc, #32]	; (80030e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80030c0:	40d9      	lsrs	r1, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	400b      	ands	r3, r1
 80030c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ca:	431a      	orrs	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80030d2:	bf00      	nop
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	0007ffff 	.word	0x0007ffff

080030e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80030f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6093      	str	r3, [r2, #8]
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003118:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800311c:	d101      	bne.n	8003122 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003140:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003144:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003168:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800316c:	d101      	bne.n	8003172 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003190:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003194:	f043 0201 	orr.w	r2, r3, #1
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031bc:	f043 0202 	orr.w	r2, r3, #2
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <LL_ADC_IsEnabled+0x18>
 80031e4:	2301      	movs	r3, #1
 80031e6:	e000      	b.n	80031ea <LL_ADC_IsEnabled+0x1a>
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b02      	cmp	r3, #2
 8003208:	d101      	bne.n	800320e <LL_ADC_IsDisableOngoing+0x18>
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <LL_ADC_IsDisableOngoing+0x1a>
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800322c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003230:	f043 0204 	orr.w	r2, r3, #4
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b04      	cmp	r3, #4
 8003256:	d101      	bne.n	800325c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003258:	2301      	movs	r3, #1
 800325a:	e000      	b.n	800325e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	2b08      	cmp	r3, #8
 800327c:	d101      	bne.n	8003282 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b088      	sub	sp, #32
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800329c:	2300      	movs	r3, #0
 800329e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e12c      	b.n	8003504 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d109      	bne.n	80032cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff fb1d 	bl	80028f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff ff19 	bl	8003108 <LL_ADC_IsDeepPowerDownEnabled>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d004      	beq.n	80032e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff feff 	bl	80030e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff ff34 	bl	8003158 <LL_ADC_IsInternalRegulatorEnabled>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d115      	bne.n	8003322 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff ff18 	bl	8003130 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003300:	4b82      	ldr	r3, [pc, #520]	; (800350c <HAL_ADC_Init+0x27c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	099b      	lsrs	r3, r3, #6
 8003306:	4a82      	ldr	r2, [pc, #520]	; (8003510 <HAL_ADC_Init+0x280>)
 8003308:	fba2 2303 	umull	r2, r3, r2, r3
 800330c:	099b      	lsrs	r3, r3, #6
 800330e:	3301      	adds	r3, #1
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003314:	e002      	b.n	800331c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	3b01      	subs	r3, #1
 800331a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f9      	bne.n	8003316 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff ff16 	bl	8003158 <LL_ADC_IsInternalRegulatorEnabled>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10d      	bne.n	800334e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003336:	f043 0210 	orr.w	r2, r3, #16
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003342:	f043 0201 	orr.w	r2, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff ff76 	bl	8003244 <LL_ADC_REG_IsConversionOngoing>
 8003358:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335e:	f003 0310 	and.w	r3, r3, #16
 8003362:	2b00      	cmp	r3, #0
 8003364:	f040 80c5 	bne.w	80034f2 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	2b00      	cmp	r3, #0
 800336c:	f040 80c1 	bne.w	80034f2 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003374:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003378:	f043 0202 	orr.w	r2, r3, #2
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff ff23 	bl	80031d0 <LL_ADC_IsEnabled>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10b      	bne.n	80033a8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003390:	4860      	ldr	r0, [pc, #384]	; (8003514 <HAL_ADC_Init+0x284>)
 8003392:	f7ff ff1d 	bl	80031d0 <LL_ADC_IsEnabled>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d105      	bne.n	80033a8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	4619      	mov	r1, r3
 80033a2:	485d      	ldr	r0, [pc, #372]	; (8003518 <HAL_ADC_Init+0x288>)
 80033a4:	f7ff fd86 	bl	8002eb4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	7e5b      	ldrb	r3, [r3, #25]
 80033ac:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033b2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80033b8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80033be:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033c6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033c8:	4313      	orrs	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d106      	bne.n	80033e4 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	3b01      	subs	r3, #1
 80033dc:	045b      	lsls	r3, r3, #17
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d009      	beq.n	8003400 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	4b45      	ldr	r3, [pc, #276]	; (800351c <HAL_ADC_Init+0x28c>)
 8003408:	4013      	ands	r3, r2
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6812      	ldr	r2, [r2, #0]
 800340e:	69b9      	ldr	r1, [r7, #24]
 8003410:	430b      	orrs	r3, r1
 8003412:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff ff13 	bl	8003244 <LL_ADC_REG_IsConversionOngoing>
 800341e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff ff20 	bl	800326a <LL_ADC_INJ_IsConversionOngoing>
 800342a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d13d      	bne.n	80034ae <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d13a      	bne.n	80034ae <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800343c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003444:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003446:	4313      	orrs	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003454:	f023 0302 	bic.w	r3, r3, #2
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6812      	ldr	r2, [r2, #0]
 800345c:	69b9      	ldr	r1, [r7, #24]
 800345e:	430b      	orrs	r3, r1
 8003460:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003468:	2b01      	cmp	r3, #1
 800346a:	d118      	bne.n	800349e <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003476:	f023 0304 	bic.w	r3, r3, #4
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003482:	4311      	orrs	r1, r2
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003488:	4311      	orrs	r1, r2
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800348e:	430a      	orrs	r2, r1
 8003490:	431a      	orrs	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0201 	orr.w	r2, r2, #1
 800349a:	611a      	str	r2, [r3, #16]
 800349c:	e007      	b.n	80034ae <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	691a      	ldr	r2, [r3, #16]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0201 	bic.w	r2, r2, #1
 80034ac:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d10c      	bne.n	80034d0 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034bc:	f023 010f 	bic.w	r1, r3, #15
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	1e5a      	subs	r2, r3, #1
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	631a      	str	r2, [r3, #48]	; 0x30
 80034ce:	e007      	b.n	80034e0 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 020f 	bic.w	r2, r2, #15
 80034de:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e4:	f023 0303 	bic.w	r3, r3, #3
 80034e8:	f043 0201 	orr.w	r2, r3, #1
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	655a      	str	r2, [r3, #84]	; 0x54
 80034f0:	e007      	b.n	8003502 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f6:	f043 0210 	orr.w	r2, r3, #16
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003502:	7ffb      	ldrb	r3, [r7, #31]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3720      	adds	r7, #32
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	2000000c 	.word	0x2000000c
 8003510:	053e2d63 	.word	0x053e2d63
 8003514:	50040000 	.word	0x50040000
 8003518:	50040300 	.word	0x50040300
 800351c:	fff0c007 	.word	0xfff0c007

08003520 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff fe89 	bl	8003244 <LL_ADC_REG_IsConversionOngoing>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d14f      	bne.n	80035d8 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800353e:	2b01      	cmp	r3, #1
 8003540:	d101      	bne.n	8003546 <HAL_ADC_Start+0x26>
 8003542:	2302      	movs	r3, #2
 8003544:	e04b      	b.n	80035de <HAL_ADC_Start+0xbe>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 fcc6 	bl	8003ee0 <ADC_Enable>
 8003554:	4603      	mov	r3, r0
 8003556:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003558:	7bfb      	ldrb	r3, [r7, #15]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d137      	bne.n	80035ce <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003562:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003566:	f023 0301 	bic.w	r3, r3, #1
 800356a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003576:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800357a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800357e:	d106      	bne.n	800358e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003584:	f023 0206 	bic.w	r2, r3, #6
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	659a      	str	r2, [r3, #88]	; 0x58
 800358c:	e002      	b.n	8003594 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	221c      	movs	r2, #28
 800359a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d007      	beq.n	80035c2 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff fe28 	bl	800321c <LL_ADC_REG_StartConversion>
 80035cc:	e006      	b.n	80035dc <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80035d6:	e001      	b.n	80035dc <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80035d8:	2302      	movs	r3, #2
 80035da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b086      	sub	sp, #24
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d102      	bne.n	80035fe <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80035f8:	2308      	movs	r3, #8
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	e010      	b.n	8003620 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b00      	cmp	r3, #0
 800360a:	d007      	beq.n	800361c <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003610:	f043 0220 	orr.w	r2, r3, #32
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e06f      	b.n	80036fc <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800361c:	2304      	movs	r3, #4
 800361e:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003620:	f7ff fc3c 	bl	8002e9c <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003626:	e021      	b.n	800366c <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800362e:	d01d      	beq.n	800366c <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003630:	f7ff fc34 	bl	8002e9c <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	429a      	cmp	r2, r3
 800363e:	d302      	bcc.n	8003646 <HAL_ADC_PollForConversion+0x60>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d112      	bne.n	800366c <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	4013      	ands	r3, r2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10b      	bne.n	800366c <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003658:	f043 0204 	orr.w	r2, r3, #4
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e047      	b.n	80036fc <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	4013      	ands	r3, r2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0d6      	beq.n	8003628 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff fc9b 	bl	8002fc6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d01c      	beq.n	80036d0 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	7e5b      	ldrb	r3, [r3, #25]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d118      	bne.n	80036d0 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0308 	and.w	r3, r3, #8
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	d111      	bne.n	80036d0 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d105      	bne.n	80036d0 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c8:	f043 0201 	orr.w	r2, r3, #1
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	2b08      	cmp	r3, #8
 80036dc:	d104      	bne.n	80036e8 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2208      	movs	r2, #8
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	e008      	b.n	80036fa <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d103      	bne.n	80036fa <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	220c      	movs	r2, #12
 80036f8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003712:	4618      	mov	r0, r3
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
	...

08003720 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b0b6      	sub	sp, #216	; 0xd8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003730:	2300      	movs	r3, #0
 8003732:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_ADC_ConfigChannel+0x22>
 800373e:	2302      	movs	r3, #2
 8003740:	e3b9      	b.n	8003eb6 <HAL_ADC_ConfigChannel+0x796>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f7ff fd78 	bl	8003244 <LL_ADC_REG_IsConversionOngoing>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	f040 839e 	bne.w	8003e98 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	2b05      	cmp	r3, #5
 8003762:	d824      	bhi.n	80037ae <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	3b02      	subs	r3, #2
 800376a:	2b03      	cmp	r3, #3
 800376c:	d81b      	bhi.n	80037a6 <HAL_ADC_ConfigChannel+0x86>
 800376e:	a201      	add	r2, pc, #4	; (adr r2, 8003774 <HAL_ADC_ConfigChannel+0x54>)
 8003770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003774:	08003785 	.word	0x08003785
 8003778:	0800378d 	.word	0x0800378d
 800377c:	08003795 	.word	0x08003795
 8003780:	0800379d 	.word	0x0800379d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	220c      	movs	r2, #12
 8003788:	605a      	str	r2, [r3, #4]
          break;
 800378a:	e011      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	2212      	movs	r2, #18
 8003790:	605a      	str	r2, [r3, #4]
          break;
 8003792:	e00d      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	2218      	movs	r2, #24
 8003798:	605a      	str	r2, [r3, #4]
          break;
 800379a:	e009      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037a2:	605a      	str	r2, [r3, #4]
          break;
 80037a4:	e004      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2206      	movs	r2, #6
 80037aa:	605a      	str	r2, [r3, #4]
          break;
 80037ac:	e000      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80037ae:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6818      	ldr	r0, [r3, #0]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	6859      	ldr	r1, [r3, #4]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	461a      	mov	r2, r3
 80037be:	f7ff fc15 	bl	8002fec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7ff fd3c 	bl	8003244 <LL_ADC_REG_IsConversionOngoing>
 80037cc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff fd48 	bl	800326a <LL_ADC_INJ_IsConversionOngoing>
 80037da:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80037de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f040 81a6 	bne.w	8003b34 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f040 81a1 	bne.w	8003b34 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6818      	ldr	r0, [r3, #0]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	6819      	ldr	r1, [r3, #0]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	461a      	mov	r2, r3
 8003800:	f7ff fc20 	bl	8003044 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	695a      	ldr	r2, [r3, #20]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	08db      	lsrs	r3, r3, #3
 8003810:	f003 0303 	and.w	r3, r3, #3
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	2b04      	cmp	r3, #4
 8003824:	d00a      	beq.n	800383c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6818      	ldr	r0, [r3, #0]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	6919      	ldr	r1, [r3, #16]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003836:	f7ff fb71 	bl	8002f1c <LL_ADC_SetOffset>
 800383a:	e17b      	b.n	8003b34 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2100      	movs	r1, #0
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff fb8e 	bl	8002f64 <LL_ADC_GetOffsetChannel>
 8003848:	4603      	mov	r3, r0
 800384a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10a      	bne.n	8003868 <HAL_ADC_ConfigChannel+0x148>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2100      	movs	r1, #0
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff fb83 	bl	8002f64 <LL_ADC_GetOffsetChannel>
 800385e:	4603      	mov	r3, r0
 8003860:	0e9b      	lsrs	r3, r3, #26
 8003862:	f003 021f 	and.w	r2, r3, #31
 8003866:	e01e      	b.n	80038a6 <HAL_ADC_ConfigChannel+0x186>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2100      	movs	r1, #0
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff fb78 	bl	8002f64 <LL_ADC_GetOffsetChannel>
 8003874:	4603      	mov	r3, r0
 8003876:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800387e:	fa93 f3a3 	rbit	r3, r3
 8003882:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003886:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800388a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800388e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003896:	2320      	movs	r3, #32
 8003898:	e004      	b.n	80038a4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800389a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800389e:	fab3 f383 	clz	r3, r3
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d105      	bne.n	80038be <HAL_ADC_ConfigChannel+0x19e>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	0e9b      	lsrs	r3, r3, #26
 80038b8:	f003 031f 	and.w	r3, r3, #31
 80038bc:	e018      	b.n	80038f0 <HAL_ADC_ConfigChannel+0x1d0>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80038ca:	fa93 f3a3 	rbit	r3, r3
 80038ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80038d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80038da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80038e2:	2320      	movs	r3, #32
 80038e4:	e004      	b.n	80038f0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80038e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80038ea:	fab3 f383 	clz	r3, r3
 80038ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d106      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2200      	movs	r2, #0
 80038fa:	2100      	movs	r1, #0
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff fb47 	bl	8002f90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2101      	movs	r1, #1
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff fb2b 	bl	8002f64 <LL_ADC_GetOffsetChannel>
 800390e:	4603      	mov	r3, r0
 8003910:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10a      	bne.n	800392e <HAL_ADC_ConfigChannel+0x20e>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2101      	movs	r1, #1
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff fb20 	bl	8002f64 <LL_ADC_GetOffsetChannel>
 8003924:	4603      	mov	r3, r0
 8003926:	0e9b      	lsrs	r3, r3, #26
 8003928:	f003 021f 	and.w	r2, r3, #31
 800392c:	e01e      	b.n	800396c <HAL_ADC_ConfigChannel+0x24c>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2101      	movs	r1, #1
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff fb15 	bl	8002f64 <LL_ADC_GetOffsetChannel>
 800393a:	4603      	mov	r3, r0
 800393c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003940:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003944:	fa93 f3a3 	rbit	r3, r3
 8003948:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800394c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003950:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003954:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800395c:	2320      	movs	r3, #32
 800395e:	e004      	b.n	800396a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003960:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003964:	fab3 f383 	clz	r3, r3
 8003968:	b2db      	uxtb	r3, r3
 800396a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003974:	2b00      	cmp	r3, #0
 8003976:	d105      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x264>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	0e9b      	lsrs	r3, r3, #26
 800397e:	f003 031f 	and.w	r3, r3, #31
 8003982:	e018      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x296>
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003990:	fa93 f3a3 	rbit	r3, r3
 8003994:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003998:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800399c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80039a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80039a8:	2320      	movs	r3, #32
 80039aa:	e004      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80039ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039b0:	fab3 f383 	clz	r3, r3
 80039b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d106      	bne.n	80039c8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2200      	movs	r2, #0
 80039c0:	2101      	movs	r1, #1
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff fae4 	bl	8002f90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2102      	movs	r1, #2
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff fac8 	bl	8002f64 <LL_ADC_GetOffsetChannel>
 80039d4:	4603      	mov	r3, r0
 80039d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10a      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x2d4>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2102      	movs	r1, #2
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff fabd 	bl	8002f64 <LL_ADC_GetOffsetChannel>
 80039ea:	4603      	mov	r3, r0
 80039ec:	0e9b      	lsrs	r3, r3, #26
 80039ee:	f003 021f 	and.w	r2, r3, #31
 80039f2:	e01e      	b.n	8003a32 <HAL_ADC_ConfigChannel+0x312>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2102      	movs	r1, #2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff fab2 	bl	8002f64 <LL_ADC_GetOffsetChannel>
 8003a00:	4603      	mov	r3, r0
 8003a02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a0a:	fa93 f3a3 	rbit	r3, r3
 8003a0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003a12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003a1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003a22:	2320      	movs	r3, #32
 8003a24:	e004      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003a26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a2a:	fab3 f383 	clz	r3, r3
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d105      	bne.n	8003a4a <HAL_ADC_ConfigChannel+0x32a>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	0e9b      	lsrs	r3, r3, #26
 8003a44:	f003 031f 	and.w	r3, r3, #31
 8003a48:	e016      	b.n	8003a78 <HAL_ADC_ConfigChannel+0x358>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a56:	fa93 f3a3 	rbit	r3, r3
 8003a5a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003a5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003a62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003a6a:	2320      	movs	r3, #32
 8003a6c:	e004      	b.n	8003a78 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003a6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a72:	fab3 f383 	clz	r3, r3
 8003a76:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d106      	bne.n	8003a8a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2200      	movs	r2, #0
 8003a82:	2102      	movs	r1, #2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff fa83 	bl	8002f90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2103      	movs	r1, #3
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff fa67 	bl	8002f64 <LL_ADC_GetOffsetChannel>
 8003a96:	4603      	mov	r3, r0
 8003a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10a      	bne.n	8003ab6 <HAL_ADC_ConfigChannel+0x396>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2103      	movs	r1, #3
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff fa5c 	bl	8002f64 <LL_ADC_GetOffsetChannel>
 8003aac:	4603      	mov	r3, r0
 8003aae:	0e9b      	lsrs	r3, r3, #26
 8003ab0:	f003 021f 	and.w	r2, r3, #31
 8003ab4:	e017      	b.n	8003ae6 <HAL_ADC_ConfigChannel+0x3c6>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2103      	movs	r1, #3
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff fa51 	bl	8002f64 <LL_ADC_GetOffsetChannel>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ac8:	fa93 f3a3 	rbit	r3, r3
 8003acc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003ace:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ad0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003ad2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003ad8:	2320      	movs	r3, #32
 8003ada:	e003      	b.n	8003ae4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003adc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ade:	fab3 f383 	clz	r3, r3
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d105      	bne.n	8003afe <HAL_ADC_ConfigChannel+0x3de>
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	0e9b      	lsrs	r3, r3, #26
 8003af8:	f003 031f 	and.w	r3, r3, #31
 8003afc:	e011      	b.n	8003b22 <HAL_ADC_ConfigChannel+0x402>
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b06:	fa93 f3a3 	rbit	r3, r3
 8003b0a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003b0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b0e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003b16:	2320      	movs	r3, #32
 8003b18:	e003      	b.n	8003b22 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b1c:	fab3 f383 	clz	r3, r3
 8003b20:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d106      	bne.n	8003b34 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	2103      	movs	r1, #3
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff fa2e 	bl	8002f90 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff fb49 	bl	80031d0 <LL_ADC_IsEnabled>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f040 813f 	bne.w	8003dc4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6818      	ldr	r0, [r3, #0]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	6819      	ldr	r1, [r3, #0]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	461a      	mov	r2, r3
 8003b54:	f7ff faa2 	bl	800309c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	4a8e      	ldr	r2, [pc, #568]	; (8003d98 <HAL_ADC_ConfigChannel+0x678>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	f040 8130 	bne.w	8003dc4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10b      	bne.n	8003b8c <HAL_ADC_ConfigChannel+0x46c>
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	0e9b      	lsrs	r3, r3, #26
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	f003 031f 	and.w	r3, r3, #31
 8003b80:	2b09      	cmp	r3, #9
 8003b82:	bf94      	ite	ls
 8003b84:	2301      	movls	r3, #1
 8003b86:	2300      	movhi	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	e019      	b.n	8003bc0 <HAL_ADC_ConfigChannel+0x4a0>
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b94:	fa93 f3a3 	rbit	r3, r3
 8003b98:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003b9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b9c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003b9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003ba4:	2320      	movs	r3, #32
 8003ba6:	e003      	b.n	8003bb0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003ba8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003baa:	fab3 f383 	clz	r3, r3
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	f003 031f 	and.w	r3, r3, #31
 8003bb6:	2b09      	cmp	r3, #9
 8003bb8:	bf94      	ite	ls
 8003bba:	2301      	movls	r3, #1
 8003bbc:	2300      	movhi	r3, #0
 8003bbe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d079      	beq.n	8003cb8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d107      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0x4c0>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	0e9b      	lsrs	r3, r3, #26
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	069b      	lsls	r3, r3, #26
 8003bda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bde:	e015      	b.n	8003c0c <HAL_ADC_ConfigChannel+0x4ec>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003be8:	fa93 f3a3 	rbit	r3, r3
 8003bec:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bf0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003bf8:	2320      	movs	r3, #32
 8003bfa:	e003      	b.n	8003c04 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bfe:	fab3 f383 	clz	r3, r3
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	3301      	adds	r3, #1
 8003c06:	069b      	lsls	r3, r3, #26
 8003c08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d109      	bne.n	8003c2c <HAL_ADC_ConfigChannel+0x50c>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	0e9b      	lsrs	r3, r3, #26
 8003c1e:	3301      	adds	r3, #1
 8003c20:	f003 031f 	and.w	r3, r3, #31
 8003c24:	2101      	movs	r1, #1
 8003c26:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2a:	e017      	b.n	8003c5c <HAL_ADC_ConfigChannel+0x53c>
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c34:	fa93 f3a3 	rbit	r3, r3
 8003c38:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c3c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003c44:	2320      	movs	r3, #32
 8003c46:	e003      	b.n	8003c50 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003c48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c4a:	fab3 f383 	clz	r3, r3
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	3301      	adds	r3, #1
 8003c52:	f003 031f 	and.w	r3, r3, #31
 8003c56:	2101      	movs	r1, #1
 8003c58:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5c:	ea42 0103 	orr.w	r1, r2, r3
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10a      	bne.n	8003c82 <HAL_ADC_ConfigChannel+0x562>
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	0e9b      	lsrs	r3, r3, #26
 8003c72:	3301      	adds	r3, #1
 8003c74:	f003 021f 	and.w	r2, r3, #31
 8003c78:	4613      	mov	r3, r2
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	4413      	add	r3, r2
 8003c7e:	051b      	lsls	r3, r3, #20
 8003c80:	e018      	b.n	8003cb4 <HAL_ADC_ConfigChannel+0x594>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8a:	fa93 f3a3 	rbit	r3, r3
 8003c8e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c92:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003c9a:	2320      	movs	r3, #32
 8003c9c:	e003      	b.n	8003ca6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ca0:	fab3 f383 	clz	r3, r3
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	f003 021f 	and.w	r2, r3, #31
 8003cac:	4613      	mov	r3, r2
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	4413      	add	r3, r2
 8003cb2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cb4:	430b      	orrs	r3, r1
 8003cb6:	e080      	b.n	8003dba <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d107      	bne.n	8003cd4 <HAL_ADC_ConfigChannel+0x5b4>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	0e9b      	lsrs	r3, r3, #26
 8003cca:	3301      	adds	r3, #1
 8003ccc:	069b      	lsls	r3, r3, #26
 8003cce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cd2:	e015      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x5e0>
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cdc:	fa93 f3a3 	rbit	r3, r3
 8003ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003cec:	2320      	movs	r3, #32
 8003cee:	e003      	b.n	8003cf8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf2:	fab3 f383 	clz	r3, r3
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	069b      	lsls	r3, r3, #26
 8003cfc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d109      	bne.n	8003d20 <HAL_ADC_ConfigChannel+0x600>
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	0e9b      	lsrs	r3, r3, #26
 8003d12:	3301      	adds	r3, #1
 8003d14:	f003 031f 	and.w	r3, r3, #31
 8003d18:	2101      	movs	r1, #1
 8003d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1e:	e017      	b.n	8003d50 <HAL_ADC_ConfigChannel+0x630>
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	fa93 f3a3 	rbit	r3, r3
 8003d2c:	61fb      	str	r3, [r7, #28]
  return result;
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003d38:	2320      	movs	r3, #32
 8003d3a:	e003      	b.n	8003d44 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	fab3 f383 	clz	r3, r3
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	3301      	adds	r3, #1
 8003d46:	f003 031f 	and.w	r3, r3, #31
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d50:	ea42 0103 	orr.w	r1, r2, r3
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10d      	bne.n	8003d7c <HAL_ADC_ConfigChannel+0x65c>
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	0e9b      	lsrs	r3, r3, #26
 8003d66:	3301      	adds	r3, #1
 8003d68:	f003 021f 	and.w	r2, r3, #31
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	4413      	add	r3, r2
 8003d72:	3b1e      	subs	r3, #30
 8003d74:	051b      	lsls	r3, r3, #20
 8003d76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d7a:	e01d      	b.n	8003db8 <HAL_ADC_ConfigChannel+0x698>
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	fa93 f3a3 	rbit	r3, r3
 8003d88:	613b      	str	r3, [r7, #16]
  return result;
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d103      	bne.n	8003d9c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003d94:	2320      	movs	r3, #32
 8003d96:	e005      	b.n	8003da4 <HAL_ADC_ConfigChannel+0x684>
 8003d98:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	fab3 f383 	clz	r3, r3
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	3301      	adds	r3, #1
 8003da6:	f003 021f 	and.w	r2, r3, #31
 8003daa:	4613      	mov	r3, r2
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	4413      	add	r3, r2
 8003db0:	3b1e      	subs	r3, #30
 8003db2:	051b      	lsls	r3, r3, #20
 8003db4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003db8:	430b      	orrs	r3, r1
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	6892      	ldr	r2, [r2, #8]
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	f7ff f940 	bl	8003044 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	4b3d      	ldr	r3, [pc, #244]	; (8003ec0 <HAL_ADC_ConfigChannel+0x7a0>)
 8003dca:	4013      	ands	r3, r2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d06c      	beq.n	8003eaa <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003dd0:	483c      	ldr	r0, [pc, #240]	; (8003ec4 <HAL_ADC_ConfigChannel+0x7a4>)
 8003dd2:	f7ff f895 	bl	8002f00 <LL_ADC_GetCommonPathInternalCh>
 8003dd6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a3a      	ldr	r2, [pc, #232]	; (8003ec8 <HAL_ADC_ConfigChannel+0x7a8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d127      	bne.n	8003e34 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003de4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003de8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d121      	bne.n	8003e34 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a35      	ldr	r2, [pc, #212]	; (8003ecc <HAL_ADC_ConfigChannel+0x7ac>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d157      	bne.n	8003eaa <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003dfe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e02:	4619      	mov	r1, r3
 8003e04:	482f      	ldr	r0, [pc, #188]	; (8003ec4 <HAL_ADC_ConfigChannel+0x7a4>)
 8003e06:	f7ff f868 	bl	8002eda <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e0a:	4b31      	ldr	r3, [pc, #196]	; (8003ed0 <HAL_ADC_ConfigChannel+0x7b0>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	099b      	lsrs	r3, r3, #6
 8003e10:	4a30      	ldr	r2, [pc, #192]	; (8003ed4 <HAL_ADC_ConfigChannel+0x7b4>)
 8003e12:	fba2 2303 	umull	r2, r3, r2, r3
 8003e16:	099b      	lsrs	r3, r3, #6
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	4413      	add	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e24:	e002      	b.n	8003e2c <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f9      	bne.n	8003e26 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e32:	e03a      	b.n	8003eaa <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a27      	ldr	r2, [pc, #156]	; (8003ed8 <HAL_ADC_ConfigChannel+0x7b8>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d113      	bne.n	8003e66 <HAL_ADC_ConfigChannel+0x746>
 8003e3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10d      	bne.n	8003e66 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a1f      	ldr	r2, [pc, #124]	; (8003ecc <HAL_ADC_ConfigChannel+0x7ac>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d12a      	bne.n	8003eaa <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4819      	ldr	r0, [pc, #100]	; (8003ec4 <HAL_ADC_ConfigChannel+0x7a4>)
 8003e60:	f7ff f83b 	bl	8002eda <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e64:	e021      	b.n	8003eaa <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a1c      	ldr	r2, [pc, #112]	; (8003edc <HAL_ADC_ConfigChannel+0x7bc>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d11c      	bne.n	8003eaa <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d116      	bne.n	8003eaa <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a12      	ldr	r2, [pc, #72]	; (8003ecc <HAL_ADC_ConfigChannel+0x7ac>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d111      	bne.n	8003eaa <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e8e:	4619      	mov	r1, r3
 8003e90:	480c      	ldr	r0, [pc, #48]	; (8003ec4 <HAL_ADC_ConfigChannel+0x7a4>)
 8003e92:	f7ff f822 	bl	8002eda <LL_ADC_SetCommonPathInternalCh>
 8003e96:	e008      	b.n	8003eaa <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9c:	f043 0220 	orr.w	r2, r3, #32
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003eb2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	37d8      	adds	r7, #216	; 0xd8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	80080000 	.word	0x80080000
 8003ec4:	50040300 	.word	0x50040300
 8003ec8:	c7520000 	.word	0xc7520000
 8003ecc:	50040000 	.word	0x50040000
 8003ed0:	2000000c 	.word	0x2000000c
 8003ed4:	053e2d63 	.word	0x053e2d63
 8003ed8:	cb840000 	.word	0xcb840000
 8003edc:	80000001 	.word	0x80000001

08003ee0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7ff f96f 	bl	80031d0 <LL_ADC_IsEnabled>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d14d      	bne.n	8003f94 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	4b28      	ldr	r3, [pc, #160]	; (8003fa0 <ADC_Enable+0xc0>)
 8003f00:	4013      	ands	r3, r2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00d      	beq.n	8003f22 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0a:	f043 0210 	orr.w	r2, r3, #16
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f16:	f043 0201 	orr.w	r2, r3, #1
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e039      	b.n	8003f96 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7ff f92a 	bl	8003180 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003f2c:	f7fe ffb6 	bl	8002e9c <HAL_GetTick>
 8003f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f32:	e028      	b.n	8003f86 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff f949 	bl	80031d0 <LL_ADC_IsEnabled>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d104      	bne.n	8003f4e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff f919 	bl	8003180 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003f4e:	f7fe ffa5 	bl	8002e9c <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d914      	bls.n	8003f86 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d00d      	beq.n	8003f86 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6e:	f043 0210 	orr.w	r2, r3, #16
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7a:	f043 0201 	orr.w	r2, r3, #1
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e007      	b.n	8003f96 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d1cf      	bne.n	8003f34 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	8000003f 	.word	0x8000003f

08003fa4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff f920 	bl	80031f6 <LL_ADC_IsDisableOngoing>
 8003fb6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff f907 	bl	80031d0 <LL_ADC_IsEnabled>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d047      	beq.n	8004058 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d144      	bne.n	8004058 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f003 030d 	and.w	r3, r3, #13
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d10c      	bne.n	8003ff6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7ff f8e1 	bl	80031a8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2203      	movs	r2, #3
 8003fec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003fee:	f7fe ff55 	bl	8002e9c <HAL_GetTick>
 8003ff2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ff4:	e029      	b.n	800404a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffa:	f043 0210 	orr.w	r2, r3, #16
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004006:	f043 0201 	orr.w	r2, r3, #1
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e023      	b.n	800405a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004012:	f7fe ff43 	bl	8002e9c <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d914      	bls.n	800404a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00d      	beq.n	800404a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004032:	f043 0210 	orr.w	r2, r3, #16
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403e:	f043 0201 	orr.w	r2, r3, #1
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e007      	b.n	800405a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1dc      	bne.n	8004012 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <LL_ADC_StartCalibration>:
{
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004074:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800407e:	4313      	orrs	r3, r2
 8004080:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	609a      	str	r2, [r3, #8]
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <LL_ADC_IsCalibrationOnGoing>:
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040a8:	d101      	bne.n	80040ae <LL_ADC_IsCalibrationOnGoing+0x1a>
 80040aa:	2301      	movs	r3, #1
 80040ac:	e000      	b.n	80040b0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80040c6:	2300      	movs	r3, #0
 80040c8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <HAL_ADCEx_Calibration_Start+0x1c>
 80040d4:	2302      	movs	r3, #2
 80040d6:	e04d      	b.n	8004174 <HAL_ADCEx_Calibration_Start+0xb8>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f7ff ff5f 	bl	8003fa4 <ADC_Disable>
 80040e6:	4603      	mov	r3, r0
 80040e8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80040ea:	7bfb      	ldrb	r3, [r7, #15]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d136      	bne.n	800415e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80040f8:	f023 0302 	bic.w	r3, r3, #2
 80040fc:	f043 0202 	orr.w	r2, r3, #2
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6839      	ldr	r1, [r7, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff ffa9 	bl	8004062 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004110:	e014      	b.n	800413c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	3301      	adds	r3, #1
 8004116:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800411e:	d30d      	bcc.n	800413c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004124:	f023 0312 	bic.w	r3, r3, #18
 8004128:	f043 0210 	orr.w	r2, r3, #16
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e01b      	b.n	8004174 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4618      	mov	r0, r3
 8004142:	f7ff ffa7 	bl	8004094 <LL_ADC_IsCalibrationOnGoing>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1e2      	bne.n	8004112 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004150:	f023 0303 	bic.w	r3, r3, #3
 8004154:	f043 0201 	orr.w	r2, r3, #1
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	655a      	str	r2, [r3, #84]	; 0x54
 800415c:	e005      	b.n	800416a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004162:	f043 0210 	orr.w	r2, r3, #16
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004172:	7bfb      	ldrb	r3, [r7, #15]
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800418c:	4b0c      	ldr	r3, [pc, #48]	; (80041c0 <__NVIC_SetPriorityGrouping+0x44>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004198:	4013      	ands	r3, r2
 800419a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041ae:	4a04      	ldr	r2, [pc, #16]	; (80041c0 <__NVIC_SetPriorityGrouping+0x44>)
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	60d3      	str	r3, [r2, #12]
}
 80041b4:	bf00      	nop
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	e000ed00 	.word	0xe000ed00

080041c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041c8:	4b04      	ldr	r3, [pc, #16]	; (80041dc <__NVIC_GetPriorityGrouping+0x18>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	0a1b      	lsrs	r3, r3, #8
 80041ce:	f003 0307 	and.w	r3, r3, #7
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	e000ed00 	.word	0xe000ed00

080041e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	4603      	mov	r3, r0
 80041e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	db0b      	blt.n	800420a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041f2:	79fb      	ldrb	r3, [r7, #7]
 80041f4:	f003 021f 	and.w	r2, r3, #31
 80041f8:	4907      	ldr	r1, [pc, #28]	; (8004218 <__NVIC_EnableIRQ+0x38>)
 80041fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	2001      	movs	r0, #1
 8004202:	fa00 f202 	lsl.w	r2, r0, r2
 8004206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	e000e100 	.word	0xe000e100

0800421c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	4603      	mov	r3, r0
 8004224:	6039      	str	r1, [r7, #0]
 8004226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422c:	2b00      	cmp	r3, #0
 800422e:	db0a      	blt.n	8004246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	b2da      	uxtb	r2, r3
 8004234:	490c      	ldr	r1, [pc, #48]	; (8004268 <__NVIC_SetPriority+0x4c>)
 8004236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423a:	0112      	lsls	r2, r2, #4
 800423c:	b2d2      	uxtb	r2, r2
 800423e:	440b      	add	r3, r1
 8004240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004244:	e00a      	b.n	800425c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	b2da      	uxtb	r2, r3
 800424a:	4908      	ldr	r1, [pc, #32]	; (800426c <__NVIC_SetPriority+0x50>)
 800424c:	79fb      	ldrb	r3, [r7, #7]
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	3b04      	subs	r3, #4
 8004254:	0112      	lsls	r2, r2, #4
 8004256:	b2d2      	uxtb	r2, r2
 8004258:	440b      	add	r3, r1
 800425a:	761a      	strb	r2, [r3, #24]
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	e000e100 	.word	0xe000e100
 800426c:	e000ed00 	.word	0xe000ed00

08004270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004270:	b480      	push	{r7}
 8004272:	b089      	sub	sp, #36	; 0x24
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f1c3 0307 	rsb	r3, r3, #7
 800428a:	2b04      	cmp	r3, #4
 800428c:	bf28      	it	cs
 800428e:	2304      	movcs	r3, #4
 8004290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	3304      	adds	r3, #4
 8004296:	2b06      	cmp	r3, #6
 8004298:	d902      	bls.n	80042a0 <NVIC_EncodePriority+0x30>
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	3b03      	subs	r3, #3
 800429e:	e000      	b.n	80042a2 <NVIC_EncodePriority+0x32>
 80042a0:	2300      	movs	r3, #0
 80042a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	43da      	mvns	r2, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	401a      	ands	r2, r3
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	fa01 f303 	lsl.w	r3, r1, r3
 80042c2:	43d9      	mvns	r1, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042c8:	4313      	orrs	r3, r2
         );
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3724      	adds	r7, #36	; 0x24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
	...

080042d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042e8:	d301      	bcc.n	80042ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042ea:	2301      	movs	r3, #1
 80042ec:	e00f      	b.n	800430e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042ee:	4a0a      	ldr	r2, [pc, #40]	; (8004318 <SysTick_Config+0x40>)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042f6:	210f      	movs	r1, #15
 80042f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042fc:	f7ff ff8e 	bl	800421c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004300:	4b05      	ldr	r3, [pc, #20]	; (8004318 <SysTick_Config+0x40>)
 8004302:	2200      	movs	r2, #0
 8004304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004306:	4b04      	ldr	r3, [pc, #16]	; (8004318 <SysTick_Config+0x40>)
 8004308:	2207      	movs	r2, #7
 800430a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	e000e010 	.word	0xe000e010

0800431c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7ff ff29 	bl	800417c <__NVIC_SetPriorityGrouping>
}
 800432a:	bf00      	nop
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b086      	sub	sp, #24
 8004336:	af00      	add	r7, sp, #0
 8004338:	4603      	mov	r3, r0
 800433a:	60b9      	str	r1, [r7, #8]
 800433c:	607a      	str	r2, [r7, #4]
 800433e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004340:	2300      	movs	r3, #0
 8004342:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004344:	f7ff ff3e 	bl	80041c4 <__NVIC_GetPriorityGrouping>
 8004348:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	68b9      	ldr	r1, [r7, #8]
 800434e:	6978      	ldr	r0, [r7, #20]
 8004350:	f7ff ff8e 	bl	8004270 <NVIC_EncodePriority>
 8004354:	4602      	mov	r2, r0
 8004356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800435a:	4611      	mov	r1, r2
 800435c:	4618      	mov	r0, r3
 800435e:	f7ff ff5d 	bl	800421c <__NVIC_SetPriority>
}
 8004362:	bf00      	nop
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b082      	sub	sp, #8
 800436e:	af00      	add	r7, sp, #0
 8004370:	4603      	mov	r3, r0
 8004372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004378:	4618      	mov	r0, r3
 800437a:	f7ff ff31 	bl	80041e0 <__NVIC_EnableIRQ>
}
 800437e:	bf00      	nop
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b082      	sub	sp, #8
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7ff ffa2 	bl	80042d8 <SysTick_Config>
 8004394:	4603      	mov	r3, r0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e098      	b.n	80044e4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	461a      	mov	r2, r3
 80043b8:	4b4d      	ldr	r3, [pc, #308]	; (80044f0 <HAL_DMA_Init+0x150>)
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d80f      	bhi.n	80043de <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	461a      	mov	r2, r3
 80043c4:	4b4b      	ldr	r3, [pc, #300]	; (80044f4 <HAL_DMA_Init+0x154>)
 80043c6:	4413      	add	r3, r2
 80043c8:	4a4b      	ldr	r2, [pc, #300]	; (80044f8 <HAL_DMA_Init+0x158>)
 80043ca:	fba2 2303 	umull	r2, r3, r2, r3
 80043ce:	091b      	lsrs	r3, r3, #4
 80043d0:	009a      	lsls	r2, r3, #2
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a48      	ldr	r2, [pc, #288]	; (80044fc <HAL_DMA_Init+0x15c>)
 80043da:	641a      	str	r2, [r3, #64]	; 0x40
 80043dc:	e00e      	b.n	80043fc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	461a      	mov	r2, r3
 80043e4:	4b46      	ldr	r3, [pc, #280]	; (8004500 <HAL_DMA_Init+0x160>)
 80043e6:	4413      	add	r3, r2
 80043e8:	4a43      	ldr	r2, [pc, #268]	; (80044f8 <HAL_DMA_Init+0x158>)
 80043ea:	fba2 2303 	umull	r2, r3, r2, r3
 80043ee:	091b      	lsrs	r3, r3, #4
 80043f0:	009a      	lsls	r2, r3, #2
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a42      	ldr	r2, [pc, #264]	; (8004504 <HAL_DMA_Init+0x164>)
 80043fa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004416:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004420:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800442c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004438:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004456:	d039      	beq.n	80044cc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445c:	4a27      	ldr	r2, [pc, #156]	; (80044fc <HAL_DMA_Init+0x15c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d11a      	bne.n	8004498 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004462:	4b29      	ldr	r3, [pc, #164]	; (8004508 <HAL_DMA_Init+0x168>)
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446a:	f003 031c 	and.w	r3, r3, #28
 800446e:	210f      	movs	r1, #15
 8004470:	fa01 f303 	lsl.w	r3, r1, r3
 8004474:	43db      	mvns	r3, r3
 8004476:	4924      	ldr	r1, [pc, #144]	; (8004508 <HAL_DMA_Init+0x168>)
 8004478:	4013      	ands	r3, r2
 800447a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800447c:	4b22      	ldr	r3, [pc, #136]	; (8004508 <HAL_DMA_Init+0x168>)
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6859      	ldr	r1, [r3, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004488:	f003 031c 	and.w	r3, r3, #28
 800448c:	fa01 f303 	lsl.w	r3, r1, r3
 8004490:	491d      	ldr	r1, [pc, #116]	; (8004508 <HAL_DMA_Init+0x168>)
 8004492:	4313      	orrs	r3, r2
 8004494:	600b      	str	r3, [r1, #0]
 8004496:	e019      	b.n	80044cc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004498:	4b1c      	ldr	r3, [pc, #112]	; (800450c <HAL_DMA_Init+0x16c>)
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a0:	f003 031c 	and.w	r3, r3, #28
 80044a4:	210f      	movs	r1, #15
 80044a6:	fa01 f303 	lsl.w	r3, r1, r3
 80044aa:	43db      	mvns	r3, r3
 80044ac:	4917      	ldr	r1, [pc, #92]	; (800450c <HAL_DMA_Init+0x16c>)
 80044ae:	4013      	ands	r3, r2
 80044b0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80044b2:	4b16      	ldr	r3, [pc, #88]	; (800450c <HAL_DMA_Init+0x16c>)
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6859      	ldr	r1, [r3, #4]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044be:	f003 031c 	and.w	r3, r3, #28
 80044c2:	fa01 f303 	lsl.w	r3, r1, r3
 80044c6:	4911      	ldr	r1, [pc, #68]	; (800450c <HAL_DMA_Init+0x16c>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3714      	adds	r7, #20
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	40020407 	.word	0x40020407
 80044f4:	bffdfff8 	.word	0xbffdfff8
 80044f8:	cccccccd 	.word	0xcccccccd
 80044fc:	40020000 	.word	0x40020000
 8004500:	bffdfbf8 	.word	0xbffdfbf8
 8004504:	40020400 	.word	0x40020400
 8004508:	400200a8 	.word	0x400200a8
 800450c:	400204a8 	.word	0x400204a8

08004510 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
 800451c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004528:	2b01      	cmp	r3, #1
 800452a:	d101      	bne.n	8004530 <HAL_DMA_Start_IT+0x20>
 800452c:	2302      	movs	r3, #2
 800452e:	e04b      	b.n	80045c8 <HAL_DMA_Start_IT+0xb8>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b01      	cmp	r3, #1
 8004542:	d13a      	bne.n	80045ba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0201 	bic.w	r2, r2, #1
 8004560:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	68b9      	ldr	r1, [r7, #8]
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 f8e0 	bl	800472e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004572:	2b00      	cmp	r3, #0
 8004574:	d008      	beq.n	8004588 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f042 020e 	orr.w	r2, r2, #14
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	e00f      	b.n	80045a8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 0204 	bic.w	r2, r2, #4
 8004596:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 020a 	orr.w	r2, r2, #10
 80045a6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f042 0201 	orr.w	r2, r2, #1
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	e005      	b.n	80045c6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80045c2:	2302      	movs	r3, #2
 80045c4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80045c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3718      	adds	r7, #24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ec:	f003 031c 	and.w	r3, r3, #28
 80045f0:	2204      	movs	r2, #4
 80045f2:	409a      	lsls	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4013      	ands	r3, r2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d026      	beq.n	800464a <HAL_DMA_IRQHandler+0x7a>
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f003 0304 	and.w	r3, r3, #4
 8004602:	2b00      	cmp	r3, #0
 8004604:	d021      	beq.n	800464a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0320 	and.w	r3, r3, #32
 8004610:	2b00      	cmp	r3, #0
 8004612:	d107      	bne.n	8004624 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0204 	bic.w	r2, r2, #4
 8004622:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004628:	f003 021c 	and.w	r2, r3, #28
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004630:	2104      	movs	r1, #4
 8004632:	fa01 f202 	lsl.w	r2, r1, r2
 8004636:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463c:	2b00      	cmp	r3, #0
 800463e:	d071      	beq.n	8004724 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004648:	e06c      	b.n	8004724 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464e:	f003 031c 	and.w	r3, r3, #28
 8004652:	2202      	movs	r2, #2
 8004654:	409a      	lsls	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	4013      	ands	r3, r2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d02e      	beq.n	80046bc <HAL_DMA_IRQHandler+0xec>
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d029      	beq.n	80046bc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0320 	and.w	r3, r3, #32
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10b      	bne.n	800468e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 020a 	bic.w	r2, r2, #10
 8004684:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004692:	f003 021c 	and.w	r2, r3, #28
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	2102      	movs	r1, #2
 800469c:	fa01 f202 	lsl.w	r2, r1, r2
 80046a0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d038      	beq.n	8004724 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80046ba:	e033      	b.n	8004724 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c0:	f003 031c 	and.w	r3, r3, #28
 80046c4:	2208      	movs	r2, #8
 80046c6:	409a      	lsls	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4013      	ands	r3, r2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d02a      	beq.n	8004726 <HAL_DMA_IRQHandler+0x156>
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d025      	beq.n	8004726 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 020e 	bic.w	r2, r2, #14
 80046e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ee:	f003 021c 	and.w	r2, r3, #28
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	2101      	movs	r1, #1
 80046f8:	fa01 f202 	lsl.w	r2, r1, r2
 80046fc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004718:	2b00      	cmp	r3, #0
 800471a:	d004      	beq.n	8004726 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004724:	bf00      	nop
 8004726:	bf00      	nop
}
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800472e:	b480      	push	{r7}
 8004730:	b085      	sub	sp, #20
 8004732:	af00      	add	r7, sp, #0
 8004734:	60f8      	str	r0, [r7, #12]
 8004736:	60b9      	str	r1, [r7, #8]
 8004738:	607a      	str	r2, [r7, #4]
 800473a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004740:	f003 021c 	and.w	r2, r3, #28
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004748:	2101      	movs	r1, #1
 800474a:	fa01 f202 	lsl.w	r2, r1, r2
 800474e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	2b10      	cmp	r3, #16
 800475e:	d108      	bne.n	8004772 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004770:	e007      	b.n	8004782 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	60da      	str	r2, [r3, #12]
}
 8004782:	bf00      	nop
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
	...

08004790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004790:	b480      	push	{r7}
 8004792:	b087      	sub	sp, #28
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800479a:	2300      	movs	r3, #0
 800479c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800479e:	e148      	b.n	8004a32 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	2101      	movs	r1, #1
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	fa01 f303 	lsl.w	r3, r1, r3
 80047ac:	4013      	ands	r3, r2
 80047ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f000 813a 	beq.w	8004a2c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d00b      	beq.n	80047d8 <HAL_GPIO_Init+0x48>
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d007      	beq.n	80047d8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047cc:	2b11      	cmp	r3, #17
 80047ce:	d003      	beq.n	80047d8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2b12      	cmp	r3, #18
 80047d6:	d130      	bne.n	800483a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	2203      	movs	r2, #3
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	43db      	mvns	r3, r3
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	4013      	ands	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	4313      	orrs	r3, r2
 8004800:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800480e:	2201      	movs	r2, #1
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	fa02 f303 	lsl.w	r3, r2, r3
 8004816:	43db      	mvns	r3, r3
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4013      	ands	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	091b      	lsrs	r3, r3, #4
 8004824:	f003 0201 	and.w	r2, r3, #1
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	fa02 f303 	lsl.w	r3, r2, r3
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	4313      	orrs	r3, r2
 8004832:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	2203      	movs	r2, #3
 8004846:	fa02 f303 	lsl.w	r3, r2, r3
 800484a:	43db      	mvns	r3, r3
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4013      	ands	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	689a      	ldr	r2, [r3, #8]
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	fa02 f303 	lsl.w	r3, r2, r3
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	4313      	orrs	r3, r2
 8004862:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	2b02      	cmp	r3, #2
 8004870:	d003      	beq.n	800487a <HAL_GPIO_Init+0xea>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	2b12      	cmp	r3, #18
 8004878:	d123      	bne.n	80048c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	08da      	lsrs	r2, r3, #3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	3208      	adds	r2, #8
 8004882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004886:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f003 0307 	and.w	r3, r3, #7
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	220f      	movs	r2, #15
 8004892:	fa02 f303 	lsl.w	r3, r2, r3
 8004896:	43db      	mvns	r3, r3
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	4013      	ands	r3, r2
 800489c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	691a      	ldr	r2, [r3, #16]
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	fa02 f303 	lsl.w	r3, r2, r3
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	08da      	lsrs	r2, r3, #3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	3208      	adds	r2, #8
 80048bc:	6939      	ldr	r1, [r7, #16]
 80048be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	2203      	movs	r2, #3
 80048ce:	fa02 f303 	lsl.w	r3, r2, r3
 80048d2:	43db      	mvns	r3, r3
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	4013      	ands	r3, r2
 80048d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f003 0203 	and.w	r2, r3, #3
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 8094 	beq.w	8004a2c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004904:	4b52      	ldr	r3, [pc, #328]	; (8004a50 <HAL_GPIO_Init+0x2c0>)
 8004906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004908:	4a51      	ldr	r2, [pc, #324]	; (8004a50 <HAL_GPIO_Init+0x2c0>)
 800490a:	f043 0301 	orr.w	r3, r3, #1
 800490e:	6613      	str	r3, [r2, #96]	; 0x60
 8004910:	4b4f      	ldr	r3, [pc, #316]	; (8004a50 <HAL_GPIO_Init+0x2c0>)
 8004912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	60bb      	str	r3, [r7, #8]
 800491a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800491c:	4a4d      	ldr	r2, [pc, #308]	; (8004a54 <HAL_GPIO_Init+0x2c4>)
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	089b      	lsrs	r3, r3, #2
 8004922:	3302      	adds	r3, #2
 8004924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004928:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f003 0303 	and.w	r3, r3, #3
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	220f      	movs	r2, #15
 8004934:	fa02 f303 	lsl.w	r3, r2, r3
 8004938:	43db      	mvns	r3, r3
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	4013      	ands	r3, r2
 800493e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004946:	d00d      	beq.n	8004964 <HAL_GPIO_Init+0x1d4>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a43      	ldr	r2, [pc, #268]	; (8004a58 <HAL_GPIO_Init+0x2c8>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d007      	beq.n	8004960 <HAL_GPIO_Init+0x1d0>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a42      	ldr	r2, [pc, #264]	; (8004a5c <HAL_GPIO_Init+0x2cc>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d101      	bne.n	800495c <HAL_GPIO_Init+0x1cc>
 8004958:	2302      	movs	r3, #2
 800495a:	e004      	b.n	8004966 <HAL_GPIO_Init+0x1d6>
 800495c:	2307      	movs	r3, #7
 800495e:	e002      	b.n	8004966 <HAL_GPIO_Init+0x1d6>
 8004960:	2301      	movs	r3, #1
 8004962:	e000      	b.n	8004966 <HAL_GPIO_Init+0x1d6>
 8004964:	2300      	movs	r3, #0
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	f002 0203 	and.w	r2, r2, #3
 800496c:	0092      	lsls	r2, r2, #2
 800496e:	4093      	lsls	r3, r2
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	4313      	orrs	r3, r2
 8004974:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004976:	4937      	ldr	r1, [pc, #220]	; (8004a54 <HAL_GPIO_Init+0x2c4>)
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	089b      	lsrs	r3, r3, #2
 800497c:	3302      	adds	r3, #2
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004984:	4b36      	ldr	r3, [pc, #216]	; (8004a60 <HAL_GPIO_Init+0x2d0>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	43db      	mvns	r3, r3
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	4013      	ands	r3, r2
 8004992:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d003      	beq.n	80049a8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80049a8:	4a2d      	ldr	r2, [pc, #180]	; (8004a60 <HAL_GPIO_Init+0x2d0>)
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80049ae:	4b2c      	ldr	r3, [pc, #176]	; (8004a60 <HAL_GPIO_Init+0x2d0>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	43db      	mvns	r3, r3
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	4013      	ands	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80049d2:	4a23      	ldr	r2, [pc, #140]	; (8004a60 <HAL_GPIO_Init+0x2d0>)
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049d8:	4b21      	ldr	r3, [pc, #132]	; (8004a60 <HAL_GPIO_Init+0x2d0>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	43db      	mvns	r3, r3
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	4013      	ands	r3, r2
 80049e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d003      	beq.n	80049fc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80049fc:	4a18      	ldr	r2, [pc, #96]	; (8004a60 <HAL_GPIO_Init+0x2d0>)
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a02:	4b17      	ldr	r3, [pc, #92]	; (8004a60 <HAL_GPIO_Init+0x2d0>)
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	43db      	mvns	r3, r3
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a26:	4a0e      	ldr	r2, [pc, #56]	; (8004a60 <HAL_GPIO_Init+0x2d0>)
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	fa22 f303 	lsr.w	r3, r2, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f47f aeaf 	bne.w	80047a0 <HAL_GPIO_Init+0x10>
  }
}
 8004a42:	bf00      	nop
 8004a44:	bf00      	nop
 8004a46:	371c      	adds	r7, #28
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	40021000 	.word	0x40021000
 8004a54:	40010000 	.word	0x40010000
 8004a58:	48000400 	.word	0x48000400
 8004a5c:	48000800 	.word	0x48000800
 8004a60:	40010400 	.word	0x40010400

08004a64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691a      	ldr	r2, [r3, #16]
 8004a74:	887b      	ldrh	r3, [r7, #2]
 8004a76:	4013      	ands	r3, r2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d002      	beq.n	8004a82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	73fb      	strb	r3, [r7, #15]
 8004a80:	e001      	b.n	8004a86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a82:	2300      	movs	r3, #0
 8004a84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3714      	adds	r7, #20
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	807b      	strh	r3, [r7, #2]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004aa4:	787b      	ldrb	r3, [r7, #1]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004aaa:	887a      	ldrh	r2, [r7, #2]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ab0:	e002      	b.n	8004ab8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ab2:	887a      	ldrh	r2, [r7, #2]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	4603      	mov	r3, r0
 8004acc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004ace:	4b08      	ldr	r3, [pc, #32]	; (8004af0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ad0:	695a      	ldr	r2, [r3, #20]
 8004ad2:	88fb      	ldrh	r3, [r7, #6]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d006      	beq.n	8004ae8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ada:	4a05      	ldr	r2, [pc, #20]	; (8004af0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004adc:	88fb      	ldrh	r3, [r7, #6]
 8004ade:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ae0:	88fb      	ldrh	r3, [r7, #6]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 f806 	bl	8004af4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004ae8:	bf00      	nop
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40010400 	.word	0x40010400

08004af4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	4603      	mov	r3, r0
 8004afc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004afe:	bf00      	nop
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
	...

08004b0c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004b10:	4b04      	ldr	r3, [pc, #16]	; (8004b24 <HAL_PWREx_GetVoltageRange+0x18>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	40007000 	.word	0x40007000

08004b28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b36:	d130      	bne.n	8004b9a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b38:	4b23      	ldr	r3, [pc, #140]	; (8004bc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b44:	d038      	beq.n	8004bb8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b46:	4b20      	ldr	r3, [pc, #128]	; (8004bc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b4e:	4a1e      	ldr	r2, [pc, #120]	; (8004bc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b54:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b56:	4b1d      	ldr	r3, [pc, #116]	; (8004bcc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2232      	movs	r2, #50	; 0x32
 8004b5c:	fb02 f303 	mul.w	r3, r2, r3
 8004b60:	4a1b      	ldr	r2, [pc, #108]	; (8004bd0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004b62:	fba2 2303 	umull	r2, r3, r2, r3
 8004b66:	0c9b      	lsrs	r3, r3, #18
 8004b68:	3301      	adds	r3, #1
 8004b6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b6c:	e002      	b.n	8004b74 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	3b01      	subs	r3, #1
 8004b72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b74:	4b14      	ldr	r3, [pc, #80]	; (8004bc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b80:	d102      	bne.n	8004b88 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1f2      	bne.n	8004b6e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b88:	4b0f      	ldr	r3, [pc, #60]	; (8004bc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b94:	d110      	bne.n	8004bb8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e00f      	b.n	8004bba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b9a:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ba6:	d007      	beq.n	8004bb8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ba8:	4b07      	ldr	r3, [pc, #28]	; (8004bc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004bb0:	4a05      	ldr	r2, [pc, #20]	; (8004bc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004bb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bb6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	40007000 	.word	0x40007000
 8004bcc:	2000000c 	.word	0x2000000c
 8004bd0:	431bde83 	.word	0x431bde83

08004bd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b088      	sub	sp, #32
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d102      	bne.n	8004be8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	f000 bc11 	b.w	800540a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004be8:	4ba0      	ldr	r3, [pc, #640]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 030c 	and.w	r3, r3, #12
 8004bf0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bf2:	4b9e      	ldr	r3, [pc, #632]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0310 	and.w	r3, r3, #16
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 80e4 	beq.w	8004dd2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d007      	beq.n	8004c20 <HAL_RCC_OscConfig+0x4c>
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	2b0c      	cmp	r3, #12
 8004c14:	f040 808b 	bne.w	8004d2e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	f040 8087 	bne.w	8004d2e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c20:	4b92      	ldr	r3, [pc, #584]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d005      	beq.n	8004c38 <HAL_RCC_OscConfig+0x64>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e3e8      	b.n	800540a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a1a      	ldr	r2, [r3, #32]
 8004c3c:	4b8b      	ldr	r3, [pc, #556]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0308 	and.w	r3, r3, #8
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d004      	beq.n	8004c52 <HAL_RCC_OscConfig+0x7e>
 8004c48:	4b88      	ldr	r3, [pc, #544]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c50:	e005      	b.n	8004c5e <HAL_RCC_OscConfig+0x8a>
 8004c52:	4b86      	ldr	r3, [pc, #536]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004c54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c58:	091b      	lsrs	r3, r3, #4
 8004c5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d223      	bcs.n	8004caa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 fd7a 	bl	8005760 <RCC_SetFlashLatencyFromMSIRange>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e3c9      	b.n	800540a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c76:	4b7d      	ldr	r3, [pc, #500]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a7c      	ldr	r2, [pc, #496]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004c7c:	f043 0308 	orr.w	r3, r3, #8
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	4b7a      	ldr	r3, [pc, #488]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	4977      	ldr	r1, [pc, #476]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c94:	4b75      	ldr	r3, [pc, #468]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	69db      	ldr	r3, [r3, #28]
 8004ca0:	021b      	lsls	r3, r3, #8
 8004ca2:	4972      	ldr	r1, [pc, #456]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	604b      	str	r3, [r1, #4]
 8004ca8:	e025      	b.n	8004cf6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004caa:	4b70      	ldr	r3, [pc, #448]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a6f      	ldr	r2, [pc, #444]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004cb0:	f043 0308 	orr.w	r3, r3, #8
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	4b6d      	ldr	r3, [pc, #436]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	496a      	ldr	r1, [pc, #424]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cc8:	4b68      	ldr	r3, [pc, #416]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	69db      	ldr	r3, [r3, #28]
 8004cd4:	021b      	lsls	r3, r3, #8
 8004cd6:	4965      	ldr	r1, [pc, #404]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d109      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 fd3a 	bl	8005760 <RCC_SetFlashLatencyFromMSIRange>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e389      	b.n	800540a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cf6:	f000 fc6f 	bl	80055d8 <HAL_RCC_GetSysClockFreq>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	4b5b      	ldr	r3, [pc, #364]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	091b      	lsrs	r3, r3, #4
 8004d02:	f003 030f 	and.w	r3, r3, #15
 8004d06:	495a      	ldr	r1, [pc, #360]	; (8004e70 <HAL_RCC_OscConfig+0x29c>)
 8004d08:	5ccb      	ldrb	r3, [r1, r3]
 8004d0a:	f003 031f 	and.w	r3, r3, #31
 8004d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d12:	4a58      	ldr	r2, [pc, #352]	; (8004e74 <HAL_RCC_OscConfig+0x2a0>)
 8004d14:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004d16:	4b58      	ldr	r3, [pc, #352]	; (8004e78 <HAL_RCC_OscConfig+0x2a4>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7fe f86e 	bl	8002dfc <HAL_InitTick>
 8004d20:	4603      	mov	r3, r0
 8004d22:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004d24:	7bfb      	ldrb	r3, [r7, #15]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d052      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004d2a:	7bfb      	ldrb	r3, [r7, #15]
 8004d2c:	e36d      	b.n	800540a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d032      	beq.n	8004d9c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004d36:	4b4d      	ldr	r3, [pc, #308]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a4c      	ldr	r2, [pc, #304]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004d3c:	f043 0301 	orr.w	r3, r3, #1
 8004d40:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d42:	f7fe f8ab 	bl	8002e9c <HAL_GetTick>
 8004d46:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d48:	e008      	b.n	8004d5c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d4a:	f7fe f8a7 	bl	8002e9c <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d901      	bls.n	8004d5c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e356      	b.n	800540a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d5c:	4b43      	ldr	r3, [pc, #268]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d0f0      	beq.n	8004d4a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d68:	4b40      	ldr	r3, [pc, #256]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a3f      	ldr	r2, [pc, #252]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004d6e:	f043 0308 	orr.w	r3, r3, #8
 8004d72:	6013      	str	r3, [r2, #0]
 8004d74:	4b3d      	ldr	r3, [pc, #244]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	493a      	ldr	r1, [pc, #232]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d86:	4b39      	ldr	r3, [pc, #228]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	021b      	lsls	r3, r3, #8
 8004d94:	4935      	ldr	r1, [pc, #212]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	604b      	str	r3, [r1, #4]
 8004d9a:	e01a      	b.n	8004dd2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d9c:	4b33      	ldr	r3, [pc, #204]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a32      	ldr	r2, [pc, #200]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004da2:	f023 0301 	bic.w	r3, r3, #1
 8004da6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004da8:	f7fe f878 	bl	8002e9c <HAL_GetTick>
 8004dac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004dae:	e008      	b.n	8004dc2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004db0:	f7fe f874 	bl	8002e9c <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e323      	b.n	800540a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004dc2:	4b2a      	ldr	r3, [pc, #168]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1f0      	bne.n	8004db0 <HAL_RCC_OscConfig+0x1dc>
 8004dce:	e000      	b.n	8004dd2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004dd0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d073      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d005      	beq.n	8004df0 <HAL_RCC_OscConfig+0x21c>
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	2b0c      	cmp	r3, #12
 8004de8:	d10e      	bne.n	8004e08 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	2b03      	cmp	r3, #3
 8004dee:	d10b      	bne.n	8004e08 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004df0:	4b1e      	ldr	r3, [pc, #120]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d063      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x2f0>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d15f      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e300      	b.n	800540a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e10:	d106      	bne.n	8004e20 <HAL_RCC_OscConfig+0x24c>
 8004e12:	4b16      	ldr	r3, [pc, #88]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a15      	ldr	r2, [pc, #84]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e1c:	6013      	str	r3, [r2, #0]
 8004e1e:	e01d      	b.n	8004e5c <HAL_RCC_OscConfig+0x288>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e28:	d10c      	bne.n	8004e44 <HAL_RCC_OscConfig+0x270>
 8004e2a:	4b10      	ldr	r3, [pc, #64]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a0f      	ldr	r2, [pc, #60]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	4b0d      	ldr	r3, [pc, #52]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a0c      	ldr	r2, [pc, #48]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e40:	6013      	str	r3, [r2, #0]
 8004e42:	e00b      	b.n	8004e5c <HAL_RCC_OscConfig+0x288>
 8004e44:	4b09      	ldr	r3, [pc, #36]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a08      	ldr	r2, [pc, #32]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e4e:	6013      	str	r3, [r2, #0]
 8004e50:	4b06      	ldr	r3, [pc, #24]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a05      	ldr	r2, [pc, #20]	; (8004e6c <HAL_RCC_OscConfig+0x298>)
 8004e56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d01b      	beq.n	8004e9c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e64:	f7fe f81a 	bl	8002e9c <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e6a:	e010      	b.n	8004e8e <HAL_RCC_OscConfig+0x2ba>
 8004e6c:	40021000 	.word	0x40021000
 8004e70:	08008be0 	.word	0x08008be0
 8004e74:	2000000c 	.word	0x2000000c
 8004e78:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e7c:	f7fe f80e 	bl	8002e9c <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b64      	cmp	r3, #100	; 0x64
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e2bd      	b.n	800540a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e8e:	4baf      	ldr	r3, [pc, #700]	; (800514c <HAL_RCC_OscConfig+0x578>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d0f0      	beq.n	8004e7c <HAL_RCC_OscConfig+0x2a8>
 8004e9a:	e014      	b.n	8004ec6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e9c:	f7fd fffe 	bl	8002e9c <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ea4:	f7fd fffa 	bl	8002e9c <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b64      	cmp	r3, #100	; 0x64
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e2a9      	b.n	800540a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004eb6:	4ba5      	ldr	r3, [pc, #660]	; (800514c <HAL_RCC_OscConfig+0x578>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1f0      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x2d0>
 8004ec2:	e000      	b.n	8004ec6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ec4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d060      	beq.n	8004f94 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	d005      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x310>
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	2b0c      	cmp	r3, #12
 8004edc:	d119      	bne.n	8004f12 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d116      	bne.n	8004f12 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ee4:	4b99      	ldr	r3, [pc, #612]	; (800514c <HAL_RCC_OscConfig+0x578>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d005      	beq.n	8004efc <HAL_RCC_OscConfig+0x328>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e286      	b.n	800540a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004efc:	4b93      	ldr	r3, [pc, #588]	; (800514c <HAL_RCC_OscConfig+0x578>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	061b      	lsls	r3, r3, #24
 8004f0a:	4990      	ldr	r1, [pc, #576]	; (800514c <HAL_RCC_OscConfig+0x578>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f10:	e040      	b.n	8004f94 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d023      	beq.n	8004f62 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f1a:	4b8c      	ldr	r3, [pc, #560]	; (800514c <HAL_RCC_OscConfig+0x578>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a8b      	ldr	r2, [pc, #556]	; (800514c <HAL_RCC_OscConfig+0x578>)
 8004f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f26:	f7fd ffb9 	bl	8002e9c <HAL_GetTick>
 8004f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f2c:	e008      	b.n	8004f40 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f2e:	f7fd ffb5 	bl	8002e9c <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e264      	b.n	800540a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f40:	4b82      	ldr	r3, [pc, #520]	; (800514c <HAL_RCC_OscConfig+0x578>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d0f0      	beq.n	8004f2e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f4c:	4b7f      	ldr	r3, [pc, #508]	; (800514c <HAL_RCC_OscConfig+0x578>)
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	061b      	lsls	r3, r3, #24
 8004f5a:	497c      	ldr	r1, [pc, #496]	; (800514c <HAL_RCC_OscConfig+0x578>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	604b      	str	r3, [r1, #4]
 8004f60:	e018      	b.n	8004f94 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f62:	4b7a      	ldr	r3, [pc, #488]	; (800514c <HAL_RCC_OscConfig+0x578>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a79      	ldr	r2, [pc, #484]	; (800514c <HAL_RCC_OscConfig+0x578>)
 8004f68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f6e:	f7fd ff95 	bl	8002e9c <HAL_GetTick>
 8004f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f74:	e008      	b.n	8004f88 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f76:	f7fd ff91 	bl	8002e9c <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e240      	b.n	800540a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f88:	4b70      	ldr	r3, [pc, #448]	; (800514c <HAL_RCC_OscConfig+0x578>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1f0      	bne.n	8004f76 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0308 	and.w	r3, r3, #8
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d03c      	beq.n	800501a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d01c      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fa8:	4b68      	ldr	r3, [pc, #416]	; (800514c <HAL_RCC_OscConfig+0x578>)
 8004faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fae:	4a67      	ldr	r2, [pc, #412]	; (800514c <HAL_RCC_OscConfig+0x578>)
 8004fb0:	f043 0301 	orr.w	r3, r3, #1
 8004fb4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb8:	f7fd ff70 	bl	8002e9c <HAL_GetTick>
 8004fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fbe:	e008      	b.n	8004fd2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fc0:	f7fd ff6c 	bl	8002e9c <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e21b      	b.n	800540a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fd2:	4b5e      	ldr	r3, [pc, #376]	; (800514c <HAL_RCC_OscConfig+0x578>)
 8004fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d0ef      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x3ec>
 8004fe0:	e01b      	b.n	800501a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fe2:	4b5a      	ldr	r3, [pc, #360]	; (800514c <HAL_RCC_OscConfig+0x578>)
 8004fe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fe8:	4a58      	ldr	r2, [pc, #352]	; (800514c <HAL_RCC_OscConfig+0x578>)
 8004fea:	f023 0301 	bic.w	r3, r3, #1
 8004fee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff2:	f7fd ff53 	bl	8002e9c <HAL_GetTick>
 8004ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ff8:	e008      	b.n	800500c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ffa:	f7fd ff4f 	bl	8002e9c <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d901      	bls.n	800500c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e1fe      	b.n	800540a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800500c:	4b4f      	ldr	r3, [pc, #316]	; (800514c <HAL_RCC_OscConfig+0x578>)
 800500e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1ef      	bne.n	8004ffa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0304 	and.w	r3, r3, #4
 8005022:	2b00      	cmp	r3, #0
 8005024:	f000 80a6 	beq.w	8005174 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005028:	2300      	movs	r3, #0
 800502a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800502c:	4b47      	ldr	r3, [pc, #284]	; (800514c <HAL_RCC_OscConfig+0x578>)
 800502e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10d      	bne.n	8005054 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005038:	4b44      	ldr	r3, [pc, #272]	; (800514c <HAL_RCC_OscConfig+0x578>)
 800503a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800503c:	4a43      	ldr	r2, [pc, #268]	; (800514c <HAL_RCC_OscConfig+0x578>)
 800503e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005042:	6593      	str	r3, [r2, #88]	; 0x58
 8005044:	4b41      	ldr	r3, [pc, #260]	; (800514c <HAL_RCC_OscConfig+0x578>)
 8005046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800504c:	60bb      	str	r3, [r7, #8]
 800504e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005050:	2301      	movs	r3, #1
 8005052:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005054:	4b3e      	ldr	r3, [pc, #248]	; (8005150 <HAL_RCC_OscConfig+0x57c>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505c:	2b00      	cmp	r3, #0
 800505e:	d118      	bne.n	8005092 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005060:	4b3b      	ldr	r3, [pc, #236]	; (8005150 <HAL_RCC_OscConfig+0x57c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a3a      	ldr	r2, [pc, #232]	; (8005150 <HAL_RCC_OscConfig+0x57c>)
 8005066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800506a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800506c:	f7fd ff16 	bl	8002e9c <HAL_GetTick>
 8005070:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005072:	e008      	b.n	8005086 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005074:	f7fd ff12 	bl	8002e9c <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b02      	cmp	r3, #2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e1c1      	b.n	800540a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005086:	4b32      	ldr	r3, [pc, #200]	; (8005150 <HAL_RCC_OscConfig+0x57c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508e:	2b00      	cmp	r3, #0
 8005090:	d0f0      	beq.n	8005074 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d108      	bne.n	80050ac <HAL_RCC_OscConfig+0x4d8>
 800509a:	4b2c      	ldr	r3, [pc, #176]	; (800514c <HAL_RCC_OscConfig+0x578>)
 800509c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a0:	4a2a      	ldr	r2, [pc, #168]	; (800514c <HAL_RCC_OscConfig+0x578>)
 80050a2:	f043 0301 	orr.w	r3, r3, #1
 80050a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050aa:	e024      	b.n	80050f6 <HAL_RCC_OscConfig+0x522>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	2b05      	cmp	r3, #5
 80050b2:	d110      	bne.n	80050d6 <HAL_RCC_OscConfig+0x502>
 80050b4:	4b25      	ldr	r3, [pc, #148]	; (800514c <HAL_RCC_OscConfig+0x578>)
 80050b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ba:	4a24      	ldr	r2, [pc, #144]	; (800514c <HAL_RCC_OscConfig+0x578>)
 80050bc:	f043 0304 	orr.w	r3, r3, #4
 80050c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050c4:	4b21      	ldr	r3, [pc, #132]	; (800514c <HAL_RCC_OscConfig+0x578>)
 80050c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ca:	4a20      	ldr	r2, [pc, #128]	; (800514c <HAL_RCC_OscConfig+0x578>)
 80050cc:	f043 0301 	orr.w	r3, r3, #1
 80050d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050d4:	e00f      	b.n	80050f6 <HAL_RCC_OscConfig+0x522>
 80050d6:	4b1d      	ldr	r3, [pc, #116]	; (800514c <HAL_RCC_OscConfig+0x578>)
 80050d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050dc:	4a1b      	ldr	r2, [pc, #108]	; (800514c <HAL_RCC_OscConfig+0x578>)
 80050de:	f023 0301 	bic.w	r3, r3, #1
 80050e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050e6:	4b19      	ldr	r3, [pc, #100]	; (800514c <HAL_RCC_OscConfig+0x578>)
 80050e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ec:	4a17      	ldr	r2, [pc, #92]	; (800514c <HAL_RCC_OscConfig+0x578>)
 80050ee:	f023 0304 	bic.w	r3, r3, #4
 80050f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d016      	beq.n	800512c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050fe:	f7fd fecd 	bl	8002e9c <HAL_GetTick>
 8005102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005104:	e00a      	b.n	800511c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005106:	f7fd fec9 	bl	8002e9c <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	f241 3288 	movw	r2, #5000	; 0x1388
 8005114:	4293      	cmp	r3, r2
 8005116:	d901      	bls.n	800511c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e176      	b.n	800540a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800511c:	4b0b      	ldr	r3, [pc, #44]	; (800514c <HAL_RCC_OscConfig+0x578>)
 800511e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0ed      	beq.n	8005106 <HAL_RCC_OscConfig+0x532>
 800512a:	e01a      	b.n	8005162 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800512c:	f7fd feb6 	bl	8002e9c <HAL_GetTick>
 8005130:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005132:	e00f      	b.n	8005154 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005134:	f7fd feb2 	bl	8002e9c <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005142:	4293      	cmp	r3, r2
 8005144:	d906      	bls.n	8005154 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e15f      	b.n	800540a <HAL_RCC_OscConfig+0x836>
 800514a:	bf00      	nop
 800514c:	40021000 	.word	0x40021000
 8005150:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005154:	4baa      	ldr	r3, [pc, #680]	; (8005400 <HAL_RCC_OscConfig+0x82c>)
 8005156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1e8      	bne.n	8005134 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005162:	7ffb      	ldrb	r3, [r7, #31]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d105      	bne.n	8005174 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005168:	4ba5      	ldr	r3, [pc, #660]	; (8005400 <HAL_RCC_OscConfig+0x82c>)
 800516a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800516c:	4aa4      	ldr	r2, [pc, #656]	; (8005400 <HAL_RCC_OscConfig+0x82c>)
 800516e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005172:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0320 	and.w	r3, r3, #32
 800517c:	2b00      	cmp	r3, #0
 800517e:	d03c      	beq.n	80051fa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	2b00      	cmp	r3, #0
 8005186:	d01c      	beq.n	80051c2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005188:	4b9d      	ldr	r3, [pc, #628]	; (8005400 <HAL_RCC_OscConfig+0x82c>)
 800518a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800518e:	4a9c      	ldr	r2, [pc, #624]	; (8005400 <HAL_RCC_OscConfig+0x82c>)
 8005190:	f043 0301 	orr.w	r3, r3, #1
 8005194:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005198:	f7fd fe80 	bl	8002e9c <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051a0:	f7fd fe7c 	bl	8002e9c <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e12b      	b.n	800540a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051b2:	4b93      	ldr	r3, [pc, #588]	; (8005400 <HAL_RCC_OscConfig+0x82c>)
 80051b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d0ef      	beq.n	80051a0 <HAL_RCC_OscConfig+0x5cc>
 80051c0:	e01b      	b.n	80051fa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80051c2:	4b8f      	ldr	r3, [pc, #572]	; (8005400 <HAL_RCC_OscConfig+0x82c>)
 80051c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051c8:	4a8d      	ldr	r2, [pc, #564]	; (8005400 <HAL_RCC_OscConfig+0x82c>)
 80051ca:	f023 0301 	bic.w	r3, r3, #1
 80051ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d2:	f7fd fe63 	bl	8002e9c <HAL_GetTick>
 80051d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80051d8:	e008      	b.n	80051ec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051da:	f7fd fe5f 	bl	8002e9c <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d901      	bls.n	80051ec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e10e      	b.n	800540a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80051ec:	4b84      	ldr	r3, [pc, #528]	; (8005400 <HAL_RCC_OscConfig+0x82c>)
 80051ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1ef      	bne.n	80051da <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f000 8102 	beq.w	8005408 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005208:	2b02      	cmp	r3, #2
 800520a:	f040 80c5 	bne.w	8005398 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800520e:	4b7c      	ldr	r3, [pc, #496]	; (8005400 <HAL_RCC_OscConfig+0x82c>)
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f003 0203 	and.w	r2, r3, #3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521e:	429a      	cmp	r2, r3
 8005220:	d12c      	bne.n	800527c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522c:	3b01      	subs	r3, #1
 800522e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005230:	429a      	cmp	r2, r3
 8005232:	d123      	bne.n	800527c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005240:	429a      	cmp	r2, r3
 8005242:	d11b      	bne.n	800527c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005250:	429a      	cmp	r2, r3
 8005252:	d113      	bne.n	800527c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525e:	085b      	lsrs	r3, r3, #1
 8005260:	3b01      	subs	r3, #1
 8005262:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005264:	429a      	cmp	r2, r3
 8005266:	d109      	bne.n	800527c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	085b      	lsrs	r3, r3, #1
 8005274:	3b01      	subs	r3, #1
 8005276:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005278:	429a      	cmp	r2, r3
 800527a:	d067      	beq.n	800534c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	2b0c      	cmp	r3, #12
 8005280:	d062      	beq.n	8005348 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005282:	4b5f      	ldr	r3, [pc, #380]	; (8005400 <HAL_RCC_OscConfig+0x82c>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e0bb      	b.n	800540a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005292:	4b5b      	ldr	r3, [pc, #364]	; (8005400 <HAL_RCC_OscConfig+0x82c>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a5a      	ldr	r2, [pc, #360]	; (8005400 <HAL_RCC_OscConfig+0x82c>)
 8005298:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800529c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800529e:	f7fd fdfd 	bl	8002e9c <HAL_GetTick>
 80052a2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052a4:	e008      	b.n	80052b8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052a6:	f7fd fdf9 	bl	8002e9c <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d901      	bls.n	80052b8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e0a8      	b.n	800540a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052b8:	4b51      	ldr	r3, [pc, #324]	; (8005400 <HAL_RCC_OscConfig+0x82c>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1f0      	bne.n	80052a6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052c4:	4b4e      	ldr	r3, [pc, #312]	; (8005400 <HAL_RCC_OscConfig+0x82c>)
 80052c6:	68da      	ldr	r2, [r3, #12]
 80052c8:	4b4e      	ldr	r3, [pc, #312]	; (8005404 <HAL_RCC_OscConfig+0x830>)
 80052ca:	4013      	ands	r3, r2
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80052d4:	3a01      	subs	r2, #1
 80052d6:	0112      	lsls	r2, r2, #4
 80052d8:	4311      	orrs	r1, r2
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80052de:	0212      	lsls	r2, r2, #8
 80052e0:	4311      	orrs	r1, r2
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80052e6:	0852      	lsrs	r2, r2, #1
 80052e8:	3a01      	subs	r2, #1
 80052ea:	0552      	lsls	r2, r2, #21
 80052ec:	4311      	orrs	r1, r2
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80052f2:	0852      	lsrs	r2, r2, #1
 80052f4:	3a01      	subs	r2, #1
 80052f6:	0652      	lsls	r2, r2, #25
 80052f8:	4311      	orrs	r1, r2
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052fe:	06d2      	lsls	r2, r2, #27
 8005300:	430a      	orrs	r2, r1
 8005302:	493f      	ldr	r1, [pc, #252]	; (8005400 <HAL_RCC_OscConfig+0x82c>)
 8005304:	4313      	orrs	r3, r2
 8005306:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005308:	4b3d      	ldr	r3, [pc, #244]	; (8005400 <HAL_RCC_OscConfig+0x82c>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a3c      	ldr	r2, [pc, #240]	; (8005400 <HAL_RCC_OscConfig+0x82c>)
 800530e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005312:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005314:	4b3a      	ldr	r3, [pc, #232]	; (8005400 <HAL_RCC_OscConfig+0x82c>)
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	4a39      	ldr	r2, [pc, #228]	; (8005400 <HAL_RCC_OscConfig+0x82c>)
 800531a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800531e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005320:	f7fd fdbc 	bl	8002e9c <HAL_GetTick>
 8005324:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005326:	e008      	b.n	800533a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005328:	f7fd fdb8 	bl	8002e9c <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b02      	cmp	r3, #2
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e067      	b.n	800540a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800533a:	4b31      	ldr	r3, [pc, #196]	; (8005400 <HAL_RCC_OscConfig+0x82c>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d0f0      	beq.n	8005328 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005346:	e05f      	b.n	8005408 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e05e      	b.n	800540a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800534c:	4b2c      	ldr	r3, [pc, #176]	; (8005400 <HAL_RCC_OscConfig+0x82c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d157      	bne.n	8005408 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005358:	4b29      	ldr	r3, [pc, #164]	; (8005400 <HAL_RCC_OscConfig+0x82c>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a28      	ldr	r2, [pc, #160]	; (8005400 <HAL_RCC_OscConfig+0x82c>)
 800535e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005362:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005364:	4b26      	ldr	r3, [pc, #152]	; (8005400 <HAL_RCC_OscConfig+0x82c>)
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	4a25      	ldr	r2, [pc, #148]	; (8005400 <HAL_RCC_OscConfig+0x82c>)
 800536a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800536e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005370:	f7fd fd94 	bl	8002e9c <HAL_GetTick>
 8005374:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005376:	e008      	b.n	800538a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005378:	f7fd fd90 	bl	8002e9c <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	2b02      	cmp	r3, #2
 8005384:	d901      	bls.n	800538a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e03f      	b.n	800540a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800538a:	4b1d      	ldr	r3, [pc, #116]	; (8005400 <HAL_RCC_OscConfig+0x82c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d0f0      	beq.n	8005378 <HAL_RCC_OscConfig+0x7a4>
 8005396:	e037      	b.n	8005408 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	2b0c      	cmp	r3, #12
 800539c:	d02d      	beq.n	80053fa <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800539e:	4b18      	ldr	r3, [pc, #96]	; (8005400 <HAL_RCC_OscConfig+0x82c>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a17      	ldr	r2, [pc, #92]	; (8005400 <HAL_RCC_OscConfig+0x82c>)
 80053a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053a8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053aa:	4b15      	ldr	r3, [pc, #84]	; (8005400 <HAL_RCC_OscConfig+0x82c>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d105      	bne.n	80053c2 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80053b6:	4b12      	ldr	r3, [pc, #72]	; (8005400 <HAL_RCC_OscConfig+0x82c>)
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	4a11      	ldr	r2, [pc, #68]	; (8005400 <HAL_RCC_OscConfig+0x82c>)
 80053bc:	f023 0303 	bic.w	r3, r3, #3
 80053c0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80053c2:	4b0f      	ldr	r3, [pc, #60]	; (8005400 <HAL_RCC_OscConfig+0x82c>)
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	4a0e      	ldr	r2, [pc, #56]	; (8005400 <HAL_RCC_OscConfig+0x82c>)
 80053c8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80053cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053d0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d2:	f7fd fd63 	bl	8002e9c <HAL_GetTick>
 80053d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053d8:	e008      	b.n	80053ec <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053da:	f7fd fd5f 	bl	8002e9c <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d901      	bls.n	80053ec <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e00e      	b.n	800540a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053ec:	4b04      	ldr	r3, [pc, #16]	; (8005400 <HAL_RCC_OscConfig+0x82c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1f0      	bne.n	80053da <HAL_RCC_OscConfig+0x806>
 80053f8:	e006      	b.n	8005408 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e005      	b.n	800540a <HAL_RCC_OscConfig+0x836>
 80053fe:	bf00      	nop
 8005400:	40021000 	.word	0x40021000
 8005404:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3720      	adds	r7, #32
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop

08005414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d101      	bne.n	8005428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e0c8      	b.n	80055ba <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005428:	4b66      	ldr	r3, [pc, #408]	; (80055c4 <HAL_RCC_ClockConfig+0x1b0>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0307 	and.w	r3, r3, #7
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	429a      	cmp	r2, r3
 8005434:	d910      	bls.n	8005458 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005436:	4b63      	ldr	r3, [pc, #396]	; (80055c4 <HAL_RCC_ClockConfig+0x1b0>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f023 0207 	bic.w	r2, r3, #7
 800543e:	4961      	ldr	r1, [pc, #388]	; (80055c4 <HAL_RCC_ClockConfig+0x1b0>)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	4313      	orrs	r3, r2
 8005444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005446:	4b5f      	ldr	r3, [pc, #380]	; (80055c4 <HAL_RCC_ClockConfig+0x1b0>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0307 	and.w	r3, r3, #7
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	429a      	cmp	r2, r3
 8005452:	d001      	beq.n	8005458 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e0b0      	b.n	80055ba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	2b00      	cmp	r3, #0
 8005462:	d04c      	beq.n	80054fe <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	2b03      	cmp	r3, #3
 800546a:	d107      	bne.n	800547c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800546c:	4b56      	ldr	r3, [pc, #344]	; (80055c8 <HAL_RCC_ClockConfig+0x1b4>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d121      	bne.n	80054bc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e09e      	b.n	80055ba <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	2b02      	cmp	r3, #2
 8005482:	d107      	bne.n	8005494 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005484:	4b50      	ldr	r3, [pc, #320]	; (80055c8 <HAL_RCC_ClockConfig+0x1b4>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d115      	bne.n	80054bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e092      	b.n	80055ba <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d107      	bne.n	80054ac <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800549c:	4b4a      	ldr	r3, [pc, #296]	; (80055c8 <HAL_RCC_ClockConfig+0x1b4>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0302 	and.w	r3, r3, #2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d109      	bne.n	80054bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e086      	b.n	80055ba <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054ac:	4b46      	ldr	r3, [pc, #280]	; (80055c8 <HAL_RCC_ClockConfig+0x1b4>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d101      	bne.n	80054bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e07e      	b.n	80055ba <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054bc:	4b42      	ldr	r3, [pc, #264]	; (80055c8 <HAL_RCC_ClockConfig+0x1b4>)
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f023 0203 	bic.w	r2, r3, #3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	493f      	ldr	r1, [pc, #252]	; (80055c8 <HAL_RCC_ClockConfig+0x1b4>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054ce:	f7fd fce5 	bl	8002e9c <HAL_GetTick>
 80054d2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054d4:	e00a      	b.n	80054ec <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054d6:	f7fd fce1 	bl	8002e9c <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d901      	bls.n	80054ec <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e066      	b.n	80055ba <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054ec:	4b36      	ldr	r3, [pc, #216]	; (80055c8 <HAL_RCC_ClockConfig+0x1b4>)
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f003 020c 	and.w	r2, r3, #12
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d1eb      	bne.n	80054d6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d008      	beq.n	800551c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800550a:	4b2f      	ldr	r3, [pc, #188]	; (80055c8 <HAL_RCC_ClockConfig+0x1b4>)
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	492c      	ldr	r1, [pc, #176]	; (80055c8 <HAL_RCC_ClockConfig+0x1b4>)
 8005518:	4313      	orrs	r3, r2
 800551a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800551c:	4b29      	ldr	r3, [pc, #164]	; (80055c4 <HAL_RCC_ClockConfig+0x1b0>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	429a      	cmp	r2, r3
 8005528:	d210      	bcs.n	800554c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800552a:	4b26      	ldr	r3, [pc, #152]	; (80055c4 <HAL_RCC_ClockConfig+0x1b0>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f023 0207 	bic.w	r2, r3, #7
 8005532:	4924      	ldr	r1, [pc, #144]	; (80055c4 <HAL_RCC_ClockConfig+0x1b0>)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	4313      	orrs	r3, r2
 8005538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800553a:	4b22      	ldr	r3, [pc, #136]	; (80055c4 <HAL_RCC_ClockConfig+0x1b0>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0307 	and.w	r3, r3, #7
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	429a      	cmp	r2, r3
 8005546:	d001      	beq.n	800554c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e036      	b.n	80055ba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0304 	and.w	r3, r3, #4
 8005554:	2b00      	cmp	r3, #0
 8005556:	d008      	beq.n	800556a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005558:	4b1b      	ldr	r3, [pc, #108]	; (80055c8 <HAL_RCC_ClockConfig+0x1b4>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	4918      	ldr	r1, [pc, #96]	; (80055c8 <HAL_RCC_ClockConfig+0x1b4>)
 8005566:	4313      	orrs	r3, r2
 8005568:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0308 	and.w	r3, r3, #8
 8005572:	2b00      	cmp	r3, #0
 8005574:	d009      	beq.n	800558a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005576:	4b14      	ldr	r3, [pc, #80]	; (80055c8 <HAL_RCC_ClockConfig+0x1b4>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	4910      	ldr	r1, [pc, #64]	; (80055c8 <HAL_RCC_ClockConfig+0x1b4>)
 8005586:	4313      	orrs	r3, r2
 8005588:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800558a:	f000 f825 	bl	80055d8 <HAL_RCC_GetSysClockFreq>
 800558e:	4602      	mov	r2, r0
 8005590:	4b0d      	ldr	r3, [pc, #52]	; (80055c8 <HAL_RCC_ClockConfig+0x1b4>)
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	091b      	lsrs	r3, r3, #4
 8005596:	f003 030f 	and.w	r3, r3, #15
 800559a:	490c      	ldr	r1, [pc, #48]	; (80055cc <HAL_RCC_ClockConfig+0x1b8>)
 800559c:	5ccb      	ldrb	r3, [r1, r3]
 800559e:	f003 031f 	and.w	r3, r3, #31
 80055a2:	fa22 f303 	lsr.w	r3, r2, r3
 80055a6:	4a0a      	ldr	r2, [pc, #40]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 80055a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80055aa:	4b0a      	ldr	r3, [pc, #40]	; (80055d4 <HAL_RCC_ClockConfig+0x1c0>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7fd fc24 	bl	8002dfc <HAL_InitTick>
 80055b4:	4603      	mov	r3, r0
 80055b6:	72fb      	strb	r3, [r7, #11]

  return status;
 80055b8:	7afb      	ldrb	r3, [r7, #11]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	40022000 	.word	0x40022000
 80055c8:	40021000 	.word	0x40021000
 80055cc:	08008be0 	.word	0x08008be0
 80055d0:	2000000c 	.word	0x2000000c
 80055d4:	20000010 	.word	0x20000010

080055d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055d8:	b480      	push	{r7}
 80055da:	b089      	sub	sp, #36	; 0x24
 80055dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80055de:	2300      	movs	r3, #0
 80055e0:	61fb      	str	r3, [r7, #28]
 80055e2:	2300      	movs	r3, #0
 80055e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055e6:	4b3e      	ldr	r3, [pc, #248]	; (80056e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f003 030c 	and.w	r3, r3, #12
 80055ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055f0:	4b3b      	ldr	r3, [pc, #236]	; (80056e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	f003 0303 	and.w	r3, r3, #3
 80055f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d005      	beq.n	800560c <HAL_RCC_GetSysClockFreq+0x34>
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	2b0c      	cmp	r3, #12
 8005604:	d121      	bne.n	800564a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d11e      	bne.n	800564a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800560c:	4b34      	ldr	r3, [pc, #208]	; (80056e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0308 	and.w	r3, r3, #8
 8005614:	2b00      	cmp	r3, #0
 8005616:	d107      	bne.n	8005628 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005618:	4b31      	ldr	r3, [pc, #196]	; (80056e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800561a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800561e:	0a1b      	lsrs	r3, r3, #8
 8005620:	f003 030f 	and.w	r3, r3, #15
 8005624:	61fb      	str	r3, [r7, #28]
 8005626:	e005      	b.n	8005634 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005628:	4b2d      	ldr	r3, [pc, #180]	; (80056e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	091b      	lsrs	r3, r3, #4
 800562e:	f003 030f 	and.w	r3, r3, #15
 8005632:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005634:	4a2b      	ldr	r2, [pc, #172]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800563c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10d      	bne.n	8005660 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005648:	e00a      	b.n	8005660 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	2b04      	cmp	r3, #4
 800564e:	d102      	bne.n	8005656 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005650:	4b25      	ldr	r3, [pc, #148]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005652:	61bb      	str	r3, [r7, #24]
 8005654:	e004      	b.n	8005660 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	2b08      	cmp	r3, #8
 800565a:	d101      	bne.n	8005660 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800565c:	4b23      	ldr	r3, [pc, #140]	; (80056ec <HAL_RCC_GetSysClockFreq+0x114>)
 800565e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	2b0c      	cmp	r3, #12
 8005664:	d134      	bne.n	80056d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005666:	4b1e      	ldr	r3, [pc, #120]	; (80056e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	f003 0303 	and.w	r3, r3, #3
 800566e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2b02      	cmp	r3, #2
 8005674:	d003      	beq.n	800567e <HAL_RCC_GetSysClockFreq+0xa6>
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	2b03      	cmp	r3, #3
 800567a:	d003      	beq.n	8005684 <HAL_RCC_GetSysClockFreq+0xac>
 800567c:	e005      	b.n	800568a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800567e:	4b1a      	ldr	r3, [pc, #104]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005680:	617b      	str	r3, [r7, #20]
      break;
 8005682:	e005      	b.n	8005690 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005684:	4b19      	ldr	r3, [pc, #100]	; (80056ec <HAL_RCC_GetSysClockFreq+0x114>)
 8005686:	617b      	str	r3, [r7, #20]
      break;
 8005688:	e002      	b.n	8005690 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	617b      	str	r3, [r7, #20]
      break;
 800568e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005690:	4b13      	ldr	r3, [pc, #76]	; (80056e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	091b      	lsrs	r3, r3, #4
 8005696:	f003 0307 	and.w	r3, r3, #7
 800569a:	3301      	adds	r3, #1
 800569c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800569e:	4b10      	ldr	r3, [pc, #64]	; (80056e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	0a1b      	lsrs	r3, r3, #8
 80056a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	fb02 f203 	mul.w	r2, r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056b6:	4b0a      	ldr	r3, [pc, #40]	; (80056e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	0e5b      	lsrs	r3, r3, #25
 80056bc:	f003 0303 	and.w	r3, r3, #3
 80056c0:	3301      	adds	r3, #1
 80056c2:	005b      	lsls	r3, r3, #1
 80056c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80056d0:	69bb      	ldr	r3, [r7, #24]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3724      	adds	r7, #36	; 0x24
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	40021000 	.word	0x40021000
 80056e4:	08008bf8 	.word	0x08008bf8
 80056e8:	00f42400 	.word	0x00f42400
 80056ec:	007a1200 	.word	0x007a1200

080056f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056f0:	b480      	push	{r7}
 80056f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056f4:	4b03      	ldr	r3, [pc, #12]	; (8005704 <HAL_RCC_GetHCLKFreq+0x14>)
 80056f6:	681b      	ldr	r3, [r3, #0]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	2000000c 	.word	0x2000000c

08005708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800570c:	f7ff fff0 	bl	80056f0 <HAL_RCC_GetHCLKFreq>
 8005710:	4602      	mov	r2, r0
 8005712:	4b06      	ldr	r3, [pc, #24]	; (800572c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	0a1b      	lsrs	r3, r3, #8
 8005718:	f003 0307 	and.w	r3, r3, #7
 800571c:	4904      	ldr	r1, [pc, #16]	; (8005730 <HAL_RCC_GetPCLK1Freq+0x28>)
 800571e:	5ccb      	ldrb	r3, [r1, r3]
 8005720:	f003 031f 	and.w	r3, r3, #31
 8005724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005728:	4618      	mov	r0, r3
 800572a:	bd80      	pop	{r7, pc}
 800572c:	40021000 	.word	0x40021000
 8005730:	08008bf0 	.word	0x08008bf0

08005734 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005738:	f7ff ffda 	bl	80056f0 <HAL_RCC_GetHCLKFreq>
 800573c:	4602      	mov	r2, r0
 800573e:	4b06      	ldr	r3, [pc, #24]	; (8005758 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	0adb      	lsrs	r3, r3, #11
 8005744:	f003 0307 	and.w	r3, r3, #7
 8005748:	4904      	ldr	r1, [pc, #16]	; (800575c <HAL_RCC_GetPCLK2Freq+0x28>)
 800574a:	5ccb      	ldrb	r3, [r1, r3]
 800574c:	f003 031f 	and.w	r3, r3, #31
 8005750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005754:	4618      	mov	r0, r3
 8005756:	bd80      	pop	{r7, pc}
 8005758:	40021000 	.word	0x40021000
 800575c:	08008bf0 	.word	0x08008bf0

08005760 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005768:	2300      	movs	r3, #0
 800576a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800576c:	4b2a      	ldr	r3, [pc, #168]	; (8005818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800576e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d003      	beq.n	8005780 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005778:	f7ff f9c8 	bl	8004b0c <HAL_PWREx_GetVoltageRange>
 800577c:	6178      	str	r0, [r7, #20]
 800577e:	e014      	b.n	80057aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005780:	4b25      	ldr	r3, [pc, #148]	; (8005818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005784:	4a24      	ldr	r2, [pc, #144]	; (8005818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800578a:	6593      	str	r3, [r2, #88]	; 0x58
 800578c:	4b22      	ldr	r3, [pc, #136]	; (8005818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800578e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005794:	60fb      	str	r3, [r7, #12]
 8005796:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005798:	f7ff f9b8 	bl	8004b0c <HAL_PWREx_GetVoltageRange>
 800579c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800579e:	4b1e      	ldr	r3, [pc, #120]	; (8005818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a2:	4a1d      	ldr	r2, [pc, #116]	; (8005818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057b0:	d10b      	bne.n	80057ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b80      	cmp	r3, #128	; 0x80
 80057b6:	d919      	bls.n	80057ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2ba0      	cmp	r3, #160	; 0xa0
 80057bc:	d902      	bls.n	80057c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80057be:	2302      	movs	r3, #2
 80057c0:	613b      	str	r3, [r7, #16]
 80057c2:	e013      	b.n	80057ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80057c4:	2301      	movs	r3, #1
 80057c6:	613b      	str	r3, [r7, #16]
 80057c8:	e010      	b.n	80057ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b80      	cmp	r3, #128	; 0x80
 80057ce:	d902      	bls.n	80057d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80057d0:	2303      	movs	r3, #3
 80057d2:	613b      	str	r3, [r7, #16]
 80057d4:	e00a      	b.n	80057ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b80      	cmp	r3, #128	; 0x80
 80057da:	d102      	bne.n	80057e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80057dc:	2302      	movs	r3, #2
 80057de:	613b      	str	r3, [r7, #16]
 80057e0:	e004      	b.n	80057ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b70      	cmp	r3, #112	; 0x70
 80057e6:	d101      	bne.n	80057ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80057e8:	2301      	movs	r3, #1
 80057ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80057ec:	4b0b      	ldr	r3, [pc, #44]	; (800581c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f023 0207 	bic.w	r2, r3, #7
 80057f4:	4909      	ldr	r1, [pc, #36]	; (800581c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80057fc:	4b07      	ldr	r3, [pc, #28]	; (800581c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0307 	and.w	r3, r3, #7
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	429a      	cmp	r2, r3
 8005808:	d001      	beq.n	800580e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e000      	b.n	8005810 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3718      	adds	r7, #24
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	40021000 	.word	0x40021000
 800581c:	40022000 	.word	0x40022000

08005820 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005828:	2300      	movs	r3, #0
 800582a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800582c:	2300      	movs	r3, #0
 800582e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005838:	2b00      	cmp	r3, #0
 800583a:	d031      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005840:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005844:	d01a      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005846:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800584a:	d814      	bhi.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800584c:	2b00      	cmp	r3, #0
 800584e:	d009      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005850:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005854:	d10f      	bne.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005856:	4bac      	ldr	r3, [pc, #688]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	4aab      	ldr	r2, [pc, #684]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800585c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005860:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005862:	e00c      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	3304      	adds	r3, #4
 8005868:	2100      	movs	r1, #0
 800586a:	4618      	mov	r0, r3
 800586c:	f000 f9cc 	bl	8005c08 <RCCEx_PLLSAI1_Config>
 8005870:	4603      	mov	r3, r0
 8005872:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005874:	e003      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	74fb      	strb	r3, [r7, #19]
      break;
 800587a:	e000      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800587c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800587e:	7cfb      	ldrb	r3, [r7, #19]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10b      	bne.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005884:	4ba0      	ldr	r3, [pc, #640]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800588a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005892:	499d      	ldr	r1, [pc, #628]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005894:	4313      	orrs	r3, r2
 8005896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800589a:	e001      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800589c:	7cfb      	ldrb	r3, [r7, #19]
 800589e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f000 8099 	beq.w	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058ae:	2300      	movs	r3, #0
 80058b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80058b2:	4b95      	ldr	r3, [pc, #596]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80058b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80058be:	2301      	movs	r3, #1
 80058c0:	e000      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80058c2:	2300      	movs	r3, #0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00d      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058c8:	4b8f      	ldr	r3, [pc, #572]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80058ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058cc:	4a8e      	ldr	r2, [pc, #568]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80058ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058d2:	6593      	str	r3, [r2, #88]	; 0x58
 80058d4:	4b8c      	ldr	r3, [pc, #560]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80058d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058dc:	60bb      	str	r3, [r7, #8]
 80058de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058e0:	2301      	movs	r3, #1
 80058e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058e4:	4b89      	ldr	r3, [pc, #548]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a88      	ldr	r2, [pc, #544]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80058ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058f0:	f7fd fad4 	bl	8002e9c <HAL_GetTick>
 80058f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80058f6:	e009      	b.n	800590c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058f8:	f7fd fad0 	bl	8002e9c <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b02      	cmp	r3, #2
 8005904:	d902      	bls.n	800590c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	74fb      	strb	r3, [r7, #19]
        break;
 800590a:	e005      	b.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800590c:	4b7f      	ldr	r3, [pc, #508]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005914:	2b00      	cmp	r3, #0
 8005916:	d0ef      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005918:	7cfb      	ldrb	r3, [r7, #19]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d155      	bne.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800591e:	4b7a      	ldr	r3, [pc, #488]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005924:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005928:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d01e      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	429a      	cmp	r2, r3
 8005938:	d019      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800593a:	4b73      	ldr	r3, [pc, #460]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800593c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005944:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005946:	4b70      	ldr	r3, [pc, #448]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800594c:	4a6e      	ldr	r2, [pc, #440]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800594e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005952:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005956:	4b6c      	ldr	r3, [pc, #432]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800595c:	4a6a      	ldr	r2, [pc, #424]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800595e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005962:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005966:	4a68      	ldr	r2, [pc, #416]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f003 0301 	and.w	r3, r3, #1
 8005974:	2b00      	cmp	r3, #0
 8005976:	d016      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005978:	f7fd fa90 	bl	8002e9c <HAL_GetTick>
 800597c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800597e:	e00b      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005980:	f7fd fa8c 	bl	8002e9c <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	f241 3288 	movw	r2, #5000	; 0x1388
 800598e:	4293      	cmp	r3, r2
 8005990:	d902      	bls.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	74fb      	strb	r3, [r7, #19]
            break;
 8005996:	e006      	b.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005998:	4b5b      	ldr	r3, [pc, #364]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800599a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0ec      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80059a6:	7cfb      	ldrb	r3, [r7, #19]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10b      	bne.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059ac:	4b56      	ldr	r3, [pc, #344]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80059ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ba:	4953      	ldr	r1, [pc, #332]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80059c2:	e004      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059c4:	7cfb      	ldrb	r3, [r7, #19]
 80059c6:	74bb      	strb	r3, [r7, #18]
 80059c8:	e001      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ca:	7cfb      	ldrb	r3, [r7, #19]
 80059cc:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059ce:	7c7b      	ldrb	r3, [r7, #17]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d105      	bne.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059d4:	4b4c      	ldr	r3, [pc, #304]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80059d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d8:	4a4b      	ldr	r2, [pc, #300]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80059da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00a      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059ec:	4b46      	ldr	r3, [pc, #280]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80059ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f2:	f023 0203 	bic.w	r2, r3, #3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	4943      	ldr	r1, [pc, #268]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00a      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a0e:	4b3e      	ldr	r3, [pc, #248]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a14:	f023 020c 	bic.w	r2, r3, #12
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1c:	493a      	ldr	r1, [pc, #232]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0320 	and.w	r3, r3, #32
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00a      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a30:	4b35      	ldr	r3, [pc, #212]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3e:	4932      	ldr	r1, [pc, #200]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00a      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a52:	4b2d      	ldr	r3, [pc, #180]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a60:	4929      	ldr	r1, [pc, #164]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00a      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a74:	4b24      	ldr	r3, [pc, #144]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a82:	4921      	ldr	r1, [pc, #132]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00a      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a96:	4b1c      	ldr	r3, [pc, #112]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa4:	4918      	ldr	r1, [pc, #96]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00a      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ab8:	4b13      	ldr	r3, [pc, #76]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005abe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac6:	4910      	ldr	r1, [pc, #64]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d02c      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ada:	4b0b      	ldr	r3, [pc, #44]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae8:	4907      	ldr	r1, [pc, #28]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005af8:	d10a      	bne.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005afa:	4b03      	ldr	r3, [pc, #12]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	4a02      	ldr	r2, [pc, #8]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005b00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b04:	60d3      	str	r3, [r2, #12]
 8005b06:	e015      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8005b08:	40021000 	.word	0x40021000
 8005b0c:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b18:	d10c      	bne.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	3304      	adds	r3, #4
 8005b1e:	2101      	movs	r1, #1
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 f871 	bl	8005c08 <RCCEx_PLLSAI1_Config>
 8005b26:	4603      	mov	r3, r0
 8005b28:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005b2a:	7cfb      	ldrb	r3, [r7, #19]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8005b30:	7cfb      	ldrb	r3, [r7, #19]
 8005b32:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d028      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b40:	4b30      	ldr	r3, [pc, #192]	; (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b4e:	492d      	ldr	r1, [pc, #180]	; (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b5e:	d106      	bne.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b60:	4b28      	ldr	r3, [pc, #160]	; (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	4a27      	ldr	r2, [pc, #156]	; (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b6a:	60d3      	str	r3, [r2, #12]
 8005b6c:	e011      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b76:	d10c      	bne.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	3304      	adds	r3, #4
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 f842 	bl	8005c08 <RCCEx_PLLSAI1_Config>
 8005b84:	4603      	mov	r3, r0
 8005b86:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b88:	7cfb      	ldrb	r3, [r7, #19]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d001      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8005b8e:	7cfb      	ldrb	r3, [r7, #19]
 8005b90:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d01c      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b9e:	4b19      	ldr	r3, [pc, #100]	; (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bac:	4915      	ldr	r1, [pc, #84]	; (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bbc:	d10c      	bne.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	2102      	movs	r1, #2
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f000 f81f 	bl	8005c08 <RCCEx_PLLSAI1_Config>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bce:	7cfb      	ldrb	r3, [r7, #19]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d001      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005bd4:	7cfb      	ldrb	r3, [r7, #19]
 8005bd6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00a      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005be4:	4b07      	ldr	r3, [pc, #28]	; (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bf2:	4904      	ldr	r1, [pc, #16]	; (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005bfa:	7cbb      	ldrb	r3, [r7, #18]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3718      	adds	r7, #24
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	40021000 	.word	0x40021000

08005c08 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c12:	2300      	movs	r3, #0
 8005c14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c16:	4b74      	ldr	r3, [pc, #464]	; (8005de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	f003 0303 	and.w	r3, r3, #3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d018      	beq.n	8005c54 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005c22:	4b71      	ldr	r3, [pc, #452]	; (8005de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	f003 0203 	and.w	r2, r3, #3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d10d      	bne.n	8005c4e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
       ||
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d009      	beq.n	8005c4e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005c3a:	4b6b      	ldr	r3, [pc, #428]	; (8005de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	091b      	lsrs	r3, r3, #4
 8005c40:	f003 0307 	and.w	r3, r3, #7
 8005c44:	1c5a      	adds	r2, r3, #1
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
       ||
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d047      	beq.n	8005cde <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	73fb      	strb	r3, [r7, #15]
 8005c52:	e044      	b.n	8005cde <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b03      	cmp	r3, #3
 8005c5a:	d018      	beq.n	8005c8e <RCCEx_PLLSAI1_Config+0x86>
 8005c5c:	2b03      	cmp	r3, #3
 8005c5e:	d825      	bhi.n	8005cac <RCCEx_PLLSAI1_Config+0xa4>
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d002      	beq.n	8005c6a <RCCEx_PLLSAI1_Config+0x62>
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d009      	beq.n	8005c7c <RCCEx_PLLSAI1_Config+0x74>
 8005c68:	e020      	b.n	8005cac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c6a:	4b5f      	ldr	r3, [pc, #380]	; (8005de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d11d      	bne.n	8005cb2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c7a:	e01a      	b.n	8005cb2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c7c:	4b5a      	ldr	r3, [pc, #360]	; (8005de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d116      	bne.n	8005cb6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c8c:	e013      	b.n	8005cb6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c8e:	4b56      	ldr	r3, [pc, #344]	; (8005de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10f      	bne.n	8005cba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c9a:	4b53      	ldr	r3, [pc, #332]	; (8005de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d109      	bne.n	8005cba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005caa:	e006      	b.n	8005cba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	73fb      	strb	r3, [r7, #15]
      break;
 8005cb0:	e004      	b.n	8005cbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005cb2:	bf00      	nop
 8005cb4:	e002      	b.n	8005cbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005cb6:	bf00      	nop
 8005cb8:	e000      	b.n	8005cbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005cba:	bf00      	nop
    }

    if(status == HAL_OK)
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10d      	bne.n	8005cde <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005cc2:	4b49      	ldr	r3, [pc, #292]	; (8005de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6819      	ldr	r1, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	011b      	lsls	r3, r3, #4
 8005cd6:	430b      	orrs	r3, r1
 8005cd8:	4943      	ldr	r1, [pc, #268]	; (8005de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d17c      	bne.n	8005dde <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005ce4:	4b40      	ldr	r3, [pc, #256]	; (8005de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a3f      	ldr	r2, [pc, #252]	; (8005de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005cee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cf0:	f7fd f8d4 	bl	8002e9c <HAL_GetTick>
 8005cf4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005cf6:	e009      	b.n	8005d0c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005cf8:	f7fd f8d0 	bl	8002e9c <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d902      	bls.n	8005d0c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	73fb      	strb	r3, [r7, #15]
        break;
 8005d0a:	e005      	b.n	8005d18 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d0c:	4b36      	ldr	r3, [pc, #216]	; (8005de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1ef      	bne.n	8005cf8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d15f      	bne.n	8005dde <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d110      	bne.n	8005d46 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d24:	4b30      	ldr	r3, [pc, #192]	; (8005de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005d2c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	6892      	ldr	r2, [r2, #8]
 8005d34:	0211      	lsls	r1, r2, #8
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	68d2      	ldr	r2, [r2, #12]
 8005d3a:	06d2      	lsls	r2, r2, #27
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	492a      	ldr	r1, [pc, #168]	; (8005de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	610b      	str	r3, [r1, #16]
 8005d44:	e027      	b.n	8005d96 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d112      	bne.n	8005d72 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d4c:	4b26      	ldr	r3, [pc, #152]	; (8005de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005d54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	6892      	ldr	r2, [r2, #8]
 8005d5c:	0211      	lsls	r1, r2, #8
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	6912      	ldr	r2, [r2, #16]
 8005d62:	0852      	lsrs	r2, r2, #1
 8005d64:	3a01      	subs	r2, #1
 8005d66:	0552      	lsls	r2, r2, #21
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	491f      	ldr	r1, [pc, #124]	; (8005de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	610b      	str	r3, [r1, #16]
 8005d70:	e011      	b.n	8005d96 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d72:	4b1d      	ldr	r3, [pc, #116]	; (8005de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005d7a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	6892      	ldr	r2, [r2, #8]
 8005d82:	0211      	lsls	r1, r2, #8
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	6952      	ldr	r2, [r2, #20]
 8005d88:	0852      	lsrs	r2, r2, #1
 8005d8a:	3a01      	subs	r2, #1
 8005d8c:	0652      	lsls	r2, r2, #25
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	4915      	ldr	r1, [pc, #84]	; (8005de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005d96:	4b14      	ldr	r3, [pc, #80]	; (8005de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a13      	ldr	r2, [pc, #76]	; (8005de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005da0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005da2:	f7fd f87b 	bl	8002e9c <HAL_GetTick>
 8005da6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005da8:	e009      	b.n	8005dbe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005daa:	f7fd f877 	bl	8002e9c <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d902      	bls.n	8005dbe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	73fb      	strb	r3, [r7, #15]
          break;
 8005dbc:	e005      	b.n	8005dca <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005dbe:	4b0a      	ldr	r3, [pc, #40]	; (8005de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d0ef      	beq.n	8005daa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005dca:	7bfb      	ldrb	r3, [r7, #15]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d106      	bne.n	8005dde <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005dd0:	4b05      	ldr	r3, [pc, #20]	; (8005de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dd2:	691a      	ldr	r2, [r3, #16]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	699b      	ldr	r3, [r3, #24]
 8005dd8:	4903      	ldr	r1, [pc, #12]	; (8005de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	40021000 	.word	0x40021000

08005dec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d101      	bne.n	8005dfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e049      	b.n	8005e92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d106      	bne.n	8005e18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f7fc fdf2 	bl	80029fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	3304      	adds	r3, #4
 8005e28:	4619      	mov	r1, r3
 8005e2a:	4610      	mov	r0, r2
 8005e2c:	f000 fc10 	bl	8006650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
	...

08005e9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d001      	beq.n	8005eb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e03b      	b.n	8005f2c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68da      	ldr	r2, [r3, #12]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f042 0201 	orr.w	r2, r2, #1
 8005eca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a19      	ldr	r2, [pc, #100]	; (8005f38 <HAL_TIM_Base_Start_IT+0x9c>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d009      	beq.n	8005eea <HAL_TIM_Base_Start_IT+0x4e>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ede:	d004      	beq.n	8005eea <HAL_TIM_Base_Start_IT+0x4e>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a15      	ldr	r2, [pc, #84]	; (8005f3c <HAL_TIM_Base_Start_IT+0xa0>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d115      	bne.n	8005f16 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689a      	ldr	r2, [r3, #8]
 8005ef0:	4b13      	ldr	r3, [pc, #76]	; (8005f40 <HAL_TIM_Base_Start_IT+0xa4>)
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2b06      	cmp	r3, #6
 8005efa:	d015      	beq.n	8005f28 <HAL_TIM_Base_Start_IT+0x8c>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f02:	d011      	beq.n	8005f28 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f042 0201 	orr.w	r2, r2, #1
 8005f12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f14:	e008      	b.n	8005f28 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f042 0201 	orr.w	r2, r2, #1
 8005f24:	601a      	str	r2, [r3, #0]
 8005f26:	e000      	b.n	8005f2a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3714      	adds	r7, #20
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr
 8005f38:	40012c00 	.word	0x40012c00
 8005f3c:	40014000 	.word	0x40014000
 8005f40:	00010007 	.word	0x00010007

08005f44 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d101      	bne.n	8005f56 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e049      	b.n	8005fea <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d106      	bne.n	8005f70 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7fc fd22 	bl	80029b4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2202      	movs	r2, #2
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	3304      	adds	r3, #4
 8005f80:	4619      	mov	r1, r3
 8005f82:	4610      	mov	r0, r2
 8005f84:	f000 fb64 	bl	8006650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b082      	sub	sp, #8
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e049      	b.n	8006098 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800600a:	b2db      	uxtb	r3, r3
 800600c:	2b00      	cmp	r3, #0
 800600e:	d106      	bne.n	800601e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f7fc fcab 	bl	8002974 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2202      	movs	r2, #2
 8006022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	3304      	adds	r3, #4
 800602e:	4619      	mov	r1, r3
 8006030:	4610      	mov	r0, r2
 8006032:	f000 fb0d 	bl	8006650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3708      	adds	r7, #8
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d122      	bne.n	80060fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	f003 0302 	and.w	r3, r3, #2
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d11b      	bne.n	80060fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f06f 0202 	mvn.w	r2, #2
 80060cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	f003 0303 	and.w	r3, r3, #3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 fa96 	bl	8006614 <HAL_TIM_IC_CaptureCallback>
 80060e8:	e005      	b.n	80060f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 fa88 	bl	8006600 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 fa99 	bl	8006628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	f003 0304 	and.w	r3, r3, #4
 8006106:	2b04      	cmp	r3, #4
 8006108:	d122      	bne.n	8006150 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	f003 0304 	and.w	r3, r3, #4
 8006114:	2b04      	cmp	r3, #4
 8006116:	d11b      	bne.n	8006150 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f06f 0204 	mvn.w	r2, #4
 8006120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2202      	movs	r2, #2
 8006126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006132:	2b00      	cmp	r3, #0
 8006134:	d003      	beq.n	800613e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 fa6c 	bl	8006614 <HAL_TIM_IC_CaptureCallback>
 800613c:	e005      	b.n	800614a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fa5e 	bl	8006600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 fa6f 	bl	8006628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	f003 0308 	and.w	r3, r3, #8
 800615a:	2b08      	cmp	r3, #8
 800615c:	d122      	bne.n	80061a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	f003 0308 	and.w	r3, r3, #8
 8006168:	2b08      	cmp	r3, #8
 800616a:	d11b      	bne.n	80061a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f06f 0208 	mvn.w	r2, #8
 8006174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2204      	movs	r2, #4
 800617a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	f003 0303 	and.w	r3, r3, #3
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 fa42 	bl	8006614 <HAL_TIM_IC_CaptureCallback>
 8006190:	e005      	b.n	800619e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 fa34 	bl	8006600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 fa45 	bl	8006628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	f003 0310 	and.w	r3, r3, #16
 80061ae:	2b10      	cmp	r3, #16
 80061b0:	d122      	bne.n	80061f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	f003 0310 	and.w	r3, r3, #16
 80061bc:	2b10      	cmp	r3, #16
 80061be:	d11b      	bne.n	80061f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f06f 0210 	mvn.w	r2, #16
 80061c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2208      	movs	r2, #8
 80061ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	69db      	ldr	r3, [r3, #28]
 80061d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d003      	beq.n	80061e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 fa18 	bl	8006614 <HAL_TIM_IC_CaptureCallback>
 80061e4:	e005      	b.n	80061f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 fa0a 	bl	8006600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 fa1b 	bl	8006628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	2b01      	cmp	r3, #1
 8006204:	d10e      	bne.n	8006224 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	2b01      	cmp	r3, #1
 8006212:	d107      	bne.n	8006224 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f06f 0201 	mvn.w	r2, #1
 800621c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f9e4 	bl	80065ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800622e:	2b80      	cmp	r3, #128	; 0x80
 8006230:	d10e      	bne.n	8006250 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800623c:	2b80      	cmp	r3, #128	; 0x80
 800623e:	d107      	bne.n	8006250 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 fdca 	bl	8006de4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800625a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800625e:	d10e      	bne.n	800627e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800626a:	2b80      	cmp	r3, #128	; 0x80
 800626c:	d107      	bne.n	800627e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 fdbd 	bl	8006df8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006288:	2b40      	cmp	r3, #64	; 0x40
 800628a:	d10e      	bne.n	80062aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006296:	2b40      	cmp	r3, #64	; 0x40
 8006298:	d107      	bne.n	80062aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 f9c9 	bl	800663c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	f003 0320 	and.w	r3, r3, #32
 80062b4:	2b20      	cmp	r3, #32
 80062b6:	d10e      	bne.n	80062d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	f003 0320 	and.w	r3, r3, #32
 80062c2:	2b20      	cmp	r3, #32
 80062c4:	d107      	bne.n	80062d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f06f 0220 	mvn.w	r2, #32
 80062ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 fd7d 	bl	8006dd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062d6:	bf00      	nop
 80062d8:	3708      	adds	r7, #8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
	...

080062e0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d101      	bne.n	80062fa <HAL_TIM_OC_ConfigChannel+0x1a>
 80062f6:	2302      	movs	r3, #2
 80062f8:	e064      	b.n	80063c4 <HAL_TIM_OC_ConfigChannel+0xe4>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b14      	cmp	r3, #20
 8006306:	d857      	bhi.n	80063b8 <HAL_TIM_OC_ConfigChannel+0xd8>
 8006308:	a201      	add	r2, pc, #4	; (adr r2, 8006310 <HAL_TIM_OC_ConfigChannel+0x30>)
 800630a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630e:	bf00      	nop
 8006310:	08006365 	.word	0x08006365
 8006314:	080063b9 	.word	0x080063b9
 8006318:	080063b9 	.word	0x080063b9
 800631c:	080063b9 	.word	0x080063b9
 8006320:	08006373 	.word	0x08006373
 8006324:	080063b9 	.word	0x080063b9
 8006328:	080063b9 	.word	0x080063b9
 800632c:	080063b9 	.word	0x080063b9
 8006330:	08006381 	.word	0x08006381
 8006334:	080063b9 	.word	0x080063b9
 8006338:	080063b9 	.word	0x080063b9
 800633c:	080063b9 	.word	0x080063b9
 8006340:	0800638f 	.word	0x0800638f
 8006344:	080063b9 	.word	0x080063b9
 8006348:	080063b9 	.word	0x080063b9
 800634c:	080063b9 	.word	0x080063b9
 8006350:	0800639d 	.word	0x0800639d
 8006354:	080063b9 	.word	0x080063b9
 8006358:	080063b9 	.word	0x080063b9
 800635c:	080063b9 	.word	0x080063b9
 8006360:	080063ab 	.word	0x080063ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68b9      	ldr	r1, [r7, #8]
 800636a:	4618      	mov	r0, r3
 800636c:	f000 f9d4 	bl	8006718 <TIM_OC1_SetConfig>
      break;
 8006370:	e023      	b.n	80063ba <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68b9      	ldr	r1, [r7, #8]
 8006378:	4618      	mov	r0, r3
 800637a:	f000 fa49 	bl	8006810 <TIM_OC2_SetConfig>
      break;
 800637e:	e01c      	b.n	80063ba <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68b9      	ldr	r1, [r7, #8]
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fabc 	bl	8006904 <TIM_OC3_SetConfig>
      break;
 800638c:	e015      	b.n	80063ba <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68b9      	ldr	r1, [r7, #8]
 8006394:	4618      	mov	r0, r3
 8006396:	f000 fb2d 	bl	80069f4 <TIM_OC4_SetConfig>
      break;
 800639a:	e00e      	b.n	80063ba <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68b9      	ldr	r1, [r7, #8]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 fb84 	bl	8006ab0 <TIM_OC5_SetConfig>
      break;
 80063a8:	e007      	b.n	80063ba <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68b9      	ldr	r1, [r7, #8]
 80063b0:	4618      	mov	r0, r3
 80063b2:	f000 fbd5 	bl	8006b60 <TIM_OC6_SetConfig>
      break;
 80063b6:	e000      	b.n	80063ba <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 80063b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d101      	bne.n	80063e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80063e2:	2302      	movs	r3, #2
 80063e4:	e0fd      	b.n	80065e2 <HAL_TIM_PWM_ConfigChannel+0x216>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2b14      	cmp	r3, #20
 80063f2:	f200 80f0 	bhi.w	80065d6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80063f6:	a201      	add	r2, pc, #4	; (adr r2, 80063fc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80063f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063fc:	08006451 	.word	0x08006451
 8006400:	080065d7 	.word	0x080065d7
 8006404:	080065d7 	.word	0x080065d7
 8006408:	080065d7 	.word	0x080065d7
 800640c:	08006491 	.word	0x08006491
 8006410:	080065d7 	.word	0x080065d7
 8006414:	080065d7 	.word	0x080065d7
 8006418:	080065d7 	.word	0x080065d7
 800641c:	080064d3 	.word	0x080064d3
 8006420:	080065d7 	.word	0x080065d7
 8006424:	080065d7 	.word	0x080065d7
 8006428:	080065d7 	.word	0x080065d7
 800642c:	08006513 	.word	0x08006513
 8006430:	080065d7 	.word	0x080065d7
 8006434:	080065d7 	.word	0x080065d7
 8006438:	080065d7 	.word	0x080065d7
 800643c:	08006555 	.word	0x08006555
 8006440:	080065d7 	.word	0x080065d7
 8006444:	080065d7 	.word	0x080065d7
 8006448:	080065d7 	.word	0x080065d7
 800644c:	08006595 	.word	0x08006595
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68b9      	ldr	r1, [r7, #8]
 8006456:	4618      	mov	r0, r3
 8006458:	f000 f95e 	bl	8006718 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	699a      	ldr	r2, [r3, #24]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f042 0208 	orr.w	r2, r2, #8
 800646a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	699a      	ldr	r2, [r3, #24]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f022 0204 	bic.w	r2, r2, #4
 800647a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6999      	ldr	r1, [r3, #24]
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	691a      	ldr	r2, [r3, #16]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	430a      	orrs	r2, r1
 800648c:	619a      	str	r2, [r3, #24]
      break;
 800648e:	e0a3      	b.n	80065d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68b9      	ldr	r1, [r7, #8]
 8006496:	4618      	mov	r0, r3
 8006498:	f000 f9ba 	bl	8006810 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	699a      	ldr	r2, [r3, #24]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	699a      	ldr	r2, [r3, #24]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	6999      	ldr	r1, [r3, #24]
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	021a      	lsls	r2, r3, #8
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	430a      	orrs	r2, r1
 80064ce:	619a      	str	r2, [r3, #24]
      break;
 80064d0:	e082      	b.n	80065d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68b9      	ldr	r1, [r7, #8]
 80064d8:	4618      	mov	r0, r3
 80064da:	f000 fa13 	bl	8006904 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	69da      	ldr	r2, [r3, #28]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f042 0208 	orr.w	r2, r2, #8
 80064ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	69da      	ldr	r2, [r3, #28]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f022 0204 	bic.w	r2, r2, #4
 80064fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	69d9      	ldr	r1, [r3, #28]
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	691a      	ldr	r2, [r3, #16]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	430a      	orrs	r2, r1
 800650e:	61da      	str	r2, [r3, #28]
      break;
 8006510:	e062      	b.n	80065d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68b9      	ldr	r1, [r7, #8]
 8006518:	4618      	mov	r0, r3
 800651a:	f000 fa6b 	bl	80069f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	69da      	ldr	r2, [r3, #28]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800652c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	69da      	ldr	r2, [r3, #28]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800653c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	69d9      	ldr	r1, [r3, #28]
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	021a      	lsls	r2, r3, #8
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	61da      	str	r2, [r3, #28]
      break;
 8006552:	e041      	b.n	80065d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68b9      	ldr	r1, [r7, #8]
 800655a:	4618      	mov	r0, r3
 800655c:	f000 faa8 	bl	8006ab0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f042 0208 	orr.w	r2, r2, #8
 800656e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 0204 	bic.w	r2, r2, #4
 800657e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	691a      	ldr	r2, [r3, #16]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	430a      	orrs	r2, r1
 8006590:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006592:	e021      	b.n	80065d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68b9      	ldr	r1, [r7, #8]
 800659a:	4618      	mov	r0, r3
 800659c:	f000 fae0 	bl	8006b60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	021a      	lsls	r2, r3, #8
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80065d4:	e000      	b.n	80065d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80065d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop

080065ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a2a      	ldr	r2, [pc, #168]	; (800670c <TIM_Base_SetConfig+0xbc>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d003      	beq.n	8006670 <TIM_Base_SetConfig+0x20>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800666e:	d108      	bne.n	8006682 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006676:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	4313      	orrs	r3, r2
 8006680:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a21      	ldr	r2, [pc, #132]	; (800670c <TIM_Base_SetConfig+0xbc>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d00b      	beq.n	80066a2 <TIM_Base_SetConfig+0x52>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006690:	d007      	beq.n	80066a2 <TIM_Base_SetConfig+0x52>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a1e      	ldr	r2, [pc, #120]	; (8006710 <TIM_Base_SetConfig+0xc0>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d003      	beq.n	80066a2 <TIM_Base_SetConfig+0x52>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a1d      	ldr	r2, [pc, #116]	; (8006714 <TIM_Base_SetConfig+0xc4>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d108      	bne.n	80066b4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	4313      	orrs	r3, r2
 80066c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	689a      	ldr	r2, [r3, #8]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a0c      	ldr	r2, [pc, #48]	; (800670c <TIM_Base_SetConfig+0xbc>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d007      	beq.n	80066f0 <TIM_Base_SetConfig+0xa0>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a0b      	ldr	r2, [pc, #44]	; (8006710 <TIM_Base_SetConfig+0xc0>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d003      	beq.n	80066f0 <TIM_Base_SetConfig+0xa0>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a0a      	ldr	r2, [pc, #40]	; (8006714 <TIM_Base_SetConfig+0xc4>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d103      	bne.n	80066f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	691a      	ldr	r2, [r3, #16]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	615a      	str	r2, [r3, #20]
}
 80066fe:	bf00      	nop
 8006700:	3714      	adds	r7, #20
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	40012c00 	.word	0x40012c00
 8006710:	40014000 	.word	0x40014000
 8006714:	40014400 	.word	0x40014400

08006718 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006718:	b480      	push	{r7}
 800671a:	b087      	sub	sp, #28
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	f023 0201 	bic.w	r2, r3, #1
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f023 0303 	bic.w	r3, r3, #3
 8006752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	4313      	orrs	r3, r2
 800675c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f023 0302 	bic.w	r3, r3, #2
 8006764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	4313      	orrs	r3, r2
 800676e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a24      	ldr	r2, [pc, #144]	; (8006804 <TIM_OC1_SetConfig+0xec>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d007      	beq.n	8006788 <TIM_OC1_SetConfig+0x70>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a23      	ldr	r2, [pc, #140]	; (8006808 <TIM_OC1_SetConfig+0xf0>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d003      	beq.n	8006788 <TIM_OC1_SetConfig+0x70>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a22      	ldr	r2, [pc, #136]	; (800680c <TIM_OC1_SetConfig+0xf4>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d10c      	bne.n	80067a2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f023 0308 	bic.w	r3, r3, #8
 800678e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	4313      	orrs	r3, r2
 8006798:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f023 0304 	bic.w	r3, r3, #4
 80067a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a17      	ldr	r2, [pc, #92]	; (8006804 <TIM_OC1_SetConfig+0xec>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d007      	beq.n	80067ba <TIM_OC1_SetConfig+0xa2>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a16      	ldr	r2, [pc, #88]	; (8006808 <TIM_OC1_SetConfig+0xf0>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d003      	beq.n	80067ba <TIM_OC1_SetConfig+0xa2>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a15      	ldr	r2, [pc, #84]	; (800680c <TIM_OC1_SetConfig+0xf4>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d111      	bne.n	80067de <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	4313      	orrs	r3, r2
 80067dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	685a      	ldr	r2, [r3, #4]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	621a      	str	r2, [r3, #32]
}
 80067f8:	bf00      	nop
 80067fa:	371c      	adds	r7, #28
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr
 8006804:	40012c00 	.word	0x40012c00
 8006808:	40014000 	.word	0x40014000
 800680c:	40014400 	.word	0x40014400

08006810 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006810:	b480      	push	{r7}
 8006812:	b087      	sub	sp, #28
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	f023 0210 	bic.w	r2, r3, #16
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800683e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800684a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	021b      	lsls	r3, r3, #8
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	4313      	orrs	r3, r2
 8006856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	f023 0320 	bic.w	r3, r3, #32
 800685e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	011b      	lsls	r3, r3, #4
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	4313      	orrs	r3, r2
 800686a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a22      	ldr	r2, [pc, #136]	; (80068f8 <TIM_OC2_SetConfig+0xe8>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d10d      	bne.n	8006890 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800687a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	011b      	lsls	r3, r3, #4
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	4313      	orrs	r3, r2
 8006886:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800688e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a19      	ldr	r2, [pc, #100]	; (80068f8 <TIM_OC2_SetConfig+0xe8>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d007      	beq.n	80068a8 <TIM_OC2_SetConfig+0x98>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a18      	ldr	r2, [pc, #96]	; (80068fc <TIM_OC2_SetConfig+0xec>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d003      	beq.n	80068a8 <TIM_OC2_SetConfig+0x98>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a17      	ldr	r2, [pc, #92]	; (8006900 <TIM_OC2_SetConfig+0xf0>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d113      	bne.n	80068d0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	695b      	ldr	r3, [r3, #20]
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	685a      	ldr	r2, [r3, #4]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	621a      	str	r2, [r3, #32]
}
 80068ea:	bf00      	nop
 80068ec:	371c      	adds	r7, #28
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	40012c00 	.word	0x40012c00
 80068fc:	40014000 	.word	0x40014000
 8006900:	40014400 	.word	0x40014400

08006904 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	69db      	ldr	r3, [r3, #28]
 800692a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f023 0303 	bic.w	r3, r3, #3
 800693e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	4313      	orrs	r3, r2
 8006948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	021b      	lsls	r3, r3, #8
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	4313      	orrs	r3, r2
 800695c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a21      	ldr	r2, [pc, #132]	; (80069e8 <TIM_OC3_SetConfig+0xe4>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d10d      	bne.n	8006982 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800696c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	021b      	lsls	r3, r3, #8
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	4313      	orrs	r3, r2
 8006978:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006980:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a18      	ldr	r2, [pc, #96]	; (80069e8 <TIM_OC3_SetConfig+0xe4>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d007      	beq.n	800699a <TIM_OC3_SetConfig+0x96>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a17      	ldr	r2, [pc, #92]	; (80069ec <TIM_OC3_SetConfig+0xe8>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d003      	beq.n	800699a <TIM_OC3_SetConfig+0x96>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a16      	ldr	r2, [pc, #88]	; (80069f0 <TIM_OC3_SetConfig+0xec>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d113      	bne.n	80069c2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	011b      	lsls	r3, r3, #4
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	699b      	ldr	r3, [r3, #24]
 80069ba:	011b      	lsls	r3, r3, #4
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	4313      	orrs	r3, r2
 80069c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	621a      	str	r2, [r3, #32]
}
 80069dc:	bf00      	nop
 80069de:	371c      	adds	r7, #28
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	40012c00 	.word	0x40012c00
 80069ec:	40014000 	.word	0x40014000
 80069f0:	40014400 	.word	0x40014400

080069f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b087      	sub	sp, #28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	021b      	lsls	r3, r3, #8
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	031b      	lsls	r3, r3, #12
 8006a4a:	693a      	ldr	r2, [r7, #16]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a14      	ldr	r2, [pc, #80]	; (8006aa4 <TIM_OC4_SetConfig+0xb0>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d007      	beq.n	8006a68 <TIM_OC4_SetConfig+0x74>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a13      	ldr	r2, [pc, #76]	; (8006aa8 <TIM_OC4_SetConfig+0xb4>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d003      	beq.n	8006a68 <TIM_OC4_SetConfig+0x74>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a12      	ldr	r2, [pc, #72]	; (8006aac <TIM_OC4_SetConfig+0xb8>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d109      	bne.n	8006a7c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	019b      	lsls	r3, r3, #6
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	685a      	ldr	r2, [r3, #4]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	693a      	ldr	r2, [r7, #16]
 8006a94:	621a      	str	r2, [r3, #32]
}
 8006a96:	bf00      	nop
 8006a98:	371c      	adds	r7, #28
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	40012c00 	.word	0x40012c00
 8006aa8:	40014000 	.word	0x40014000
 8006aac:	40014400 	.word	0x40014400

08006ab0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b087      	sub	sp, #28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006af4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	041b      	lsls	r3, r3, #16
 8006afc:	693a      	ldr	r2, [r7, #16]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a13      	ldr	r2, [pc, #76]	; (8006b54 <TIM_OC5_SetConfig+0xa4>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d007      	beq.n	8006b1a <TIM_OC5_SetConfig+0x6a>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a12      	ldr	r2, [pc, #72]	; (8006b58 <TIM_OC5_SetConfig+0xa8>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d003      	beq.n	8006b1a <TIM_OC5_SetConfig+0x6a>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a11      	ldr	r2, [pc, #68]	; (8006b5c <TIM_OC5_SetConfig+0xac>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d109      	bne.n	8006b2e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	021b      	lsls	r3, r3, #8
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	621a      	str	r2, [r3, #32]
}
 8006b48:	bf00      	nop
 8006b4a:	371c      	adds	r7, #28
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr
 8006b54:	40012c00 	.word	0x40012c00
 8006b58:	40014000 	.word	0x40014000
 8006b5c:	40014400 	.word	0x40014400

08006b60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b087      	sub	sp, #28
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	021b      	lsls	r3, r3, #8
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ba6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	051b      	lsls	r3, r3, #20
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a14      	ldr	r2, [pc, #80]	; (8006c08 <TIM_OC6_SetConfig+0xa8>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d007      	beq.n	8006bcc <TIM_OC6_SetConfig+0x6c>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a13      	ldr	r2, [pc, #76]	; (8006c0c <TIM_OC6_SetConfig+0xac>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d003      	beq.n	8006bcc <TIM_OC6_SetConfig+0x6c>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a12      	ldr	r2, [pc, #72]	; (8006c10 <TIM_OC6_SetConfig+0xb0>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d109      	bne.n	8006be0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bd2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	695b      	ldr	r3, [r3, #20]
 8006bd8:	029b      	lsls	r3, r3, #10
 8006bda:	697a      	ldr	r2, [r7, #20]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	685a      	ldr	r2, [r3, #4]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	621a      	str	r2, [r3, #32]
}
 8006bfa:	bf00      	nop
 8006bfc:	371c      	adds	r7, #28
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	40012c00 	.word	0x40012c00
 8006c0c:	40014000 	.word	0x40014000
 8006c10:	40014400 	.word	0x40014400

08006c14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d101      	bne.n	8006c2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c28:	2302      	movs	r3, #2
 8006c2a:	e04f      	b.n	8006ccc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2202      	movs	r2, #2
 8006c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a21      	ldr	r2, [pc, #132]	; (8006cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d108      	bne.n	8006c68 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c5c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a14      	ldr	r2, [pc, #80]	; (8006cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d009      	beq.n	8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c94:	d004      	beq.n	8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a10      	ldr	r2, [pc, #64]	; (8006cdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d10c      	bne.n	8006cba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ca6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68ba      	ldr	r2, [r7, #8]
 8006cb8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr
 8006cd8:	40012c00 	.word	0x40012c00
 8006cdc:	40014000 	.word	0x40014000

08006ce0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006cea:	2300      	movs	r3, #0
 8006cec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d101      	bne.n	8006cfc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	e060      	b.n	8006dbe <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	695b      	ldr	r3, [r3, #20]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d62:	4313      	orrs	r3, r2
 8006d64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	041b      	lsls	r3, r3, #16
 8006d72:	4313      	orrs	r3, r2
 8006d74:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a14      	ldr	r2, [pc, #80]	; (8006dcc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d115      	bne.n	8006dac <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8a:	051b      	lsls	r3, r3, #20
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	69db      	ldr	r3, [r3, #28]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	6a1b      	ldr	r3, [r3, #32]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	40012c00 	.word	0x40012c00

08006dd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e040      	b.n	8006ea0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d106      	bne.n	8006e34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7fb fe5e 	bl	8002af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2224      	movs	r2, #36	; 0x24
 8006e38:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f022 0201 	bic.w	r2, r2, #1
 8006e48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f92e 	bl	80070ac <UART_SetConfig>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d101      	bne.n	8006e5a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e022      	b.n	8006ea0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d002      	beq.n	8006e68 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 fb2e 	bl	80074c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	689a      	ldr	r2, [r3, #8]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f042 0201 	orr.w	r2, r2, #1
 8006e96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 fbb5 	bl	8007608 <UART_CheckIdleState>
 8006e9e:	4603      	mov	r3, r0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3708      	adds	r7, #8
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b08a      	sub	sp, #40	; 0x28
 8006eac:	af02      	add	r7, sp, #8
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	603b      	str	r3, [r7, #0]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ebc:	2b20      	cmp	r3, #32
 8006ebe:	f040 8082 	bne.w	8006fc6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d002      	beq.n	8006ece <HAL_UART_Transmit+0x26>
 8006ec8:	88fb      	ldrh	r3, [r7, #6]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d101      	bne.n	8006ed2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e07a      	b.n	8006fc8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d101      	bne.n	8006ee0 <HAL_UART_Transmit+0x38>
 8006edc:	2302      	movs	r3, #2
 8006ede:	e073      	b.n	8006fc8 <HAL_UART_Transmit+0x120>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2221      	movs	r2, #33	; 0x21
 8006ef4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ef6:	f7fb ffd1 	bl	8002e9c <HAL_GetTick>
 8006efa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	88fa      	ldrh	r2, [r7, #6]
 8006f00:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	88fa      	ldrh	r2, [r7, #6]
 8006f08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f14:	d108      	bne.n	8006f28 <HAL_UART_Transmit+0x80>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d104      	bne.n	8006f28 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	61bb      	str	r3, [r7, #24]
 8006f26:	e003      	b.n	8006f30 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006f38:	e02d      	b.n	8006f96 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	9300      	str	r3, [sp, #0]
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	2200      	movs	r2, #0
 8006f42:	2180      	movs	r1, #128	; 0x80
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f000 fba8 	bl	800769a <UART_WaitOnFlagUntilTimeout>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d001      	beq.n	8006f54 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e039      	b.n	8006fc8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10b      	bne.n	8006f72 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	881a      	ldrh	r2, [r3, #0]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f66:	b292      	uxth	r2, r2
 8006f68:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	3302      	adds	r3, #2
 8006f6e:	61bb      	str	r3, [r7, #24]
 8006f70:	e008      	b.n	8006f84 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	781a      	ldrb	r2, [r3, #0]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	b292      	uxth	r2, r2
 8006f7c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	3301      	adds	r3, #1
 8006f82:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1cb      	bne.n	8006f3a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	9300      	str	r3, [sp, #0]
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	2140      	movs	r1, #64	; 0x40
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f000 fb74 	bl	800769a <UART_WaitOnFlagUntilTimeout>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d001      	beq.n	8006fbc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	e005      	b.n	8006fc8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2220      	movs	r2, #32
 8006fc0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	e000      	b.n	8006fc8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006fc6:	2302      	movs	r3, #2
  }
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3720      	adds	r7, #32
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fe2:	2b20      	cmp	r3, #32
 8006fe4:	d131      	bne.n	800704a <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d002      	beq.n	8006ff2 <HAL_UART_Receive_DMA+0x22>
 8006fec:	88fb      	ldrh	r3, [r7, #6]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d101      	bne.n	8006ff6 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e02a      	b.n	800704c <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d101      	bne.n	8007004 <HAL_UART_Receive_DMA+0x34>
 8007000:	2302      	movs	r3, #2
 8007002:	e023      	b.n	800704c <HAL_UART_Receive_DMA+0x7c>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a0f      	ldr	r2, [pc, #60]	; (8007054 <HAL_UART_Receive_DMA+0x84>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d00e      	beq.n	800703a <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d007      	beq.n	800703a <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007038:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800703a:	88fb      	ldrh	r3, [r7, #6]
 800703c:	461a      	mov	r2, r3
 800703e:	68b9      	ldr	r1, [r7, #8]
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f000 fba7 	bl	8007794 <UART_Start_Receive_DMA>
 8007046:	4603      	mov	r3, r0
 8007048:	e000      	b.n	800704c <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 800704a:	2302      	movs	r3, #2
  }
}
 800704c:	4618      	mov	r0, r3
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	40008000 	.word	0x40008000

08007058 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007074:	bf00      	nop
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007088:	bf00      	nop
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	460b      	mov	r3, r1
 800709e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070ac:	b5b0      	push	{r4, r5, r7, lr}
 80070ae:	b088      	sub	sp, #32
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80070b4:	2300      	movs	r3, #0
 80070b6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	689a      	ldr	r2, [r3, #8]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	431a      	orrs	r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	431a      	orrs	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	69db      	ldr	r3, [r3, #28]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	4baf      	ldr	r3, [pc, #700]	; (8007394 <UART_SetConfig+0x2e8>)
 80070d8:	4013      	ands	r3, r2
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	6812      	ldr	r2, [r2, #0]
 80070de:	69f9      	ldr	r1, [r7, #28]
 80070e0:	430b      	orrs	r3, r1
 80070e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	68da      	ldr	r2, [r3, #12]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	430a      	orrs	r2, r1
 80070f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4aa4      	ldr	r2, [pc, #656]	; (8007398 <UART_SetConfig+0x2ec>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d004      	beq.n	8007114 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	69fa      	ldr	r2, [r7, #28]
 8007110:	4313      	orrs	r3, r2
 8007112:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	69fa      	ldr	r2, [r7, #28]
 8007124:	430a      	orrs	r2, r1
 8007126:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a9b      	ldr	r2, [pc, #620]	; (800739c <UART_SetConfig+0x2f0>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d121      	bne.n	8007176 <UART_SetConfig+0xca>
 8007132:	4b9b      	ldr	r3, [pc, #620]	; (80073a0 <UART_SetConfig+0x2f4>)
 8007134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007138:	f003 0303 	and.w	r3, r3, #3
 800713c:	2b03      	cmp	r3, #3
 800713e:	d817      	bhi.n	8007170 <UART_SetConfig+0xc4>
 8007140:	a201      	add	r2, pc, #4	; (adr r2, 8007148 <UART_SetConfig+0x9c>)
 8007142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007146:	bf00      	nop
 8007148:	08007159 	.word	0x08007159
 800714c:	08007165 	.word	0x08007165
 8007150:	0800715f 	.word	0x0800715f
 8007154:	0800716b 	.word	0x0800716b
 8007158:	2301      	movs	r3, #1
 800715a:	76fb      	strb	r3, [r7, #27]
 800715c:	e070      	b.n	8007240 <UART_SetConfig+0x194>
 800715e:	2302      	movs	r3, #2
 8007160:	76fb      	strb	r3, [r7, #27]
 8007162:	e06d      	b.n	8007240 <UART_SetConfig+0x194>
 8007164:	2304      	movs	r3, #4
 8007166:	76fb      	strb	r3, [r7, #27]
 8007168:	e06a      	b.n	8007240 <UART_SetConfig+0x194>
 800716a:	2308      	movs	r3, #8
 800716c:	76fb      	strb	r3, [r7, #27]
 800716e:	e067      	b.n	8007240 <UART_SetConfig+0x194>
 8007170:	2310      	movs	r3, #16
 8007172:	76fb      	strb	r3, [r7, #27]
 8007174:	e064      	b.n	8007240 <UART_SetConfig+0x194>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a8a      	ldr	r2, [pc, #552]	; (80073a4 <UART_SetConfig+0x2f8>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d132      	bne.n	80071e6 <UART_SetConfig+0x13a>
 8007180:	4b87      	ldr	r3, [pc, #540]	; (80073a0 <UART_SetConfig+0x2f4>)
 8007182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007186:	f003 030c 	and.w	r3, r3, #12
 800718a:	2b0c      	cmp	r3, #12
 800718c:	d828      	bhi.n	80071e0 <UART_SetConfig+0x134>
 800718e:	a201      	add	r2, pc, #4	; (adr r2, 8007194 <UART_SetConfig+0xe8>)
 8007190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007194:	080071c9 	.word	0x080071c9
 8007198:	080071e1 	.word	0x080071e1
 800719c:	080071e1 	.word	0x080071e1
 80071a0:	080071e1 	.word	0x080071e1
 80071a4:	080071d5 	.word	0x080071d5
 80071a8:	080071e1 	.word	0x080071e1
 80071ac:	080071e1 	.word	0x080071e1
 80071b0:	080071e1 	.word	0x080071e1
 80071b4:	080071cf 	.word	0x080071cf
 80071b8:	080071e1 	.word	0x080071e1
 80071bc:	080071e1 	.word	0x080071e1
 80071c0:	080071e1 	.word	0x080071e1
 80071c4:	080071db 	.word	0x080071db
 80071c8:	2300      	movs	r3, #0
 80071ca:	76fb      	strb	r3, [r7, #27]
 80071cc:	e038      	b.n	8007240 <UART_SetConfig+0x194>
 80071ce:	2302      	movs	r3, #2
 80071d0:	76fb      	strb	r3, [r7, #27]
 80071d2:	e035      	b.n	8007240 <UART_SetConfig+0x194>
 80071d4:	2304      	movs	r3, #4
 80071d6:	76fb      	strb	r3, [r7, #27]
 80071d8:	e032      	b.n	8007240 <UART_SetConfig+0x194>
 80071da:	2308      	movs	r3, #8
 80071dc:	76fb      	strb	r3, [r7, #27]
 80071de:	e02f      	b.n	8007240 <UART_SetConfig+0x194>
 80071e0:	2310      	movs	r3, #16
 80071e2:	76fb      	strb	r3, [r7, #27]
 80071e4:	e02c      	b.n	8007240 <UART_SetConfig+0x194>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a6b      	ldr	r2, [pc, #428]	; (8007398 <UART_SetConfig+0x2ec>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d125      	bne.n	800723c <UART_SetConfig+0x190>
 80071f0:	4b6b      	ldr	r3, [pc, #428]	; (80073a0 <UART_SetConfig+0x2f4>)
 80071f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071f6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80071fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071fe:	d017      	beq.n	8007230 <UART_SetConfig+0x184>
 8007200:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007204:	d817      	bhi.n	8007236 <UART_SetConfig+0x18a>
 8007206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800720a:	d00b      	beq.n	8007224 <UART_SetConfig+0x178>
 800720c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007210:	d811      	bhi.n	8007236 <UART_SetConfig+0x18a>
 8007212:	2b00      	cmp	r3, #0
 8007214:	d003      	beq.n	800721e <UART_SetConfig+0x172>
 8007216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800721a:	d006      	beq.n	800722a <UART_SetConfig+0x17e>
 800721c:	e00b      	b.n	8007236 <UART_SetConfig+0x18a>
 800721e:	2300      	movs	r3, #0
 8007220:	76fb      	strb	r3, [r7, #27]
 8007222:	e00d      	b.n	8007240 <UART_SetConfig+0x194>
 8007224:	2302      	movs	r3, #2
 8007226:	76fb      	strb	r3, [r7, #27]
 8007228:	e00a      	b.n	8007240 <UART_SetConfig+0x194>
 800722a:	2304      	movs	r3, #4
 800722c:	76fb      	strb	r3, [r7, #27]
 800722e:	e007      	b.n	8007240 <UART_SetConfig+0x194>
 8007230:	2308      	movs	r3, #8
 8007232:	76fb      	strb	r3, [r7, #27]
 8007234:	e004      	b.n	8007240 <UART_SetConfig+0x194>
 8007236:	2310      	movs	r3, #16
 8007238:	76fb      	strb	r3, [r7, #27]
 800723a:	e001      	b.n	8007240 <UART_SetConfig+0x194>
 800723c:	2310      	movs	r3, #16
 800723e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a54      	ldr	r2, [pc, #336]	; (8007398 <UART_SetConfig+0x2ec>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d173      	bne.n	8007332 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800724a:	7efb      	ldrb	r3, [r7, #27]
 800724c:	2b08      	cmp	r3, #8
 800724e:	d824      	bhi.n	800729a <UART_SetConfig+0x1ee>
 8007250:	a201      	add	r2, pc, #4	; (adr r2, 8007258 <UART_SetConfig+0x1ac>)
 8007252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007256:	bf00      	nop
 8007258:	0800727d 	.word	0x0800727d
 800725c:	0800729b 	.word	0x0800729b
 8007260:	08007285 	.word	0x08007285
 8007264:	0800729b 	.word	0x0800729b
 8007268:	0800728b 	.word	0x0800728b
 800726c:	0800729b 	.word	0x0800729b
 8007270:	0800729b 	.word	0x0800729b
 8007274:	0800729b 	.word	0x0800729b
 8007278:	08007293 	.word	0x08007293
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800727c:	f7fe fa44 	bl	8005708 <HAL_RCC_GetPCLK1Freq>
 8007280:	6178      	str	r0, [r7, #20]
        break;
 8007282:	e00f      	b.n	80072a4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007284:	4b48      	ldr	r3, [pc, #288]	; (80073a8 <UART_SetConfig+0x2fc>)
 8007286:	617b      	str	r3, [r7, #20]
        break;
 8007288:	e00c      	b.n	80072a4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800728a:	f7fe f9a5 	bl	80055d8 <HAL_RCC_GetSysClockFreq>
 800728e:	6178      	str	r0, [r7, #20]
        break;
 8007290:	e008      	b.n	80072a4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007296:	617b      	str	r3, [r7, #20]
        break;
 8007298:	e004      	b.n	80072a4 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 800729a:	2300      	movs	r3, #0
 800729c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	76bb      	strb	r3, [r7, #26]
        break;
 80072a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f000 80fe 	beq.w	80074a8 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	4613      	mov	r3, r2
 80072b2:	005b      	lsls	r3, r3, #1
 80072b4:	4413      	add	r3, r2
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d305      	bcc.n	80072c8 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80072c2:	697a      	ldr	r2, [r7, #20]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d902      	bls.n	80072ce <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	76bb      	strb	r3, [r7, #26]
 80072cc:	e0ec      	b.n	80074a8 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	4618      	mov	r0, r3
 80072d2:	f04f 0100 	mov.w	r1, #0
 80072d6:	f04f 0200 	mov.w	r2, #0
 80072da:	f04f 0300 	mov.w	r3, #0
 80072de:	020b      	lsls	r3, r1, #8
 80072e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80072e4:	0202      	lsls	r2, r0, #8
 80072e6:	6879      	ldr	r1, [r7, #4]
 80072e8:	6849      	ldr	r1, [r1, #4]
 80072ea:	0849      	lsrs	r1, r1, #1
 80072ec:	4608      	mov	r0, r1
 80072ee:	f04f 0100 	mov.w	r1, #0
 80072f2:	1814      	adds	r4, r2, r0
 80072f4:	eb43 0501 	adc.w	r5, r3, r1
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	461a      	mov	r2, r3
 80072fe:	f04f 0300 	mov.w	r3, #0
 8007302:	4620      	mov	r0, r4
 8007304:	4629      	mov	r1, r5
 8007306:	f7f9 fc31 	bl	8000b6c <__aeabi_uldivmod>
 800730a:	4602      	mov	r2, r0
 800730c:	460b      	mov	r3, r1
 800730e:	4613      	mov	r3, r2
 8007310:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007318:	d308      	bcc.n	800732c <UART_SetConfig+0x280>
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007320:	d204      	bcs.n	800732c <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	60da      	str	r2, [r3, #12]
 800732a:	e0bd      	b.n	80074a8 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	76bb      	strb	r3, [r7, #26]
 8007330:	e0ba      	b.n	80074a8 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	69db      	ldr	r3, [r3, #28]
 8007336:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800733a:	d168      	bne.n	800740e <UART_SetConfig+0x362>
  {
    switch (clocksource)
 800733c:	7efb      	ldrb	r3, [r7, #27]
 800733e:	2b08      	cmp	r3, #8
 8007340:	d834      	bhi.n	80073ac <UART_SetConfig+0x300>
 8007342:	a201      	add	r2, pc, #4	; (adr r2, 8007348 <UART_SetConfig+0x29c>)
 8007344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007348:	0800736d 	.word	0x0800736d
 800734c:	08007375 	.word	0x08007375
 8007350:	0800737d 	.word	0x0800737d
 8007354:	080073ad 	.word	0x080073ad
 8007358:	08007383 	.word	0x08007383
 800735c:	080073ad 	.word	0x080073ad
 8007360:	080073ad 	.word	0x080073ad
 8007364:	080073ad 	.word	0x080073ad
 8007368:	0800738b 	.word	0x0800738b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800736c:	f7fe f9cc 	bl	8005708 <HAL_RCC_GetPCLK1Freq>
 8007370:	6178      	str	r0, [r7, #20]
        break;
 8007372:	e020      	b.n	80073b6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007374:	f7fe f9de 	bl	8005734 <HAL_RCC_GetPCLK2Freq>
 8007378:	6178      	str	r0, [r7, #20]
        break;
 800737a:	e01c      	b.n	80073b6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800737c:	4b0a      	ldr	r3, [pc, #40]	; (80073a8 <UART_SetConfig+0x2fc>)
 800737e:	617b      	str	r3, [r7, #20]
        break;
 8007380:	e019      	b.n	80073b6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007382:	f7fe f929 	bl	80055d8 <HAL_RCC_GetSysClockFreq>
 8007386:	6178      	str	r0, [r7, #20]
        break;
 8007388:	e015      	b.n	80073b6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800738a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800738e:	617b      	str	r3, [r7, #20]
        break;
 8007390:	e011      	b.n	80073b6 <UART_SetConfig+0x30a>
 8007392:	bf00      	nop
 8007394:	efff69f3 	.word	0xefff69f3
 8007398:	40008000 	.word	0x40008000
 800739c:	40013800 	.word	0x40013800
 80073a0:	40021000 	.word	0x40021000
 80073a4:	40004400 	.word	0x40004400
 80073a8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80073ac:	2300      	movs	r3, #0
 80073ae:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	76bb      	strb	r3, [r7, #26]
        break;
 80073b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d075      	beq.n	80074a8 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	005a      	lsls	r2, r3, #1
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	085b      	lsrs	r3, r3, #1
 80073c6:	441a      	add	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	2b0f      	cmp	r3, #15
 80073d8:	d916      	bls.n	8007408 <UART_SetConfig+0x35c>
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073e0:	d212      	bcs.n	8007408 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	f023 030f 	bic.w	r3, r3, #15
 80073ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	085b      	lsrs	r3, r3, #1
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	f003 0307 	and.w	r3, r3, #7
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	89fb      	ldrh	r3, [r7, #14]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	89fa      	ldrh	r2, [r7, #14]
 8007404:	60da      	str	r2, [r3, #12]
 8007406:	e04f      	b.n	80074a8 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	76bb      	strb	r3, [r7, #26]
 800740c:	e04c      	b.n	80074a8 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800740e:	7efb      	ldrb	r3, [r7, #27]
 8007410:	2b08      	cmp	r3, #8
 8007412:	d828      	bhi.n	8007466 <UART_SetConfig+0x3ba>
 8007414:	a201      	add	r2, pc, #4	; (adr r2, 800741c <UART_SetConfig+0x370>)
 8007416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741a:	bf00      	nop
 800741c:	08007441 	.word	0x08007441
 8007420:	08007449 	.word	0x08007449
 8007424:	08007451 	.word	0x08007451
 8007428:	08007467 	.word	0x08007467
 800742c:	08007457 	.word	0x08007457
 8007430:	08007467 	.word	0x08007467
 8007434:	08007467 	.word	0x08007467
 8007438:	08007467 	.word	0x08007467
 800743c:	0800745f 	.word	0x0800745f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007440:	f7fe f962 	bl	8005708 <HAL_RCC_GetPCLK1Freq>
 8007444:	6178      	str	r0, [r7, #20]
        break;
 8007446:	e013      	b.n	8007470 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007448:	f7fe f974 	bl	8005734 <HAL_RCC_GetPCLK2Freq>
 800744c:	6178      	str	r0, [r7, #20]
        break;
 800744e:	e00f      	b.n	8007470 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007450:	4b1b      	ldr	r3, [pc, #108]	; (80074c0 <UART_SetConfig+0x414>)
 8007452:	617b      	str	r3, [r7, #20]
        break;
 8007454:	e00c      	b.n	8007470 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007456:	f7fe f8bf 	bl	80055d8 <HAL_RCC_GetSysClockFreq>
 800745a:	6178      	str	r0, [r7, #20]
        break;
 800745c:	e008      	b.n	8007470 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800745e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007462:	617b      	str	r3, [r7, #20]
        break;
 8007464:	e004      	b.n	8007470 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8007466:	2300      	movs	r3, #0
 8007468:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	76bb      	strb	r3, [r7, #26]
        break;
 800746e:	bf00      	nop
    }

    if (pclk != 0U)
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d018      	beq.n	80074a8 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	085a      	lsrs	r2, r3, #1
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	441a      	add	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	fbb2 f3f3 	udiv	r3, r2, r3
 8007488:	b29b      	uxth	r3, r3
 800748a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	2b0f      	cmp	r3, #15
 8007490:	d908      	bls.n	80074a4 <UART_SetConfig+0x3f8>
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007498:	d204      	bcs.n	80074a4 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	60da      	str	r2, [r3, #12]
 80074a2:	e001      	b.n	80074a8 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80074b4:	7ebb      	ldrb	r3, [r7, #26]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3720      	adds	r7, #32
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bdb0      	pop	{r4, r5, r7, pc}
 80074be:	bf00      	nop
 80074c0:	00f42400 	.word	0x00f42400

080074c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d0:	f003 0301 	and.w	r3, r3, #1
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00a      	beq.n	80074ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	430a      	orrs	r2, r1
 80074ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f2:	f003 0302 	and.w	r3, r3, #2
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00a      	beq.n	8007510 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	430a      	orrs	r2, r1
 800750e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007514:	f003 0304 	and.w	r3, r3, #4
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00a      	beq.n	8007532 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	430a      	orrs	r2, r1
 8007530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007536:	f003 0308 	and.w	r3, r3, #8
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00a      	beq.n	8007554 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	430a      	orrs	r2, r1
 8007552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007558:	f003 0310 	and.w	r3, r3, #16
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00a      	beq.n	8007576 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	430a      	orrs	r2, r1
 8007574:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757a:	f003 0320 	and.w	r3, r3, #32
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00a      	beq.n	8007598 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	430a      	orrs	r2, r1
 8007596:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d01a      	beq.n	80075da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	430a      	orrs	r2, r1
 80075b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075c2:	d10a      	bne.n	80075da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	430a      	orrs	r2, r1
 80075d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00a      	beq.n	80075fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	430a      	orrs	r2, r1
 80075fa:	605a      	str	r2, [r3, #4]
  }
}
 80075fc:	bf00      	nop
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	af02      	add	r7, sp, #8
 800760e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007618:	f7fb fc40 	bl	8002e9c <HAL_GetTick>
 800761c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0308 	and.w	r3, r3, #8
 8007628:	2b08      	cmp	r3, #8
 800762a:	d10e      	bne.n	800764a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800762c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007630:	9300      	str	r3, [sp, #0]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f82d 	bl	800769a <UART_WaitOnFlagUntilTimeout>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d001      	beq.n	800764a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e023      	b.n	8007692 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 0304 	and.w	r3, r3, #4
 8007654:	2b04      	cmp	r3, #4
 8007656:	d10e      	bne.n	8007676 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007658:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800765c:	9300      	str	r3, [sp, #0]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 f817 	bl	800769a <UART_WaitOnFlagUntilTimeout>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d001      	beq.n	8007676 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e00d      	b.n	8007692 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2220      	movs	r2, #32
 800767a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2220      	movs	r2, #32
 8007680:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b084      	sub	sp, #16
 800769e:	af00      	add	r7, sp, #0
 80076a0:	60f8      	str	r0, [r7, #12]
 80076a2:	60b9      	str	r1, [r7, #8]
 80076a4:	603b      	str	r3, [r7, #0]
 80076a6:	4613      	mov	r3, r2
 80076a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076aa:	e05e      	b.n	800776a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076b2:	d05a      	beq.n	800776a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076b4:	f7fb fbf2 	bl	8002e9c <HAL_GetTick>
 80076b8:	4602      	mov	r2, r0
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	69ba      	ldr	r2, [r7, #24]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d302      	bcc.n	80076ca <UART_WaitOnFlagUntilTimeout+0x30>
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d11b      	bne.n	8007702 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80076d8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	689a      	ldr	r2, [r3, #8]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f022 0201 	bic.w	r2, r2, #1
 80076e8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2220      	movs	r2, #32
 80076ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2220      	movs	r2, #32
 80076f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80076fe:	2303      	movs	r3, #3
 8007700:	e043      	b.n	800778a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 0304 	and.w	r3, r3, #4
 800770c:	2b00      	cmp	r3, #0
 800770e:	d02c      	beq.n	800776a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	69db      	ldr	r3, [r3, #28]
 8007716:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800771a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800771e:	d124      	bne.n	800776a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007728:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007738:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	689a      	ldr	r2, [r3, #8]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f022 0201 	bic.w	r2, r2, #1
 8007748:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2220      	movs	r2, #32
 800774e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2220      	movs	r2, #32
 8007754:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2220      	movs	r2, #32
 800775a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2200      	movs	r2, #0
 8007762:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e00f      	b.n	800778a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	69da      	ldr	r2, [r3, #28]
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	4013      	ands	r3, r2
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	429a      	cmp	r2, r3
 8007778:	bf0c      	ite	eq
 800777a:	2301      	moveq	r3, #1
 800777c:	2300      	movne	r3, #0
 800777e:	b2db      	uxtb	r3, r3
 8007780:	461a      	mov	r2, r3
 8007782:	79fb      	ldrb	r3, [r7, #7]
 8007784:	429a      	cmp	r2, r3
 8007786:	d091      	beq.n	80076ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
	...

08007794 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	4613      	mov	r3, r2
 80077a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	68ba      	ldr	r2, [r7, #8]
 80077a6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	88fa      	ldrh	r2, [r7, #6]
 80077ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2222      	movs	r2, #34	; 0x22
 80077bc:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d02b      	beq.n	800781e <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ca:	4a25      	ldr	r2, [pc, #148]	; (8007860 <UART_Start_Receive_DMA+0xcc>)
 80077cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077d2:	4a24      	ldr	r2, [pc, #144]	; (8007864 <UART_Start_Receive_DMA+0xd0>)
 80077d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077da:	4a23      	ldr	r2, [pc, #140]	; (8007868 <UART_Start_Receive_DMA+0xd4>)
 80077dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077e2:	2200      	movs	r2, #0
 80077e4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	3324      	adds	r3, #36	; 0x24
 80077f0:	4619      	mov	r1, r3
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077f6:	461a      	mov	r2, r3
 80077f8:	88fb      	ldrh	r3, [r7, #6]
 80077fa:	f7fc fe89 	bl	8004510 <HAL_DMA_Start_IT>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00c      	beq.n	800781e <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2210      	movs	r2, #16
 8007808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2220      	movs	r2, #32
 8007818:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e01c      	b.n	8007858 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007834:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	689a      	ldr	r2, [r3, #8]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f042 0201 	orr.w	r2, r2, #1
 8007844:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	689a      	ldr	r2, [r3, #8]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007854:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	080078f5 	.word	0x080078f5
 8007864:	0800798d 	.word	0x0800798d
 8007868:	080079c5 	.word	0x080079c5

0800786c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007882:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2220      	movs	r2, #32
 8007888:	679a      	str	r2, [r3, #120]	; 0x78
}
 800788a:	bf00      	nop
 800788c:	370c      	adds	r7, #12
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr

08007896 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007896:	b480      	push	{r7}
 8007898:	b083      	sub	sp, #12
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80078ac:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	689a      	ldr	r2, [r3, #8]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f022 0201 	bic.w	r2, r2, #1
 80078bc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d107      	bne.n	80078d6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f022 0210 	bic.w	r2, r2, #16
 80078d4:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2220      	movs	r2, #32
 80078da:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80078e8:	bf00      	nop
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007900:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 0320 	and.w	r3, r3, #32
 800790c:	2b00      	cmp	r3, #0
 800790e:	d12a      	bne.n	8007966 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007926:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689a      	ldr	r2, [r3, #8]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f022 0201 	bic.w	r2, r2, #1
 8007936:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	689a      	ldr	r2, [r3, #8]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007946:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2220      	movs	r2, #32
 800794c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007952:	2b01      	cmp	r3, #1
 8007954:	d107      	bne.n	8007966 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f022 0210 	bic.w	r2, r2, #16
 8007964:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800796a:	2b01      	cmp	r3, #1
 800796c:	d107      	bne.n	800797e <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007974:	4619      	mov	r1, r3
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f7ff fb8c 	bl	8007094 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800797c:	e002      	b.n	8007984 <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	f7ff fb6a 	bl	8007058 <HAL_UART_RxCpltCallback>
}
 8007984:	bf00      	nop
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007998:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d109      	bne.n	80079b6 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80079a8:	085b      	lsrs	r3, r3, #1
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	4619      	mov	r1, r3
 80079ae:	68f8      	ldr	r0, [r7, #12]
 80079b0:	f7ff fb70 	bl	8007094 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80079b4:	e002      	b.n	80079bc <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f7ff fb58 	bl	800706c <HAL_UART_RxHalfCpltCallback>
}
 80079bc:	bf00      	nop
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b086      	sub	sp, #24
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079d6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079dc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e8:	2b80      	cmp	r3, #128	; 0x80
 80079ea:	d109      	bne.n	8007a00 <UART_DMAError+0x3c>
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	2b21      	cmp	r3, #33	; 0x21
 80079f0:	d106      	bne.n	8007a00 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80079fa:	6978      	ldr	r0, [r7, #20]
 80079fc:	f7ff ff36 	bl	800786c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a0a:	2b40      	cmp	r3, #64	; 0x40
 8007a0c:	d109      	bne.n	8007a22 <UART_DMAError+0x5e>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2b22      	cmp	r3, #34	; 0x22
 8007a12:	d106      	bne.n	8007a22 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007a1c:	6978      	ldr	r0, [r7, #20]
 8007a1e:	f7ff ff3a 	bl	8007896 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a28:	f043 0210 	orr.w	r2, r3, #16
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a32:	6978      	ldr	r0, [r7, #20]
 8007a34:	f7ff fb24 	bl	8007080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a38:	bf00      	nop
 8007a3a:	3718      	adds	r7, #24
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <__libc_init_array>:
 8007a40:	b570      	push	{r4, r5, r6, lr}
 8007a42:	4d0d      	ldr	r5, [pc, #52]	; (8007a78 <__libc_init_array+0x38>)
 8007a44:	4c0d      	ldr	r4, [pc, #52]	; (8007a7c <__libc_init_array+0x3c>)
 8007a46:	1b64      	subs	r4, r4, r5
 8007a48:	10a4      	asrs	r4, r4, #2
 8007a4a:	2600      	movs	r6, #0
 8007a4c:	42a6      	cmp	r6, r4
 8007a4e:	d109      	bne.n	8007a64 <__libc_init_array+0x24>
 8007a50:	4d0b      	ldr	r5, [pc, #44]	; (8007a80 <__libc_init_array+0x40>)
 8007a52:	4c0c      	ldr	r4, [pc, #48]	; (8007a84 <__libc_init_array+0x44>)
 8007a54:	f001 f8b6 	bl	8008bc4 <_init>
 8007a58:	1b64      	subs	r4, r4, r5
 8007a5a:	10a4      	asrs	r4, r4, #2
 8007a5c:	2600      	movs	r6, #0
 8007a5e:	42a6      	cmp	r6, r4
 8007a60:	d105      	bne.n	8007a6e <__libc_init_array+0x2e>
 8007a62:	bd70      	pop	{r4, r5, r6, pc}
 8007a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a68:	4798      	blx	r3
 8007a6a:	3601      	adds	r6, #1
 8007a6c:	e7ee      	b.n	8007a4c <__libc_init_array+0xc>
 8007a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a72:	4798      	blx	r3
 8007a74:	3601      	adds	r6, #1
 8007a76:	e7f2      	b.n	8007a5e <__libc_init_array+0x1e>
 8007a78:	08008e08 	.word	0x08008e08
 8007a7c:	08008e08 	.word	0x08008e08
 8007a80:	08008e08 	.word	0x08008e08
 8007a84:	08008e0c 	.word	0x08008e0c

08007a88 <memcpy>:
 8007a88:	440a      	add	r2, r1
 8007a8a:	4291      	cmp	r1, r2
 8007a8c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007a90:	d100      	bne.n	8007a94 <memcpy+0xc>
 8007a92:	4770      	bx	lr
 8007a94:	b510      	push	{r4, lr}
 8007a96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a9e:	4291      	cmp	r1, r2
 8007aa0:	d1f9      	bne.n	8007a96 <memcpy+0xe>
 8007aa2:	bd10      	pop	{r4, pc}

08007aa4 <memset>:
 8007aa4:	4402      	add	r2, r0
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d100      	bne.n	8007aae <memset+0xa>
 8007aac:	4770      	bx	lr
 8007aae:	f803 1b01 	strb.w	r1, [r3], #1
 8007ab2:	e7f9      	b.n	8007aa8 <memset+0x4>
 8007ab4:	0000      	movs	r0, r0
	...

08007ab8 <cos>:
 8007ab8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007aba:	ec53 2b10 	vmov	r2, r3, d0
 8007abe:	4824      	ldr	r0, [pc, #144]	; (8007b50 <cos+0x98>)
 8007ac0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007ac4:	4281      	cmp	r1, r0
 8007ac6:	dc06      	bgt.n	8007ad6 <cos+0x1e>
 8007ac8:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8007b48 <cos+0x90>
 8007acc:	f000 faa4 	bl	8008018 <__kernel_cos>
 8007ad0:	ec51 0b10 	vmov	r0, r1, d0
 8007ad4:	e007      	b.n	8007ae6 <cos+0x2e>
 8007ad6:	481f      	ldr	r0, [pc, #124]	; (8007b54 <cos+0x9c>)
 8007ad8:	4281      	cmp	r1, r0
 8007ada:	dd09      	ble.n	8007af0 <cos+0x38>
 8007adc:	ee10 0a10 	vmov	r0, s0
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	f7f8 fb79 	bl	80001d8 <__aeabi_dsub>
 8007ae6:	ec41 0b10 	vmov	d0, r0, r1
 8007aea:	b005      	add	sp, #20
 8007aec:	f85d fb04 	ldr.w	pc, [sp], #4
 8007af0:	4668      	mov	r0, sp
 8007af2:	f000 f885 	bl	8007c00 <__ieee754_rem_pio2>
 8007af6:	f000 0003 	and.w	r0, r0, #3
 8007afa:	2801      	cmp	r0, #1
 8007afc:	d007      	beq.n	8007b0e <cos+0x56>
 8007afe:	2802      	cmp	r0, #2
 8007b00:	d012      	beq.n	8007b28 <cos+0x70>
 8007b02:	b9c0      	cbnz	r0, 8007b36 <cos+0x7e>
 8007b04:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007b08:	ed9d 0b00 	vldr	d0, [sp]
 8007b0c:	e7de      	b.n	8007acc <cos+0x14>
 8007b0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007b12:	ed9d 0b00 	vldr	d0, [sp]
 8007b16:	f000 fe87 	bl	8008828 <__kernel_sin>
 8007b1a:	ec53 2b10 	vmov	r2, r3, d0
 8007b1e:	ee10 0a10 	vmov	r0, s0
 8007b22:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007b26:	e7de      	b.n	8007ae6 <cos+0x2e>
 8007b28:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007b2c:	ed9d 0b00 	vldr	d0, [sp]
 8007b30:	f000 fa72 	bl	8008018 <__kernel_cos>
 8007b34:	e7f1      	b.n	8007b1a <cos+0x62>
 8007b36:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007b3a:	ed9d 0b00 	vldr	d0, [sp]
 8007b3e:	2001      	movs	r0, #1
 8007b40:	f000 fe72 	bl	8008828 <__kernel_sin>
 8007b44:	e7c4      	b.n	8007ad0 <cos+0x18>
 8007b46:	bf00      	nop
	...
 8007b50:	3fe921fb 	.word	0x3fe921fb
 8007b54:	7fefffff 	.word	0x7fefffff

08007b58 <sin>:
 8007b58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b5a:	ec53 2b10 	vmov	r2, r3, d0
 8007b5e:	4826      	ldr	r0, [pc, #152]	; (8007bf8 <sin+0xa0>)
 8007b60:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007b64:	4281      	cmp	r1, r0
 8007b66:	dc07      	bgt.n	8007b78 <sin+0x20>
 8007b68:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007bf0 <sin+0x98>
 8007b6c:	2000      	movs	r0, #0
 8007b6e:	f000 fe5b 	bl	8008828 <__kernel_sin>
 8007b72:	ec51 0b10 	vmov	r0, r1, d0
 8007b76:	e007      	b.n	8007b88 <sin+0x30>
 8007b78:	4820      	ldr	r0, [pc, #128]	; (8007bfc <sin+0xa4>)
 8007b7a:	4281      	cmp	r1, r0
 8007b7c:	dd09      	ble.n	8007b92 <sin+0x3a>
 8007b7e:	ee10 0a10 	vmov	r0, s0
 8007b82:	4619      	mov	r1, r3
 8007b84:	f7f8 fb28 	bl	80001d8 <__aeabi_dsub>
 8007b88:	ec41 0b10 	vmov	d0, r0, r1
 8007b8c:	b005      	add	sp, #20
 8007b8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b92:	4668      	mov	r0, sp
 8007b94:	f000 f834 	bl	8007c00 <__ieee754_rem_pio2>
 8007b98:	f000 0003 	and.w	r0, r0, #3
 8007b9c:	2801      	cmp	r0, #1
 8007b9e:	d008      	beq.n	8007bb2 <sin+0x5a>
 8007ba0:	2802      	cmp	r0, #2
 8007ba2:	d00d      	beq.n	8007bc0 <sin+0x68>
 8007ba4:	b9d0      	cbnz	r0, 8007bdc <sin+0x84>
 8007ba6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007baa:	ed9d 0b00 	vldr	d0, [sp]
 8007bae:	2001      	movs	r0, #1
 8007bb0:	e7dd      	b.n	8007b6e <sin+0x16>
 8007bb2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007bb6:	ed9d 0b00 	vldr	d0, [sp]
 8007bba:	f000 fa2d 	bl	8008018 <__kernel_cos>
 8007bbe:	e7d8      	b.n	8007b72 <sin+0x1a>
 8007bc0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007bc4:	ed9d 0b00 	vldr	d0, [sp]
 8007bc8:	2001      	movs	r0, #1
 8007bca:	f000 fe2d 	bl	8008828 <__kernel_sin>
 8007bce:	ec53 2b10 	vmov	r2, r3, d0
 8007bd2:	ee10 0a10 	vmov	r0, s0
 8007bd6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007bda:	e7d5      	b.n	8007b88 <sin+0x30>
 8007bdc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007be0:	ed9d 0b00 	vldr	d0, [sp]
 8007be4:	f000 fa18 	bl	8008018 <__kernel_cos>
 8007be8:	e7f1      	b.n	8007bce <sin+0x76>
 8007bea:	bf00      	nop
 8007bec:	f3af 8000 	nop.w
	...
 8007bf8:	3fe921fb 	.word	0x3fe921fb
 8007bfc:	7fefffff 	.word	0x7fefffff

08007c00 <__ieee754_rem_pio2>:
 8007c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c04:	ed2d 8b02 	vpush	{d8}
 8007c08:	ec55 4b10 	vmov	r4, r5, d0
 8007c0c:	4bca      	ldr	r3, [pc, #808]	; (8007f38 <__ieee754_rem_pio2+0x338>)
 8007c0e:	b08b      	sub	sp, #44	; 0x2c
 8007c10:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007c14:	4598      	cmp	r8, r3
 8007c16:	4682      	mov	sl, r0
 8007c18:	9502      	str	r5, [sp, #8]
 8007c1a:	dc08      	bgt.n	8007c2e <__ieee754_rem_pio2+0x2e>
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	2300      	movs	r3, #0
 8007c20:	ed80 0b00 	vstr	d0, [r0]
 8007c24:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007c28:	f04f 0b00 	mov.w	fp, #0
 8007c2c:	e028      	b.n	8007c80 <__ieee754_rem_pio2+0x80>
 8007c2e:	4bc3      	ldr	r3, [pc, #780]	; (8007f3c <__ieee754_rem_pio2+0x33c>)
 8007c30:	4598      	cmp	r8, r3
 8007c32:	dc78      	bgt.n	8007d26 <__ieee754_rem_pio2+0x126>
 8007c34:	9b02      	ldr	r3, [sp, #8]
 8007c36:	4ec2      	ldr	r6, [pc, #776]	; (8007f40 <__ieee754_rem_pio2+0x340>)
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	ee10 0a10 	vmov	r0, s0
 8007c3e:	a3b0      	add	r3, pc, #704	; (adr r3, 8007f00 <__ieee754_rem_pio2+0x300>)
 8007c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c44:	4629      	mov	r1, r5
 8007c46:	dd39      	ble.n	8007cbc <__ieee754_rem_pio2+0xbc>
 8007c48:	f7f8 fac6 	bl	80001d8 <__aeabi_dsub>
 8007c4c:	45b0      	cmp	r8, r6
 8007c4e:	4604      	mov	r4, r0
 8007c50:	460d      	mov	r5, r1
 8007c52:	d01b      	beq.n	8007c8c <__ieee754_rem_pio2+0x8c>
 8007c54:	a3ac      	add	r3, pc, #688	; (adr r3, 8007f08 <__ieee754_rem_pio2+0x308>)
 8007c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5a:	f7f8 fabd 	bl	80001d8 <__aeabi_dsub>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	460b      	mov	r3, r1
 8007c62:	e9ca 2300 	strd	r2, r3, [sl]
 8007c66:	4620      	mov	r0, r4
 8007c68:	4629      	mov	r1, r5
 8007c6a:	f7f8 fab5 	bl	80001d8 <__aeabi_dsub>
 8007c6e:	a3a6      	add	r3, pc, #664	; (adr r3, 8007f08 <__ieee754_rem_pio2+0x308>)
 8007c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c74:	f7f8 fab0 	bl	80001d8 <__aeabi_dsub>
 8007c78:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007c7c:	f04f 0b01 	mov.w	fp, #1
 8007c80:	4658      	mov	r0, fp
 8007c82:	b00b      	add	sp, #44	; 0x2c
 8007c84:	ecbd 8b02 	vpop	{d8}
 8007c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c8c:	a3a0      	add	r3, pc, #640	; (adr r3, 8007f10 <__ieee754_rem_pio2+0x310>)
 8007c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c92:	f7f8 faa1 	bl	80001d8 <__aeabi_dsub>
 8007c96:	a3a0      	add	r3, pc, #640	; (adr r3, 8007f18 <__ieee754_rem_pio2+0x318>)
 8007c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9c:	4604      	mov	r4, r0
 8007c9e:	460d      	mov	r5, r1
 8007ca0:	f7f8 fa9a 	bl	80001d8 <__aeabi_dsub>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	e9ca 2300 	strd	r2, r3, [sl]
 8007cac:	4620      	mov	r0, r4
 8007cae:	4629      	mov	r1, r5
 8007cb0:	f7f8 fa92 	bl	80001d8 <__aeabi_dsub>
 8007cb4:	a398      	add	r3, pc, #608	; (adr r3, 8007f18 <__ieee754_rem_pio2+0x318>)
 8007cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cba:	e7db      	b.n	8007c74 <__ieee754_rem_pio2+0x74>
 8007cbc:	f7f8 fa8e 	bl	80001dc <__adddf3>
 8007cc0:	45b0      	cmp	r8, r6
 8007cc2:	4604      	mov	r4, r0
 8007cc4:	460d      	mov	r5, r1
 8007cc6:	d016      	beq.n	8007cf6 <__ieee754_rem_pio2+0xf6>
 8007cc8:	a38f      	add	r3, pc, #572	; (adr r3, 8007f08 <__ieee754_rem_pio2+0x308>)
 8007cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cce:	f7f8 fa85 	bl	80001dc <__adddf3>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	e9ca 2300 	strd	r2, r3, [sl]
 8007cda:	4620      	mov	r0, r4
 8007cdc:	4629      	mov	r1, r5
 8007cde:	f7f8 fa7b 	bl	80001d8 <__aeabi_dsub>
 8007ce2:	a389      	add	r3, pc, #548	; (adr r3, 8007f08 <__ieee754_rem_pio2+0x308>)
 8007ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce8:	f7f8 fa78 	bl	80001dc <__adddf3>
 8007cec:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8007cf0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007cf4:	e7c4      	b.n	8007c80 <__ieee754_rem_pio2+0x80>
 8007cf6:	a386      	add	r3, pc, #536	; (adr r3, 8007f10 <__ieee754_rem_pio2+0x310>)
 8007cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfc:	f7f8 fa6e 	bl	80001dc <__adddf3>
 8007d00:	a385      	add	r3, pc, #532	; (adr r3, 8007f18 <__ieee754_rem_pio2+0x318>)
 8007d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d06:	4604      	mov	r4, r0
 8007d08:	460d      	mov	r5, r1
 8007d0a:	f7f8 fa67 	bl	80001dc <__adddf3>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	460b      	mov	r3, r1
 8007d12:	e9ca 2300 	strd	r2, r3, [sl]
 8007d16:	4620      	mov	r0, r4
 8007d18:	4629      	mov	r1, r5
 8007d1a:	f7f8 fa5d 	bl	80001d8 <__aeabi_dsub>
 8007d1e:	a37e      	add	r3, pc, #504	; (adr r3, 8007f18 <__ieee754_rem_pio2+0x318>)
 8007d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d24:	e7e0      	b.n	8007ce8 <__ieee754_rem_pio2+0xe8>
 8007d26:	4b87      	ldr	r3, [pc, #540]	; (8007f44 <__ieee754_rem_pio2+0x344>)
 8007d28:	4598      	cmp	r8, r3
 8007d2a:	f300 80d9 	bgt.w	8007ee0 <__ieee754_rem_pio2+0x2e0>
 8007d2e:	f000 fe39 	bl	80089a4 <fabs>
 8007d32:	ec55 4b10 	vmov	r4, r5, d0
 8007d36:	ee10 0a10 	vmov	r0, s0
 8007d3a:	a379      	add	r3, pc, #484	; (adr r3, 8007f20 <__ieee754_rem_pio2+0x320>)
 8007d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d40:	4629      	mov	r1, r5
 8007d42:	f7f8 fc01 	bl	8000548 <__aeabi_dmul>
 8007d46:	4b80      	ldr	r3, [pc, #512]	; (8007f48 <__ieee754_rem_pio2+0x348>)
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f7f8 fa47 	bl	80001dc <__adddf3>
 8007d4e:	f7f8 fe95 	bl	8000a7c <__aeabi_d2iz>
 8007d52:	4683      	mov	fp, r0
 8007d54:	f7f8 fb8e 	bl	8000474 <__aeabi_i2d>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	ec43 2b18 	vmov	d8, r2, r3
 8007d60:	a367      	add	r3, pc, #412	; (adr r3, 8007f00 <__ieee754_rem_pio2+0x300>)
 8007d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d66:	f7f8 fbef 	bl	8000548 <__aeabi_dmul>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	4620      	mov	r0, r4
 8007d70:	4629      	mov	r1, r5
 8007d72:	f7f8 fa31 	bl	80001d8 <__aeabi_dsub>
 8007d76:	a364      	add	r3, pc, #400	; (adr r3, 8007f08 <__ieee754_rem_pio2+0x308>)
 8007d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7c:	4606      	mov	r6, r0
 8007d7e:	460f      	mov	r7, r1
 8007d80:	ec51 0b18 	vmov	r0, r1, d8
 8007d84:	f7f8 fbe0 	bl	8000548 <__aeabi_dmul>
 8007d88:	f1bb 0f1f 	cmp.w	fp, #31
 8007d8c:	4604      	mov	r4, r0
 8007d8e:	460d      	mov	r5, r1
 8007d90:	dc0d      	bgt.n	8007dae <__ieee754_rem_pio2+0x1ae>
 8007d92:	4b6e      	ldr	r3, [pc, #440]	; (8007f4c <__ieee754_rem_pio2+0x34c>)
 8007d94:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8007d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d9c:	4543      	cmp	r3, r8
 8007d9e:	d006      	beq.n	8007dae <__ieee754_rem_pio2+0x1ae>
 8007da0:	4622      	mov	r2, r4
 8007da2:	462b      	mov	r3, r5
 8007da4:	4630      	mov	r0, r6
 8007da6:	4639      	mov	r1, r7
 8007da8:	f7f8 fa16 	bl	80001d8 <__aeabi_dsub>
 8007dac:	e00f      	b.n	8007dce <__ieee754_rem_pio2+0x1ce>
 8007dae:	462b      	mov	r3, r5
 8007db0:	4622      	mov	r2, r4
 8007db2:	4630      	mov	r0, r6
 8007db4:	4639      	mov	r1, r7
 8007db6:	f7f8 fa0f 	bl	80001d8 <__aeabi_dsub>
 8007dba:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007dbe:	9303      	str	r3, [sp, #12]
 8007dc0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007dc4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007dc8:	f1b8 0f10 	cmp.w	r8, #16
 8007dcc:	dc02      	bgt.n	8007dd4 <__ieee754_rem_pio2+0x1d4>
 8007dce:	e9ca 0100 	strd	r0, r1, [sl]
 8007dd2:	e039      	b.n	8007e48 <__ieee754_rem_pio2+0x248>
 8007dd4:	a34e      	add	r3, pc, #312	; (adr r3, 8007f10 <__ieee754_rem_pio2+0x310>)
 8007dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dda:	ec51 0b18 	vmov	r0, r1, d8
 8007dde:	f7f8 fbb3 	bl	8000548 <__aeabi_dmul>
 8007de2:	4604      	mov	r4, r0
 8007de4:	460d      	mov	r5, r1
 8007de6:	4602      	mov	r2, r0
 8007de8:	460b      	mov	r3, r1
 8007dea:	4630      	mov	r0, r6
 8007dec:	4639      	mov	r1, r7
 8007dee:	f7f8 f9f3 	bl	80001d8 <__aeabi_dsub>
 8007df2:	4602      	mov	r2, r0
 8007df4:	460b      	mov	r3, r1
 8007df6:	4680      	mov	r8, r0
 8007df8:	4689      	mov	r9, r1
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	4639      	mov	r1, r7
 8007dfe:	f7f8 f9eb 	bl	80001d8 <__aeabi_dsub>
 8007e02:	4622      	mov	r2, r4
 8007e04:	462b      	mov	r3, r5
 8007e06:	f7f8 f9e7 	bl	80001d8 <__aeabi_dsub>
 8007e0a:	a343      	add	r3, pc, #268	; (adr r3, 8007f18 <__ieee754_rem_pio2+0x318>)
 8007e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e10:	4604      	mov	r4, r0
 8007e12:	460d      	mov	r5, r1
 8007e14:	ec51 0b18 	vmov	r0, r1, d8
 8007e18:	f7f8 fb96 	bl	8000548 <__aeabi_dmul>
 8007e1c:	4622      	mov	r2, r4
 8007e1e:	462b      	mov	r3, r5
 8007e20:	f7f8 f9da 	bl	80001d8 <__aeabi_dsub>
 8007e24:	4602      	mov	r2, r0
 8007e26:	460b      	mov	r3, r1
 8007e28:	4604      	mov	r4, r0
 8007e2a:	460d      	mov	r5, r1
 8007e2c:	4640      	mov	r0, r8
 8007e2e:	4649      	mov	r1, r9
 8007e30:	f7f8 f9d2 	bl	80001d8 <__aeabi_dsub>
 8007e34:	9a03      	ldr	r2, [sp, #12]
 8007e36:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007e3a:	1ad3      	subs	r3, r2, r3
 8007e3c:	2b31      	cmp	r3, #49	; 0x31
 8007e3e:	dc24      	bgt.n	8007e8a <__ieee754_rem_pio2+0x28a>
 8007e40:	e9ca 0100 	strd	r0, r1, [sl]
 8007e44:	4646      	mov	r6, r8
 8007e46:	464f      	mov	r7, r9
 8007e48:	e9da 8900 	ldrd	r8, r9, [sl]
 8007e4c:	4630      	mov	r0, r6
 8007e4e:	4642      	mov	r2, r8
 8007e50:	464b      	mov	r3, r9
 8007e52:	4639      	mov	r1, r7
 8007e54:	f7f8 f9c0 	bl	80001d8 <__aeabi_dsub>
 8007e58:	462b      	mov	r3, r5
 8007e5a:	4622      	mov	r2, r4
 8007e5c:	f7f8 f9bc 	bl	80001d8 <__aeabi_dsub>
 8007e60:	9b02      	ldr	r3, [sp, #8]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007e68:	f6bf af0a 	bge.w	8007c80 <__ieee754_rem_pio2+0x80>
 8007e6c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007e70:	f8ca 3004 	str.w	r3, [sl, #4]
 8007e74:	f8ca 8000 	str.w	r8, [sl]
 8007e78:	f8ca 0008 	str.w	r0, [sl, #8]
 8007e7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e80:	f8ca 300c 	str.w	r3, [sl, #12]
 8007e84:	f1cb 0b00 	rsb	fp, fp, #0
 8007e88:	e6fa      	b.n	8007c80 <__ieee754_rem_pio2+0x80>
 8007e8a:	a327      	add	r3, pc, #156	; (adr r3, 8007f28 <__ieee754_rem_pio2+0x328>)
 8007e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e90:	ec51 0b18 	vmov	r0, r1, d8
 8007e94:	f7f8 fb58 	bl	8000548 <__aeabi_dmul>
 8007e98:	4604      	mov	r4, r0
 8007e9a:	460d      	mov	r5, r1
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	4640      	mov	r0, r8
 8007ea2:	4649      	mov	r1, r9
 8007ea4:	f7f8 f998 	bl	80001d8 <__aeabi_dsub>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	460b      	mov	r3, r1
 8007eac:	4606      	mov	r6, r0
 8007eae:	460f      	mov	r7, r1
 8007eb0:	4640      	mov	r0, r8
 8007eb2:	4649      	mov	r1, r9
 8007eb4:	f7f8 f990 	bl	80001d8 <__aeabi_dsub>
 8007eb8:	4622      	mov	r2, r4
 8007eba:	462b      	mov	r3, r5
 8007ebc:	f7f8 f98c 	bl	80001d8 <__aeabi_dsub>
 8007ec0:	a31b      	add	r3, pc, #108	; (adr r3, 8007f30 <__ieee754_rem_pio2+0x330>)
 8007ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec6:	4604      	mov	r4, r0
 8007ec8:	460d      	mov	r5, r1
 8007eca:	ec51 0b18 	vmov	r0, r1, d8
 8007ece:	f7f8 fb3b 	bl	8000548 <__aeabi_dmul>
 8007ed2:	4622      	mov	r2, r4
 8007ed4:	462b      	mov	r3, r5
 8007ed6:	f7f8 f97f 	bl	80001d8 <__aeabi_dsub>
 8007eda:	4604      	mov	r4, r0
 8007edc:	460d      	mov	r5, r1
 8007ede:	e75f      	b.n	8007da0 <__ieee754_rem_pio2+0x1a0>
 8007ee0:	4b1b      	ldr	r3, [pc, #108]	; (8007f50 <__ieee754_rem_pio2+0x350>)
 8007ee2:	4598      	cmp	r8, r3
 8007ee4:	dd36      	ble.n	8007f54 <__ieee754_rem_pio2+0x354>
 8007ee6:	ee10 2a10 	vmov	r2, s0
 8007eea:	462b      	mov	r3, r5
 8007eec:	4620      	mov	r0, r4
 8007eee:	4629      	mov	r1, r5
 8007ef0:	f7f8 f972 	bl	80001d8 <__aeabi_dsub>
 8007ef4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007ef8:	e9ca 0100 	strd	r0, r1, [sl]
 8007efc:	e694      	b.n	8007c28 <__ieee754_rem_pio2+0x28>
 8007efe:	bf00      	nop
 8007f00:	54400000 	.word	0x54400000
 8007f04:	3ff921fb 	.word	0x3ff921fb
 8007f08:	1a626331 	.word	0x1a626331
 8007f0c:	3dd0b461 	.word	0x3dd0b461
 8007f10:	1a600000 	.word	0x1a600000
 8007f14:	3dd0b461 	.word	0x3dd0b461
 8007f18:	2e037073 	.word	0x2e037073
 8007f1c:	3ba3198a 	.word	0x3ba3198a
 8007f20:	6dc9c883 	.word	0x6dc9c883
 8007f24:	3fe45f30 	.word	0x3fe45f30
 8007f28:	2e000000 	.word	0x2e000000
 8007f2c:	3ba3198a 	.word	0x3ba3198a
 8007f30:	252049c1 	.word	0x252049c1
 8007f34:	397b839a 	.word	0x397b839a
 8007f38:	3fe921fb 	.word	0x3fe921fb
 8007f3c:	4002d97b 	.word	0x4002d97b
 8007f40:	3ff921fb 	.word	0x3ff921fb
 8007f44:	413921fb 	.word	0x413921fb
 8007f48:	3fe00000 	.word	0x3fe00000
 8007f4c:	08008c28 	.word	0x08008c28
 8007f50:	7fefffff 	.word	0x7fefffff
 8007f54:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007f58:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8007f5c:	ee10 0a10 	vmov	r0, s0
 8007f60:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8007f64:	ee10 6a10 	vmov	r6, s0
 8007f68:	460f      	mov	r7, r1
 8007f6a:	f7f8 fd87 	bl	8000a7c <__aeabi_d2iz>
 8007f6e:	f7f8 fa81 	bl	8000474 <__aeabi_i2d>
 8007f72:	4602      	mov	r2, r0
 8007f74:	460b      	mov	r3, r1
 8007f76:	4630      	mov	r0, r6
 8007f78:	4639      	mov	r1, r7
 8007f7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f7e:	f7f8 f92b 	bl	80001d8 <__aeabi_dsub>
 8007f82:	4b22      	ldr	r3, [pc, #136]	; (800800c <__ieee754_rem_pio2+0x40c>)
 8007f84:	2200      	movs	r2, #0
 8007f86:	f7f8 fadf 	bl	8000548 <__aeabi_dmul>
 8007f8a:	460f      	mov	r7, r1
 8007f8c:	4606      	mov	r6, r0
 8007f8e:	f7f8 fd75 	bl	8000a7c <__aeabi_d2iz>
 8007f92:	f7f8 fa6f 	bl	8000474 <__aeabi_i2d>
 8007f96:	4602      	mov	r2, r0
 8007f98:	460b      	mov	r3, r1
 8007f9a:	4630      	mov	r0, r6
 8007f9c:	4639      	mov	r1, r7
 8007f9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007fa2:	f7f8 f919 	bl	80001d8 <__aeabi_dsub>
 8007fa6:	4b19      	ldr	r3, [pc, #100]	; (800800c <__ieee754_rem_pio2+0x40c>)
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f7f8 facd 	bl	8000548 <__aeabi_dmul>
 8007fae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007fb2:	ad04      	add	r5, sp, #16
 8007fb4:	f04f 0803 	mov.w	r8, #3
 8007fb8:	46a9      	mov	r9, r5
 8007fba:	2600      	movs	r6, #0
 8007fbc:	2700      	movs	r7, #0
 8007fbe:	4632      	mov	r2, r6
 8007fc0:	463b      	mov	r3, r7
 8007fc2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8007fc6:	46c3      	mov	fp, r8
 8007fc8:	3d08      	subs	r5, #8
 8007fca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007fce:	f7f8 fd23 	bl	8000a18 <__aeabi_dcmpeq>
 8007fd2:	2800      	cmp	r0, #0
 8007fd4:	d1f3      	bne.n	8007fbe <__ieee754_rem_pio2+0x3be>
 8007fd6:	4b0e      	ldr	r3, [pc, #56]	; (8008010 <__ieee754_rem_pio2+0x410>)
 8007fd8:	9301      	str	r3, [sp, #4]
 8007fda:	2302      	movs	r3, #2
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	4622      	mov	r2, r4
 8007fe0:	465b      	mov	r3, fp
 8007fe2:	4651      	mov	r1, sl
 8007fe4:	4648      	mov	r0, r9
 8007fe6:	f000 f8df 	bl	80081a8 <__kernel_rem_pio2>
 8007fea:	9b02      	ldr	r3, [sp, #8]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	4683      	mov	fp, r0
 8007ff0:	f6bf ae46 	bge.w	8007c80 <__ieee754_rem_pio2+0x80>
 8007ff4:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007ff8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007ffc:	f8ca 3004 	str.w	r3, [sl, #4]
 8008000:	f8da 300c 	ldr.w	r3, [sl, #12]
 8008004:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008008:	e73a      	b.n	8007e80 <__ieee754_rem_pio2+0x280>
 800800a:	bf00      	nop
 800800c:	41700000 	.word	0x41700000
 8008010:	08008ca8 	.word	0x08008ca8
 8008014:	00000000 	.word	0x00000000

08008018 <__kernel_cos>:
 8008018:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800801c:	ec57 6b10 	vmov	r6, r7, d0
 8008020:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008024:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008028:	ed8d 1b00 	vstr	d1, [sp]
 800802c:	da07      	bge.n	800803e <__kernel_cos+0x26>
 800802e:	ee10 0a10 	vmov	r0, s0
 8008032:	4639      	mov	r1, r7
 8008034:	f7f8 fd22 	bl	8000a7c <__aeabi_d2iz>
 8008038:	2800      	cmp	r0, #0
 800803a:	f000 8088 	beq.w	800814e <__kernel_cos+0x136>
 800803e:	4632      	mov	r2, r6
 8008040:	463b      	mov	r3, r7
 8008042:	4630      	mov	r0, r6
 8008044:	4639      	mov	r1, r7
 8008046:	f7f8 fa7f 	bl	8000548 <__aeabi_dmul>
 800804a:	4b51      	ldr	r3, [pc, #324]	; (8008190 <__kernel_cos+0x178>)
 800804c:	2200      	movs	r2, #0
 800804e:	4604      	mov	r4, r0
 8008050:	460d      	mov	r5, r1
 8008052:	f7f8 fa79 	bl	8000548 <__aeabi_dmul>
 8008056:	a340      	add	r3, pc, #256	; (adr r3, 8008158 <__kernel_cos+0x140>)
 8008058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805c:	4682      	mov	sl, r0
 800805e:	468b      	mov	fp, r1
 8008060:	4620      	mov	r0, r4
 8008062:	4629      	mov	r1, r5
 8008064:	f7f8 fa70 	bl	8000548 <__aeabi_dmul>
 8008068:	a33d      	add	r3, pc, #244	; (adr r3, 8008160 <__kernel_cos+0x148>)
 800806a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806e:	f7f8 f8b5 	bl	80001dc <__adddf3>
 8008072:	4622      	mov	r2, r4
 8008074:	462b      	mov	r3, r5
 8008076:	f7f8 fa67 	bl	8000548 <__aeabi_dmul>
 800807a:	a33b      	add	r3, pc, #236	; (adr r3, 8008168 <__kernel_cos+0x150>)
 800807c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008080:	f7f8 f8aa 	bl	80001d8 <__aeabi_dsub>
 8008084:	4622      	mov	r2, r4
 8008086:	462b      	mov	r3, r5
 8008088:	f7f8 fa5e 	bl	8000548 <__aeabi_dmul>
 800808c:	a338      	add	r3, pc, #224	; (adr r3, 8008170 <__kernel_cos+0x158>)
 800808e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008092:	f7f8 f8a3 	bl	80001dc <__adddf3>
 8008096:	4622      	mov	r2, r4
 8008098:	462b      	mov	r3, r5
 800809a:	f7f8 fa55 	bl	8000548 <__aeabi_dmul>
 800809e:	a336      	add	r3, pc, #216	; (adr r3, 8008178 <__kernel_cos+0x160>)
 80080a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a4:	f7f8 f898 	bl	80001d8 <__aeabi_dsub>
 80080a8:	4622      	mov	r2, r4
 80080aa:	462b      	mov	r3, r5
 80080ac:	f7f8 fa4c 	bl	8000548 <__aeabi_dmul>
 80080b0:	a333      	add	r3, pc, #204	; (adr r3, 8008180 <__kernel_cos+0x168>)
 80080b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b6:	f7f8 f891 	bl	80001dc <__adddf3>
 80080ba:	4622      	mov	r2, r4
 80080bc:	462b      	mov	r3, r5
 80080be:	f7f8 fa43 	bl	8000548 <__aeabi_dmul>
 80080c2:	4622      	mov	r2, r4
 80080c4:	462b      	mov	r3, r5
 80080c6:	f7f8 fa3f 	bl	8000548 <__aeabi_dmul>
 80080ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080ce:	4604      	mov	r4, r0
 80080d0:	460d      	mov	r5, r1
 80080d2:	4630      	mov	r0, r6
 80080d4:	4639      	mov	r1, r7
 80080d6:	f7f8 fa37 	bl	8000548 <__aeabi_dmul>
 80080da:	460b      	mov	r3, r1
 80080dc:	4602      	mov	r2, r0
 80080de:	4629      	mov	r1, r5
 80080e0:	4620      	mov	r0, r4
 80080e2:	f7f8 f879 	bl	80001d8 <__aeabi_dsub>
 80080e6:	4b2b      	ldr	r3, [pc, #172]	; (8008194 <__kernel_cos+0x17c>)
 80080e8:	4598      	cmp	r8, r3
 80080ea:	4606      	mov	r6, r0
 80080ec:	460f      	mov	r7, r1
 80080ee:	dc10      	bgt.n	8008112 <__kernel_cos+0xfa>
 80080f0:	4602      	mov	r2, r0
 80080f2:	460b      	mov	r3, r1
 80080f4:	4650      	mov	r0, sl
 80080f6:	4659      	mov	r1, fp
 80080f8:	f7f8 f86e 	bl	80001d8 <__aeabi_dsub>
 80080fc:	460b      	mov	r3, r1
 80080fe:	4926      	ldr	r1, [pc, #152]	; (8008198 <__kernel_cos+0x180>)
 8008100:	4602      	mov	r2, r0
 8008102:	2000      	movs	r0, #0
 8008104:	f7f8 f868 	bl	80001d8 <__aeabi_dsub>
 8008108:	ec41 0b10 	vmov	d0, r0, r1
 800810c:	b003      	add	sp, #12
 800810e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008112:	4b22      	ldr	r3, [pc, #136]	; (800819c <__kernel_cos+0x184>)
 8008114:	4920      	ldr	r1, [pc, #128]	; (8008198 <__kernel_cos+0x180>)
 8008116:	4598      	cmp	r8, r3
 8008118:	bfcc      	ite	gt
 800811a:	4d21      	ldrgt	r5, [pc, #132]	; (80081a0 <__kernel_cos+0x188>)
 800811c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008120:	2400      	movs	r4, #0
 8008122:	4622      	mov	r2, r4
 8008124:	462b      	mov	r3, r5
 8008126:	2000      	movs	r0, #0
 8008128:	f7f8 f856 	bl	80001d8 <__aeabi_dsub>
 800812c:	4622      	mov	r2, r4
 800812e:	4680      	mov	r8, r0
 8008130:	4689      	mov	r9, r1
 8008132:	462b      	mov	r3, r5
 8008134:	4650      	mov	r0, sl
 8008136:	4659      	mov	r1, fp
 8008138:	f7f8 f84e 	bl	80001d8 <__aeabi_dsub>
 800813c:	4632      	mov	r2, r6
 800813e:	463b      	mov	r3, r7
 8008140:	f7f8 f84a 	bl	80001d8 <__aeabi_dsub>
 8008144:	4602      	mov	r2, r0
 8008146:	460b      	mov	r3, r1
 8008148:	4640      	mov	r0, r8
 800814a:	4649      	mov	r1, r9
 800814c:	e7da      	b.n	8008104 <__kernel_cos+0xec>
 800814e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008188 <__kernel_cos+0x170>
 8008152:	e7db      	b.n	800810c <__kernel_cos+0xf4>
 8008154:	f3af 8000 	nop.w
 8008158:	be8838d4 	.word	0xbe8838d4
 800815c:	bda8fae9 	.word	0xbda8fae9
 8008160:	bdb4b1c4 	.word	0xbdb4b1c4
 8008164:	3e21ee9e 	.word	0x3e21ee9e
 8008168:	809c52ad 	.word	0x809c52ad
 800816c:	3e927e4f 	.word	0x3e927e4f
 8008170:	19cb1590 	.word	0x19cb1590
 8008174:	3efa01a0 	.word	0x3efa01a0
 8008178:	16c15177 	.word	0x16c15177
 800817c:	3f56c16c 	.word	0x3f56c16c
 8008180:	5555554c 	.word	0x5555554c
 8008184:	3fa55555 	.word	0x3fa55555
 8008188:	00000000 	.word	0x00000000
 800818c:	3ff00000 	.word	0x3ff00000
 8008190:	3fe00000 	.word	0x3fe00000
 8008194:	3fd33332 	.word	0x3fd33332
 8008198:	3ff00000 	.word	0x3ff00000
 800819c:	3fe90000 	.word	0x3fe90000
 80081a0:	3fd20000 	.word	0x3fd20000
 80081a4:	00000000 	.word	0x00000000

080081a8 <__kernel_rem_pio2>:
 80081a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ac:	ed2d 8b02 	vpush	{d8}
 80081b0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80081b4:	f112 0f14 	cmn.w	r2, #20
 80081b8:	9308      	str	r3, [sp, #32]
 80081ba:	9101      	str	r1, [sp, #4]
 80081bc:	4bc6      	ldr	r3, [pc, #792]	; (80084d8 <__kernel_rem_pio2+0x330>)
 80081be:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80081c0:	9009      	str	r0, [sp, #36]	; 0x24
 80081c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80081c6:	9304      	str	r3, [sp, #16]
 80081c8:	9b08      	ldr	r3, [sp, #32]
 80081ca:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80081ce:	bfa8      	it	ge
 80081d0:	1ed4      	subge	r4, r2, #3
 80081d2:	9306      	str	r3, [sp, #24]
 80081d4:	bfb2      	itee	lt
 80081d6:	2400      	movlt	r4, #0
 80081d8:	2318      	movge	r3, #24
 80081da:	fb94 f4f3 	sdivge	r4, r4, r3
 80081de:	f06f 0317 	mvn.w	r3, #23
 80081e2:	fb04 3303 	mla	r3, r4, r3, r3
 80081e6:	eb03 0a02 	add.w	sl, r3, r2
 80081ea:	9b04      	ldr	r3, [sp, #16]
 80081ec:	9a06      	ldr	r2, [sp, #24]
 80081ee:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80084c8 <__kernel_rem_pio2+0x320>
 80081f2:	eb03 0802 	add.w	r8, r3, r2
 80081f6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80081f8:	1aa7      	subs	r7, r4, r2
 80081fa:	ae20      	add	r6, sp, #128	; 0x80
 80081fc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008200:	2500      	movs	r5, #0
 8008202:	4545      	cmp	r5, r8
 8008204:	dd18      	ble.n	8008238 <__kernel_rem_pio2+0x90>
 8008206:	9b08      	ldr	r3, [sp, #32]
 8008208:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800820c:	aa20      	add	r2, sp, #128	; 0x80
 800820e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80084c8 <__kernel_rem_pio2+0x320>
 8008212:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008216:	f1c3 0301 	rsb	r3, r3, #1
 800821a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800821e:	9307      	str	r3, [sp, #28]
 8008220:	9b07      	ldr	r3, [sp, #28]
 8008222:	9a04      	ldr	r2, [sp, #16]
 8008224:	4443      	add	r3, r8
 8008226:	429a      	cmp	r2, r3
 8008228:	db2f      	blt.n	800828a <__kernel_rem_pio2+0xe2>
 800822a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800822e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008232:	462f      	mov	r7, r5
 8008234:	2600      	movs	r6, #0
 8008236:	e01b      	b.n	8008270 <__kernel_rem_pio2+0xc8>
 8008238:	42ef      	cmn	r7, r5
 800823a:	d407      	bmi.n	800824c <__kernel_rem_pio2+0xa4>
 800823c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008240:	f7f8 f918 	bl	8000474 <__aeabi_i2d>
 8008244:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008248:	3501      	adds	r5, #1
 800824a:	e7da      	b.n	8008202 <__kernel_rem_pio2+0x5a>
 800824c:	ec51 0b18 	vmov	r0, r1, d8
 8008250:	e7f8      	b.n	8008244 <__kernel_rem_pio2+0x9c>
 8008252:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008256:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800825a:	f7f8 f975 	bl	8000548 <__aeabi_dmul>
 800825e:	4602      	mov	r2, r0
 8008260:	460b      	mov	r3, r1
 8008262:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008266:	f7f7 ffb9 	bl	80001dc <__adddf3>
 800826a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800826e:	3601      	adds	r6, #1
 8008270:	9b06      	ldr	r3, [sp, #24]
 8008272:	429e      	cmp	r6, r3
 8008274:	f1a7 0708 	sub.w	r7, r7, #8
 8008278:	ddeb      	ble.n	8008252 <__kernel_rem_pio2+0xaa>
 800827a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800827e:	3508      	adds	r5, #8
 8008280:	ecab 7b02 	vstmia	fp!, {d7}
 8008284:	f108 0801 	add.w	r8, r8, #1
 8008288:	e7ca      	b.n	8008220 <__kernel_rem_pio2+0x78>
 800828a:	9b04      	ldr	r3, [sp, #16]
 800828c:	aa0c      	add	r2, sp, #48	; 0x30
 800828e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008292:	930b      	str	r3, [sp, #44]	; 0x2c
 8008294:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008296:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800829a:	9c04      	ldr	r4, [sp, #16]
 800829c:	930a      	str	r3, [sp, #40]	; 0x28
 800829e:	ab98      	add	r3, sp, #608	; 0x260
 80082a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80082a4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80082a8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80082ac:	f8cd b008 	str.w	fp, [sp, #8]
 80082b0:	4625      	mov	r5, r4
 80082b2:	2d00      	cmp	r5, #0
 80082b4:	dc78      	bgt.n	80083a8 <__kernel_rem_pio2+0x200>
 80082b6:	ec47 6b10 	vmov	d0, r6, r7
 80082ba:	4650      	mov	r0, sl
 80082bc:	f000 fbfc 	bl	8008ab8 <scalbn>
 80082c0:	ec57 6b10 	vmov	r6, r7, d0
 80082c4:	2200      	movs	r2, #0
 80082c6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80082ca:	ee10 0a10 	vmov	r0, s0
 80082ce:	4639      	mov	r1, r7
 80082d0:	f7f8 f93a 	bl	8000548 <__aeabi_dmul>
 80082d4:	ec41 0b10 	vmov	d0, r0, r1
 80082d8:	f000 fb6e 	bl	80089b8 <floor>
 80082dc:	4b7f      	ldr	r3, [pc, #508]	; (80084dc <__kernel_rem_pio2+0x334>)
 80082de:	ec51 0b10 	vmov	r0, r1, d0
 80082e2:	2200      	movs	r2, #0
 80082e4:	f7f8 f930 	bl	8000548 <__aeabi_dmul>
 80082e8:	4602      	mov	r2, r0
 80082ea:	460b      	mov	r3, r1
 80082ec:	4630      	mov	r0, r6
 80082ee:	4639      	mov	r1, r7
 80082f0:	f7f7 ff72 	bl	80001d8 <__aeabi_dsub>
 80082f4:	460f      	mov	r7, r1
 80082f6:	4606      	mov	r6, r0
 80082f8:	f7f8 fbc0 	bl	8000a7c <__aeabi_d2iz>
 80082fc:	9007      	str	r0, [sp, #28]
 80082fe:	f7f8 f8b9 	bl	8000474 <__aeabi_i2d>
 8008302:	4602      	mov	r2, r0
 8008304:	460b      	mov	r3, r1
 8008306:	4630      	mov	r0, r6
 8008308:	4639      	mov	r1, r7
 800830a:	f7f7 ff65 	bl	80001d8 <__aeabi_dsub>
 800830e:	f1ba 0f00 	cmp.w	sl, #0
 8008312:	4606      	mov	r6, r0
 8008314:	460f      	mov	r7, r1
 8008316:	dd70      	ble.n	80083fa <__kernel_rem_pio2+0x252>
 8008318:	1e62      	subs	r2, r4, #1
 800831a:	ab0c      	add	r3, sp, #48	; 0x30
 800831c:	9d07      	ldr	r5, [sp, #28]
 800831e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008322:	f1ca 0118 	rsb	r1, sl, #24
 8008326:	fa40 f301 	asr.w	r3, r0, r1
 800832a:	441d      	add	r5, r3
 800832c:	408b      	lsls	r3, r1
 800832e:	1ac0      	subs	r0, r0, r3
 8008330:	ab0c      	add	r3, sp, #48	; 0x30
 8008332:	9507      	str	r5, [sp, #28]
 8008334:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008338:	f1ca 0317 	rsb	r3, sl, #23
 800833c:	fa40 f303 	asr.w	r3, r0, r3
 8008340:	9302      	str	r3, [sp, #8]
 8008342:	9b02      	ldr	r3, [sp, #8]
 8008344:	2b00      	cmp	r3, #0
 8008346:	dd66      	ble.n	8008416 <__kernel_rem_pio2+0x26e>
 8008348:	9b07      	ldr	r3, [sp, #28]
 800834a:	2200      	movs	r2, #0
 800834c:	3301      	adds	r3, #1
 800834e:	9307      	str	r3, [sp, #28]
 8008350:	4615      	mov	r5, r2
 8008352:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008356:	4294      	cmp	r4, r2
 8008358:	f300 8099 	bgt.w	800848e <__kernel_rem_pio2+0x2e6>
 800835c:	f1ba 0f00 	cmp.w	sl, #0
 8008360:	dd07      	ble.n	8008372 <__kernel_rem_pio2+0x1ca>
 8008362:	f1ba 0f01 	cmp.w	sl, #1
 8008366:	f000 80a5 	beq.w	80084b4 <__kernel_rem_pio2+0x30c>
 800836a:	f1ba 0f02 	cmp.w	sl, #2
 800836e:	f000 80c1 	beq.w	80084f4 <__kernel_rem_pio2+0x34c>
 8008372:	9b02      	ldr	r3, [sp, #8]
 8008374:	2b02      	cmp	r3, #2
 8008376:	d14e      	bne.n	8008416 <__kernel_rem_pio2+0x26e>
 8008378:	4632      	mov	r2, r6
 800837a:	463b      	mov	r3, r7
 800837c:	4958      	ldr	r1, [pc, #352]	; (80084e0 <__kernel_rem_pio2+0x338>)
 800837e:	2000      	movs	r0, #0
 8008380:	f7f7 ff2a 	bl	80001d8 <__aeabi_dsub>
 8008384:	4606      	mov	r6, r0
 8008386:	460f      	mov	r7, r1
 8008388:	2d00      	cmp	r5, #0
 800838a:	d044      	beq.n	8008416 <__kernel_rem_pio2+0x26e>
 800838c:	4650      	mov	r0, sl
 800838e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80084d0 <__kernel_rem_pio2+0x328>
 8008392:	f000 fb91 	bl	8008ab8 <scalbn>
 8008396:	4630      	mov	r0, r6
 8008398:	4639      	mov	r1, r7
 800839a:	ec53 2b10 	vmov	r2, r3, d0
 800839e:	f7f7 ff1b 	bl	80001d8 <__aeabi_dsub>
 80083a2:	4606      	mov	r6, r0
 80083a4:	460f      	mov	r7, r1
 80083a6:	e036      	b.n	8008416 <__kernel_rem_pio2+0x26e>
 80083a8:	4b4e      	ldr	r3, [pc, #312]	; (80084e4 <__kernel_rem_pio2+0x33c>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	4630      	mov	r0, r6
 80083ae:	4639      	mov	r1, r7
 80083b0:	f7f8 f8ca 	bl	8000548 <__aeabi_dmul>
 80083b4:	f7f8 fb62 	bl	8000a7c <__aeabi_d2iz>
 80083b8:	f7f8 f85c 	bl	8000474 <__aeabi_i2d>
 80083bc:	4b4a      	ldr	r3, [pc, #296]	; (80084e8 <__kernel_rem_pio2+0x340>)
 80083be:	2200      	movs	r2, #0
 80083c0:	4680      	mov	r8, r0
 80083c2:	4689      	mov	r9, r1
 80083c4:	f7f8 f8c0 	bl	8000548 <__aeabi_dmul>
 80083c8:	4602      	mov	r2, r0
 80083ca:	460b      	mov	r3, r1
 80083cc:	4630      	mov	r0, r6
 80083ce:	4639      	mov	r1, r7
 80083d0:	f7f7 ff02 	bl	80001d8 <__aeabi_dsub>
 80083d4:	f7f8 fb52 	bl	8000a7c <__aeabi_d2iz>
 80083d8:	9b02      	ldr	r3, [sp, #8]
 80083da:	f843 0b04 	str.w	r0, [r3], #4
 80083de:	3d01      	subs	r5, #1
 80083e0:	9302      	str	r3, [sp, #8]
 80083e2:	ab70      	add	r3, sp, #448	; 0x1c0
 80083e4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80083e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ec:	4640      	mov	r0, r8
 80083ee:	4649      	mov	r1, r9
 80083f0:	f7f7 fef4 	bl	80001dc <__adddf3>
 80083f4:	4606      	mov	r6, r0
 80083f6:	460f      	mov	r7, r1
 80083f8:	e75b      	b.n	80082b2 <__kernel_rem_pio2+0x10a>
 80083fa:	d105      	bne.n	8008408 <__kernel_rem_pio2+0x260>
 80083fc:	1e63      	subs	r3, r4, #1
 80083fe:	aa0c      	add	r2, sp, #48	; 0x30
 8008400:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008404:	15c3      	asrs	r3, r0, #23
 8008406:	e79b      	b.n	8008340 <__kernel_rem_pio2+0x198>
 8008408:	4b38      	ldr	r3, [pc, #224]	; (80084ec <__kernel_rem_pio2+0x344>)
 800840a:	2200      	movs	r2, #0
 800840c:	f7f8 fb22 	bl	8000a54 <__aeabi_dcmpge>
 8008410:	2800      	cmp	r0, #0
 8008412:	d139      	bne.n	8008488 <__kernel_rem_pio2+0x2e0>
 8008414:	9002      	str	r0, [sp, #8]
 8008416:	2200      	movs	r2, #0
 8008418:	2300      	movs	r3, #0
 800841a:	4630      	mov	r0, r6
 800841c:	4639      	mov	r1, r7
 800841e:	f7f8 fafb 	bl	8000a18 <__aeabi_dcmpeq>
 8008422:	2800      	cmp	r0, #0
 8008424:	f000 80b4 	beq.w	8008590 <__kernel_rem_pio2+0x3e8>
 8008428:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800842c:	465b      	mov	r3, fp
 800842e:	2200      	movs	r2, #0
 8008430:	9904      	ldr	r1, [sp, #16]
 8008432:	428b      	cmp	r3, r1
 8008434:	da65      	bge.n	8008502 <__kernel_rem_pio2+0x35a>
 8008436:	2a00      	cmp	r2, #0
 8008438:	d07b      	beq.n	8008532 <__kernel_rem_pio2+0x38a>
 800843a:	ab0c      	add	r3, sp, #48	; 0x30
 800843c:	f1aa 0a18 	sub.w	sl, sl, #24
 8008440:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8008444:	2b00      	cmp	r3, #0
 8008446:	f000 80a0 	beq.w	800858a <__kernel_rem_pio2+0x3e2>
 800844a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80084d0 <__kernel_rem_pio2+0x328>
 800844e:	4650      	mov	r0, sl
 8008450:	f000 fb32 	bl	8008ab8 <scalbn>
 8008454:	4f23      	ldr	r7, [pc, #140]	; (80084e4 <__kernel_rem_pio2+0x33c>)
 8008456:	ec55 4b10 	vmov	r4, r5, d0
 800845a:	46d8      	mov	r8, fp
 800845c:	2600      	movs	r6, #0
 800845e:	f1b8 0f00 	cmp.w	r8, #0
 8008462:	f280 80cf 	bge.w	8008604 <__kernel_rem_pio2+0x45c>
 8008466:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80084c8 <__kernel_rem_pio2+0x320>
 800846a:	465f      	mov	r7, fp
 800846c:	f04f 0800 	mov.w	r8, #0
 8008470:	2f00      	cmp	r7, #0
 8008472:	f2c0 80fd 	blt.w	8008670 <__kernel_rem_pio2+0x4c8>
 8008476:	ab70      	add	r3, sp, #448	; 0x1c0
 8008478:	f8df a074 	ldr.w	sl, [pc, #116]	; 80084f0 <__kernel_rem_pio2+0x348>
 800847c:	ec55 4b18 	vmov	r4, r5, d8
 8008480:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8008484:	2600      	movs	r6, #0
 8008486:	e0e5      	b.n	8008654 <__kernel_rem_pio2+0x4ac>
 8008488:	2302      	movs	r3, #2
 800848a:	9302      	str	r3, [sp, #8]
 800848c:	e75c      	b.n	8008348 <__kernel_rem_pio2+0x1a0>
 800848e:	f8db 3000 	ldr.w	r3, [fp]
 8008492:	b955      	cbnz	r5, 80084aa <__kernel_rem_pio2+0x302>
 8008494:	b123      	cbz	r3, 80084a0 <__kernel_rem_pio2+0x2f8>
 8008496:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800849a:	f8cb 3000 	str.w	r3, [fp]
 800849e:	2301      	movs	r3, #1
 80084a0:	3201      	adds	r2, #1
 80084a2:	f10b 0b04 	add.w	fp, fp, #4
 80084a6:	461d      	mov	r5, r3
 80084a8:	e755      	b.n	8008356 <__kernel_rem_pio2+0x1ae>
 80084aa:	1acb      	subs	r3, r1, r3
 80084ac:	f8cb 3000 	str.w	r3, [fp]
 80084b0:	462b      	mov	r3, r5
 80084b2:	e7f5      	b.n	80084a0 <__kernel_rem_pio2+0x2f8>
 80084b4:	1e62      	subs	r2, r4, #1
 80084b6:	ab0c      	add	r3, sp, #48	; 0x30
 80084b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084bc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80084c0:	a90c      	add	r1, sp, #48	; 0x30
 80084c2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80084c6:	e754      	b.n	8008372 <__kernel_rem_pio2+0x1ca>
	...
 80084d4:	3ff00000 	.word	0x3ff00000
 80084d8:	08008df0 	.word	0x08008df0
 80084dc:	40200000 	.word	0x40200000
 80084e0:	3ff00000 	.word	0x3ff00000
 80084e4:	3e700000 	.word	0x3e700000
 80084e8:	41700000 	.word	0x41700000
 80084ec:	3fe00000 	.word	0x3fe00000
 80084f0:	08008db0 	.word	0x08008db0
 80084f4:	1e62      	subs	r2, r4, #1
 80084f6:	ab0c      	add	r3, sp, #48	; 0x30
 80084f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084fc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008500:	e7de      	b.n	80084c0 <__kernel_rem_pio2+0x318>
 8008502:	a90c      	add	r1, sp, #48	; 0x30
 8008504:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008508:	3b01      	subs	r3, #1
 800850a:	430a      	orrs	r2, r1
 800850c:	e790      	b.n	8008430 <__kernel_rem_pio2+0x288>
 800850e:	3301      	adds	r3, #1
 8008510:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008514:	2900      	cmp	r1, #0
 8008516:	d0fa      	beq.n	800850e <__kernel_rem_pio2+0x366>
 8008518:	9a08      	ldr	r2, [sp, #32]
 800851a:	18e3      	adds	r3, r4, r3
 800851c:	18a6      	adds	r6, r4, r2
 800851e:	aa20      	add	r2, sp, #128	; 0x80
 8008520:	1c65      	adds	r5, r4, #1
 8008522:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008526:	9302      	str	r3, [sp, #8]
 8008528:	9b02      	ldr	r3, [sp, #8]
 800852a:	42ab      	cmp	r3, r5
 800852c:	da04      	bge.n	8008538 <__kernel_rem_pio2+0x390>
 800852e:	461c      	mov	r4, r3
 8008530:	e6b5      	b.n	800829e <__kernel_rem_pio2+0xf6>
 8008532:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008534:	2301      	movs	r3, #1
 8008536:	e7eb      	b.n	8008510 <__kernel_rem_pio2+0x368>
 8008538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800853a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800853e:	f7f7 ff99 	bl	8000474 <__aeabi_i2d>
 8008542:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008548:	46b3      	mov	fp, r6
 800854a:	461c      	mov	r4, r3
 800854c:	2700      	movs	r7, #0
 800854e:	f04f 0800 	mov.w	r8, #0
 8008552:	f04f 0900 	mov.w	r9, #0
 8008556:	9b06      	ldr	r3, [sp, #24]
 8008558:	429f      	cmp	r7, r3
 800855a:	dd06      	ble.n	800856a <__kernel_rem_pio2+0x3c2>
 800855c:	ab70      	add	r3, sp, #448	; 0x1c0
 800855e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008562:	e9c3 8900 	strd	r8, r9, [r3]
 8008566:	3501      	adds	r5, #1
 8008568:	e7de      	b.n	8008528 <__kernel_rem_pio2+0x380>
 800856a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800856e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008572:	f7f7 ffe9 	bl	8000548 <__aeabi_dmul>
 8008576:	4602      	mov	r2, r0
 8008578:	460b      	mov	r3, r1
 800857a:	4640      	mov	r0, r8
 800857c:	4649      	mov	r1, r9
 800857e:	f7f7 fe2d 	bl	80001dc <__adddf3>
 8008582:	3701      	adds	r7, #1
 8008584:	4680      	mov	r8, r0
 8008586:	4689      	mov	r9, r1
 8008588:	e7e5      	b.n	8008556 <__kernel_rem_pio2+0x3ae>
 800858a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800858e:	e754      	b.n	800843a <__kernel_rem_pio2+0x292>
 8008590:	ec47 6b10 	vmov	d0, r6, r7
 8008594:	f1ca 0000 	rsb	r0, sl, #0
 8008598:	f000 fa8e 	bl	8008ab8 <scalbn>
 800859c:	ec57 6b10 	vmov	r6, r7, d0
 80085a0:	4b9f      	ldr	r3, [pc, #636]	; (8008820 <__kernel_rem_pio2+0x678>)
 80085a2:	ee10 0a10 	vmov	r0, s0
 80085a6:	2200      	movs	r2, #0
 80085a8:	4639      	mov	r1, r7
 80085aa:	f7f8 fa53 	bl	8000a54 <__aeabi_dcmpge>
 80085ae:	b300      	cbz	r0, 80085f2 <__kernel_rem_pio2+0x44a>
 80085b0:	4b9c      	ldr	r3, [pc, #624]	; (8008824 <__kernel_rem_pio2+0x67c>)
 80085b2:	2200      	movs	r2, #0
 80085b4:	4630      	mov	r0, r6
 80085b6:	4639      	mov	r1, r7
 80085b8:	f7f7 ffc6 	bl	8000548 <__aeabi_dmul>
 80085bc:	f7f8 fa5e 	bl	8000a7c <__aeabi_d2iz>
 80085c0:	4605      	mov	r5, r0
 80085c2:	f7f7 ff57 	bl	8000474 <__aeabi_i2d>
 80085c6:	4b96      	ldr	r3, [pc, #600]	; (8008820 <__kernel_rem_pio2+0x678>)
 80085c8:	2200      	movs	r2, #0
 80085ca:	f7f7 ffbd 	bl	8000548 <__aeabi_dmul>
 80085ce:	460b      	mov	r3, r1
 80085d0:	4602      	mov	r2, r0
 80085d2:	4639      	mov	r1, r7
 80085d4:	4630      	mov	r0, r6
 80085d6:	f7f7 fdff 	bl	80001d8 <__aeabi_dsub>
 80085da:	f7f8 fa4f 	bl	8000a7c <__aeabi_d2iz>
 80085de:	f104 0b01 	add.w	fp, r4, #1
 80085e2:	ab0c      	add	r3, sp, #48	; 0x30
 80085e4:	f10a 0a18 	add.w	sl, sl, #24
 80085e8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80085ec:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 80085f0:	e72b      	b.n	800844a <__kernel_rem_pio2+0x2a2>
 80085f2:	4630      	mov	r0, r6
 80085f4:	4639      	mov	r1, r7
 80085f6:	f7f8 fa41 	bl	8000a7c <__aeabi_d2iz>
 80085fa:	ab0c      	add	r3, sp, #48	; 0x30
 80085fc:	46a3      	mov	fp, r4
 80085fe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008602:	e722      	b.n	800844a <__kernel_rem_pio2+0x2a2>
 8008604:	ab70      	add	r3, sp, #448	; 0x1c0
 8008606:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800860a:	ab0c      	add	r3, sp, #48	; 0x30
 800860c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008610:	f7f7 ff30 	bl	8000474 <__aeabi_i2d>
 8008614:	4622      	mov	r2, r4
 8008616:	462b      	mov	r3, r5
 8008618:	f7f7 ff96 	bl	8000548 <__aeabi_dmul>
 800861c:	4632      	mov	r2, r6
 800861e:	e9c9 0100 	strd	r0, r1, [r9]
 8008622:	463b      	mov	r3, r7
 8008624:	4620      	mov	r0, r4
 8008626:	4629      	mov	r1, r5
 8008628:	f7f7 ff8e 	bl	8000548 <__aeabi_dmul>
 800862c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008630:	4604      	mov	r4, r0
 8008632:	460d      	mov	r5, r1
 8008634:	e713      	b.n	800845e <__kernel_rem_pio2+0x2b6>
 8008636:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800863a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800863e:	f7f7 ff83 	bl	8000548 <__aeabi_dmul>
 8008642:	4602      	mov	r2, r0
 8008644:	460b      	mov	r3, r1
 8008646:	4620      	mov	r0, r4
 8008648:	4629      	mov	r1, r5
 800864a:	f7f7 fdc7 	bl	80001dc <__adddf3>
 800864e:	3601      	adds	r6, #1
 8008650:	4604      	mov	r4, r0
 8008652:	460d      	mov	r5, r1
 8008654:	9b04      	ldr	r3, [sp, #16]
 8008656:	429e      	cmp	r6, r3
 8008658:	dc01      	bgt.n	800865e <__kernel_rem_pio2+0x4b6>
 800865a:	45b0      	cmp	r8, r6
 800865c:	daeb      	bge.n	8008636 <__kernel_rem_pio2+0x48e>
 800865e:	ab48      	add	r3, sp, #288	; 0x120
 8008660:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008664:	e9c3 4500 	strd	r4, r5, [r3]
 8008668:	3f01      	subs	r7, #1
 800866a:	f108 0801 	add.w	r8, r8, #1
 800866e:	e6ff      	b.n	8008470 <__kernel_rem_pio2+0x2c8>
 8008670:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008672:	2b02      	cmp	r3, #2
 8008674:	dc0b      	bgt.n	800868e <__kernel_rem_pio2+0x4e6>
 8008676:	2b00      	cmp	r3, #0
 8008678:	dc6e      	bgt.n	8008758 <__kernel_rem_pio2+0x5b0>
 800867a:	d045      	beq.n	8008708 <__kernel_rem_pio2+0x560>
 800867c:	9b07      	ldr	r3, [sp, #28]
 800867e:	f003 0007 	and.w	r0, r3, #7
 8008682:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008686:	ecbd 8b02 	vpop	{d8}
 800868a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800868e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008690:	2b03      	cmp	r3, #3
 8008692:	d1f3      	bne.n	800867c <__kernel_rem_pio2+0x4d4>
 8008694:	ab48      	add	r3, sp, #288	; 0x120
 8008696:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800869a:	46d0      	mov	r8, sl
 800869c:	46d9      	mov	r9, fp
 800869e:	f1b9 0f00 	cmp.w	r9, #0
 80086a2:	f1a8 0808 	sub.w	r8, r8, #8
 80086a6:	dc64      	bgt.n	8008772 <__kernel_rem_pio2+0x5ca>
 80086a8:	465c      	mov	r4, fp
 80086aa:	2c01      	cmp	r4, #1
 80086ac:	f1aa 0a08 	sub.w	sl, sl, #8
 80086b0:	dc7e      	bgt.n	80087b0 <__kernel_rem_pio2+0x608>
 80086b2:	2000      	movs	r0, #0
 80086b4:	2100      	movs	r1, #0
 80086b6:	f1bb 0f01 	cmp.w	fp, #1
 80086ba:	f300 8097 	bgt.w	80087ec <__kernel_rem_pio2+0x644>
 80086be:	9b02      	ldr	r3, [sp, #8]
 80086c0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 80086c4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	f040 8099 	bne.w	8008800 <__kernel_rem_pio2+0x658>
 80086ce:	9b01      	ldr	r3, [sp, #4]
 80086d0:	e9c3 5600 	strd	r5, r6, [r3]
 80086d4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80086d8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80086dc:	e7ce      	b.n	800867c <__kernel_rem_pio2+0x4d4>
 80086de:	ab48      	add	r3, sp, #288	; 0x120
 80086e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80086e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e8:	f7f7 fd78 	bl	80001dc <__adddf3>
 80086ec:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80086f0:	f1bb 0f00 	cmp.w	fp, #0
 80086f4:	daf3      	bge.n	80086de <__kernel_rem_pio2+0x536>
 80086f6:	9b02      	ldr	r3, [sp, #8]
 80086f8:	b113      	cbz	r3, 8008700 <__kernel_rem_pio2+0x558>
 80086fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80086fe:	4619      	mov	r1, r3
 8008700:	9b01      	ldr	r3, [sp, #4]
 8008702:	e9c3 0100 	strd	r0, r1, [r3]
 8008706:	e7b9      	b.n	800867c <__kernel_rem_pio2+0x4d4>
 8008708:	2000      	movs	r0, #0
 800870a:	2100      	movs	r1, #0
 800870c:	e7f0      	b.n	80086f0 <__kernel_rem_pio2+0x548>
 800870e:	ab48      	add	r3, sp, #288	; 0x120
 8008710:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008718:	f7f7 fd60 	bl	80001dc <__adddf3>
 800871c:	3c01      	subs	r4, #1
 800871e:	2c00      	cmp	r4, #0
 8008720:	daf5      	bge.n	800870e <__kernel_rem_pio2+0x566>
 8008722:	9b02      	ldr	r3, [sp, #8]
 8008724:	b1e3      	cbz	r3, 8008760 <__kernel_rem_pio2+0x5b8>
 8008726:	4602      	mov	r2, r0
 8008728:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800872c:	9c01      	ldr	r4, [sp, #4]
 800872e:	e9c4 2300 	strd	r2, r3, [r4]
 8008732:	4602      	mov	r2, r0
 8008734:	460b      	mov	r3, r1
 8008736:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800873a:	f7f7 fd4d 	bl	80001d8 <__aeabi_dsub>
 800873e:	ad4a      	add	r5, sp, #296	; 0x128
 8008740:	2401      	movs	r4, #1
 8008742:	45a3      	cmp	fp, r4
 8008744:	da0f      	bge.n	8008766 <__kernel_rem_pio2+0x5be>
 8008746:	9b02      	ldr	r3, [sp, #8]
 8008748:	b113      	cbz	r3, 8008750 <__kernel_rem_pio2+0x5a8>
 800874a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800874e:	4619      	mov	r1, r3
 8008750:	9b01      	ldr	r3, [sp, #4]
 8008752:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008756:	e791      	b.n	800867c <__kernel_rem_pio2+0x4d4>
 8008758:	465c      	mov	r4, fp
 800875a:	2000      	movs	r0, #0
 800875c:	2100      	movs	r1, #0
 800875e:	e7de      	b.n	800871e <__kernel_rem_pio2+0x576>
 8008760:	4602      	mov	r2, r0
 8008762:	460b      	mov	r3, r1
 8008764:	e7e2      	b.n	800872c <__kernel_rem_pio2+0x584>
 8008766:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800876a:	f7f7 fd37 	bl	80001dc <__adddf3>
 800876e:	3401      	adds	r4, #1
 8008770:	e7e7      	b.n	8008742 <__kernel_rem_pio2+0x59a>
 8008772:	e9d8 4500 	ldrd	r4, r5, [r8]
 8008776:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800877a:	4620      	mov	r0, r4
 800877c:	4632      	mov	r2, r6
 800877e:	463b      	mov	r3, r7
 8008780:	4629      	mov	r1, r5
 8008782:	f7f7 fd2b 	bl	80001dc <__adddf3>
 8008786:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800878a:	4602      	mov	r2, r0
 800878c:	460b      	mov	r3, r1
 800878e:	4620      	mov	r0, r4
 8008790:	4629      	mov	r1, r5
 8008792:	f7f7 fd21 	bl	80001d8 <__aeabi_dsub>
 8008796:	4632      	mov	r2, r6
 8008798:	463b      	mov	r3, r7
 800879a:	f7f7 fd1f 	bl	80001dc <__adddf3>
 800879e:	ed9d 7b04 	vldr	d7, [sp, #16]
 80087a2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80087a6:	ed88 7b00 	vstr	d7, [r8]
 80087aa:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80087ae:	e776      	b.n	800869e <__kernel_rem_pio2+0x4f6>
 80087b0:	e9da 8900 	ldrd	r8, r9, [sl]
 80087b4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80087b8:	4640      	mov	r0, r8
 80087ba:	4632      	mov	r2, r6
 80087bc:	463b      	mov	r3, r7
 80087be:	4649      	mov	r1, r9
 80087c0:	f7f7 fd0c 	bl	80001dc <__adddf3>
 80087c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087c8:	4602      	mov	r2, r0
 80087ca:	460b      	mov	r3, r1
 80087cc:	4640      	mov	r0, r8
 80087ce:	4649      	mov	r1, r9
 80087d0:	f7f7 fd02 	bl	80001d8 <__aeabi_dsub>
 80087d4:	4632      	mov	r2, r6
 80087d6:	463b      	mov	r3, r7
 80087d8:	f7f7 fd00 	bl	80001dc <__adddf3>
 80087dc:	ed9d 7b04 	vldr	d7, [sp, #16]
 80087e0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80087e4:	ed8a 7b00 	vstr	d7, [sl]
 80087e8:	3c01      	subs	r4, #1
 80087ea:	e75e      	b.n	80086aa <__kernel_rem_pio2+0x502>
 80087ec:	ab48      	add	r3, sp, #288	; 0x120
 80087ee:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80087f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f6:	f7f7 fcf1 	bl	80001dc <__adddf3>
 80087fa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80087fe:	e75a      	b.n	80086b6 <__kernel_rem_pio2+0x50e>
 8008800:	9b01      	ldr	r3, [sp, #4]
 8008802:	9a01      	ldr	r2, [sp, #4]
 8008804:	601d      	str	r5, [r3, #0]
 8008806:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800880a:	605c      	str	r4, [r3, #4]
 800880c:	609f      	str	r7, [r3, #8]
 800880e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8008812:	60d3      	str	r3, [r2, #12]
 8008814:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008818:	6110      	str	r0, [r2, #16]
 800881a:	6153      	str	r3, [r2, #20]
 800881c:	e72e      	b.n	800867c <__kernel_rem_pio2+0x4d4>
 800881e:	bf00      	nop
 8008820:	41700000 	.word	0x41700000
 8008824:	3e700000 	.word	0x3e700000

08008828 <__kernel_sin>:
 8008828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800882c:	ed2d 8b04 	vpush	{d8-d9}
 8008830:	eeb0 8a41 	vmov.f32	s16, s2
 8008834:	eef0 8a61 	vmov.f32	s17, s3
 8008838:	ec55 4b10 	vmov	r4, r5, d0
 800883c:	b083      	sub	sp, #12
 800883e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008842:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008846:	9001      	str	r0, [sp, #4]
 8008848:	da06      	bge.n	8008858 <__kernel_sin+0x30>
 800884a:	ee10 0a10 	vmov	r0, s0
 800884e:	4629      	mov	r1, r5
 8008850:	f7f8 f914 	bl	8000a7c <__aeabi_d2iz>
 8008854:	2800      	cmp	r0, #0
 8008856:	d051      	beq.n	80088fc <__kernel_sin+0xd4>
 8008858:	4622      	mov	r2, r4
 800885a:	462b      	mov	r3, r5
 800885c:	4620      	mov	r0, r4
 800885e:	4629      	mov	r1, r5
 8008860:	f7f7 fe72 	bl	8000548 <__aeabi_dmul>
 8008864:	4682      	mov	sl, r0
 8008866:	468b      	mov	fp, r1
 8008868:	4602      	mov	r2, r0
 800886a:	460b      	mov	r3, r1
 800886c:	4620      	mov	r0, r4
 800886e:	4629      	mov	r1, r5
 8008870:	f7f7 fe6a 	bl	8000548 <__aeabi_dmul>
 8008874:	a341      	add	r3, pc, #260	; (adr r3, 800897c <__kernel_sin+0x154>)
 8008876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887a:	4680      	mov	r8, r0
 800887c:	4689      	mov	r9, r1
 800887e:	4650      	mov	r0, sl
 8008880:	4659      	mov	r1, fp
 8008882:	f7f7 fe61 	bl	8000548 <__aeabi_dmul>
 8008886:	a33f      	add	r3, pc, #252	; (adr r3, 8008984 <__kernel_sin+0x15c>)
 8008888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888c:	f7f7 fca4 	bl	80001d8 <__aeabi_dsub>
 8008890:	4652      	mov	r2, sl
 8008892:	465b      	mov	r3, fp
 8008894:	f7f7 fe58 	bl	8000548 <__aeabi_dmul>
 8008898:	a33c      	add	r3, pc, #240	; (adr r3, 800898c <__kernel_sin+0x164>)
 800889a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889e:	f7f7 fc9d 	bl	80001dc <__adddf3>
 80088a2:	4652      	mov	r2, sl
 80088a4:	465b      	mov	r3, fp
 80088a6:	f7f7 fe4f 	bl	8000548 <__aeabi_dmul>
 80088aa:	a33a      	add	r3, pc, #232	; (adr r3, 8008994 <__kernel_sin+0x16c>)
 80088ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b0:	f7f7 fc92 	bl	80001d8 <__aeabi_dsub>
 80088b4:	4652      	mov	r2, sl
 80088b6:	465b      	mov	r3, fp
 80088b8:	f7f7 fe46 	bl	8000548 <__aeabi_dmul>
 80088bc:	a337      	add	r3, pc, #220	; (adr r3, 800899c <__kernel_sin+0x174>)
 80088be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c2:	f7f7 fc8b 	bl	80001dc <__adddf3>
 80088c6:	9b01      	ldr	r3, [sp, #4]
 80088c8:	4606      	mov	r6, r0
 80088ca:	460f      	mov	r7, r1
 80088cc:	b9eb      	cbnz	r3, 800890a <__kernel_sin+0xe2>
 80088ce:	4602      	mov	r2, r0
 80088d0:	460b      	mov	r3, r1
 80088d2:	4650      	mov	r0, sl
 80088d4:	4659      	mov	r1, fp
 80088d6:	f7f7 fe37 	bl	8000548 <__aeabi_dmul>
 80088da:	a325      	add	r3, pc, #148	; (adr r3, 8008970 <__kernel_sin+0x148>)
 80088dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e0:	f7f7 fc7a 	bl	80001d8 <__aeabi_dsub>
 80088e4:	4642      	mov	r2, r8
 80088e6:	464b      	mov	r3, r9
 80088e8:	f7f7 fe2e 	bl	8000548 <__aeabi_dmul>
 80088ec:	4602      	mov	r2, r0
 80088ee:	460b      	mov	r3, r1
 80088f0:	4620      	mov	r0, r4
 80088f2:	4629      	mov	r1, r5
 80088f4:	f7f7 fc72 	bl	80001dc <__adddf3>
 80088f8:	4604      	mov	r4, r0
 80088fa:	460d      	mov	r5, r1
 80088fc:	ec45 4b10 	vmov	d0, r4, r5
 8008900:	b003      	add	sp, #12
 8008902:	ecbd 8b04 	vpop	{d8-d9}
 8008906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800890a:	4b1b      	ldr	r3, [pc, #108]	; (8008978 <__kernel_sin+0x150>)
 800890c:	ec51 0b18 	vmov	r0, r1, d8
 8008910:	2200      	movs	r2, #0
 8008912:	f7f7 fe19 	bl	8000548 <__aeabi_dmul>
 8008916:	4632      	mov	r2, r6
 8008918:	ec41 0b19 	vmov	d9, r0, r1
 800891c:	463b      	mov	r3, r7
 800891e:	4640      	mov	r0, r8
 8008920:	4649      	mov	r1, r9
 8008922:	f7f7 fe11 	bl	8000548 <__aeabi_dmul>
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	ec51 0b19 	vmov	r0, r1, d9
 800892e:	f7f7 fc53 	bl	80001d8 <__aeabi_dsub>
 8008932:	4652      	mov	r2, sl
 8008934:	465b      	mov	r3, fp
 8008936:	f7f7 fe07 	bl	8000548 <__aeabi_dmul>
 800893a:	ec53 2b18 	vmov	r2, r3, d8
 800893e:	f7f7 fc4b 	bl	80001d8 <__aeabi_dsub>
 8008942:	a30b      	add	r3, pc, #44	; (adr r3, 8008970 <__kernel_sin+0x148>)
 8008944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008948:	4606      	mov	r6, r0
 800894a:	460f      	mov	r7, r1
 800894c:	4640      	mov	r0, r8
 800894e:	4649      	mov	r1, r9
 8008950:	f7f7 fdfa 	bl	8000548 <__aeabi_dmul>
 8008954:	4602      	mov	r2, r0
 8008956:	460b      	mov	r3, r1
 8008958:	4630      	mov	r0, r6
 800895a:	4639      	mov	r1, r7
 800895c:	f7f7 fc3e 	bl	80001dc <__adddf3>
 8008960:	4602      	mov	r2, r0
 8008962:	460b      	mov	r3, r1
 8008964:	4620      	mov	r0, r4
 8008966:	4629      	mov	r1, r5
 8008968:	f7f7 fc36 	bl	80001d8 <__aeabi_dsub>
 800896c:	e7c4      	b.n	80088f8 <__kernel_sin+0xd0>
 800896e:	bf00      	nop
 8008970:	55555549 	.word	0x55555549
 8008974:	3fc55555 	.word	0x3fc55555
 8008978:	3fe00000 	.word	0x3fe00000
 800897c:	5acfd57c 	.word	0x5acfd57c
 8008980:	3de5d93a 	.word	0x3de5d93a
 8008984:	8a2b9ceb 	.word	0x8a2b9ceb
 8008988:	3e5ae5e6 	.word	0x3e5ae5e6
 800898c:	57b1fe7d 	.word	0x57b1fe7d
 8008990:	3ec71de3 	.word	0x3ec71de3
 8008994:	19c161d5 	.word	0x19c161d5
 8008998:	3f2a01a0 	.word	0x3f2a01a0
 800899c:	1110f8a6 	.word	0x1110f8a6
 80089a0:	3f811111 	.word	0x3f811111

080089a4 <fabs>:
 80089a4:	ec51 0b10 	vmov	r0, r1, d0
 80089a8:	ee10 2a10 	vmov	r2, s0
 80089ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80089b0:	ec43 2b10 	vmov	d0, r2, r3
 80089b4:	4770      	bx	lr
	...

080089b8 <floor>:
 80089b8:	ec51 0b10 	vmov	r0, r1, d0
 80089bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089c0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80089c4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80089c8:	2e13      	cmp	r6, #19
 80089ca:	ee10 5a10 	vmov	r5, s0
 80089ce:	ee10 8a10 	vmov	r8, s0
 80089d2:	460c      	mov	r4, r1
 80089d4:	dc32      	bgt.n	8008a3c <floor+0x84>
 80089d6:	2e00      	cmp	r6, #0
 80089d8:	da14      	bge.n	8008a04 <floor+0x4c>
 80089da:	a333      	add	r3, pc, #204	; (adr r3, 8008aa8 <floor+0xf0>)
 80089dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e0:	f7f7 fbfc 	bl	80001dc <__adddf3>
 80089e4:	2200      	movs	r2, #0
 80089e6:	2300      	movs	r3, #0
 80089e8:	f7f8 f83e 	bl	8000a68 <__aeabi_dcmpgt>
 80089ec:	b138      	cbz	r0, 80089fe <floor+0x46>
 80089ee:	2c00      	cmp	r4, #0
 80089f0:	da57      	bge.n	8008aa2 <floor+0xea>
 80089f2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80089f6:	431d      	orrs	r5, r3
 80089f8:	d001      	beq.n	80089fe <floor+0x46>
 80089fa:	4c2d      	ldr	r4, [pc, #180]	; (8008ab0 <floor+0xf8>)
 80089fc:	2500      	movs	r5, #0
 80089fe:	4621      	mov	r1, r4
 8008a00:	4628      	mov	r0, r5
 8008a02:	e025      	b.n	8008a50 <floor+0x98>
 8008a04:	4f2b      	ldr	r7, [pc, #172]	; (8008ab4 <floor+0xfc>)
 8008a06:	4137      	asrs	r7, r6
 8008a08:	ea01 0307 	and.w	r3, r1, r7
 8008a0c:	4303      	orrs	r3, r0
 8008a0e:	d01f      	beq.n	8008a50 <floor+0x98>
 8008a10:	a325      	add	r3, pc, #148	; (adr r3, 8008aa8 <floor+0xf0>)
 8008a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a16:	f7f7 fbe1 	bl	80001dc <__adddf3>
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	f7f8 f823 	bl	8000a68 <__aeabi_dcmpgt>
 8008a22:	2800      	cmp	r0, #0
 8008a24:	d0eb      	beq.n	80089fe <floor+0x46>
 8008a26:	2c00      	cmp	r4, #0
 8008a28:	bfbe      	ittt	lt
 8008a2a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008a2e:	fa43 f606 	asrlt.w	r6, r3, r6
 8008a32:	19a4      	addlt	r4, r4, r6
 8008a34:	ea24 0407 	bic.w	r4, r4, r7
 8008a38:	2500      	movs	r5, #0
 8008a3a:	e7e0      	b.n	80089fe <floor+0x46>
 8008a3c:	2e33      	cmp	r6, #51	; 0x33
 8008a3e:	dd0b      	ble.n	8008a58 <floor+0xa0>
 8008a40:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008a44:	d104      	bne.n	8008a50 <floor+0x98>
 8008a46:	ee10 2a10 	vmov	r2, s0
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	f7f7 fbc6 	bl	80001dc <__adddf3>
 8008a50:	ec41 0b10 	vmov	d0, r0, r1
 8008a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a58:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008a5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a60:	fa23 f707 	lsr.w	r7, r3, r7
 8008a64:	4207      	tst	r7, r0
 8008a66:	d0f3      	beq.n	8008a50 <floor+0x98>
 8008a68:	a30f      	add	r3, pc, #60	; (adr r3, 8008aa8 <floor+0xf0>)
 8008a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6e:	f7f7 fbb5 	bl	80001dc <__adddf3>
 8008a72:	2200      	movs	r2, #0
 8008a74:	2300      	movs	r3, #0
 8008a76:	f7f7 fff7 	bl	8000a68 <__aeabi_dcmpgt>
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	d0bf      	beq.n	80089fe <floor+0x46>
 8008a7e:	2c00      	cmp	r4, #0
 8008a80:	da02      	bge.n	8008a88 <floor+0xd0>
 8008a82:	2e14      	cmp	r6, #20
 8008a84:	d103      	bne.n	8008a8e <floor+0xd6>
 8008a86:	3401      	adds	r4, #1
 8008a88:	ea25 0507 	bic.w	r5, r5, r7
 8008a8c:	e7b7      	b.n	80089fe <floor+0x46>
 8008a8e:	2301      	movs	r3, #1
 8008a90:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008a94:	fa03 f606 	lsl.w	r6, r3, r6
 8008a98:	4435      	add	r5, r6
 8008a9a:	4545      	cmp	r5, r8
 8008a9c:	bf38      	it	cc
 8008a9e:	18e4      	addcc	r4, r4, r3
 8008aa0:	e7f2      	b.n	8008a88 <floor+0xd0>
 8008aa2:	2500      	movs	r5, #0
 8008aa4:	462c      	mov	r4, r5
 8008aa6:	e7aa      	b.n	80089fe <floor+0x46>
 8008aa8:	8800759c 	.word	0x8800759c
 8008aac:	7e37e43c 	.word	0x7e37e43c
 8008ab0:	bff00000 	.word	0xbff00000
 8008ab4:	000fffff 	.word	0x000fffff

08008ab8 <scalbn>:
 8008ab8:	b570      	push	{r4, r5, r6, lr}
 8008aba:	ec55 4b10 	vmov	r4, r5, d0
 8008abe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008ac2:	4606      	mov	r6, r0
 8008ac4:	462b      	mov	r3, r5
 8008ac6:	b99a      	cbnz	r2, 8008af0 <scalbn+0x38>
 8008ac8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008acc:	4323      	orrs	r3, r4
 8008ace:	d036      	beq.n	8008b3e <scalbn+0x86>
 8008ad0:	4b39      	ldr	r3, [pc, #228]	; (8008bb8 <scalbn+0x100>)
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	ee10 0a10 	vmov	r0, s0
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f7f7 fd35 	bl	8000548 <__aeabi_dmul>
 8008ade:	4b37      	ldr	r3, [pc, #220]	; (8008bbc <scalbn+0x104>)
 8008ae0:	429e      	cmp	r6, r3
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	460d      	mov	r5, r1
 8008ae6:	da10      	bge.n	8008b0a <scalbn+0x52>
 8008ae8:	a32b      	add	r3, pc, #172	; (adr r3, 8008b98 <scalbn+0xe0>)
 8008aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aee:	e03a      	b.n	8008b66 <scalbn+0xae>
 8008af0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008af4:	428a      	cmp	r2, r1
 8008af6:	d10c      	bne.n	8008b12 <scalbn+0x5a>
 8008af8:	ee10 2a10 	vmov	r2, s0
 8008afc:	4620      	mov	r0, r4
 8008afe:	4629      	mov	r1, r5
 8008b00:	f7f7 fb6c 	bl	80001dc <__adddf3>
 8008b04:	4604      	mov	r4, r0
 8008b06:	460d      	mov	r5, r1
 8008b08:	e019      	b.n	8008b3e <scalbn+0x86>
 8008b0a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008b0e:	460b      	mov	r3, r1
 8008b10:	3a36      	subs	r2, #54	; 0x36
 8008b12:	4432      	add	r2, r6
 8008b14:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008b18:	428a      	cmp	r2, r1
 8008b1a:	dd08      	ble.n	8008b2e <scalbn+0x76>
 8008b1c:	2d00      	cmp	r5, #0
 8008b1e:	a120      	add	r1, pc, #128	; (adr r1, 8008ba0 <scalbn+0xe8>)
 8008b20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b24:	da1c      	bge.n	8008b60 <scalbn+0xa8>
 8008b26:	a120      	add	r1, pc, #128	; (adr r1, 8008ba8 <scalbn+0xf0>)
 8008b28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b2c:	e018      	b.n	8008b60 <scalbn+0xa8>
 8008b2e:	2a00      	cmp	r2, #0
 8008b30:	dd08      	ble.n	8008b44 <scalbn+0x8c>
 8008b32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008b36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008b3a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008b3e:	ec45 4b10 	vmov	d0, r4, r5
 8008b42:	bd70      	pop	{r4, r5, r6, pc}
 8008b44:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008b48:	da19      	bge.n	8008b7e <scalbn+0xc6>
 8008b4a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008b4e:	429e      	cmp	r6, r3
 8008b50:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008b54:	dd0a      	ble.n	8008b6c <scalbn+0xb4>
 8008b56:	a112      	add	r1, pc, #72	; (adr r1, 8008ba0 <scalbn+0xe8>)
 8008b58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d1e2      	bne.n	8008b26 <scalbn+0x6e>
 8008b60:	a30f      	add	r3, pc, #60	; (adr r3, 8008ba0 <scalbn+0xe8>)
 8008b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b66:	f7f7 fcef 	bl	8000548 <__aeabi_dmul>
 8008b6a:	e7cb      	b.n	8008b04 <scalbn+0x4c>
 8008b6c:	a10a      	add	r1, pc, #40	; (adr r1, 8008b98 <scalbn+0xe0>)
 8008b6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d0b8      	beq.n	8008ae8 <scalbn+0x30>
 8008b76:	a10e      	add	r1, pc, #56	; (adr r1, 8008bb0 <scalbn+0xf8>)
 8008b78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b7c:	e7b4      	b.n	8008ae8 <scalbn+0x30>
 8008b7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008b82:	3236      	adds	r2, #54	; 0x36
 8008b84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008b88:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	4b0c      	ldr	r3, [pc, #48]	; (8008bc0 <scalbn+0x108>)
 8008b90:	2200      	movs	r2, #0
 8008b92:	e7e8      	b.n	8008b66 <scalbn+0xae>
 8008b94:	f3af 8000 	nop.w
 8008b98:	c2f8f359 	.word	0xc2f8f359
 8008b9c:	01a56e1f 	.word	0x01a56e1f
 8008ba0:	8800759c 	.word	0x8800759c
 8008ba4:	7e37e43c 	.word	0x7e37e43c
 8008ba8:	8800759c 	.word	0x8800759c
 8008bac:	fe37e43c 	.word	0xfe37e43c
 8008bb0:	c2f8f359 	.word	0xc2f8f359
 8008bb4:	81a56e1f 	.word	0x81a56e1f
 8008bb8:	43500000 	.word	0x43500000
 8008bbc:	ffff3cb0 	.word	0xffff3cb0
 8008bc0:	3c900000 	.word	0x3c900000

08008bc4 <_init>:
 8008bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc6:	bf00      	nop
 8008bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bca:	bc08      	pop	{r3}
 8008bcc:	469e      	mov	lr, r3
 8008bce:	4770      	bx	lr

08008bd0 <_fini>:
 8008bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd2:	bf00      	nop
 8008bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bd6:	bc08      	pop	{r3}
 8008bd8:	469e      	mov	lr, r3
 8008bda:	4770      	bx	lr
