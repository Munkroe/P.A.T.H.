
MotorController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c84  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08008e18  08008e18  00018e18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009038  08009038  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08009038  08009038  00019038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009040  08009040  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009040  08009040  00019040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009044  08009044  00019044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08009048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d0  20000018  08009060  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  08009060  000204e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016bef  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a26  00000000  00000000  00036c37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c0  00000000  00000000  00039660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  0003aa20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000374f  00000000  00000000  0003bce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014461  00000000  00000000  0003f437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbeee  00000000  00000000  00053898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012f786  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000589c  00000000  00000000  0012f7dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008dfc 	.word	0x08008dfc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	08008dfc 	.word	0x08008dfc

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b96e 	b.w	8000e60 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	468c      	mov	ip, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 8083 	bne.w	8000cb2 <__udivmoddi4+0x116>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	4617      	mov	r7, r2
 8000bb0:	d947      	bls.n	8000c42 <__udivmoddi4+0xa6>
 8000bb2:	fab2 f282 	clz	r2, r2
 8000bb6:	b142      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb8:	f1c2 0020 	rsb	r0, r2, #32
 8000bbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000bc0:	4091      	lsls	r1, r2
 8000bc2:	4097      	lsls	r7, r2
 8000bc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000bc8:	4094      	lsls	r4, r2
 8000bca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000bd4:	fa1f fe87 	uxth.w	lr, r7
 8000bd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be0:	fb06 f10e 	mul.w	r1, r6, lr
 8000be4:	4299      	cmp	r1, r3
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x60>
 8000be8:	18fb      	adds	r3, r7, r3
 8000bea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bee:	f080 8119 	bcs.w	8000e24 <__udivmoddi4+0x288>
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	f240 8116 	bls.w	8000e24 <__udivmoddi4+0x288>
 8000bf8:	3e02      	subs	r6, #2
 8000bfa:	443b      	add	r3, r7
 8000bfc:	1a5b      	subs	r3, r3, r1
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c04:	fb08 3310 	mls	r3, r8, r0, r3
 8000c08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	45a6      	cmp	lr, r4
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x8c>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1a:	f080 8105 	bcs.w	8000e28 <__udivmoddi4+0x28c>
 8000c1e:	45a6      	cmp	lr, r4
 8000c20:	f240 8102 	bls.w	8000e28 <__udivmoddi4+0x28c>
 8000c24:	3802      	subs	r0, #2
 8000c26:	443c      	add	r4, r7
 8000c28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	2600      	movs	r6, #0
 8000c32:	b11d      	cbz	r5, 8000c3c <__udivmoddi4+0xa0>
 8000c34:	40d4      	lsrs	r4, r2
 8000c36:	2300      	movs	r3, #0
 8000c38:	e9c5 4300 	strd	r4, r3, [r5]
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	b902      	cbnz	r2, 8000c46 <__udivmoddi4+0xaa>
 8000c44:	deff      	udf	#255	; 0xff
 8000c46:	fab2 f282 	clz	r2, r2
 8000c4a:	2a00      	cmp	r2, #0
 8000c4c:	d150      	bne.n	8000cf0 <__udivmoddi4+0x154>
 8000c4e:	1bcb      	subs	r3, r1, r7
 8000c50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c54:	fa1f f887 	uxth.w	r8, r7
 8000c58:	2601      	movs	r6, #1
 8000c5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c5e:	0c21      	lsrs	r1, r4, #16
 8000c60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c68:	fb08 f30c 	mul.w	r3, r8, ip
 8000c6c:	428b      	cmp	r3, r1
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0xe4>
 8000c70:	1879      	adds	r1, r7, r1
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0xe2>
 8000c78:	428b      	cmp	r3, r1
 8000c7a:	f200 80e9 	bhi.w	8000e50 <__udivmoddi4+0x2b4>
 8000c7e:	4684      	mov	ip, r0
 8000c80:	1ac9      	subs	r1, r1, r3
 8000c82:	b2a3      	uxth	r3, r4
 8000c84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c90:	fb08 f800 	mul.w	r8, r8, r0
 8000c94:	45a0      	cmp	r8, r4
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0x10c>
 8000c98:	193c      	adds	r4, r7, r4
 8000c9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x10a>
 8000ca0:	45a0      	cmp	r8, r4
 8000ca2:	f200 80d9 	bhi.w	8000e58 <__udivmoddi4+0x2bc>
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	eba4 0408 	sub.w	r4, r4, r8
 8000cac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cb0:	e7bf      	b.n	8000c32 <__udivmoddi4+0x96>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0x12e>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80b1 	beq.w	8000e1e <__udivmoddi4+0x282>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x1cc>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0x140>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80b8 	bhi.w	8000e4c <__udivmoddi4+0x2b0>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0103 	sbc.w	r1, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	468c      	mov	ip, r1
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0a8      	beq.n	8000c3c <__udivmoddi4+0xa0>
 8000cea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cee:	e7a5      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f603 	lsr.w	r6, r0, r3
 8000cf8:	4097      	lsls	r7, r2
 8000cfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000cfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d02:	40d9      	lsrs	r1, r3
 8000d04:	4330      	orrs	r0, r6
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d0c:	fa1f f887 	uxth.w	r8, r7
 8000d10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d18:	fb06 f108 	mul.w	r1, r6, r8
 8000d1c:	4299      	cmp	r1, r3
 8000d1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x19c>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d2a:	f080 808d 	bcs.w	8000e48 <__udivmoddi4+0x2ac>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 808a 	bls.w	8000e48 <__udivmoddi4+0x2ac>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b281      	uxth	r1, r0
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d48:	fb00 f308 	mul.w	r3, r0, r8
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	d907      	bls.n	8000d60 <__udivmoddi4+0x1c4>
 8000d50:	1879      	adds	r1, r7, r1
 8000d52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d56:	d273      	bcs.n	8000e40 <__udivmoddi4+0x2a4>
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d971      	bls.n	8000e40 <__udivmoddi4+0x2a4>
 8000d5c:	3802      	subs	r0, #2
 8000d5e:	4439      	add	r1, r7
 8000d60:	1acb      	subs	r3, r1, r3
 8000d62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d66:	e778      	b.n	8000c5a <__udivmoddi4+0xbe>
 8000d68:	f1c6 0c20 	rsb	ip, r6, #32
 8000d6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d74:	431c      	orrs	r4, r3
 8000d76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d86:	431f      	orrs	r7, r3
 8000d88:	0c3b      	lsrs	r3, r7, #16
 8000d8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d8e:	fa1f f884 	uxth.w	r8, r4
 8000d92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d9e:	458a      	cmp	sl, r1
 8000da0:	fa02 f206 	lsl.w	r2, r2, r6
 8000da4:	fa00 f306 	lsl.w	r3, r0, r6
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x220>
 8000daa:	1861      	adds	r1, r4, r1
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db0:	d248      	bcs.n	8000e44 <__udivmoddi4+0x2a8>
 8000db2:	458a      	cmp	sl, r1
 8000db4:	d946      	bls.n	8000e44 <__udivmoddi4+0x2a8>
 8000db6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dba:	4421      	add	r1, r4
 8000dbc:	eba1 010a 	sub.w	r1, r1, sl
 8000dc0:	b2bf      	uxth	r7, r7
 8000dc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dce:	fb00 f808 	mul.w	r8, r0, r8
 8000dd2:	45b8      	cmp	r8, r7
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x24a>
 8000dd6:	19e7      	adds	r7, r4, r7
 8000dd8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ddc:	d22e      	bcs.n	8000e3c <__udivmoddi4+0x2a0>
 8000dde:	45b8      	cmp	r8, r7
 8000de0:	d92c      	bls.n	8000e3c <__udivmoddi4+0x2a0>
 8000de2:	3802      	subs	r0, #2
 8000de4:	4427      	add	r7, r4
 8000de6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dea:	eba7 0708 	sub.w	r7, r7, r8
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	454f      	cmp	r7, r9
 8000df4:	46c6      	mov	lr, r8
 8000df6:	4649      	mov	r1, r9
 8000df8:	d31a      	bcc.n	8000e30 <__udivmoddi4+0x294>
 8000dfa:	d017      	beq.n	8000e2c <__udivmoddi4+0x290>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x27a>
 8000dfe:	ebb3 020e 	subs.w	r2, r3, lr
 8000e02:	eb67 0701 	sbc.w	r7, r7, r1
 8000e06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e0a:	40f2      	lsrs	r2, r6
 8000e0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e10:	40f7      	lsrs	r7, r6
 8000e12:	e9c5 2700 	strd	r2, r7, [r5]
 8000e16:	2600      	movs	r6, #0
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	462e      	mov	r6, r5
 8000e20:	4628      	mov	r0, r5
 8000e22:	e70b      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000e24:	4606      	mov	r6, r0
 8000e26:	e6e9      	b.n	8000bfc <__udivmoddi4+0x60>
 8000e28:	4618      	mov	r0, r3
 8000e2a:	e6fd      	b.n	8000c28 <__udivmoddi4+0x8c>
 8000e2c:	4543      	cmp	r3, r8
 8000e2e:	d2e5      	bcs.n	8000dfc <__udivmoddi4+0x260>
 8000e30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e34:	eb69 0104 	sbc.w	r1, r9, r4
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e7df      	b.n	8000dfc <__udivmoddi4+0x260>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	e7d2      	b.n	8000de6 <__udivmoddi4+0x24a>
 8000e40:	4660      	mov	r0, ip
 8000e42:	e78d      	b.n	8000d60 <__udivmoddi4+0x1c4>
 8000e44:	4681      	mov	r9, r0
 8000e46:	e7b9      	b.n	8000dbc <__udivmoddi4+0x220>
 8000e48:	4666      	mov	r6, ip
 8000e4a:	e775      	b.n	8000d38 <__udivmoddi4+0x19c>
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	e74a      	b.n	8000ce6 <__udivmoddi4+0x14a>
 8000e50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e54:	4439      	add	r1, r7
 8000e56:	e713      	b.n	8000c80 <__udivmoddi4+0xe4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	443c      	add	r4, r7
 8000e5c:	e724      	b.n	8000ca8 <__udivmoddi4+0x10c>
 8000e5e:	bf00      	nop

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <to_frame>:

#include "comm_relay.h"
#include "stdint.h"
#include "main.h"

int to_frame(char * frame, uint8_t *revolutionAddr, uint8_t *ID) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]

	int i = 2, j = 0, PACKAGE_SIZE = 0;
 8000e70:	2302      	movs	r3, #2
 8000e72:	61fb      	str	r3, [r7, #28]
 8000e74:	2300      	movs	r3, #0
 8000e76:	61bb      	str	r3, [r7, #24]
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]

	frame[0] = COMM_DEL_START;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2224      	movs	r2, #36	; 0x24
 8000e80:	701a      	strb	r2, [r3, #0]
	frame[1] = ID;
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	3301      	adds	r3, #1
 8000e88:	b2d2      	uxtb	r2, r2
 8000e8a:	701a      	strb	r2, [r3, #0]

	if (ID == 3) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b03      	cmp	r3, #3
 8000e90:	d102      	bne.n	8000e98 <to_frame+0x34>
		PACKAGE_SIZE = 5;
 8000e92:	2305      	movs	r3, #5
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	e02d      	b.n	8000ef4 <to_frame+0x90>
	} else if (ID == 2) {
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d12a      	bne.n	8000ef4 <to_frame+0x90>
		PACKAGE_SIZE = 24;
 8000e9e:	2318      	movs	r3, #24
 8000ea0:	617b      	str	r3, [r7, #20]
	}

	for (; i < FRAME_SIZE && j < PACKAGE_SIZE; i++, j++) {
 8000ea2:	e027      	b.n	8000ef4 <to_frame+0x90>
		char c;
		c = *(revolutionAddr + j);
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	68ba      	ldr	r2, [r7, #8]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	74fb      	strb	r3, [r7, #19]

		if (is_special_character(c)) {
 8000eae:	7cfb      	ldrb	r3, [r7, #19]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f000 f830 	bl	8000f16 <is_special_character>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d010      	beq.n	8000ede <to_frame+0x7a>
			frame[i] = COMM_ESCAPE;
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	2223      	movs	r2, #35	; 0x23
 8000ec4:	701a      	strb	r2, [r3, #0]
			frame[i+1] = c + 2;
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	4413      	add	r3, r2
 8000ece:	7cfa      	ldrb	r2, [r7, #19]
 8000ed0:	3202      	adds	r2, #2
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	701a      	strb	r2, [r3, #0]
			i++;
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	61fb      	str	r3, [r7, #28]
 8000edc:	e004      	b.n	8000ee8 <to_frame+0x84>
		} else {
			frame[i] = c;
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	68fa      	ldr	r2, [r7, #12]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	7cfa      	ldrb	r2, [r7, #19]
 8000ee6:	701a      	strb	r2, [r3, #0]
	for (; i < FRAME_SIZE && j < PACKAGE_SIZE; i++, j++) {
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	3301      	adds	r3, #1
 8000eec:	61fb      	str	r3, [r7, #28]
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	61bb      	str	r3, [r7, #24]
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	2b32      	cmp	r3, #50	; 0x32
 8000ef8:	dc03      	bgt.n	8000f02 <to_frame+0x9e>
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	dbd0      	blt.n	8000ea4 <to_frame+0x40>
		}
	}

	frame[i] = COMM_DEL_STOP;
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	68fa      	ldr	r2, [r7, #12]
 8000f06:	4413      	add	r3, r2
 8000f08:	2240      	movs	r2, #64	; 0x40
 8000f0a:	701a      	strb	r2, [r3, #0]

	return 1;
 8000f0c:	2301      	movs	r3, #1
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3720      	adds	r7, #32
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <is_special_character>:


int is_special_character(char c) {
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	71fb      	strb	r3, [r7, #7]
	if ((c == COMM_DEL_START) || (c == COMM_DEL_STOP) || (c == COMM_ESCAPE) || (c == 0)) return 1;
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	2b24      	cmp	r3, #36	; 0x24
 8000f24:	d008      	beq.n	8000f38 <is_special_character+0x22>
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	2b40      	cmp	r3, #64	; 0x40
 8000f2a:	d005      	beq.n	8000f38 <is_special_character+0x22>
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	2b23      	cmp	r3, #35	; 0x23
 8000f30:	d002      	beq.n	8000f38 <is_special_character+0x22>
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d101      	bne.n	8000f3c <is_special_character+0x26>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e000      	b.n	8000f3e <is_special_character+0x28>
	return 0;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <from_frame>:

int from_frame(const char * frame, size_t len, char * destination, uint32_t *outputLen) {
 8000f4a:	b480      	push	{r7}
 8000f4c:	b089      	sub	sp, #36	; 0x24
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	60f8      	str	r0, [r7, #12]
 8000f52:	60b9      	str	r1, [r7, #8]
 8000f54:	607a      	str	r2, [r7, #4]
 8000f56:	603b      	str	r3, [r7, #0]
	uint32_t indexFrame = 0, indexDest = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61bb      	str	r3, [r7, #24]

	if (frame[0] == COMM_DEL_START) indexFrame++;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b24      	cmp	r3, #36	; 0x24
 8000f66:	d137      	bne.n	8000fd8 <from_frame+0x8e>
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	61fb      	str	r3, [r7, #28]

	for (; indexFrame < len - 1; indexFrame++, indexDest++) {
 8000f6e:	e033      	b.n	8000fd8 <from_frame+0x8e>
		char c = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	75fb      	strb	r3, [r7, #23]

		if (frame[indexFrame] == COMM_DEL_START) return -1; // If we meet start delimiter inside frame data, something's wrong.
 8000f74:	68fa      	ldr	r2, [r7, #12]
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	4413      	add	r3, r2
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b24      	cmp	r3, #36	; 0x24
 8000f7e:	d102      	bne.n	8000f86 <from_frame+0x3c>
 8000f80:	f04f 33ff 	mov.w	r3, #4294967295
 8000f84:	e044      	b.n	8001010 <from_frame+0xc6>
		if (frame[indexFrame] == COMM_DEL_STOP) return 1; // If we meet stop delimiter inside frame data, it is just a shorter message.
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b40      	cmp	r3, #64	; 0x40
 8000f90:	d101      	bne.n	8000f96 <from_frame+0x4c>
 8000f92:	2301      	movs	r3, #1
 8000f94:	e03c      	b.n	8001010 <from_frame+0xc6>

		if (frame[indexFrame] == COMM_ESCAPE) {
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b23      	cmp	r3, #35	; 0x23
 8000fa0:	d10a      	bne.n	8000fb8 <from_frame+0x6e>
			c = frame[indexFrame+1] - 2; // Return the character after the escape character minus 2
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	3b02      	subs	r3, #2
 8000fae:	75fb      	strb	r3, [r7, #23]
			indexFrame++;
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	61fb      	str	r3, [r7, #28]
 8000fb6:	e004      	b.n	8000fc2 <from_frame+0x78>
		}
		else c = frame[indexFrame]; // There was no escape character, so return it
 8000fb8:	68fa      	ldr	r2, [r7, #12]
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	75fb      	strb	r3, [r7, #23]

		destination[indexDest] = c; 	// Insert the data
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	7dfa      	ldrb	r2, [r7, #23]
 8000fca:	701a      	strb	r2, [r3, #0]
	for (; indexFrame < len - 1; indexFrame++, indexDest++) {
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	61fb      	str	r3, [r7, #28]
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	61bb      	str	r3, [r7, #24]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	69fa      	ldr	r2, [r7, #28]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d3c6      	bcc.n	8000f70 <from_frame+0x26>
	}

	// Check whether the last character is either the specified stop delimiter or '0'
	if (indexFrame < len) {
 8000fe2:	69fa      	ldr	r2, [r7, #28]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d20e      	bcs.n	8001008 <from_frame+0xbe>
		if (!(frame[indexFrame] == COMM_DEL_STOP || frame[indexFrame] == 0)) return -1;
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	4413      	add	r3, r2
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b40      	cmp	r3, #64	; 0x40
 8000ff4:	d008      	beq.n	8001008 <from_frame+0xbe>
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d002      	beq.n	8001008 <from_frame+0xbe>
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	e003      	b.n	8001010 <from_frame+0xc6>
	}

	*outputLen = indexDest;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	601a      	str	r2, [r3, #0]

	return 1;
 800100e:	2301      	movs	r3, #1
}
 8001010:	4618      	mov	r0, r3
 8001012:	3724      	adds	r7, #36	; 0x24
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	0000      	movs	r0, r0
	...

08001020 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001020:	b5b0      	push	{r4, r5, r7, lr}
 8001022:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001024:	f001 feeb 	bl	8002dfe <HAL_Init>

	/* USER CODE BEGIN Init */

	// Motor Initialization
	motor_init(&motorR, 'R');
 8001028:	2152      	movs	r1, #82	; 0x52
 800102a:	484b      	ldr	r0, [pc, #300]	; (8001158 <main+0x138>)
 800102c:	f000 fbc8 	bl	80017c0 <motor_init>
	motor_init(&motorL, 'L');
 8001030:	214c      	movs	r1, #76	; 0x4c
 8001032:	484a      	ldr	r0, [pc, #296]	; (800115c <main+0x13c>)
 8001034:	f000 fbc4 	bl	80017c0 <motor_init>

	motorEncoder_init(&encoderR);
 8001038:	4849      	ldr	r0, [pc, #292]	; (8001160 <main+0x140>)
 800103a:	f000 fbd7 	bl	80017ec <motorEncoder_init>
	motorEncoder_init(&encoderL);
 800103e:	4849      	ldr	r0, [pc, #292]	; (8001164 <main+0x144>)
 8001040:	f000 fbd4 	bl	80017ec <motorEncoder_init>

	motorController_init(&controllerR, &motorR, &encoderR);
 8001044:	4a46      	ldr	r2, [pc, #280]	; (8001160 <main+0x140>)
 8001046:	4944      	ldr	r1, [pc, #272]	; (8001158 <main+0x138>)
 8001048:	4847      	ldr	r0, [pc, #284]	; (8001168 <main+0x148>)
 800104a:	f000 fbea 	bl	8001822 <motorController_init>
	motorController_init(&controllerL, &motorL, &encoderL);
 800104e:	4a45      	ldr	r2, [pc, #276]	; (8001164 <main+0x144>)
 8001050:	4942      	ldr	r1, [pc, #264]	; (800115c <main+0x13c>)
 8001052:	4846      	ldr	r0, [pc, #280]	; (800116c <main+0x14c>)
 8001054:	f000 fbe5 	bl	8001822 <motorController_init>

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001058:	f000 f89c 	bl	8001194 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800105c:	f000 fb0e 	bl	800167c <MX_GPIO_Init>
	MX_DMA_Init();
 8001060:	f000 faee 	bl	8001640 <MX_DMA_Init>
	MX_TIM1_Init();
 8001064:	f000 f95c 	bl	8001320 <MX_TIM1_Init>
	MX_TIM6_Init();
 8001068:	f000 fa4c 	bl	8001504 <MX_TIM6_Init>
	MX_USART2_UART_Init();
 800106c:	f000 fab8 	bl	80015e0 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8001070:	f000 f8e2 	bl	8001238 <MX_ADC1_Init>
	MX_TIM7_Init();
 8001074:	f000 fa7c 	bl	8001570 <MX_TIM7_Init>
	MX_TIM2_Init();
 8001078:	f000 f9ee 	bl	8001458 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	positionCalculationPeriod = ((htim6.Instance->ARR + 1)
 800107c:	4b3c      	ldr	r3, [pc, #240]	; (8001170 <main+0x150>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001082:	3301      	adds	r3, #1
				/ (80000000.0 / (htim6.Instance->PSC + 1)));
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff f9e5 	bl	8000454 <__aeabi_ui2d>
 800108a:	4604      	mov	r4, r0
 800108c:	460d      	mov	r5, r1
 800108e:	4b38      	ldr	r3, [pc, #224]	; (8001170 <main+0x150>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001094:	3301      	adds	r3, #1
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff f9dc 	bl	8000454 <__aeabi_ui2d>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	a12b      	add	r1, pc, #172	; (adr r1, 8001150 <main+0x130>)
 80010a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010a6:	f7ff fb79 	bl	800079c <__aeabi_ddiv>
 80010aa:	4602      	mov	r2, r0
 80010ac:	460b      	mov	r3, r1
 80010ae:	4620      	mov	r0, r4
 80010b0:	4629      	mov	r1, r5
 80010b2:	f7ff fb73 	bl	800079c <__aeabi_ddiv>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4610      	mov	r0, r2
 80010bc:	4619      	mov	r1, r3
 80010be:	f7ff fd05 	bl	8000acc <__aeabi_d2f>
 80010c2:	4603      	mov	r3, r0
	positionCalculationPeriod = ((htim6.Instance->ARR + 1)
 80010c4:	4a2b      	ldr	r2, [pc, #172]	; (8001174 <main+0x154>)
 80010c6:	6013      	str	r3, [r2, #0]
	controllerPeriod = ((htim2.Instance->ARR + 1)
 80010c8:	4b2b      	ldr	r3, [pc, #172]	; (8001178 <main+0x158>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ce:	3301      	adds	r3, #1
				/ (80000000.0 / (htim2.Instance->PSC + 1)));
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff f9bf 	bl	8000454 <__aeabi_ui2d>
 80010d6:	4604      	mov	r4, r0
 80010d8:	460d      	mov	r5, r1
 80010da:	4b27      	ldr	r3, [pc, #156]	; (8001178 <main+0x158>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e0:	3301      	adds	r3, #1
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff f9b6 	bl	8000454 <__aeabi_ui2d>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	a118      	add	r1, pc, #96	; (adr r1, 8001150 <main+0x130>)
 80010ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010f2:	f7ff fb53 	bl	800079c <__aeabi_ddiv>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4620      	mov	r0, r4
 80010fc:	4629      	mov	r1, r5
 80010fe:	f7ff fb4d 	bl	800079c <__aeabi_ddiv>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4610      	mov	r0, r2
 8001108:	4619      	mov	r1, r3
 800110a:	f7ff fcdf 	bl	8000acc <__aeabi_d2f>
 800110e:	4603      	mov	r3, r0
	controllerPeriod = ((htim2.Instance->ARR + 1)
 8001110:	4a1a      	ldr	r2, [pc, #104]	; (800117c <main+0x15c>)
 8001112:	6013      	str	r3, [r2, #0]

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001114:	217f      	movs	r1, #127	; 0x7f
 8001116:	481a      	ldr	r0, [pc, #104]	; (8001180 <main+0x160>)
 8001118:	f002 ffea 	bl	80040f0 <HAL_ADCEx_Calibration_Start>

	HAL_UART_Receive_DMA(&huart2, uart_in, UART_IN_BUF_SIZE);
 800111c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001120:	4918      	ldr	r1, [pc, #96]	; (8001184 <main+0x164>)
 8001122:	4819      	ldr	r0, [pc, #100]	; (8001188 <main+0x168>)
 8001124:	f006 f872 	bl	800720c <HAL_UART_Receive_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 8001128:	4813      	ldr	r0, [pc, #76]	; (8001178 <main+0x158>)
 800112a:	f004 fed1 	bl	8005ed0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 800112e:	4810      	ldr	r0, [pc, #64]	; (8001170 <main+0x150>)
 8001130:	f004 fece 	bl	8005ed0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8001134:	4815      	ldr	r0, [pc, #84]	; (800118c <main+0x16c>)
 8001136:	f004 fecb 	bl	8005ed0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800113a:	2100      	movs	r1, #0
 800113c:	4814      	ldr	r0, [pc, #80]	; (8001190 <main+0x170>)
 800113e:	f004 ffc9 	bl	80060d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001142:	2104      	movs	r1, #4
 8001144:	4812      	ldr	r0, [pc, #72]	; (8001190 <main+0x170>)
 8001146:	f004 ffc5 	bl	80060d4 <HAL_TIM_PWM_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
 800114a:	e7fe      	b.n	800114a <main+0x12a>
 800114c:	f3af 8000 	nop.w
 8001150:	00000000 	.word	0x00000000
 8001154:	419312d0 	.word	0x419312d0
 8001158:	2000025c 	.word	0x2000025c
 800115c:	20000264 	.word	0x20000264
 8001160:	200004d0 	.word	0x200004d0
 8001164:	20000470 	.word	0x20000470
 8001168:	2000033c 	.word	0x2000033c
 800116c:	20000270 	.word	0x20000270
 8001170:	200002f0 	.word	0x200002f0
 8001174:	2000026c 	.word	0x2000026c
 8001178:	200003a0 	.word	0x200003a0
 800117c:	200002ec 	.word	0x200002ec
 8001180:	20000288 	.word	0x20000288
 8001184:	20000040 	.word	0x20000040
 8001188:	200003ec 	.word	0x200003ec
 800118c:	20000484 	.word	0x20000484
 8001190:	20000354 	.word	0x20000354

08001194 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b096      	sub	sp, #88	; 0x58
 8001198:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	2244      	movs	r2, #68	; 0x44
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f006 fd9c 	bl	8007ce0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80011a8:	463b      	mov	r3, r7
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80011b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011ba:	f003 fccf 	bl	8004b5c <HAL_PWREx_ControlVoltageScaling>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80011c4:	f001 fa66 	bl	8002694 <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80011c8:	2310      	movs	r3, #16
 80011ca:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011cc:	2301      	movs	r3, #1
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011d4:	2360      	movs	r3, #96	; 0x60
 80011d6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d8:	2302      	movs	r3, #2
 80011da:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011dc:	2301      	movs	r3, #1
 80011de:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80011e0:	2301      	movs	r3, #1
 80011e2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 80011e4:	2328      	movs	r3, #40	; 0x28
 80011e6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011e8:	2307      	movs	r3, #7
 80011ea:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011ec:	2302      	movs	r3, #2
 80011ee:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011f0:	2302      	movs	r3, #2
 80011f2:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4618      	mov	r0, r3
 80011fa:	f003 fd05 	bl	8004c08 <HAL_RCC_OscConfig>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <SystemClock_Config+0x74>
		Error_Handler();
 8001204:	f001 fa46 	bl	8002694 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001208:	230f      	movs	r3, #15
 800120a:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120c:	2303      	movs	r3, #3
 800120e:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001210:	2300      	movs	r3, #0
 8001212:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800121c:	463b      	mov	r3, r7
 800121e:	2104      	movs	r1, #4
 8001220:	4618      	mov	r0, r3
 8001222:	f004 f911 	bl	8005448 <HAL_RCC_ClockConfig>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <SystemClock_Config+0x9c>
		Error_Handler();
 800122c:	f001 fa32 	bl	8002694 <Error_Handler>
	}
}
 8001230:	bf00      	nop
 8001232:	3758      	adds	r7, #88	; 0x58
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800123e:	f107 0308 	add.w	r3, r7, #8
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]
 800124e:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001250:	4b2f      	ldr	r3, [pc, #188]	; (8001310 <MX_ADC1_Init+0xd8>)
 8001252:	4a30      	ldr	r2, [pc, #192]	; (8001314 <MX_ADC1_Init+0xdc>)
 8001254:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001256:	4b2e      	ldr	r3, [pc, #184]	; (8001310 <MX_ADC1_Init+0xd8>)
 8001258:	2200      	movs	r2, #0
 800125a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800125c:	4b2c      	ldr	r3, [pc, #176]	; (8001310 <MX_ADC1_Init+0xd8>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001262:	4b2b      	ldr	r3, [pc, #172]	; (8001310 <MX_ADC1_Init+0xd8>)
 8001264:	2200      	movs	r2, #0
 8001266:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001268:	4b29      	ldr	r3, [pc, #164]	; (8001310 <MX_ADC1_Init+0xd8>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800126e:	4b28      	ldr	r3, [pc, #160]	; (8001310 <MX_ADC1_Init+0xd8>)
 8001270:	2204      	movs	r2, #4
 8001272:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001274:	4b26      	ldr	r3, [pc, #152]	; (8001310 <MX_ADC1_Init+0xd8>)
 8001276:	2200      	movs	r2, #0
 8001278:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800127a:	4b25      	ldr	r3, [pc, #148]	; (8001310 <MX_ADC1_Init+0xd8>)
 800127c:	2200      	movs	r2, #0
 800127e:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8001280:	4b23      	ldr	r3, [pc, #140]	; (8001310 <MX_ADC1_Init+0xd8>)
 8001282:	2201      	movs	r2, #1
 8001284:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001286:	4b22      	ldr	r3, [pc, #136]	; (8001310 <MX_ADC1_Init+0xd8>)
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800128e:	4b20      	ldr	r3, [pc, #128]	; (8001310 <MX_ADC1_Init+0xd8>)
 8001290:	2200      	movs	r2, #0
 8001292:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001294:	4b1e      	ldr	r3, [pc, #120]	; (8001310 <MX_ADC1_Init+0xd8>)
 8001296:	2200      	movs	r2, #0
 8001298:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800129a:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <MX_ADC1_Init+0xd8>)
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012a2:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <MX_ADC1_Init+0xd8>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80012a8:	4b19      	ldr	r3, [pc, #100]	; (8001310 <MX_ADC1_Init+0xd8>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80012b0:	4817      	ldr	r0, [pc, #92]	; (8001310 <MX_ADC1_Init+0xd8>)
 80012b2:	f002 f807 	bl	80032c4 <HAL_ADC_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_ADC1_Init+0x88>
		Error_Handler();
 80012bc:	f001 f9ea 	bl	8002694 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 80012c0:	4b15      	ldr	r3, [pc, #84]	; (8001318 <MX_ADC1_Init+0xe0>)
 80012c2:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80012c4:	2306      	movs	r3, #6
 80012c6:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012c8:	2300      	movs	r3, #0
 80012ca:	613b      	str	r3, [r7, #16]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012cc:	237f      	movs	r3, #127	; 0x7f
 80012ce:	617b      	str	r3, [r7, #20]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012d0:	2304      	movs	r3, #4
 80012d2:	61bb      	str	r3, [r7, #24]
	sConfig.Offset = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80012d8:	f107 0308 	add.w	r3, r7, #8
 80012dc:	4619      	mov	r1, r3
 80012de:	480c      	ldr	r0, [pc, #48]	; (8001310 <MX_ADC1_Init+0xd8>)
 80012e0:	f002 fa38 	bl	8003754 <HAL_ADC_ConfigChannel>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_ADC1_Init+0xb6>
		Error_Handler();
 80012ea:	f001 f9d3 	bl	8002694 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */
	__HAL_RCC_ADC_CLK_ENABLE();
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <MX_ADC1_Init+0xe4>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	4a0a      	ldr	r2, [pc, #40]	; (800131c <MX_ADC1_Init+0xe4>)
 80012f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fa:	4b08      	ldr	r3, [pc, #32]	; (800131c <MX_ADC1_Init+0xe4>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
	/* USER CODE END ADC1_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	3720      	adds	r7, #32
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000288 	.word	0x20000288
 8001314:	50040000 	.word	0x50040000
 8001318:	21800100 	.word	0x21800100
 800131c:	40021000 	.word	0x40021000

08001320 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b096      	sub	sp, #88	; 0x58
 8001324:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001326:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001332:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	611a      	str	r2, [r3, #16]
 8001342:	615a      	str	r2, [r3, #20]
 8001344:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	222c      	movs	r2, #44	; 0x2c
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f006 fcc7 	bl	8007ce0 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001352:	4b3f      	ldr	r3, [pc, #252]	; (8001450 <MX_TIM1_Init+0x130>)
 8001354:	4a3f      	ldr	r2, [pc, #252]	; (8001454 <MX_TIM1_Init+0x134>)
 8001356:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001358:	4b3d      	ldr	r3, [pc, #244]	; (8001450 <MX_TIM1_Init+0x130>)
 800135a:	2200      	movs	r2, #0
 800135c:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135e:	4b3c      	ldr	r3, [pc, #240]	; (8001450 <MX_TIM1_Init+0x130>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001364:	4b3a      	ldr	r3, [pc, #232]	; (8001450 <MX_TIM1_Init+0x130>)
 8001366:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800136a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136c:	4b38      	ldr	r3, [pc, #224]	; (8001450 <MX_TIM1_Init+0x130>)
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001372:	4b37      	ldr	r3, [pc, #220]	; (8001450 <MX_TIM1_Init+0x130>)
 8001374:	2200      	movs	r2, #0
 8001376:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001378:	4b35      	ldr	r3, [pc, #212]	; (8001450 <MX_TIM1_Init+0x130>)
 800137a:	2280      	movs	r2, #128	; 0x80
 800137c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800137e:	4834      	ldr	r0, [pc, #208]	; (8001450 <MX_TIM1_Init+0x130>)
 8001380:	f004 fe51 	bl	8006026 <HAL_TIM_PWM_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM1_Init+0x6e>
		Error_Handler();
 800138a:	f001 f983 	bl	8002694 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138e:	2300      	movs	r3, #0
 8001390:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001392:	2300      	movs	r3, #0
 8001394:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800139a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800139e:	4619      	mov	r1, r3
 80013a0:	482b      	ldr	r0, [pc, #172]	; (8001450 <MX_TIM1_Init+0x130>)
 80013a2:	f005 fd55 	bl	8006e50 <HAL_TIMEx_MasterConfigSynchronization>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 80013ac:	f001 f972 	bl	8002694 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013b0:	2360      	movs	r3, #96	; 0x60
 80013b2:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b8:	2300      	movs	r3, #0
 80013ba:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013bc:	2300      	movs	r3, #0
 80013be:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013c4:	2300      	movs	r3, #0
 80013c6:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013c8:	2300      	movs	r3, #0
 80013ca:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80013cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013d0:	2200      	movs	r2, #0
 80013d2:	4619      	mov	r1, r3
 80013d4:	481e      	ldr	r0, [pc, #120]	; (8001450 <MX_TIM1_Init+0x130>)
 80013d6:	f005 f8f1 	bl	80065bc <HAL_TIM_PWM_ConfigChannel>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 80013e0:	f001 f958 	bl	8002694 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 80013e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013e8:	2204      	movs	r2, #4
 80013ea:	4619      	mov	r1, r3
 80013ec:	4818      	ldr	r0, [pc, #96]	; (8001450 <MX_TIM1_Init+0x130>)
 80013ee:	f005 f8e5 	bl	80065bc <HAL_TIM_PWM_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM1_Init+0xdc>
			!= HAL_OK) {
		Error_Handler();
 80013f8:	f001 f94c 	bl	8002694 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001414:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800141a:	2300      	movs	r3, #0
 800141c:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800141e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	4619      	mov	r1, r3
 8001430:	4807      	ldr	r0, [pc, #28]	; (8001450 <MX_TIM1_Init+0x130>)
 8001432:	f005 fd73 	bl	8006f1c <HAL_TIMEx_ConfigBreakDeadTime>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM1_Init+0x120>
			!= HAL_OK) {
		Error_Handler();
 800143c:	f001 f92a 	bl	8002694 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001440:	4803      	ldr	r0, [pc, #12]	; (8001450 <MX_TIM1_Init+0x130>)
 8001442:	f001 fb23 	bl	8002a8c <HAL_TIM_MspPostInit>

}
 8001446:	bf00      	nop
 8001448:	3758      	adds	r7, #88	; 0x58
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000354 	.word	0x20000354
 8001454:	40012c00 	.word	0x40012c00

08001458 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	; 0x28
 800145c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800145e:	f107 031c 	add.w	r3, r7, #28
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800146a:	463b      	mov	r3, r7
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
 8001478:	615a      	str	r2, [r3, #20]
 800147a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800147c:	4b20      	ldr	r3, [pc, #128]	; (8001500 <MX_TIM2_Init+0xa8>)
 800147e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001482:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 80 - 1;
 8001484:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <MX_TIM2_Init+0xa8>)
 8001486:	224f      	movs	r2, #79	; 0x4f
 8001488:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148a:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <MX_TIM2_Init+0xa8>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10000 - 1;
 8001490:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <MX_TIM2_Init+0xa8>)
 8001492:	f242 720f 	movw	r2, #9999	; 0x270f
 8001496:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001498:	4b19      	ldr	r3, [pc, #100]	; (8001500 <MX_TIM2_Init+0xa8>)
 800149a:	2200      	movs	r2, #0
 800149c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800149e:	4b18      	ldr	r3, [pc, #96]	; (8001500 <MX_TIM2_Init+0xa8>)
 80014a0:	2280      	movs	r2, #128	; 0x80
 80014a2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK) {
 80014a4:	4816      	ldr	r0, [pc, #88]	; (8001500 <MX_TIM2_Init+0xa8>)
 80014a6:	f004 fd67 	bl	8005f78 <HAL_TIM_OC_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM2_Init+0x5c>
		Error_Handler();
 80014b0:	f001 f8f0 	bl	8002694 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80014bc:	f107 031c 	add.w	r3, r7, #28
 80014c0:	4619      	mov	r1, r3
 80014c2:	480f      	ldr	r0, [pc, #60]	; (8001500 <MX_TIM2_Init+0xa8>)
 80014c4:	f005 fcc4 	bl	8006e50 <HAL_TIMEx_MasterConfigSynchronization>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM2_Init+0x7a>
			!= HAL_OK) {
		Error_Handler();
 80014ce:	f001 f8e1 	bl	8002694 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80014d2:	2300      	movs	r3, #0
 80014d4:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014da:	2300      	movs	r3, #0
 80014dc:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 80014e2:	463b      	mov	r3, r7
 80014e4:	2204      	movs	r2, #4
 80014e6:	4619      	mov	r1, r3
 80014e8:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_TIM2_Init+0xa8>)
 80014ea:	f004 fff1 	bl	80064d0 <HAL_TIM_OC_ConfigChannel>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM2_Init+0xa0>
		Error_Handler();
 80014f4:	f001 f8ce 	bl	8002694 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	3728      	adds	r7, #40	; 0x28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	200003a0 	.word	0x200003a0

08001504 <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <MX_TIM6_Init+0x64>)
 8001516:	4a15      	ldr	r2, [pc, #84]	; (800156c <MX_TIM6_Init+0x68>)
 8001518:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 160 - 1;
 800151a:	4b13      	ldr	r3, [pc, #76]	; (8001568 <MX_TIM6_Init+0x64>)
 800151c:	229f      	movs	r2, #159	; 0x9f
 800151e:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_TIM6_Init+0x64>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 50000 - 1;
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <MX_TIM6_Init+0x64>)
 8001528:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800152c:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_TIM6_Init+0x64>)
 8001530:	2280      	movs	r2, #128	; 0x80
 8001532:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8001534:	480c      	ldr	r0, [pc, #48]	; (8001568 <MX_TIM6_Init+0x64>)
 8001536:	f004 fc73 	bl	8005e20 <HAL_TIM_Base_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM6_Init+0x40>
		Error_Handler();
 8001540:	f001 f8a8 	bl	8002694 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001544:	2300      	movs	r3, #0
 8001546:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	4619      	mov	r1, r3
 8001550:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_TIM6_Init+0x64>)
 8001552:	f005 fc7d 	bl	8006e50 <HAL_TIMEx_MasterConfigSynchronization>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM6_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 800155c:	f001 f89a 	bl	8002694 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8001560:	bf00      	nop
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	200002f0 	.word	0x200002f0
 800156c:	40001000 	.word	0x40001000

08001570 <MX_TIM7_Init>:
/**
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 8001580:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <MX_TIM7_Init+0x68>)
 8001582:	4a16      	ldr	r2, [pc, #88]	; (80015dc <MX_TIM7_Init+0x6c>)
 8001584:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 65535;
 8001586:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <MX_TIM7_Init+0x68>)
 8001588:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800158c:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158e:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <MX_TIM7_Init+0x68>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 12207 - 1;
 8001594:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <MX_TIM7_Init+0x68>)
 8001596:	f642 72ae 	movw	r2, #12206	; 0x2fae
 800159a:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800159c:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <MX_TIM7_Init+0x68>)
 800159e:	2280      	movs	r2, #128	; 0x80
 80015a0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 80015a2:	480d      	ldr	r0, [pc, #52]	; (80015d8 <MX_TIM7_Init+0x68>)
 80015a4:	f004 fc3c 	bl	8005e20 <HAL_TIM_Base_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM7_Init+0x42>
		Error_Handler();
 80015ae:	f001 f871 	bl	8002694 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	4619      	mov	r1, r3
 80015be:	4806      	ldr	r0, [pc, #24]	; (80015d8 <MX_TIM7_Init+0x68>)
 80015c0:	f005 fc46 	bl	8006e50 <HAL_TIMEx_MasterConfigSynchronization>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM7_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 80015ca:	f001 f863 	bl	8002694 <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000484 	.word	0x20000484
 80015dc:	40001400 	.word	0x40001400

080015e0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80015e4:	4b14      	ldr	r3, [pc, #80]	; (8001638 <MX_USART2_UART_Init+0x58>)
 80015e6:	4a15      	ldr	r2, [pc, #84]	; (800163c <MX_USART2_UART_Init+0x5c>)
 80015e8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80015ea:	4b13      	ldr	r3, [pc, #76]	; (8001638 <MX_USART2_UART_Init+0x58>)
 80015ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015f0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015f2:	4b11      	ldr	r3, [pc, #68]	; (8001638 <MX_USART2_UART_Init+0x58>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80015f8:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <MX_USART2_UART_Init+0x58>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80015fe:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <MX_USART2_UART_Init+0x58>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <MX_USART2_UART_Init+0x58>)
 8001606:	220c      	movs	r2, #12
 8001608:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <MX_USART2_UART_Init+0x58>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001610:	4b09      	ldr	r3, [pc, #36]	; (8001638 <MX_USART2_UART_Init+0x58>)
 8001612:	2200      	movs	r2, #0
 8001614:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001616:	4b08      	ldr	r3, [pc, #32]	; (8001638 <MX_USART2_UART_Init+0x58>)
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <MX_USART2_UART_Init+0x58>)
 800161e:	2200      	movs	r2, #0
 8001620:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001622:	4805      	ldr	r0, [pc, #20]	; (8001638 <MX_USART2_UART_Init+0x58>)
 8001624:	f005 fd10 	bl	8007048 <HAL_UART_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800162e:	f001 f831 	bl	8002694 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	200003ec 	.word	0x200003ec
 800163c:	40004400 	.word	0x40004400

08001640 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001646:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <MX_DMA_Init+0x38>)
 8001648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800164a:	4a0b      	ldr	r2, [pc, #44]	; (8001678 <MX_DMA_Init+0x38>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6493      	str	r3, [r2, #72]	; 0x48
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <MX_DMA_Init+0x38>)
 8001654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800165e:	2200      	movs	r2, #0
 8001660:	2100      	movs	r1, #0
 8001662:	2010      	movs	r0, #16
 8001664:	f002 fe7f 	bl	8004366 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001668:	2010      	movs	r0, #16
 800166a:	f002 fe98 	bl	800439e <HAL_NVIC_EnableIRQ>

}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000

0800167c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001682:	f107 030c 	add.w	r3, r7, #12
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]
 8001690:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	4b48      	ldr	r3, [pc, #288]	; (80017b4 <MX_GPIO_Init+0x138>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	4a47      	ldr	r2, [pc, #284]	; (80017b4 <MX_GPIO_Init+0x138>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169e:	4b45      	ldr	r3, [pc, #276]	; (80017b4 <MX_GPIO_Init+0x138>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	4b42      	ldr	r3, [pc, #264]	; (80017b4 <MX_GPIO_Init+0x138>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	4a41      	ldr	r2, [pc, #260]	; (80017b4 <MX_GPIO_Init+0x138>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b6:	4b3f      	ldr	r3, [pc, #252]	; (80017b4 <MX_GPIO_Init+0x138>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, DIR_L1_Pin | DIR_L2_Pin | testLED_Pin,
 80016c2:	2200      	movs	r2, #0
 80016c4:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 80016c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016cc:	f003 f9fc 	bl	8004ac8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, DIR_R1_Pin | DIR_R2_Pin, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	21c0      	movs	r1, #192	; 0xc0
 80016d4:	4838      	ldr	r0, [pc, #224]	; (80017b8 <MX_GPIO_Init+0x13c>)
 80016d6:	f003 f9f7 	bl	8004ac8 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : Motor_Left_clock_Pin orientation_counterclock_Pin */
	GPIO_InitStruct.Pin = Motor_Left_clock_Pin | orientation_counterclock_Pin;
 80016da:	f44f 6302 	mov.w	r3, #2080	; 0x820
 80016de:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80016e0:	4b36      	ldr	r3, [pc, #216]	; (80017bc <MX_GPIO_Init+0x140>)
 80016e2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016e4:	2302      	movs	r3, #2
 80016e6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	4619      	mov	r1, r3
 80016ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f2:	f003 f867 	bl	80047c4 <HAL_GPIO_Init>

	/*Configure GPIO pins : DIR_L1_Pin DIR_L2_Pin testLED_Pin */
	GPIO_InitStruct.Pin = DIR_L1_Pin | DIR_L2_Pin | testLED_Pin;
 80016f6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80016fa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fc:	2301      	movs	r3, #1
 80016fe:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	4619      	mov	r1, r3
 800170e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001712:	f003 f857 	bl	80047c4 <HAL_GPIO_Init>

	/*Configure GPIO pins : motor_Right_clock_Pin Motor_left_counterclock_Pin orientation_clock_Pin Motor_counterclock_right_Pin */
	GPIO_InitStruct.Pin = motor_Right_clock_Pin | Motor_left_counterclock_Pin
 8001716:	231b      	movs	r3, #27
 8001718:	60fb      	str	r3, [r7, #12]
			| orientation_clock_Pin | Motor_counterclock_right_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800171a:	4b28      	ldr	r3, [pc, #160]	; (80017bc <MX_GPIO_Init+0x140>)
 800171c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800171e:	2302      	movs	r3, #2
 8001720:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001722:	f107 030c 	add.w	r3, r7, #12
 8001726:	4619      	mov	r1, r3
 8001728:	4823      	ldr	r0, [pc, #140]	; (80017b8 <MX_GPIO_Init+0x13c>)
 800172a:	f003 f84b 	bl	80047c4 <HAL_GPIO_Init>

	/*Configure GPIO pins : DIR_R1_Pin DIR_R2_Pin */
	GPIO_InitStruct.Pin = DIR_R1_Pin | DIR_R2_Pin;
 800172e:	23c0      	movs	r3, #192	; 0xc0
 8001730:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001732:	2301      	movs	r3, #1
 8001734:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	2300      	movs	r3, #0
 800173c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173e:	f107 030c 	add.w	r3, r7, #12
 8001742:	4619      	mov	r1, r3
 8001744:	481c      	ldr	r0, [pc, #112]	; (80017b8 <MX_GPIO_Init+0x13c>)
 8001746:	f003 f83d 	bl	80047c4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800174a:	2200      	movs	r2, #0
 800174c:	2100      	movs	r1, #0
 800174e:	2006      	movs	r0, #6
 8001750:	f002 fe09 	bl	8004366 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001754:	2006      	movs	r0, #6
 8001756:	f002 fe22 	bl	800439e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800175a:	2200      	movs	r2, #0
 800175c:	2100      	movs	r1, #0
 800175e:	2007      	movs	r0, #7
 8001760:	f002 fe01 	bl	8004366 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001764:	2007      	movs	r0, #7
 8001766:	f002 fe1a 	bl	800439e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800176a:	2200      	movs	r2, #0
 800176c:	2100      	movs	r1, #0
 800176e:	2009      	movs	r0, #9
 8001770:	f002 fdf9 	bl	8004366 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001774:	2009      	movs	r0, #9
 8001776:	f002 fe12 	bl	800439e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	2100      	movs	r1, #0
 800177e:	200a      	movs	r0, #10
 8001780:	f002 fdf1 	bl	8004366 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001784:	200a      	movs	r0, #10
 8001786:	f002 fe0a 	bl	800439e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800178a:	2200      	movs	r2, #0
 800178c:	2100      	movs	r1, #0
 800178e:	2017      	movs	r0, #23
 8001790:	f002 fde9 	bl	8004366 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001794:	2017      	movs	r0, #23
 8001796:	f002 fe02 	bl	800439e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2100      	movs	r1, #0
 800179e:	2028      	movs	r0, #40	; 0x28
 80017a0:	f002 fde1 	bl	8004366 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017a4:	2028      	movs	r0, #40	; 0x28
 80017a6:	f002 fdfa 	bl	800439e <HAL_NVIC_EnableIRQ>

}
 80017aa:	bf00      	nop
 80017ac:	3720      	adds	r7, #32
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40021000 	.word	0x40021000
 80017b8:	48000400 	.word	0x48000400
 80017bc:	10310000 	.word	0x10310000

080017c0 <motor_init>:

/* USER CODE BEGIN 4 */
void motor_init(Motor *m, char name) {
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	70fb      	strb	r3, [r7, #3]
	m->name = name;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	78fa      	ldrb	r2, [r7, #3]
 80017d0:	701a      	strb	r2, [r3, #0]
	m->direction = 0;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	705a      	strb	r2, [r3, #1]
	m->dutyCycle = 0.0;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	605a      	str	r2, [r3, #4]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <motorEncoder_init>:

void motorEncoder_init(MotorEncoder *e) {
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	e->fineAdjustment = 0;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	811a      	strh	r2, [r3, #8]
	e->lastAngle = 0.0;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	605a      	str	r2, [r3, #4]
	e->lastTicks = 0;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
	e->output = 0.0;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
	e->revolutions = 0;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <motorController_init>:

void motorController_init(MotorController *c, Motor *m, MotorEncoder *e) {
 8001822:	b480      	push	{r7}
 8001824:	b085      	sub	sp, #20
 8001826:	af00      	add	r7, sp, #0
 8001828:	60f8      	str	r0, [r7, #12]
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
	c->Encoder = e;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	615a      	str	r2, [r3, #20]
	c->lastError = 0.0;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	609a      	str	r2, [r3, #8]
	c->motor = m;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	611a      	str	r2, [r3, #16]
	c->reference = 0.0;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
	c->voltage = 0.0;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	60da      	str	r2, [r3, #12]
	c->measAngVel = 0.0;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	605a      	str	r2, [r3, #4]
}
 800185a:	bf00      	nop
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <uart_in_read>:

void uart_in_read(void (*formattingFunc)(char*, uint32_t)) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b092      	sub	sp, #72	; 0x48
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	// The position at which the DMA writes (can be larger than queue size, if DMA is a lap ahead)
	int dma_ptr = (UART_IN_BUF_SIZE - huart2.hdmarx->Instance->CNDTR)
			+ UART_IN_BUF_SIZE * uart_dma_laps_ahead;
 8001870:	4b5d      	ldr	r3, [pc, #372]	; (80019e8 <uart_in_read+0x180>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	461a      	mov	r2, r3
	int dma_ptr = (UART_IN_BUF_SIZE - huart2.hdmarx->Instance->CNDTR)
 8001878:	4b5c      	ldr	r3, [pc, #368]	; (80019ec <uart_in_read+0x184>)
 800187a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
			+ UART_IN_BUF_SIZE * uart_dma_laps_ahead;
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	f503 7380 	add.w	r3, r3, #256	; 0x100
	int dma_ptr = (UART_IN_BUF_SIZE - huart2.hdmarx->Instance->CNDTR)
 8001886:	647b      	str	r3, [r7, #68]	; 0x44

	// dma_ptr - uart_in_read_ptr is the number of unread/uninterpreted bytes in queue
	for (; dma_ptr - uart_in_read_ptr > 0; uart_in_read_ptr++) {
 8001888:	e0a1      	b.n	80019ce <uart_in_read+0x166>

		// If read pointer crosses "queue border"
		if (uart_in_read_ptr >= UART_IN_BUF_SIZE) {
 800188a:	4b59      	ldr	r3, [pc, #356]	; (80019f0 <uart_in_read+0x188>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2bff      	cmp	r3, #255	; 0xff
 8001890:	dd19      	ble.n	80018c6 <uart_in_read+0x5e>
			uart_in_read_ptr = 0;
 8001892:	4b57      	ldr	r3, [pc, #348]	; (80019f0 <uart_in_read+0x188>)
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
			uart_in_lastStart -= UART_IN_BUF_SIZE;
 8001898:	4b56      	ldr	r3, [pc, #344]	; (80019f4 <uart_in_read+0x18c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80018a0:	4a54      	ldr	r2, [pc, #336]	; (80019f4 <uart_in_read+0x18c>)
 80018a2:	6013      	str	r3, [r2, #0]
			uart_dma_laps_ahead--;
 80018a4:	4b50      	ldr	r3, [pc, #320]	; (80019e8 <uart_in_read+0x180>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	3b01      	subs	r3, #1
 80018aa:	4a4f      	ldr	r2, [pc, #316]	; (80019e8 <uart_in_read+0x180>)
 80018ac:	6013      	str	r3, [r2, #0]
			dma_ptr = (UART_IN_BUF_SIZE - huart2.hdmarx->Instance->CNDTR)
					+ UART_IN_BUF_SIZE * uart_dma_laps_ahead;
 80018ae:	4b4e      	ldr	r3, [pc, #312]	; (80019e8 <uart_in_read+0x180>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	021b      	lsls	r3, r3, #8
 80018b4:	461a      	mov	r2, r3
			dma_ptr = (UART_IN_BUF_SIZE - huart2.hdmarx->Instance->CNDTR)
 80018b6:	4b4d      	ldr	r3, [pc, #308]	; (80019ec <uart_in_read+0x184>)
 80018b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
					+ UART_IN_BUF_SIZE * uart_dma_laps_ahead;
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	f503 7380 	add.w	r3, r3, #256	; 0x100
			dma_ptr = (UART_IN_BUF_SIZE - huart2.hdmarx->Instance->CNDTR)
 80018c4:	647b      	str	r3, [r7, #68]	; 0x44
		}

		// If we find the beginning of a message
		if (uart_in[uart_in_read_ptr] == COMM_DEL_START) {
 80018c6:	4b4a      	ldr	r3, [pc, #296]	; (80019f0 <uart_in_read+0x188>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a4b      	ldr	r2, [pc, #300]	; (80019f8 <uart_in_read+0x190>)
 80018cc:	5cd3      	ldrb	r3, [r2, r3]
 80018ce:	2b24      	cmp	r3, #36	; 0x24
 80018d0:	d10a      	bne.n	80018e8 <uart_in_read+0x80>
			validStartDelimiter = true;
 80018d2:	4b4a      	ldr	r3, [pc, #296]	; (80019fc <uart_in_read+0x194>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	701a      	strb	r2, [r3, #0]
			uart_in_lastStart = uart_in_read_ptr;
 80018d8:	4b45      	ldr	r3, [pc, #276]	; (80019f0 <uart_in_read+0x188>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a45      	ldr	r2, [pc, #276]	; (80019f4 <uart_in_read+0x18c>)
 80018de:	6013      	str	r3, [r2, #0]
			uart_in_escapes = 0;
 80018e0:	4b47      	ldr	r3, [pc, #284]	; (8001a00 <uart_in_read+0x198>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	e06d      	b.n	80019c4 <uart_in_read+0x15c>
		} else if (uart_in[uart_in_read_ptr] == COMM_ESCAPE)
 80018e8:	4b41      	ldr	r3, [pc, #260]	; (80019f0 <uart_in_read+0x188>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a42      	ldr	r2, [pc, #264]	; (80019f8 <uart_in_read+0x190>)
 80018ee:	5cd3      	ldrb	r3, [r2, r3]
 80018f0:	2b23      	cmp	r3, #35	; 0x23
 80018f2:	d105      	bne.n	8001900 <uart_in_read+0x98>
			uart_in_escapes++;
 80018f4:	4b42      	ldr	r3, [pc, #264]	; (8001a00 <uart_in_read+0x198>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	3301      	adds	r3, #1
 80018fa:	4a41      	ldr	r2, [pc, #260]	; (8001a00 <uart_in_read+0x198>)
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	e061      	b.n	80019c4 <uart_in_read+0x15c>

		// If we find the end of a message
		else if (uart_in[uart_in_read_ptr] == COMM_DEL_STOP) {
 8001900:	4b3b      	ldr	r3, [pc, #236]	; (80019f0 <uart_in_read+0x188>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a3c      	ldr	r2, [pc, #240]	; (80019f8 <uart_in_read+0x190>)
 8001906:	5cd3      	ldrb	r3, [r2, r3]
 8001908:	2b40      	cmp	r3, #64	; 0x40
 800190a:	d15b      	bne.n	80019c4 <uart_in_read+0x15c>

			int frameLength = uart_in_read_ptr - uart_in_lastStart + 1;
 800190c:	4b38      	ldr	r3, [pc, #224]	; (80019f0 <uart_in_read+0x188>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4b38      	ldr	r3, [pc, #224]	; (80019f4 <uart_in_read+0x18c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	3301      	adds	r3, #1
 8001918:	643b      	str	r3, [r7, #64]	; 0x40

			char frame[COMM_MAX_FRAME_SIZE] = { 0 };
 800191a:	2300      	movs	r3, #0
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
 800191e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]
 800192c:	821a      	strh	r2, [r3, #16]

			// If the start and stop delimiter are on opposite sides of the "queue border"
			if (uart_in_lastStart < 0) {
 800192e:	4b31      	ldr	r3, [pc, #196]	; (80019f4 <uart_in_read+0x18c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	da1c      	bge.n	8001970 <uart_in_read+0x108>
				memcpy(frame, uart_in + UART_IN_BUF_SIZE + uart_in_lastStart,
 8001936:	4b2f      	ldr	r3, [pc, #188]	; (80019f4 <uart_in_read+0x18c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800193e:	4a2e      	ldr	r2, [pc, #184]	; (80019f8 <uart_in_read+0x190>)
 8001940:	1899      	adds	r1, r3, r2
						-uart_in_lastStart);
 8001942:	4b2c      	ldr	r3, [pc, #176]	; (80019f4 <uart_in_read+0x18c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	425b      	negs	r3, r3
				memcpy(frame, uart_in + UART_IN_BUF_SIZE + uart_in_lastStart,
 8001948:	461a      	mov	r2, r3
 800194a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800194e:	4618      	mov	r0, r3
 8001950:	f006 f9b8 	bl	8007cc4 <memcpy>
				memcpy(frame - uart_in_lastStart, uart_in,
 8001954:	4b27      	ldr	r3, [pc, #156]	; (80019f4 <uart_in_read+0x18c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	425b      	negs	r3, r3
 800195a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800195e:	18d0      	adds	r0, r2, r3
						uart_in_read_ptr + 1);
 8001960:	4b23      	ldr	r3, [pc, #140]	; (80019f0 <uart_in_read+0x188>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	3301      	adds	r3, #1
				memcpy(frame - uart_in_lastStart, uart_in,
 8001966:	461a      	mov	r2, r3
 8001968:	4923      	ldr	r1, [pc, #140]	; (80019f8 <uart_in_read+0x190>)
 800196a:	f006 f9ab 	bl	8007cc4 <memcpy>
 800196e:	e00a      	b.n	8001986 <uart_in_read+0x11e>
			} else
				memcpy(frame, uart_in + uart_in_lastStart, frameLength);
 8001970:	4b20      	ldr	r3, [pc, #128]	; (80019f4 <uart_in_read+0x18c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	461a      	mov	r2, r3
 8001976:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <uart_in_read+0x190>)
 8001978:	18d1      	adds	r1, r2, r3
 800197a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800197c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001980:	4618      	mov	r0, r3
 8001982:	f006 f99f 	bl	8007cc4 <memcpy>
			validStartDelimiter = false;
 8001986:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <uart_in_read+0x194>)
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]

			char data[COMM_MAX_FRAME_SIZE] = { 0 };
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	f107 0310 	add.w	r3, r7, #16
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	821a      	strh	r2, [r3, #16]
			uint32_t *dataLength;

			if (from_frame(frame, frameLength, data, dataLength) == 1) {
 80019a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80019a2:	f107 020c 	add.w	r2, r7, #12
 80019a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80019aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ac:	f7ff facd 	bl	8000f4a <from_frame>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d106      	bne.n	80019c4 <uart_in_read+0x15c>
				(*formattingFunc)(data, *dataLength);
 80019b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019b8:	6819      	ldr	r1, [r3, #0]
 80019ba:	f107 020c 	add.w	r2, r7, #12
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4610      	mov	r0, r2
 80019c2:	4798      	blx	r3
	for (; dma_ptr - uart_in_read_ptr > 0; uart_in_read_ptr++) {
 80019c4:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <uart_in_read+0x188>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	3301      	adds	r3, #1
 80019ca:	4a09      	ldr	r2, [pc, #36]	; (80019f0 <uart_in_read+0x188>)
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <uart_in_read+0x188>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f73f af57 	bgt.w	800188a <uart_in_read+0x22>
			}
		}
	}
}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	3748      	adds	r7, #72	; 0x48
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	2000003c 	.word	0x2000003c
 80019ec:	200003ec 	.word	0x200003ec
 80019f0:	20000038 	.word	0x20000038
 80019f4:	20000000 	.word	0x20000000
 80019f8:	20000040 	.word	0x20000040
 80019fc:	20000034 	.word	0x20000034
 8001a00:	20000140 	.word	0x20000140

08001a04 <referenceFormatting>:

void referenceFormatting(char *uart_msg, uint32_t len) {
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]

	// Check length of msg
	if (len != 10)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	2b0a      	cmp	r3, #10
 8001a12:	d115      	bne.n	8001a40 <referenceFormatting+0x3c>
		return;

	// Retrieve reference for right wheel
	if (uart_msg[0] == 'R') {
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b52      	cmp	r3, #82	; 0x52
 8001a1a:	d113      	bne.n	8001a44 <referenceFormatting+0x40>
		memcpy(&controllerR.reference, uart_msg + 1, 4);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <referenceFormatting+0x50>)
 8001a26:	601a      	str	r2, [r3, #0]
	} else {
		return;
	}

	// Retrieve reference for left wheel
	if (uart_msg[5] == 'L') {
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3305      	adds	r3, #5
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b4c      	cmp	r3, #76	; 0x4c
 8001a30:	d10a      	bne.n	8001a48 <referenceFormatting+0x44>
		memcpy(&controllerL.reference, uart_msg + 6, 4);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3306      	adds	r3, #6
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <referenceFormatting+0x54>)
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	e004      	b.n	8001a4a <referenceFormatting+0x46>
		return;
 8001a40:	bf00      	nop
 8001a42:	e002      	b.n	8001a4a <referenceFormatting+0x46>
		return;
 8001a44:	bf00      	nop
 8001a46:	e000      	b.n	8001a4a <referenceFormatting+0x46>
	} else {
		return;
 8001a48:	bf00      	nop
	}
}
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	2000033c 	.word	0x2000033c
 8001a58:	20000270 	.word	0x20000270
 8001a5c:	00000000 	.word	0x00000000

08001a60 <calcDistance>:

float calcDistance(MotorController *c) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	float deltaTicks = c->Encoder->output * TOTAL_WHEEL_TICKS
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a70:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001ad0 <calcDistance+0x70>
 8001a74:	ee27 7a87 	vmul.f32	s14, s15, s14
			- c->Encoder->lastTicks;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	ee07 3a90 	vmov	s15, r3
 8001a82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	float deltaTicks = c->Encoder->output * TOTAL_WHEEL_TICKS
 8001a86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a8a:	edc7 7a03 	vstr	s15, [r7, #12]
	return M_PI * WHEELDIA * (deltaTicks / TOTAL_WHEEL_TICKS);
 8001a8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a92:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001ad0 <calcDistance+0x70>
 8001a96:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a9a:	ee16 0a90 	vmov	r0, s13
 8001a9e:	f7fe fcfb 	bl	8000498 <__aeabi_f2d>
 8001aa2:	a309      	add	r3, pc, #36	; (adr r3, 8001ac8 <calcDistance+0x68>)
 8001aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa8:	f7fe fd4e 	bl	8000548 <__aeabi_dmul>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f7ff f80a 	bl	8000acc <__aeabi_d2f>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	ee07 3a90 	vmov	s15, r3
}
 8001abe:	eeb0 0a67 	vmov.f32	s0, s15
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	9217271a 	.word	0x9217271a
 8001acc:	3fd015bf 	.word	0x3fd015bf
 8001ad0:	44f00000 	.word	0x44f00000
 8001ad4:	00000000 	.word	0x00000000

08001ad8 <calcPositionAndVelocity>:

void calcPositionAndVelocity() {
 8001ad8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001adc:	b084      	sub	sp, #16
 8001ade:	af00      	add	r7, sp, #0
	float distR = calcDistance(&controllerR);
 8001ae0:	487b      	ldr	r0, [pc, #492]	; (8001cd0 <calcPositionAndVelocity+0x1f8>)
 8001ae2:	f7ff ffbd 	bl	8001a60 <calcDistance>
 8001ae6:	ed87 0a03 	vstr	s0, [r7, #12]
	float distL = calcDistance(&controllerL);
 8001aea:	487a      	ldr	r0, [pc, #488]	; (8001cd4 <calcPositionAndVelocity+0x1fc>)
 8001aec:	f7ff ffb8 	bl	8001a60 <calcDistance>
 8001af0:	ed87 0a02 	vstr	s0, [r7, #8]
	controllerR.Encoder->lastTicks = controllerR.Encoder->output
 8001af4:	4b76      	ldr	r3, [pc, #472]	; (8001cd0 <calcPositionAndVelocity+0x1f8>)
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	edd3 7a04 	vldr	s15, [r3, #16]
			* TOTAL_WHEEL_TICKS;
 8001afc:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001cd8 <calcPositionAndVelocity+0x200>
 8001b00:	ee67 7a87 	vmul.f32	s15, s15, s14
	controllerR.Encoder->lastTicks = controllerR.Encoder->output
 8001b04:	4b72      	ldr	r3, [pc, #456]	; (8001cd0 <calcPositionAndVelocity+0x1f8>)
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b0c:	ee17 2a90 	vmov	r2, s15
 8001b10:	601a      	str	r2, [r3, #0]
	controllerL.Encoder->lastTicks = controllerL.Encoder->output
 8001b12:	4b70      	ldr	r3, [pc, #448]	; (8001cd4 <calcPositionAndVelocity+0x1fc>)
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	edd3 7a04 	vldr	s15, [r3, #16]
			* TOTAL_WHEEL_TICKS;
 8001b1a:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8001cd8 <calcPositionAndVelocity+0x200>
 8001b1e:	ee67 7a87 	vmul.f32	s15, s15, s14
	controllerL.Encoder->lastTicks = controllerL.Encoder->output
 8001b22:	4b6c      	ldr	r3, [pc, #432]	; (8001cd4 <calcPositionAndVelocity+0x1fc>)
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b2a:	ee17 2a90 	vmov	r2, s15
 8001b2e:	601a      	str	r2, [r3, #0]
	float dist = (distL + distR) / 2;
 8001b30:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b34:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b3c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001b40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b44:	edc7 7a01 	vstr	s15, [r7, #4]
	posX = posX + dist * cos(posPhi);
 8001b48:	4b64      	ldr	r3, [pc, #400]	; (8001cdc <calcPositionAndVelocity+0x204>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe fca3 	bl	8000498 <__aeabi_f2d>
 8001b52:	4604      	mov	r4, r0
 8001b54:	460d      	mov	r5, r1
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7fe fc9e 	bl	8000498 <__aeabi_f2d>
 8001b5c:	4680      	mov	r8, r0
 8001b5e:	4689      	mov	r9, r1
 8001b60:	4b5f      	ldr	r3, [pc, #380]	; (8001ce0 <calcPositionAndVelocity+0x208>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fc97 	bl	8000498 <__aeabi_f2d>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	ec43 2b10 	vmov	d0, r2, r3
 8001b72:	f006 f8bd 	bl	8007cf0 <cos>
 8001b76:	ec53 2b10 	vmov	r2, r3, d0
 8001b7a:	4640      	mov	r0, r8
 8001b7c:	4649      	mov	r1, r9
 8001b7e:	f7fe fce3 	bl	8000548 <__aeabi_dmul>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4620      	mov	r0, r4
 8001b88:	4629      	mov	r1, r5
 8001b8a:	f7fe fb27 	bl	80001dc <__adddf3>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4610      	mov	r0, r2
 8001b94:	4619      	mov	r1, r3
 8001b96:	f7fe ff99 	bl	8000acc <__aeabi_d2f>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	4a4f      	ldr	r2, [pc, #316]	; (8001cdc <calcPositionAndVelocity+0x204>)
 8001b9e:	6013      	str	r3, [r2, #0]
	posY = posY + dist * sin(posPhi);
 8001ba0:	4b50      	ldr	r3, [pc, #320]	; (8001ce4 <calcPositionAndVelocity+0x20c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe fc77 	bl	8000498 <__aeabi_f2d>
 8001baa:	4604      	mov	r4, r0
 8001bac:	460d      	mov	r5, r1
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7fe fc72 	bl	8000498 <__aeabi_f2d>
 8001bb4:	4680      	mov	r8, r0
 8001bb6:	4689      	mov	r9, r1
 8001bb8:	4b49      	ldr	r3, [pc, #292]	; (8001ce0 <calcPositionAndVelocity+0x208>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7fe fc6b 	bl	8000498 <__aeabi_f2d>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	ec43 2b10 	vmov	d0, r2, r3
 8001bca:	f006 f8e1 	bl	8007d90 <sin>
 8001bce:	ec53 2b10 	vmov	r2, r3, d0
 8001bd2:	4640      	mov	r0, r8
 8001bd4:	4649      	mov	r1, r9
 8001bd6:	f7fe fcb7 	bl	8000548 <__aeabi_dmul>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4620      	mov	r0, r4
 8001be0:	4629      	mov	r1, r5
 8001be2:	f7fe fafb 	bl	80001dc <__adddf3>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	4610      	mov	r0, r2
 8001bec:	4619      	mov	r1, r3
 8001bee:	f7fe ff6d 	bl	8000acc <__aeabi_d2f>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	4a3b      	ldr	r2, [pc, #236]	; (8001ce4 <calcPositionAndVelocity+0x20c>)
 8001bf6:	6013      	str	r3, [r2, #0]
	posPhi = posPhi + (distR - distL) / DISBETWHEEL;
 8001bf8:	4b39      	ldr	r3, [pc, #228]	; (8001ce0 <calcPositionAndVelocity+0x208>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7fe fc4b 	bl	8000498 <__aeabi_f2d>
 8001c02:	4604      	mov	r4, r0
 8001c04:	460d      	mov	r5, r1
 8001c06:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c12:	ee17 0a90 	vmov	r0, s15
 8001c16:	f7fe fc3f 	bl	8000498 <__aeabi_f2d>
 8001c1a:	a32b      	add	r3, pc, #172	; (adr r3, 8001cc8 <calcPositionAndVelocity+0x1f0>)
 8001c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c20:	f7fe fdbc 	bl	800079c <__aeabi_ddiv>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4620      	mov	r0, r4
 8001c2a:	4629      	mov	r1, r5
 8001c2c:	f7fe fad6 	bl	80001dc <__adddf3>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4610      	mov	r0, r2
 8001c36:	4619      	mov	r1, r3
 8001c38:	f7fe ff48 	bl	8000acc <__aeabi_d2f>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	4a28      	ldr	r2, [pc, #160]	; (8001ce0 <calcPositionAndVelocity+0x208>)
 8001c40:	6013      	str	r3, [r2, #0]

	velPhi = ((posPhi - posPhiPrev)) / positionCalculationPeriod;
 8001c42:	4b27      	ldr	r3, [pc, #156]	; (8001ce0 <calcPositionAndVelocity+0x208>)
 8001c44:	ed93 7a00 	vldr	s14, [r3]
 8001c48:	4b27      	ldr	r3, [pc, #156]	; (8001ce8 <calcPositionAndVelocity+0x210>)
 8001c4a:	edd3 7a00 	vldr	s15, [r3]
 8001c4e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c52:	4b26      	ldr	r3, [pc, #152]	; (8001cec <calcPositionAndVelocity+0x214>)
 8001c54:	ed93 7a00 	vldr	s14, [r3]
 8001c58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c5c:	4b24      	ldr	r3, [pc, #144]	; (8001cf0 <calcPositionAndVelocity+0x218>)
 8001c5e:	edc3 7a00 	vstr	s15, [r3]
	velX = (posX - posXPrev) / positionCalculationPeriod;
 8001c62:	4b1e      	ldr	r3, [pc, #120]	; (8001cdc <calcPositionAndVelocity+0x204>)
 8001c64:	ed93 7a00 	vldr	s14, [r3]
 8001c68:	4b22      	ldr	r3, [pc, #136]	; (8001cf4 <calcPositionAndVelocity+0x21c>)
 8001c6a:	edd3 7a00 	vldr	s15, [r3]
 8001c6e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c72:	4b1e      	ldr	r3, [pc, #120]	; (8001cec <calcPositionAndVelocity+0x214>)
 8001c74:	ed93 7a00 	vldr	s14, [r3]
 8001c78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c7c:	4b1e      	ldr	r3, [pc, #120]	; (8001cf8 <calcPositionAndVelocity+0x220>)
 8001c7e:	edc3 7a00 	vstr	s15, [r3]
	velY = (posY - posYPrev) / positionCalculationPeriod;
 8001c82:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <calcPositionAndVelocity+0x20c>)
 8001c84:	ed93 7a00 	vldr	s14, [r3]
 8001c88:	4b1c      	ldr	r3, [pc, #112]	; (8001cfc <calcPositionAndVelocity+0x224>)
 8001c8a:	edd3 7a00 	vldr	s15, [r3]
 8001c8e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c92:	4b16      	ldr	r3, [pc, #88]	; (8001cec <calcPositionAndVelocity+0x214>)
 8001c94:	ed93 7a00 	vldr	s14, [r3]
 8001c98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c9c:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <calcPositionAndVelocity+0x228>)
 8001c9e:	edc3 7a00 	vstr	s15, [r3]

	posPhiPrev = posPhi;
 8001ca2:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <calcPositionAndVelocity+0x208>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a10      	ldr	r2, [pc, #64]	; (8001ce8 <calcPositionAndVelocity+0x210>)
 8001ca8:	6013      	str	r3, [r2, #0]
	posXPrev = posX;
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <calcPositionAndVelocity+0x204>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a11      	ldr	r2, [pc, #68]	; (8001cf4 <calcPositionAndVelocity+0x21c>)
 8001cb0:	6013      	str	r3, [r2, #0]
	posYPrev = posY;
 8001cb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <calcPositionAndVelocity+0x20c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a11      	ldr	r2, [pc, #68]	; (8001cfc <calcPositionAndVelocity+0x224>)
 8001cb8:	6013      	str	r3, [r2, #0]
}
 8001cba:	bf00      	nop
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cc4:	f3af 8000 	nop.w
 8001cc8:	851eb852 	.word	0x851eb852
 8001ccc:	3fd851eb 	.word	0x3fd851eb
 8001cd0:	2000033c 	.word	0x2000033c
 8001cd4:	20000270 	.word	0x20000270
 8001cd8:	44f00000 	.word	0x44f00000
 8001cdc:	20000188 	.word	0x20000188
 8001ce0:	20000198 	.word	0x20000198
 8001ce4:	20000190 	.word	0x20000190
 8001ce8:	2000019c 	.word	0x2000019c
 8001cec:	2000026c 	.word	0x2000026c
 8001cf0:	200001a8 	.word	0x200001a8
 8001cf4:	2000018c 	.word	0x2000018c
 8001cf8:	200001a0 	.word	0x200001a0
 8001cfc:	20000194 	.word	0x20000194
 8001d00:	200001a4 	.word	0x200001a4

08001d04 <updatePositionsAndVelocities>:

void updatePositionsAndVelocities() {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0

	// Position and velocity data from wheel encoders
	calcPositionAndVelocity();
 8001d08:	f7ff fee6 	bl	8001ad8 <calcPositionAndVelocity>
	sendPositionAndVelocity();
 8001d0c:	f000 f89c 	bl	8001e48 <sendPositionAndVelocity>

	// Encoder data from top plate
	calcOrientOutput();
 8001d10:	f000 fcc6 	bl	80026a0 <calcOrientOutput>
	sendOrientData();
 8001d14:	f000 fd6e 	bl	80027f4 <sendOrientData>
}
 8001d18:	bf00      	nop
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <packThe6Floats>:

void packThe6Floats() {
 8001d1c:	b480      	push	{r7}
 8001d1e:	b089      	sub	sp, #36	; 0x24
 8001d20:	af00      	add	r7, sp, #0
	uint8_t *pointer = &posX;
 8001d22:	4b42      	ldr	r3, [pc, #264]	; (8001e2c <packThe6Floats+0x110>)
 8001d24:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 4; i++) {
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
 8001d2a:	e00b      	b.n	8001d44 <packThe6Floats+0x28>
		position[i] = *(pointer + i);
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	4413      	add	r3, r2
 8001d32:	7819      	ldrb	r1, [r3, #0]
 8001d34:	4a3e      	ldr	r2, [pc, #248]	; (8001e30 <packThe6Floats+0x114>)
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	4413      	add	r3, r2
 8001d3a:	460a      	mov	r2, r1
 8001d3c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3301      	adds	r3, #1
 8001d42:	61fb      	str	r3, [r7, #28]
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	ddf0      	ble.n	8001d2c <packThe6Floats+0x10>
	}

	pointer = &posY;
 8001d4a:	4b3a      	ldr	r3, [pc, #232]	; (8001e34 <packThe6Floats+0x118>)
 8001d4c:	607b      	str	r3, [r7, #4]
	for (int k = 4; k < 8; k++) {
 8001d4e:	2304      	movs	r3, #4
 8001d50:	61bb      	str	r3, [r7, #24]
 8001d52:	e00c      	b.n	8001d6e <packThe6Floats+0x52>
		position[k] = *(pointer + k - 4);
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	3b04      	subs	r3, #4
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	7819      	ldrb	r1, [r3, #0]
 8001d5e:	4a34      	ldr	r2, [pc, #208]	; (8001e30 <packThe6Floats+0x114>)
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	4413      	add	r3, r2
 8001d64:	460a      	mov	r2, r1
 8001d66:	701a      	strb	r2, [r3, #0]
	for (int k = 4; k < 8; k++) {
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	61bb      	str	r3, [r7, #24]
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	2b07      	cmp	r3, #7
 8001d72:	ddef      	ble.n	8001d54 <packThe6Floats+0x38>
	}
	pointer = &posPhi;
 8001d74:	4b30      	ldr	r3, [pc, #192]	; (8001e38 <packThe6Floats+0x11c>)
 8001d76:	607b      	str	r3, [r7, #4]
	for (int j = 8; j < 12; j++) {
 8001d78:	2308      	movs	r3, #8
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	e00c      	b.n	8001d98 <packThe6Floats+0x7c>
		position[j] = *(pointer + j - 8);
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	3b08      	subs	r3, #8
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	7819      	ldrb	r1, [r3, #0]
 8001d88:	4a29      	ldr	r2, [pc, #164]	; (8001e30 <packThe6Floats+0x114>)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	460a      	mov	r2, r1
 8001d90:	701a      	strb	r2, [r3, #0]
	for (int j = 8; j < 12; j++) {
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	3301      	adds	r3, #1
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	2b0b      	cmp	r3, #11
 8001d9c:	ddef      	ble.n	8001d7e <packThe6Floats+0x62>
	}
	pointer = &velX;
 8001d9e:	4b27      	ldr	r3, [pc, #156]	; (8001e3c <packThe6Floats+0x120>)
 8001da0:	607b      	str	r3, [r7, #4]
	for (int m = 12; m < 16; m++) {
 8001da2:	230c      	movs	r3, #12
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	e00c      	b.n	8001dc2 <packThe6Floats+0xa6>
		position[m] = *(pointer + m - 12);
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	3b0c      	subs	r3, #12
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	4413      	add	r3, r2
 8001db0:	7819      	ldrb	r1, [r3, #0]
 8001db2:	4a1f      	ldr	r2, [pc, #124]	; (8001e30 <packThe6Floats+0x114>)
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4413      	add	r3, r2
 8001db8:	460a      	mov	r2, r1
 8001dba:	701a      	strb	r2, [r3, #0]
	for (int m = 12; m < 16; m++) {
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	2b0f      	cmp	r3, #15
 8001dc6:	ddef      	ble.n	8001da8 <packThe6Floats+0x8c>
	}
	pointer = &velY;
 8001dc8:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <packThe6Floats+0x124>)
 8001dca:	607b      	str	r3, [r7, #4]
	for (int n = 16; n < 20; n++) {
 8001dcc:	2310      	movs	r3, #16
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	e00c      	b.n	8001dec <packThe6Floats+0xd0>
		position[n] = *(pointer + n - 16);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	3b10      	subs	r3, #16
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	7819      	ldrb	r1, [r3, #0]
 8001ddc:	4a14      	ldr	r2, [pc, #80]	; (8001e30 <packThe6Floats+0x114>)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4413      	add	r3, r2
 8001de2:	460a      	mov	r2, r1
 8001de4:	701a      	strb	r2, [r3, #0]
	for (int n = 16; n < 20; n++) {
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	3301      	adds	r3, #1
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2b13      	cmp	r3, #19
 8001df0:	ddef      	ble.n	8001dd2 <packThe6Floats+0xb6>
	}
	pointer = &velPhi;
 8001df2:	4b14      	ldr	r3, [pc, #80]	; (8001e44 <packThe6Floats+0x128>)
 8001df4:	607b      	str	r3, [r7, #4]
	for (int o = 20; o < 24; o++) {
 8001df6:	2314      	movs	r3, #20
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	e00c      	b.n	8001e16 <packThe6Floats+0xfa>
		position[o] = *(pointer + o - 20);
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	3b14      	subs	r3, #20
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	4413      	add	r3, r2
 8001e04:	7819      	ldrb	r1, [r3, #0]
 8001e06:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <packThe6Floats+0x114>)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	460a      	mov	r2, r1
 8001e0e:	701a      	strb	r2, [r3, #0]
	for (int o = 20; o < 24; o++) {
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	3301      	adds	r3, #1
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	2b17      	cmp	r3, #23
 8001e1a:	ddef      	ble.n	8001dfc <packThe6Floats+0xe0>
	}
}
 8001e1c:	bf00      	nop
 8001e1e:	bf00      	nop
 8001e20:	3724      	adds	r7, #36	; 0x24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20000188 	.word	0x20000188
 8001e30:	200001ac 	.word	0x200001ac
 8001e34:	20000190 	.word	0x20000190
 8001e38:	20000198 	.word	0x20000198
 8001e3c:	200001a0 	.word	0x200001a0
 8001e40:	200001a4 	.word	0x200001a4
 8001e44:	200001a8 	.word	0x200001a8

08001e48 <sendPositionAndVelocity>:

void sendPositionAndVelocity() {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
	if (spamCheckX != posX || spamCheckY != posY || spamCheckPhi != posPhi) {
 8001e4c:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <sendPositionAndVelocity+0x88>)
 8001e4e:	ed93 7a00 	vldr	s14, [r3]
 8001e52:	4b20      	ldr	r3, [pc, #128]	; (8001ed4 <sendPositionAndVelocity+0x8c>)
 8001e54:	edd3 7a00 	vldr	s15, [r3]
 8001e58:	eeb4 7a67 	vcmp.f32	s14, s15
 8001e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e60:	d115      	bne.n	8001e8e <sendPositionAndVelocity+0x46>
 8001e62:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <sendPositionAndVelocity+0x90>)
 8001e64:	ed93 7a00 	vldr	s14, [r3]
 8001e68:	4b1c      	ldr	r3, [pc, #112]	; (8001edc <sendPositionAndVelocity+0x94>)
 8001e6a:	edd3 7a00 	vldr	s15, [r3]
 8001e6e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e76:	d10a      	bne.n	8001e8e <sendPositionAndVelocity+0x46>
 8001e78:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <sendPositionAndVelocity+0x98>)
 8001e7a:	ed93 7a00 	vldr	s14, [r3]
 8001e7e:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <sendPositionAndVelocity+0x9c>)
 8001e80:	edd3 7a00 	vldr	s15, [r3]
 8001e84:	eeb4 7a67 	vcmp.f32	s14, s15
 8001e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e8c:	d01e      	beq.n	8001ecc <sendPositionAndVelocity+0x84>
		spamCheckX = posX;
 8001e8e:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <sendPositionAndVelocity+0x8c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a0f      	ldr	r2, [pc, #60]	; (8001ed0 <sendPositionAndVelocity+0x88>)
 8001e94:	6013      	str	r3, [r2, #0]
		spamCheckY = posY;
 8001e96:	4b11      	ldr	r3, [pc, #68]	; (8001edc <sendPositionAndVelocity+0x94>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a0f      	ldr	r2, [pc, #60]	; (8001ed8 <sendPositionAndVelocity+0x90>)
 8001e9c:	6013      	str	r3, [r2, #0]
		spamCheckPhi = posPhi;
 8001e9e:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <sendPositionAndVelocity+0x9c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a0f      	ldr	r2, [pc, #60]	; (8001ee0 <sendPositionAndVelocity+0x98>)
 8001ea4:	6013      	str	r3, [r2, #0]
		packThe6Floats();
 8001ea6:	f7ff ff39 	bl	8001d1c <packThe6Floats>
		memset(packedMotorData, 0, sizeof(packedMotorData));
 8001eaa:	2232      	movs	r2, #50	; 0x32
 8001eac:	2100      	movs	r1, #0
 8001eae:	480e      	ldr	r0, [pc, #56]	; (8001ee8 <sendPositionAndVelocity+0xa0>)
 8001eb0:	f005 ff16 	bl	8007ce0 <memset>

		to_frame(packedMotorData, position, 3);
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	490d      	ldr	r1, [pc, #52]	; (8001eec <sendPositionAndVelocity+0xa4>)
 8001eb8:	480b      	ldr	r0, [pc, #44]	; (8001ee8 <sendPositionAndVelocity+0xa0>)
 8001eba:	f7fe ffd3 	bl	8000e64 <to_frame>
		HAL_UART_Transmit(&huart2, packedMotorData, sizeof(packedMotorData),
 8001ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec2:	2232      	movs	r2, #50	; 0x32
 8001ec4:	4908      	ldr	r1, [pc, #32]	; (8001ee8 <sendPositionAndVelocity+0xa0>)
 8001ec6:	480a      	ldr	r0, [pc, #40]	; (8001ef0 <sendPositionAndVelocity+0xa8>)
 8001ec8:	f005 f90c 	bl	80070e4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
	}
}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	2000014c 	.word	0x2000014c
 8001ed4:	20000188 	.word	0x20000188
 8001ed8:	20000148 	.word	0x20000148
 8001edc:	20000190 	.word	0x20000190
 8001ee0:	20000150 	.word	0x20000150
 8001ee4:	20000198 	.word	0x20000198
 8001ee8:	20000154 	.word	0x20000154
 8001eec:	200001ac 	.word	0x200001ac
 8001ef0:	200003ec 	.word	0x200003ec

08001ef4 <clockcheckRight>:
	c->Encoder->output = 0.0;
	c->Encoder->fineAdjustment = 0;
	c->Encoder->revolutions = 0;
}

void clockcheckRight() {
 8001ef4:	b598      	push	{r3, r4, r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(motor_Right_clock_GPIO_Port, motor_Right_clock_Pin)
 8001ef8:	2101      	movs	r1, #1
 8001efa:	482a      	ldr	r0, [pc, #168]	; (8001fa4 <clockcheckRight+0xb0>)
 8001efc:	f002 fdcc 	bl	8004a98 <HAL_GPIO_ReadPin>
 8001f00:	4603      	mov	r3, r0
 8001f02:	461c      	mov	r4, r3
			== HAL_GPIO_ReadPin(Motor_counterclock_right_GPIO_Port,
 8001f04:	2110      	movs	r1, #16
 8001f06:	4827      	ldr	r0, [pc, #156]	; (8001fa4 <clockcheckRight+0xb0>)
 8001f08:	f002 fdc6 	bl	8004a98 <HAL_GPIO_ReadPin>
 8001f0c:	4603      	mov	r3, r0
	if (HAL_GPIO_ReadPin(motor_Right_clock_GPIO_Port, motor_Right_clock_Pin)
 8001f0e:	429c      	cmp	r4, r3
 8001f10:	d122      	bne.n	8001f58 <clockcheckRight+0x64>
					Motor_counterclock_right_Pin)) {
		controllerR.motor->direction = -1;
 8001f12:	4b25      	ldr	r3, [pc, #148]	; (8001fa8 <clockcheckRight+0xb4>)
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	22ff      	movs	r2, #255	; 0xff
 8001f18:	705a      	strb	r2, [r3, #1]
		controllerR.Encoder->fineAdjustment = abs(
				(controllerR.Encoder->fineAdjustment
 8001f1a:	4b23      	ldr	r3, [pc, #140]	; (8001fa8 <clockcheckRight+0xb4>)
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001f22:	461a      	mov	r2, r3
						+ controllerR.motor->direction) % TOTAL_WHEEL_TICKS);
 8001f24:	4b20      	ldr	r3, [pc, #128]	; (8001fa8 <clockcheckRight+0xb4>)
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001f2c:	441a      	add	r2, r3
 8001f2e:	4b1f      	ldr	r3, [pc, #124]	; (8001fac <clockcheckRight+0xb8>)
 8001f30:	fb83 1302 	smull	r1, r3, r3, r2
 8001f34:	4413      	add	r3, r2
 8001f36:	1299      	asrs	r1, r3, #10
 8001f38:	17d3      	asrs	r3, r2, #31
 8001f3a:	1ac9      	subs	r1, r1, r3
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	011b      	lsls	r3, r3, #4
 8001f40:	1a5b      	subs	r3, r3, r1
 8001f42:	01db      	lsls	r3, r3, #7
 8001f44:	1ad1      	subs	r1, r2, r3
		controllerR.Encoder->fineAdjustment = abs(
 8001f46:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 8001f4a:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 8001f4e:	4b16      	ldr	r3, [pc, #88]	; (8001fa8 <clockcheckRight+0xb4>)
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	b212      	sxth	r2, r2
 8001f54:	811a      	strh	r2, [r3, #8]
 8001f56:	e020      	b.n	8001f9a <clockcheckRight+0xa6>
	} else {
		controllerR.motor->direction = 1;
 8001f58:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <clockcheckRight+0xb4>)
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	705a      	strb	r2, [r3, #1]
		controllerR.Encoder->fineAdjustment = abs(
				(controllerR.Encoder->fineAdjustment
 8001f60:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <clockcheckRight+0xb4>)
 8001f62:	695b      	ldr	r3, [r3, #20]
 8001f64:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001f68:	461a      	mov	r2, r3
						+ controllerR.motor->direction)
 8001f6a:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <clockcheckRight+0xb4>)
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001f72:	18d1      	adds	r1, r2, r3
						% (TOTAL_WHEEL_TICKS + 1));
 8001f74:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <clockcheckRight+0xbc>)
 8001f76:	fb83 2301 	smull	r2, r3, r3, r1
 8001f7a:	115a      	asrs	r2, r3, #5
 8001f7c:	17cb      	asrs	r3, r1, #31
 8001f7e:	1ad2      	subs	r2, r2, r3
 8001f80:	4613      	mov	r3, r2
 8001f82:	011b      	lsls	r3, r3, #4
 8001f84:	1a9b      	subs	r3, r3, r2
 8001f86:	01db      	lsls	r3, r3, #7
 8001f88:	4413      	add	r3, r2
 8001f8a:	1aca      	subs	r2, r1, r3
		controllerR.Encoder->fineAdjustment = abs(
 8001f8c:	2a00      	cmp	r2, #0
 8001f8e:	bfb8      	it	lt
 8001f90:	4252      	neglt	r2, r2
 8001f92:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <clockcheckRight+0xb4>)
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	b212      	sxth	r2, r2
 8001f98:	811a      	strh	r2, [r3, #8]
	}

	checkRevolutions(&controllerR);
 8001f9a:	4803      	ldr	r0, [pc, #12]	; (8001fa8 <clockcheckRight+0xb4>)
 8001f9c:	f000 f92e 	bl	80021fc <checkRevolutions>
}
 8001fa0:	bf00      	nop
 8001fa2:	bd98      	pop	{r3, r4, r7, pc}
 8001fa4:	48000400 	.word	0x48000400
 8001fa8:	2000033c 	.word	0x2000033c
 8001fac:	88888889 	.word	0x88888889
 8001fb0:	0443b2b5 	.word	0x0443b2b5

08001fb4 <counterclockcheckRight>:

void counterclockcheckRight() {
 8001fb4:	b598      	push	{r3, r4, r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(motor_Right_clock_GPIO_Port, motor_Right_clock_Pin)
 8001fb8:	2101      	movs	r1, #1
 8001fba:	482a      	ldr	r0, [pc, #168]	; (8002064 <counterclockcheckRight+0xb0>)
 8001fbc:	f002 fd6c 	bl	8004a98 <HAL_GPIO_ReadPin>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	461c      	mov	r4, r3
			== HAL_GPIO_ReadPin(Motor_counterclock_right_GPIO_Port,
 8001fc4:	2110      	movs	r1, #16
 8001fc6:	4827      	ldr	r0, [pc, #156]	; (8002064 <counterclockcheckRight+0xb0>)
 8001fc8:	f002 fd66 	bl	8004a98 <HAL_GPIO_ReadPin>
 8001fcc:	4603      	mov	r3, r0
	if (HAL_GPIO_ReadPin(motor_Right_clock_GPIO_Port, motor_Right_clock_Pin)
 8001fce:	429c      	cmp	r4, r3
 8001fd0:	d121      	bne.n	8002016 <counterclockcheckRight+0x62>
					Motor_counterclock_right_Pin)) {
		controllerR.motor->direction = 1;
 8001fd2:	4b25      	ldr	r3, [pc, #148]	; (8002068 <counterclockcheckRight+0xb4>)
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	705a      	strb	r2, [r3, #1]
		controllerR.Encoder->fineAdjustment = abs(
				(controllerR.Encoder->fineAdjustment
 8001fda:	4b23      	ldr	r3, [pc, #140]	; (8002068 <counterclockcheckRight+0xb4>)
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001fe2:	461a      	mov	r2, r3
						+ controllerR.motor->direction)
 8001fe4:	4b20      	ldr	r3, [pc, #128]	; (8002068 <counterclockcheckRight+0xb4>)
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001fec:	18d1      	adds	r1, r2, r3
						% (TOTAL_WHEEL_TICKS + 1));
 8001fee:	4b1f      	ldr	r3, [pc, #124]	; (800206c <counterclockcheckRight+0xb8>)
 8001ff0:	fb83 2301 	smull	r2, r3, r3, r1
 8001ff4:	115a      	asrs	r2, r3, #5
 8001ff6:	17cb      	asrs	r3, r1, #31
 8001ff8:	1ad2      	subs	r2, r2, r3
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	011b      	lsls	r3, r3, #4
 8001ffe:	1a9b      	subs	r3, r3, r2
 8002000:	01db      	lsls	r3, r3, #7
 8002002:	4413      	add	r3, r2
 8002004:	1aca      	subs	r2, r1, r3
		controllerR.Encoder->fineAdjustment = abs(
 8002006:	2a00      	cmp	r2, #0
 8002008:	bfb8      	it	lt
 800200a:	4252      	neglt	r2, r2
 800200c:	4b16      	ldr	r3, [pc, #88]	; (8002068 <counterclockcheckRight+0xb4>)
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	b212      	sxth	r2, r2
 8002012:	811a      	strh	r2, [r3, #8]
 8002014:	e021      	b.n	800205a <counterclockcheckRight+0xa6>
	} else {
		controllerR.motor->direction = -1;
 8002016:	4b14      	ldr	r3, [pc, #80]	; (8002068 <counterclockcheckRight+0xb4>)
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	22ff      	movs	r2, #255	; 0xff
 800201c:	705a      	strb	r2, [r3, #1]
		controllerR.Encoder->fineAdjustment = abs(
				(controllerR.Encoder->fineAdjustment
 800201e:	4b12      	ldr	r3, [pc, #72]	; (8002068 <counterclockcheckRight+0xb4>)
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002026:	461a      	mov	r2, r3
						+ controllerR.motor->direction) % TOTAL_WHEEL_TICKS);
 8002028:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <counterclockcheckRight+0xb4>)
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002030:	441a      	add	r2, r3
 8002032:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <counterclockcheckRight+0xbc>)
 8002034:	fb83 1302 	smull	r1, r3, r3, r2
 8002038:	4413      	add	r3, r2
 800203a:	1299      	asrs	r1, r3, #10
 800203c:	17d3      	asrs	r3, r2, #31
 800203e:	1ac9      	subs	r1, r1, r3
 8002040:	460b      	mov	r3, r1
 8002042:	011b      	lsls	r3, r3, #4
 8002044:	1a5b      	subs	r3, r3, r1
 8002046:	01db      	lsls	r3, r3, #7
 8002048:	1ad1      	subs	r1, r2, r3
		controllerR.Encoder->fineAdjustment = abs(
 800204a:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 800204e:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 8002052:	4b05      	ldr	r3, [pc, #20]	; (8002068 <counterclockcheckRight+0xb4>)
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	b212      	sxth	r2, r2
 8002058:	811a      	strh	r2, [r3, #8]
	}

	checkRevolutions(&controllerR);
 800205a:	4803      	ldr	r0, [pc, #12]	; (8002068 <counterclockcheckRight+0xb4>)
 800205c:	f000 f8ce 	bl	80021fc <checkRevolutions>
}
 8002060:	bf00      	nop
 8002062:	bd98      	pop	{r3, r4, r7, pc}
 8002064:	48000400 	.word	0x48000400
 8002068:	2000033c 	.word	0x2000033c
 800206c:	0443b2b5 	.word	0x0443b2b5
 8002070:	88888889 	.word	0x88888889

08002074 <clockcheckLeft>:

void clockcheckLeft() {
 8002074:	b598      	push	{r3, r4, r7, lr}
 8002076:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(Motor_Left_clock_GPIO_Port, Motor_Left_clock_Pin)
 8002078:	2120      	movs	r1, #32
 800207a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800207e:	f002 fd0b 	bl	8004a98 <HAL_GPIO_ReadPin>
 8002082:	4603      	mov	r3, r0
 8002084:	461c      	mov	r4, r3
			== HAL_GPIO_ReadPin(Motor_left_counterclock_GPIO_Port,
 8002086:	2102      	movs	r1, #2
 8002088:	4827      	ldr	r0, [pc, #156]	; (8002128 <clockcheckLeft+0xb4>)
 800208a:	f002 fd05 	bl	8004a98 <HAL_GPIO_ReadPin>
 800208e:	4603      	mov	r3, r0
	if (HAL_GPIO_ReadPin(Motor_Left_clock_GPIO_Port, Motor_Left_clock_Pin)
 8002090:	429c      	cmp	r4, r3
 8002092:	d122      	bne.n	80020da <clockcheckLeft+0x66>
					Motor_left_counterclock_Pin)) {
		controllerL.motor->direction = -1;
 8002094:	4b25      	ldr	r3, [pc, #148]	; (800212c <clockcheckLeft+0xb8>)
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	22ff      	movs	r2, #255	; 0xff
 800209a:	705a      	strb	r2, [r3, #1]
		controllerL.Encoder->fineAdjustment = abs(
				(controllerL.Encoder->fineAdjustment
 800209c:	4b23      	ldr	r3, [pc, #140]	; (800212c <clockcheckLeft+0xb8>)
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80020a4:	461a      	mov	r2, r3
						+ controllerL.motor->direction) % TOTAL_WHEEL_TICKS);
 80020a6:	4b21      	ldr	r3, [pc, #132]	; (800212c <clockcheckLeft+0xb8>)
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80020ae:	441a      	add	r2, r3
 80020b0:	4b1f      	ldr	r3, [pc, #124]	; (8002130 <clockcheckLeft+0xbc>)
 80020b2:	fb83 1302 	smull	r1, r3, r3, r2
 80020b6:	4413      	add	r3, r2
 80020b8:	1299      	asrs	r1, r3, #10
 80020ba:	17d3      	asrs	r3, r2, #31
 80020bc:	1ac9      	subs	r1, r1, r3
 80020be:	460b      	mov	r3, r1
 80020c0:	011b      	lsls	r3, r3, #4
 80020c2:	1a5b      	subs	r3, r3, r1
 80020c4:	01db      	lsls	r3, r3, #7
 80020c6:	1ad1      	subs	r1, r2, r3
		controllerL.Encoder->fineAdjustment = abs(
 80020c8:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 80020cc:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 80020d0:	4b16      	ldr	r3, [pc, #88]	; (800212c <clockcheckLeft+0xb8>)
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	b212      	sxth	r2, r2
 80020d6:	811a      	strh	r2, [r3, #8]
 80020d8:	e020      	b.n	800211c <clockcheckLeft+0xa8>
	} else {
		controllerL.motor->direction = 1;
 80020da:	4b14      	ldr	r3, [pc, #80]	; (800212c <clockcheckLeft+0xb8>)
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	2201      	movs	r2, #1
 80020e0:	705a      	strb	r2, [r3, #1]
		controllerL.Encoder->fineAdjustment = abs(
				(controllerL.Encoder->fineAdjustment
 80020e2:	4b12      	ldr	r3, [pc, #72]	; (800212c <clockcheckLeft+0xb8>)
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80020ea:	461a      	mov	r2, r3
						+ controllerL.motor->direction)
 80020ec:	4b0f      	ldr	r3, [pc, #60]	; (800212c <clockcheckLeft+0xb8>)
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80020f4:	18d1      	adds	r1, r2, r3
						% (TOTAL_WHEEL_TICKS + 1));
 80020f6:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <clockcheckLeft+0xc0>)
 80020f8:	fb83 2301 	smull	r2, r3, r3, r1
 80020fc:	115a      	asrs	r2, r3, #5
 80020fe:	17cb      	asrs	r3, r1, #31
 8002100:	1ad2      	subs	r2, r2, r3
 8002102:	4613      	mov	r3, r2
 8002104:	011b      	lsls	r3, r3, #4
 8002106:	1a9b      	subs	r3, r3, r2
 8002108:	01db      	lsls	r3, r3, #7
 800210a:	4413      	add	r3, r2
 800210c:	1aca      	subs	r2, r1, r3
		controllerL.Encoder->fineAdjustment = abs(
 800210e:	2a00      	cmp	r2, #0
 8002110:	bfb8      	it	lt
 8002112:	4252      	neglt	r2, r2
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <clockcheckLeft+0xb8>)
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	b212      	sxth	r2, r2
 800211a:	811a      	strh	r2, [r3, #8]
	}

	checkRevolutions(&controllerL);
 800211c:	4803      	ldr	r0, [pc, #12]	; (800212c <clockcheckLeft+0xb8>)
 800211e:	f000 f86d 	bl	80021fc <checkRevolutions>
}
 8002122:	bf00      	nop
 8002124:	bd98      	pop	{r3, r4, r7, pc}
 8002126:	bf00      	nop
 8002128:	48000400 	.word	0x48000400
 800212c:	20000270 	.word	0x20000270
 8002130:	88888889 	.word	0x88888889
 8002134:	0443b2b5 	.word	0x0443b2b5

08002138 <counterclockcheckLeft>:

void counterclockcheckLeft() {
 8002138:	b598      	push	{r3, r4, r7, lr}
 800213a:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(Motor_Left_clock_GPIO_Port, Motor_Left_clock_Pin)
 800213c:	2120      	movs	r1, #32
 800213e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002142:	f002 fca9 	bl	8004a98 <HAL_GPIO_ReadPin>
 8002146:	4603      	mov	r3, r0
 8002148:	461c      	mov	r4, r3
			== HAL_GPIO_ReadPin(Motor_left_counterclock_GPIO_Port,
 800214a:	2102      	movs	r1, #2
 800214c:	4827      	ldr	r0, [pc, #156]	; (80021ec <counterclockcheckLeft+0xb4>)
 800214e:	f002 fca3 	bl	8004a98 <HAL_GPIO_ReadPin>
 8002152:	4603      	mov	r3, r0
	if (HAL_GPIO_ReadPin(Motor_Left_clock_GPIO_Port, Motor_Left_clock_Pin)
 8002154:	429c      	cmp	r4, r3
 8002156:	d121      	bne.n	800219c <counterclockcheckLeft+0x64>
					Motor_left_counterclock_Pin)) {
		controllerL.motor->direction = 1;
 8002158:	4b25      	ldr	r3, [pc, #148]	; (80021f0 <counterclockcheckLeft+0xb8>)
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	2201      	movs	r2, #1
 800215e:	705a      	strb	r2, [r3, #1]
		controllerL.Encoder->fineAdjustment = abs(
				(controllerL.Encoder->fineAdjustment
 8002160:	4b23      	ldr	r3, [pc, #140]	; (80021f0 <counterclockcheckLeft+0xb8>)
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002168:	461a      	mov	r2, r3
						+ controllerL.motor->direction)
 800216a:	4b21      	ldr	r3, [pc, #132]	; (80021f0 <counterclockcheckLeft+0xb8>)
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002172:	18d1      	adds	r1, r2, r3
						% (TOTAL_WHEEL_TICKS + 1));
 8002174:	4b1f      	ldr	r3, [pc, #124]	; (80021f4 <counterclockcheckLeft+0xbc>)
 8002176:	fb83 2301 	smull	r2, r3, r3, r1
 800217a:	115a      	asrs	r2, r3, #5
 800217c:	17cb      	asrs	r3, r1, #31
 800217e:	1ad2      	subs	r2, r2, r3
 8002180:	4613      	mov	r3, r2
 8002182:	011b      	lsls	r3, r3, #4
 8002184:	1a9b      	subs	r3, r3, r2
 8002186:	01db      	lsls	r3, r3, #7
 8002188:	4413      	add	r3, r2
 800218a:	1aca      	subs	r2, r1, r3
		controllerL.Encoder->fineAdjustment = abs(
 800218c:	2a00      	cmp	r2, #0
 800218e:	bfb8      	it	lt
 8002190:	4252      	neglt	r2, r2
 8002192:	4b17      	ldr	r3, [pc, #92]	; (80021f0 <counterclockcheckLeft+0xb8>)
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	b212      	sxth	r2, r2
 8002198:	811a      	strh	r2, [r3, #8]
 800219a:	e021      	b.n	80021e0 <counterclockcheckLeft+0xa8>
	} else {
		controllerL.motor->direction = -1;
 800219c:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <counterclockcheckLeft+0xb8>)
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	22ff      	movs	r2, #255	; 0xff
 80021a2:	705a      	strb	r2, [r3, #1]
		controllerL.Encoder->fineAdjustment = abs(
				(controllerL.Encoder->fineAdjustment
 80021a4:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <counterclockcheckLeft+0xb8>)
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80021ac:	461a      	mov	r2, r3
						+ controllerL.motor->direction) % TOTAL_WHEEL_TICKS);
 80021ae:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <counterclockcheckLeft+0xb8>)
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80021b6:	441a      	add	r2, r3
 80021b8:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <counterclockcheckLeft+0xc0>)
 80021ba:	fb83 1302 	smull	r1, r3, r3, r2
 80021be:	4413      	add	r3, r2
 80021c0:	1299      	asrs	r1, r3, #10
 80021c2:	17d3      	asrs	r3, r2, #31
 80021c4:	1ac9      	subs	r1, r1, r3
 80021c6:	460b      	mov	r3, r1
 80021c8:	011b      	lsls	r3, r3, #4
 80021ca:	1a5b      	subs	r3, r3, r1
 80021cc:	01db      	lsls	r3, r3, #7
 80021ce:	1ad1      	subs	r1, r2, r3
		controllerL.Encoder->fineAdjustment = abs(
 80021d0:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 80021d4:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 80021d8:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <counterclockcheckLeft+0xb8>)
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	b212      	sxth	r2, r2
 80021de:	811a      	strh	r2, [r3, #8]
	}

	checkRevolutions(&controllerL);
 80021e0:	4803      	ldr	r0, [pc, #12]	; (80021f0 <counterclockcheckLeft+0xb8>)
 80021e2:	f000 f80b 	bl	80021fc <checkRevolutions>
}
 80021e6:	bf00      	nop
 80021e8:	bd98      	pop	{r3, r4, r7, pc}
 80021ea:	bf00      	nop
 80021ec:	48000400 	.word	0x48000400
 80021f0:	20000270 	.word	0x20000270
 80021f4:	0443b2b5 	.word	0x0443b2b5
 80021f8:	88888889 	.word	0x88888889

080021fc <checkRevolutions>:

void checkRevolutions(MotorController *c) {
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	if (c->Encoder->fineAdjustment == 0 && c->motor->direction == 1) {
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d116      	bne.n	800223e <checkRevolutions+0x42>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d110      	bne.n	800223e <checkRevolutions+0x42>
		c->Encoder->revolutions = c->Encoder->revolutions + c->motor->direction;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800222a:	4619      	mov	r1, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	440a      	add	r2, r1
 8002232:	60da      	str	r2, [r3, #12]
		c->Encoder->fineAdjustment = 1;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	2201      	movs	r2, #1
 800223a:	811a      	strh	r2, [r3, #8]
	 fineadjustmentRight = 1;
	 } else if (fineadjustmentRight == 0 && directionRight == -1) {
	 revolutionRight = revolutionRight + directionRight;
	 fineadjustmentRight = TOTAL_WHEEL_TICKS;
	 }*/
}
 800223c:	e01d      	b.n	800227a <checkRevolutions+0x7e>
	} else if (c->Encoder->fineAdjustment == 0 && c->motor->direction == -1) {
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d117      	bne.n	800227a <checkRevolutions+0x7e>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002256:	d110      	bne.n	800227a <checkRevolutions+0x7e>
		c->Encoder->revolutions = c->Encoder->revolutions + c->motor->direction;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002266:	4619      	mov	r1, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	440a      	add	r2, r1
 800226e:	60da      	str	r2, [r3, #12]
		c->Encoder->fineAdjustment = TOTAL_WHEEL_TICKS;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8002278:	811a      	strh	r2, [r3, #8]
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
	...

08002288 <calcOutput>:

void calcOutput(MotorEncoder *e) {
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
	e->output = e->revolutions
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
			+ ((float) e->fineAdjustment / TOTAL_WHEEL_TICKS);
 8002294:	ee07 3a90 	vmov	s15, r3
 8002298:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80022a2:	ee07 3a90 	vmov	s15, r3
 80022a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80022aa:	ed9f 6a07 	vldr	s12, [pc, #28]	; 80022c8 <calcOutput+0x40>
 80022ae:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80022b2:	ee77 7a27 	vadd.f32	s15, s14, s15
	e->output = e->revolutions
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	edc3 7a04 	vstr	s15, [r3, #16]
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	44f00000 	.word	0x44f00000

080022cc <calculateError>:

void calculateError(MotorController *c) {
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
	c->lastError = c->reference - c->measAngVel;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	ed93 7a00 	vldr	s14, [r3]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80022e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
	...

080022f8 <nextVoltage>:

void nextVoltage(MotorController *c) {
 80022f8:	b5b0      	push	{r4, r5, r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
	c->voltage = c->lastError * 2.82 * controllerPeriod + c->voltage;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe f8c7 	bl	8000498 <__aeabi_f2d>
 800230a:	a31a      	add	r3, pc, #104	; (adr r3, 8002374 <nextVoltage+0x7c>)
 800230c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002310:	f7fe f91a 	bl	8000548 <__aeabi_dmul>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4614      	mov	r4, r2
 800231a:	461d      	mov	r5, r3
 800231c:	4b14      	ldr	r3, [pc, #80]	; (8002370 <nextVoltage+0x78>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f7fe f8b9 	bl	8000498 <__aeabi_f2d>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	4620      	mov	r0, r4
 800232c:	4629      	mov	r1, r5
 800232e:	f7fe f90b 	bl	8000548 <__aeabi_dmul>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4614      	mov	r4, r2
 8002338:	461d      	mov	r5, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe f8aa 	bl	8000498 <__aeabi_f2d>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4620      	mov	r0, r4
 800234a:	4629      	mov	r1, r5
 800234c:	f7fd ff46 	bl	80001dc <__adddf3>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4610      	mov	r0, r2
 8002356:	4619      	mov	r1, r3
 8002358:	f7fe fbb8 	bl	8000acc <__aeabi_d2f>
 800235c:	4602      	mov	r2, r0
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	60da      	str	r2, [r3, #12]
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bdb0      	pop	{r4, r5, r7, pc}
 800236a:	bf00      	nop
 800236c:	f3af 8000 	nop.w
 8002370:	200002ec 	.word	0x200002ec
 8002374:	28f5c28f 	.word	0x28f5c28f
 8002378:	40068f5c 	.word	0x40068f5c
 800237c:	00000000 	.word	0x00000000

08002380 <updateAngularVelocity>:

void updateAngularVelocity(MotorController *c) {
 8002380:	b5b0      	push	{r4, r5, r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
	float deltaAngle = c->Encoder->output * 2 * M_PI - c->Encoder->lastAngle;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002390:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002394:	ee17 0a90 	vmov	r0, s15
 8002398:	f7fe f87e 	bl	8000498 <__aeabi_f2d>
 800239c:	a323      	add	r3, pc, #140	; (adr r3, 800242c <updateAngularVelocity+0xac>)
 800239e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a2:	f7fe f8d1 	bl	8000548 <__aeabi_dmul>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	4614      	mov	r4, r2
 80023ac:	461d      	mov	r5, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fe f86f 	bl	8000498 <__aeabi_f2d>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	4620      	mov	r0, r4
 80023c0:	4629      	mov	r1, r5
 80023c2:	f7fd ff09 	bl	80001d8 <__aeabi_dsub>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4610      	mov	r0, r2
 80023cc:	4619      	mov	r1, r3
 80023ce:	f7fe fb7d 	bl	8000acc <__aeabi_d2f>
 80023d2:	4603      	mov	r3, r0
 80023d4:	60fb      	str	r3, [r7, #12]
	c->Encoder->lastAngle = c->Encoder->output * 2 * M_PI;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	edd3 7a04 	vldr	s15, [r3, #16]
 80023de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023e2:	ee17 0a90 	vmov	r0, s15
 80023e6:	f7fe f857 	bl	8000498 <__aeabi_f2d>
 80023ea:	a310      	add	r3, pc, #64	; (adr r3, 800242c <updateAngularVelocity+0xac>)
 80023ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f0:	f7fe f8aa 	bl	8000548 <__aeabi_dmul>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	4610      	mov	r0, r2
 80023fa:	4619      	mov	r1, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	695c      	ldr	r4, [r3, #20]
 8002400:	f7fe fb64 	bl	8000acc <__aeabi_d2f>
 8002404:	4603      	mov	r3, r0
 8002406:	6063      	str	r3, [r4, #4]
	c->measAngVel = deltaAngle / controllerPeriod;
 8002408:	4b07      	ldr	r3, [pc, #28]	; (8002428 <updateAngularVelocity+0xa8>)
 800240a:	ed93 7a00 	vldr	s14, [r3]
 800240e:	edd7 6a03 	vldr	s13, [r7, #12]
 8002412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800241c:	bf00      	nop
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bdb0      	pop	{r4, r5, r7, pc}
 8002424:	f3af 8000 	nop.w
 8002428:	200002ec 	.word	0x200002ec
 800242c:	54442d18 	.word	0x54442d18
 8002430:	400921fb 	.word	0x400921fb

08002434 <updateDutyCycle>:

void updateDutyCycle(MotorController *c) {
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	if (c->voltage > 0) {
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002442:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244a:	dd04      	ble.n	8002456 <updateDutyCycle+0x22>
		c->motor->direction = 1;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	2201      	movs	r2, #1
 8002452:	705a      	strb	r2, [r3, #1]
 8002454:	e012      	b.n	800247c <updateDutyCycle+0x48>
	} else if (c->voltage < 0){
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	edd3 7a03 	vldr	s15, [r3, #12]
 800245c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002464:	d504      	bpl.n	8002470 <updateDutyCycle+0x3c>
		c->motor->direction = -1;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	22ff      	movs	r2, #255	; 0xff
 800246c:	705a      	strb	r2, [r3, #1]
 800246e:	e005      	b.n	800247c <updateDutyCycle+0x48>
	} else {
		c->motor->dutyCycle = 0;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	605a      	str	r2, [r3, #4]
		return;
 800247a:	e026      	b.n	80024ca <updateDutyCycle+0x96>
	}

	float pwm = c->voltage / batteryVoltage;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	edd3 6a03 	vldr	s13, [r3, #12]
 8002482:	4b14      	ldr	r3, [pc, #80]	; (80024d4 <updateDutyCycle+0xa0>)
 8002484:	ed93 7a00 	vldr	s14, [r3]
 8002488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800248c:	edc7 7a03 	vstr	s15, [r7, #12]

	if (pwm < 0) pwm = -pwm;
 8002490:	edd7 7a03 	vldr	s15, [r7, #12]
 8002494:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800249c:	d505      	bpl.n	80024aa <updateDutyCycle+0x76>
 800249e:	edd7 7a03 	vldr	s15, [r7, #12]
 80024a2:	eef1 7a67 	vneg.f32	s15, s15
 80024a6:	edc7 7a03 	vstr	s15, [r7, #12]
	if (pwm > 1.0)
 80024aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80024ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80024b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ba:	dd02      	ble.n	80024c2 <updateDutyCycle+0x8e>
		pwm = 1.0;
 80024bc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80024c0:	60fb      	str	r3, [r7, #12]
	c->motor->dutyCycle = pwm;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	605a      	str	r2, [r3, #4]
}
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	20000144 	.word	0x20000144

080024d8 <setDutyCycle>:

void setDutyCycle(MotorController *c) {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
	if (c->motor->name == 'R') {
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b52      	cmp	r3, #82	; 0x52
 80024e8:	d136      	bne.n	8002558 <setDutyCycle+0x80>
		htim1.Instance->CCR1 = (uint32_t) ((htim1.Instance->ARR)
 80024ea:	4b3d      	ldr	r3, [pc, #244]	; (80025e0 <setDutyCycle+0x108>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
				* c->motor->dutyCycle);
 80024f0:	ee07 3a90 	vmov	s15, r3
 80024f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002500:	ee67 7a27 	vmul.f32	s15, s14, s15
		htim1.Instance->CCR1 = (uint32_t) ((htim1.Instance->ARR)
 8002504:	4b36      	ldr	r3, [pc, #216]	; (80025e0 <setDutyCycle+0x108>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800250c:	ee17 2a90 	vmov	r2, s15
 8002510:	635a      	str	r2, [r3, #52]	; 0x34

		if (c->motor->direction == 1) {
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d10a      	bne.n	8002534 <setDutyCycle+0x5c>
			HAL_GPIO_WritePin(DIR_R1_GPIO_Port, DIR_R1_Pin, 1);
 800251e:	2201      	movs	r2, #1
 8002520:	2140      	movs	r1, #64	; 0x40
 8002522:	4830      	ldr	r0, [pc, #192]	; (80025e4 <setDutyCycle+0x10c>)
 8002524:	f002 fad0 	bl	8004ac8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIR_R2_GPIO_Port, DIR_R2_Pin, 0);
 8002528:	2200      	movs	r2, #0
 800252a:	2180      	movs	r1, #128	; 0x80
 800252c:	482d      	ldr	r0, [pc, #180]	; (80025e4 <setDutyCycle+0x10c>)
 800252e:	f002 facb 	bl	8004ac8 <HAL_GPIO_WritePin>
 8002532:	e052      	b.n	80025da <setDutyCycle+0x102>
		} else if (c->motor->direction == -1) {
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800253c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002540:	d14b      	bne.n	80025da <setDutyCycle+0x102>
			HAL_GPIO_WritePin(DIR_R1_GPIO_Port, DIR_R1_Pin, 0);
 8002542:	2200      	movs	r2, #0
 8002544:	2140      	movs	r1, #64	; 0x40
 8002546:	4827      	ldr	r0, [pc, #156]	; (80025e4 <setDutyCycle+0x10c>)
 8002548:	f002 fabe 	bl	8004ac8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIR_R2_GPIO_Port, DIR_R2_Pin, 1);
 800254c:	2201      	movs	r2, #1
 800254e:	2180      	movs	r1, #128	; 0x80
 8002550:	4824      	ldr	r0, [pc, #144]	; (80025e4 <setDutyCycle+0x10c>)
 8002552:	f002 fab9 	bl	8004ac8 <HAL_GPIO_WritePin>
 8002556:	e040      	b.n	80025da <setDutyCycle+0x102>
		}
	} else if (c->motor->name == 'L') {
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b4c      	cmp	r3, #76	; 0x4c
 8002560:	d13a      	bne.n	80025d8 <setDutyCycle+0x100>
		htim1.Instance->CCR2 = (uint32_t) ((htim1.Instance->ARR)
 8002562:	4b1f      	ldr	r3, [pc, #124]	; (80025e0 <setDutyCycle+0x108>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
				* c->motor->dutyCycle);
 8002568:	ee07 3a90 	vmov	s15, r3
 800256c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	edd3 7a01 	vldr	s15, [r3, #4]
 8002578:	ee67 7a27 	vmul.f32	s15, s14, s15
		htim1.Instance->CCR2 = (uint32_t) ((htim1.Instance->ARR)
 800257c:	4b18      	ldr	r3, [pc, #96]	; (80025e0 <setDutyCycle+0x108>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002584:	ee17 2a90 	vmov	r2, s15
 8002588:	639a      	str	r2, [r3, #56]	; 0x38

		if (c->motor->direction == 1) {
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d10c      	bne.n	80025b0 <setDutyCycle+0xd8>
			HAL_GPIO_WritePin(DIR_L1_GPIO_Port, DIR_L1_Pin, 1);
 8002596:	2201      	movs	r2, #1
 8002598:	2140      	movs	r1, #64	; 0x40
 800259a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800259e:	f002 fa93 	bl	8004ac8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIR_L2_GPIO_Port, DIR_L2_Pin, 0);
 80025a2:	2200      	movs	r2, #0
 80025a4:	2180      	movs	r1, #128	; 0x80
 80025a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025aa:	f002 fa8d 	bl	8004ac8 <HAL_GPIO_WritePin>
 80025ae:	e014      	b.n	80025da <setDutyCycle+0x102>
		} else if (c->motor->direction == -1) {
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80025b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025bc:	d10d      	bne.n	80025da <setDutyCycle+0x102>
			HAL_GPIO_WritePin(DIR_L1_GPIO_Port, DIR_L1_Pin, 0);
 80025be:	2200      	movs	r2, #0
 80025c0:	2140      	movs	r1, #64	; 0x40
 80025c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025c6:	f002 fa7f 	bl	8004ac8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIR_L2_GPIO_Port, DIR_L2_Pin, 1);
 80025ca:	2201      	movs	r2, #1
 80025cc:	2180      	movs	r1, #128	; 0x80
 80025ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025d2:	f002 fa79 	bl	8004ac8 <HAL_GPIO_WritePin>
 80025d6:	e000      	b.n	80025da <setDutyCycle+0x102>
		}
	} else {
		return;
 80025d8:	bf00      	nop
	}
}
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20000354 	.word	0x20000354
 80025e4:	48000400 	.word	0x48000400

080025e8 <controller>:

void controller(MotorController *c) {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
	calcOutput(c->Encoder);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff fe47 	bl	8002288 <calcOutput>

	// Measure the angular velocity (feedback)
	updateAngularVelocity(c);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff fec0 	bl	8002380 <updateAngularVelocity>

	// Calculate next voltage according to the controller design
	nextVoltage(c);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7ff fe79 	bl	80022f8 <nextVoltage>

	// Calculate current error to use for next iteration
	calculateError(c);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff fe60 	bl	80022cc <calculateError>

	// Update the duty cycle
	updateDutyCycle(c);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7ff ff11 	bl	8002434 <updateDutyCycle>

	setDutyCycle(c);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7ff ff60 	bl	80024d8 <setDutyCycle>
}
 8002618:	bf00      	nop
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <controlBothMotors>:

void controlBothMotors() {
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
	uart_in_read(&referenceFormatting);
 8002624:	4805      	ldr	r0, [pc, #20]	; (800263c <controlBothMotors+0x1c>)
 8002626:	f7ff f91f 	bl	8001868 <uart_in_read>
	controller(&controllerR);
 800262a:	4805      	ldr	r0, [pc, #20]	; (8002640 <controlBothMotors+0x20>)
 800262c:	f7ff ffdc 	bl	80025e8 <controller>
	controller(&controllerL);
 8002630:	4804      	ldr	r0, [pc, #16]	; (8002644 <controlBothMotors+0x24>)
 8002632:	f7ff ffd9 	bl	80025e8 <controller>
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	08001a05 	.word	0x08001a05
 8002640:	2000033c 	.word	0x2000033c
 8002644:	20000270 	.word	0x20000270

08002648 <UpdateBatteryVoltage>:

void UpdateBatteryVoltage() {
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1); // Start ADC conversion
 800264e:	480e      	ldr	r0, [pc, #56]	; (8002688 <UpdateBatteryVoltage+0x40>)
 8002650:	f000 ff80 	bl	8003554 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY); // Wait for conversion to complete
 8002654:	f04f 31ff 	mov.w	r1, #4294967295
 8002658:	480b      	ldr	r0, [pc, #44]	; (8002688 <UpdateBatteryVoltage+0x40>)
 800265a:	f000 ffde 	bl	800361a <HAL_ADC_PollForConversion>
	uint32_t adc_val = HAL_ADC_GetValue(&hadc1); // Get the ADC value
 800265e:	480a      	ldr	r0, [pc, #40]	; (8002688 <UpdateBatteryVoltage+0x40>)
 8002660:	f001 f86a 	bl	8003738 <HAL_ADC_GetValue>
 8002664:	6078      	str	r0, [r7, #4]
	batteryVoltage = adc_val * voltageMeasScaling;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	ee07 3a90 	vmov	s15, r3
 800266c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <UpdateBatteryVoltage+0x44>)
 8002672:	edd3 7a00 	vldr	s15, [r3]
 8002676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800267a:	4b05      	ldr	r3, [pc, #20]	; (8002690 <UpdateBatteryVoltage+0x48>)
 800267c:	edc3 7a00 	vstr	s15, [r3]
}
 8002680:	bf00      	nop
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20000288 	.word	0x20000288
 800268c:	20000004 	.word	0x20000004
 8002690:	20000144 	.word	0x20000144

08002694 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002698:	b672      	cpsid	i
}
 800269a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800269c:	e7fe      	b.n	800269c <Error_Handler+0x8>
	...

080026a0 <calcOrientOutput>:
char packedOrientData[50] = { 0 };
uint8_t angularPosition[5] = { 0 };
float angularResolution = 360.0/TOPENCODERRESOLUTION;


void calcOrientOutput() {
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
	 orientAngle = (orientIncrement % TOPENCODERRESOLUTION) * angularResolution; // Antallet af målte inkrementer ganges med hvor stor en grad hver inkrement er
 80026a4:	4b0f      	ldr	r3, [pc, #60]	; (80026e4 <calcOrientOutput+0x44>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a0f      	ldr	r2, [pc, #60]	; (80026e8 <calcOrientOutput+0x48>)
 80026aa:	fb82 1203 	smull	r1, r2, r2, r3
 80026ae:	441a      	add	r2, r3
 80026b0:	1251      	asrs	r1, r2, #9
 80026b2:	17da      	asrs	r2, r3, #31
 80026b4:	1a8a      	subs	r2, r1, r2
 80026b6:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 80026ba:	fb01 f202 	mul.w	r2, r1, r2
 80026be:	1a9a      	subs	r2, r3, r2
 80026c0:	ee07 2a90 	vmov	s15, r2
 80026c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026c8:	4b08      	ldr	r3, [pc, #32]	; (80026ec <calcOrientOutput+0x4c>)
 80026ca:	edd3 7a00 	vldr	s15, [r3]
 80026ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026d2:	4b07      	ldr	r3, [pc, #28]	; (80026f0 <calcOrientOutput+0x50>)
 80026d4:	edc3 7a00 	vstr	s15, [r3]
 }
 80026d8:	bf00      	nop
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	200001c8 	.word	0x200001c8
 80026e8:	b21642c9 	.word	0xb21642c9
 80026ec:	20000008 	.word	0x20000008
 80026f0:	200001cc 	.word	0x200001cc

080026f4 <packOrient>:

void packOrient() {
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
	uint8_t *angularPointer = &directionOrient;
 80026fa:	4b11      	ldr	r3, [pc, #68]	; (8002740 <packOrient+0x4c>)
 80026fc:	603b      	str	r3, [r7, #0]
	angularPosition[0] = *(angularPointer);
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	781a      	ldrb	r2, [r3, #0]
 8002702:	4b10      	ldr	r3, [pc, #64]	; (8002744 <packOrient+0x50>)
 8002704:	701a      	strb	r2, [r3, #0]

	angularPointer = &orientAngle;
 8002706:	4b10      	ldr	r3, [pc, #64]	; (8002748 <packOrient+0x54>)
 8002708:	603b      	str	r3, [r7, #0]
		for (int x = 1; x < 5 ; x++) {
 800270a:	2301      	movs	r3, #1
 800270c:	607b      	str	r3, [r7, #4]
 800270e:	e00c      	b.n	800272a <packOrient+0x36>
		angularPosition[x] = *(angularPointer + (x-1));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3b01      	subs	r3, #1
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	4413      	add	r3, r2
 8002718:	7819      	ldrb	r1, [r3, #0]
 800271a:	4a0a      	ldr	r2, [pc, #40]	; (8002744 <packOrient+0x50>)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4413      	add	r3, r2
 8002720:	460a      	mov	r2, r1
 8002722:	701a      	strb	r2, [r3, #0]
		for (int x = 1; x < 5 ; x++) {
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3301      	adds	r3, #1
 8002728:	607b      	str	r3, [r7, #4]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b04      	cmp	r3, #4
 800272e:	ddef      	ble.n	8002710 <packOrient+0x1c>
	}
}
 8002730:	bf00      	nop
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	200001c5 	.word	0x200001c5
 8002744:	2000020c 	.word	0x2000020c
 8002748:	200001cc 	.word	0x200001cc

0800274c <checkOrientClock>:

void checkOrientClock() { //A
 800274c:	b598      	push	{r3, r4, r7, lr}
 800274e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(orientation_clock_GPIO_Port, orientation_clock_Pin)
 8002750:	2108      	movs	r1, #8
 8002752:	4810      	ldr	r0, [pc, #64]	; (8002794 <checkOrientClock+0x48>)
 8002754:	f002 f9a0 	bl	8004a98 <HAL_GPIO_ReadPin>
 8002758:	4603      	mov	r3, r0
 800275a:	461c      	mov	r4, r3
				== HAL_GPIO_ReadPin(orientation_counterclock_GPIO_Port, orientation_counterclock_Pin)) {
 800275c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002760:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002764:	f002 f998 	bl	8004a98 <HAL_GPIO_ReadPin>
 8002768:	4603      	mov	r3, r0
	if (HAL_GPIO_ReadPin(orientation_clock_GPIO_Port, orientation_clock_Pin)
 800276a:	429c      	cmp	r4, r3
 800276c:	d108      	bne.n	8002780 <checkOrientClock+0x34>
			directionOrient = -1;
 800276e:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <checkOrientClock+0x4c>)
 8002770:	22ff      	movs	r2, #255	; 0xff
 8002772:	701a      	strb	r2, [r3, #0]
			orientIncrement--;//abs((orientIncrement + directionOrient) % TOOTHRESOLUTION);
 8002774:	4b09      	ldr	r3, [pc, #36]	; (800279c <checkOrientClock+0x50>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	3b01      	subs	r3, #1
 800277a:	4a08      	ldr	r2, [pc, #32]	; (800279c <checkOrientClock+0x50>)
 800277c:	6013      	str	r3, [r2, #0]
			directionOrient = 1;
			orientIncrement++; //= abs((orientIncrement + directionOrient) % (TOOTHRESOLUTION + 1));
		}

		//checkRevolutionsOrient();
}
 800277e:	e007      	b.n	8002790 <checkOrientClock+0x44>
			directionOrient = 1;
 8002780:	4b05      	ldr	r3, [pc, #20]	; (8002798 <checkOrientClock+0x4c>)
 8002782:	2201      	movs	r2, #1
 8002784:	701a      	strb	r2, [r3, #0]
			orientIncrement++; //= abs((orientIncrement + directionOrient) % (TOOTHRESOLUTION + 1));
 8002786:	4b05      	ldr	r3, [pc, #20]	; (800279c <checkOrientClock+0x50>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	3301      	adds	r3, #1
 800278c:	4a03      	ldr	r2, [pc, #12]	; (800279c <checkOrientClock+0x50>)
 800278e:	6013      	str	r3, [r2, #0]
}
 8002790:	bf00      	nop
 8002792:	bd98      	pop	{r3, r4, r7, pc}
 8002794:	48000400 	.word	0x48000400
 8002798:	200001c5 	.word	0x200001c5
 800279c:	200001c8 	.word	0x200001c8

080027a0 <checkOrientCounterClock>:

void checkOrientCounterClock() { //B
 80027a0:	b598      	push	{r3, r4, r7, lr}
 80027a2:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(orientation_counterclock_GPIO_Port, orientation_counterclock_Pin)
 80027a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027ac:	f002 f974 	bl	8004a98 <HAL_GPIO_ReadPin>
 80027b0:	4603      	mov	r3, r0
 80027b2:	461c      	mov	r4, r3
				== HAL_GPIO_ReadPin(orientation_clock_GPIO_Port, orientation_clock_Pin)) {
 80027b4:	2108      	movs	r1, #8
 80027b6:	480c      	ldr	r0, [pc, #48]	; (80027e8 <checkOrientCounterClock+0x48>)
 80027b8:	f002 f96e 	bl	8004a98 <HAL_GPIO_ReadPin>
 80027bc:	4603      	mov	r3, r0
	if (HAL_GPIO_ReadPin(orientation_counterclock_GPIO_Port, orientation_counterclock_Pin)
 80027be:	429c      	cmp	r4, r3
 80027c0:	d108      	bne.n	80027d4 <checkOrientCounterClock+0x34>
			directionOrient = 1;
 80027c2:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <checkOrientCounterClock+0x4c>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	701a      	strb	r2, [r3, #0]
			orientIncrement++; //= abs((orientIncrement + directionOrient) % TOOTHRESOLUTION);
 80027c8:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <checkOrientCounterClock+0x50>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	3301      	adds	r3, #1
 80027ce:	4a08      	ldr	r2, [pc, #32]	; (80027f0 <checkOrientCounterClock+0x50>)
 80027d0:	6013      	str	r3, [r2, #0]
			directionOrient = -1;
			orientIncrement--; //= abs((orientIncrement + directionOrient) % (TOOTHRESOLUTION + 1));
		}

		//checkRevolutionsOrient();
}
 80027d2:	e007      	b.n	80027e4 <checkOrientCounterClock+0x44>
			directionOrient = -1;
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <checkOrientCounterClock+0x4c>)
 80027d6:	22ff      	movs	r2, #255	; 0xff
 80027d8:	701a      	strb	r2, [r3, #0]
			orientIncrement--; //= abs((orientIncrement + directionOrient) % (TOOTHRESOLUTION + 1));
 80027da:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <checkOrientCounterClock+0x50>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	3b01      	subs	r3, #1
 80027e0:	4a03      	ldr	r2, [pc, #12]	; (80027f0 <checkOrientCounterClock+0x50>)
 80027e2:	6013      	str	r3, [r2, #0]
}
 80027e4:	bf00      	nop
 80027e6:	bd98      	pop	{r3, r4, r7, pc}
 80027e8:	48000400 	.word	0x48000400
 80027ec:	200001c5 	.word	0x200001c5
 80027f0:	200001c8 	.word	0x200001c8

080027f4 <sendOrientData>:
//	else if (orientIncrement == 0 && directionOrient == -1){
//		orientIncrement = TOOTHRESOLUTION;
//	}
//}

void sendOrientData() {
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
	if (spamCheckDirOrient != directionOrient || spamCheckOrientAngle != orientAngle) {
 80027f8:	4b16      	ldr	r3, [pc, #88]	; (8002854 <sendOrientData+0x60>)
 80027fa:	781a      	ldrb	r2, [r3, #0]
 80027fc:	4b16      	ldr	r3, [pc, #88]	; (8002858 <sendOrientData+0x64>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	429a      	cmp	r2, r3
 8002802:	d10a      	bne.n	800281a <sendOrientData+0x26>
 8002804:	4b15      	ldr	r3, [pc, #84]	; (800285c <sendOrientData+0x68>)
 8002806:	ed93 7a00 	vldr	s14, [r3]
 800280a:	4b15      	ldr	r3, [pc, #84]	; (8002860 <sendOrientData+0x6c>)
 800280c:	edd3 7a00 	vldr	s15, [r3]
 8002810:	eeb4 7a67 	vcmp.f32	s14, s15
 8002814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002818:	d01a      	beq.n	8002850 <sendOrientData+0x5c>
		spamCheckDirOrient = directionOrient;
 800281a:	4b0f      	ldr	r3, [pc, #60]	; (8002858 <sendOrientData+0x64>)
 800281c:	781a      	ldrb	r2, [r3, #0]
 800281e:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <sendOrientData+0x60>)
 8002820:	701a      	strb	r2, [r3, #0]
		spamCheckOrientAngle = orientAngle;
 8002822:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <sendOrientData+0x6c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a0d      	ldr	r2, [pc, #52]	; (800285c <sendOrientData+0x68>)
 8002828:	6013      	str	r3, [r2, #0]
		packOrient();
 800282a:	f7ff ff63 	bl	80026f4 <packOrient>
		memset(packedOrientData, 0, sizeof(packedOrientData));
 800282e:	2232      	movs	r2, #50	; 0x32
 8002830:	2100      	movs	r1, #0
 8002832:	480c      	ldr	r0, [pc, #48]	; (8002864 <sendOrientData+0x70>)
 8002834:	f005 fa54 	bl	8007ce0 <memset>

		to_frame(packedOrientData, angularPosition, ORIENTID);
 8002838:	2203      	movs	r2, #3
 800283a:	490b      	ldr	r1, [pc, #44]	; (8002868 <sendOrientData+0x74>)
 800283c:	4809      	ldr	r0, [pc, #36]	; (8002864 <sendOrientData+0x70>)
 800283e:	f7fe fb11 	bl	8000e64 <to_frame>
		HAL_UART_Transmit(&huart2, packedOrientData, sizeof(packedOrientData), HAL_MAX_DELAY);
 8002842:	f04f 33ff 	mov.w	r3, #4294967295
 8002846:	2232      	movs	r2, #50	; 0x32
 8002848:	4906      	ldr	r1, [pc, #24]	; (8002864 <sendOrientData+0x70>)
 800284a:	4808      	ldr	r0, [pc, #32]	; (800286c <sendOrientData+0x78>)
 800284c:	f004 fc4a 	bl	80070e4 <HAL_UART_Transmit>
	}
}
 8002850:	bf00      	nop
 8002852:	bd80      	pop	{r7, pc}
 8002854:	200001d0 	.word	0x200001d0
 8002858:	200001c5 	.word	0x200001c5
 800285c:	200001d4 	.word	0x200001d4
 8002860:	200001cc 	.word	0x200001cc
 8002864:	200001d8 	.word	0x200001d8
 8002868:	2000020c 	.word	0x2000020c
 800286c:	200003ec 	.word	0x200003ec

08002870 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002876:	4b0f      	ldr	r3, [pc, #60]	; (80028b4 <HAL_MspInit+0x44>)
 8002878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800287a:	4a0e      	ldr	r2, [pc, #56]	; (80028b4 <HAL_MspInit+0x44>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	6613      	str	r3, [r2, #96]	; 0x60
 8002882:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <HAL_MspInit+0x44>)
 8002884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	607b      	str	r3, [r7, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800288e:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <HAL_MspInit+0x44>)
 8002890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002892:	4a08      	ldr	r2, [pc, #32]	; (80028b4 <HAL_MspInit+0x44>)
 8002894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002898:	6593      	str	r3, [r2, #88]	; 0x58
 800289a:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <HAL_MspInit+0x44>)
 800289c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a2:	603b      	str	r3, [r7, #0]
 80028a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40021000 	.word	0x40021000

080028b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b09e      	sub	sp, #120	; 0x78
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	60da      	str	r2, [r3, #12]
 80028ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028d0:	f107 0310 	add.w	r3, r7, #16
 80028d4:	2254      	movs	r2, #84	; 0x54
 80028d6:	2100      	movs	r1, #0
 80028d8:	4618      	mov	r0, r3
 80028da:	f005 fa01 	bl	8007ce0 <memset>
  if(hadc->Instance==ADC1)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a25      	ldr	r2, [pc, #148]	; (8002978 <HAL_ADC_MspInit+0xc0>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d143      	bne.n	8002970 <HAL_ADC_MspInit+0xb8>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80028e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028ec:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80028ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80028f2:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80028f4:	2301      	movs	r3, #1
 80028f6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80028f8:	2301      	movs	r3, #1
 80028fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80028fc:	2310      	movs	r3, #16
 80028fe:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002900:	2307      	movs	r3, #7
 8002902:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002904:	2302      	movs	r3, #2
 8002906:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 8002908:	2308      	movs	r3, #8
 800290a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800290c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002910:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002912:	f107 0310 	add.w	r3, r7, #16
 8002916:	4618      	mov	r0, r3
 8002918:	f002 ff9c 	bl	8005854 <HAL_RCCEx_PeriphCLKConfig>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8002922:	f7ff feb7 	bl	8002694 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002926:	4b15      	ldr	r3, [pc, #84]	; (800297c <HAL_ADC_MspInit+0xc4>)
 8002928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292a:	4a14      	ldr	r2, [pc, #80]	; (800297c <HAL_ADC_MspInit+0xc4>)
 800292c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002932:	4b12      	ldr	r3, [pc, #72]	; (800297c <HAL_ADC_MspInit+0xc4>)
 8002934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002936:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800293e:	4b0f      	ldr	r3, [pc, #60]	; (800297c <HAL_ADC_MspInit+0xc4>)
 8002940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002942:	4a0e      	ldr	r2, [pc, #56]	; (800297c <HAL_ADC_MspInit+0xc4>)
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800294a:	4b0c      	ldr	r3, [pc, #48]	; (800297c <HAL_ADC_MspInit+0xc4>)
 800294c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = BatteryVoltage_Pin;
 8002956:	2308      	movs	r3, #8
 8002958:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800295a:	230b      	movs	r3, #11
 800295c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295e:	2300      	movs	r3, #0
 8002960:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BatteryVoltage_GPIO_Port, &GPIO_InitStruct);
 8002962:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002966:	4619      	mov	r1, r3
 8002968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800296c:	f001 ff2a 	bl	80047c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002970:	bf00      	nop
 8002972:	3778      	adds	r7, #120	; 0x78
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	50040000 	.word	0x50040000
 800297c:	40021000 	.word	0x40021000

08002980 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a0a      	ldr	r2, [pc, #40]	; (80029b8 <HAL_TIM_PWM_MspInit+0x38>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d10b      	bne.n	80029aa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002992:	4b0a      	ldr	r3, [pc, #40]	; (80029bc <HAL_TIM_PWM_MspInit+0x3c>)
 8002994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002996:	4a09      	ldr	r2, [pc, #36]	; (80029bc <HAL_TIM_PWM_MspInit+0x3c>)
 8002998:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800299c:	6613      	str	r3, [r2, #96]	; 0x60
 800299e:	4b07      	ldr	r3, [pc, #28]	; (80029bc <HAL_TIM_PWM_MspInit+0x3c>)
 80029a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80029aa:	bf00      	nop
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40012c00 	.word	0x40012c00
 80029bc:	40021000 	.word	0x40021000

080029c0 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d0:	d113      	bne.n	80029fa <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029d2:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <HAL_TIM_OC_MspInit+0x44>)
 80029d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d6:	4a0b      	ldr	r2, [pc, #44]	; (8002a04 <HAL_TIM_OC_MspInit+0x44>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	6593      	str	r3, [r2, #88]	; 0x58
 80029de:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <HAL_TIM_OC_MspInit+0x44>)
 80029e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029ea:	2200      	movs	r2, #0
 80029ec:	2100      	movs	r1, #0
 80029ee:	201c      	movs	r0, #28
 80029f0:	f001 fcb9 	bl	8004366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029f4:	201c      	movs	r0, #28
 80029f6:	f001 fcd2 	bl	800439e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80029fa:	bf00      	nop
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40021000 	.word	0x40021000

08002a08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a1a      	ldr	r2, [pc, #104]	; (8002a80 <HAL_TIM_Base_MspInit+0x78>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d114      	bne.n	8002a44 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002a1a:	4b1a      	ldr	r3, [pc, #104]	; (8002a84 <HAL_TIM_Base_MspInit+0x7c>)
 8002a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1e:	4a19      	ldr	r2, [pc, #100]	; (8002a84 <HAL_TIM_Base_MspInit+0x7c>)
 8002a20:	f043 0310 	orr.w	r3, r3, #16
 8002a24:	6593      	str	r3, [r2, #88]	; 0x58
 8002a26:	4b17      	ldr	r3, [pc, #92]	; (8002a84 <HAL_TIM_Base_MspInit+0x7c>)
 8002a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2a:	f003 0310 	and.w	r3, r3, #16
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002a32:	2200      	movs	r2, #0
 8002a34:	2100      	movs	r1, #0
 8002a36:	2036      	movs	r0, #54	; 0x36
 8002a38:	f001 fc95 	bl	8004366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a3c:	2036      	movs	r0, #54	; 0x36
 8002a3e:	f001 fcae 	bl	800439e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002a42:	e018      	b.n	8002a76 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a0f      	ldr	r2, [pc, #60]	; (8002a88 <HAL_TIM_Base_MspInit+0x80>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d113      	bne.n	8002a76 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002a4e:	4b0d      	ldr	r3, [pc, #52]	; (8002a84 <HAL_TIM_Base_MspInit+0x7c>)
 8002a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a52:	4a0c      	ldr	r2, [pc, #48]	; (8002a84 <HAL_TIM_Base_MspInit+0x7c>)
 8002a54:	f043 0320 	orr.w	r3, r3, #32
 8002a58:	6593      	str	r3, [r2, #88]	; 0x58
 8002a5a:	4b0a      	ldr	r3, [pc, #40]	; (8002a84 <HAL_TIM_Base_MspInit+0x7c>)
 8002a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5e:	f003 0320 	and.w	r3, r3, #32
 8002a62:	60bb      	str	r3, [r7, #8]
 8002a64:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002a66:	2200      	movs	r2, #0
 8002a68:	2100      	movs	r1, #0
 8002a6a:	2037      	movs	r0, #55	; 0x37
 8002a6c:	f001 fc7b 	bl	8004366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002a70:	2037      	movs	r0, #55	; 0x37
 8002a72:	f001 fc94 	bl	800439e <HAL_NVIC_EnableIRQ>
}
 8002a76:	bf00      	nop
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40001000 	.word	0x40001000
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40001400 	.word	0x40001400

08002a8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a94:	f107 030c 	add.w	r3, r7, #12
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a12      	ldr	r2, [pc, #72]	; (8002af4 <HAL_TIM_MspPostInit+0x68>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d11d      	bne.n	8002aea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aae:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <HAL_TIM_MspPostInit+0x6c>)
 8002ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab2:	4a11      	ldr	r2, [pc, #68]	; (8002af8 <HAL_TIM_MspPostInit+0x6c>)
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aba:	4b0f      	ldr	r3, [pc, #60]	; (8002af8 <HAL_TIM_MspPostInit+0x6c>)
 8002abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	60bb      	str	r3, [r7, #8]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_R_Pin|PWM_L_Pin;
 8002ac6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002aca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002acc:	2302      	movs	r3, #2
 8002ace:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002adc:	f107 030c 	add.w	r3, r7, #12
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ae6:	f001 fe6d 	bl	80047c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002aea:	bf00      	nop
 8002aec:	3720      	adds	r7, #32
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40012c00 	.word	0x40012c00
 8002af8:	40021000 	.word	0x40021000

08002afc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b09e      	sub	sp, #120	; 0x78
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b04:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	60da      	str	r2, [r3, #12]
 8002b12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b14:	f107 0310 	add.w	r3, r7, #16
 8002b18:	2254      	movs	r2, #84	; 0x54
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f005 f8df 	bl	8007ce0 <memset>
  if(huart->Instance==USART2)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a3c      	ldr	r2, [pc, #240]	; (8002c18 <HAL_UART_MspInit+0x11c>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d171      	bne.n	8002c10 <HAL_UART_MspInit+0x114>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002b30:	2300      	movs	r3, #0
 8002b32:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b34:	f107 0310 	add.w	r3, r7, #16
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f002 fe8b 	bl	8005854 <HAL_RCCEx_PeriphCLKConfig>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b44:	f7ff fda6 	bl	8002694 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b48:	4b34      	ldr	r3, [pc, #208]	; (8002c1c <HAL_UART_MspInit+0x120>)
 8002b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4c:	4a33      	ldr	r2, [pc, #204]	; (8002c1c <HAL_UART_MspInit+0x120>)
 8002b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b52:	6593      	str	r3, [r2, #88]	; 0x58
 8002b54:	4b31      	ldr	r3, [pc, #196]	; (8002c1c <HAL_UART_MspInit+0x120>)
 8002b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b60:	4b2e      	ldr	r3, [pc, #184]	; (8002c1c <HAL_UART_MspInit+0x120>)
 8002b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b64:	4a2d      	ldr	r2, [pc, #180]	; (8002c1c <HAL_UART_MspInit+0x120>)
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b6c:	4b2b      	ldr	r3, [pc, #172]	; (8002c1c <HAL_UART_MspInit+0x120>)
 8002b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b78:	2304      	movs	r3, #4
 8002b7a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b84:	2303      	movs	r3, #3
 8002b86:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b88:	2307      	movs	r3, #7
 8002b8a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b8c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b90:	4619      	mov	r1, r3
 8002b92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b96:	f001 fe15 	bl	80047c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002b9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b9e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002bac:	2303      	movs	r3, #3
 8002bae:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bba:	f001 fe03 	bl	80047c4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002bbe:	4b18      	ldr	r3, [pc, #96]	; (8002c20 <HAL_UART_MspInit+0x124>)
 8002bc0:	4a18      	ldr	r2, [pc, #96]	; (8002c24 <HAL_UART_MspInit+0x128>)
 8002bc2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8002bc4:	4b16      	ldr	r3, [pc, #88]	; (8002c20 <HAL_UART_MspInit+0x124>)
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bca:	4b15      	ldr	r3, [pc, #84]	; (8002c20 <HAL_UART_MspInit+0x124>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bd0:	4b13      	ldr	r3, [pc, #76]	; (8002c20 <HAL_UART_MspInit+0x124>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bd6:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <HAL_UART_MspInit+0x124>)
 8002bd8:	2280      	movs	r2, #128	; 0x80
 8002bda:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bdc:	4b10      	ldr	r3, [pc, #64]	; (8002c20 <HAL_UART_MspInit+0x124>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002be2:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <HAL_UART_MspInit+0x124>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002be8:	4b0d      	ldr	r3, [pc, #52]	; (8002c20 <HAL_UART_MspInit+0x124>)
 8002bea:	2220      	movs	r2, #32
 8002bec:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002bee:	4b0c      	ldr	r3, [pc, #48]	; (8002c20 <HAL_UART_MspInit+0x124>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002bf4:	480a      	ldr	r0, [pc, #40]	; (8002c20 <HAL_UART_MspInit+0x124>)
 8002bf6:	f001 fbed 	bl	80043d4 <HAL_DMA_Init>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8002c00:	f7ff fd48 	bl	8002694 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a06      	ldr	r2, [pc, #24]	; (8002c20 <HAL_UART_MspInit+0x124>)
 8002c08:	671a      	str	r2, [r3, #112]	; 0x70
 8002c0a:	4a05      	ldr	r2, [pc, #20]	; (8002c20 <HAL_UART_MspInit+0x124>)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c10:	bf00      	nop
 8002c12:	3778      	adds	r7, #120	; 0x78
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40004400 	.word	0x40004400
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	20000214 	.word	0x20000214
 8002c24:	4002006c 	.word	0x4002006c

08002c28 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002c2c:	e7fe      	b.n	8002c2c <NMI_Handler+0x4>

08002c2e <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8002c2e:	b480      	push	{r7}
 8002c30:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8002c32:	e7fe      	b.n	8002c32 <HardFault_Handler+0x4>

08002c34 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8002c38:	e7fe      	b.n	8002c38 <MemManage_Handler+0x4>

08002c3a <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8002c3a:	b480      	push	{r7}
 8002c3c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8002c3e:	e7fe      	b.n	8002c3e <BusFault_Handler+0x4>

08002c40 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8002c44:	e7fe      	b.n	8002c44 <UsageFault_Handler+0x4>

08002c46 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8002c46:	b480      	push	{r7}
 8002c48:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8002c4a:	bf00      	nop
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c58:	bf00      	nop
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8002c62:	b480      	push	{r7}
 8002c64:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8002c66:	bf00      	nop
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8002c74:	f000 f918 	bl	8002ea8 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8002c78:	bf00      	nop
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <EXTI0_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line0 interrupt.
 */
void EXTI0_IRQHandler(void) {
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI0_IRQn 0 */

	/* USER CODE END EXTI0_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002c80:	2001      	movs	r0, #1
 8002c82:	f001 ff39 	bl	8004af8 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI0_IRQn 1 */
	clockcheckRight();
 8002c86:	f7ff f935 	bl	8001ef4 <clockcheckRight>
	/* USER CODE END EXTI0_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <EXTI1_IRQHandler>:

/**
 * @brief This function handles EXTI line1 interrupt.
 */
void EXTI1_IRQHandler(void) {
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI1_IRQn 0 */

	/* USER CODE END EXTI1_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002c92:	2002      	movs	r0, #2
 8002c94:	f001 ff30 	bl	8004af8 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI1_IRQn 1 */
	counterclockcheckLeft();
 8002c98:	f7ff fa4e 	bl	8002138 <counterclockcheckLeft>
	/* USER CODE END EXTI1_IRQn 1 */
}
 8002c9c:	bf00      	nop
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <EXTI3_IRQHandler>:

/**
 * @brief This function handles EXTI line3 interrupt.
 */
void EXTI3_IRQHandler(void) {
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI3_IRQn 0 */

	/* USER CODE END EXTI3_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002ca4:	2008      	movs	r0, #8
 8002ca6:	f001 ff27 	bl	8004af8 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI3_IRQn 1 */
	checkOrientClock();
 8002caa:	f7ff fd4f 	bl	800274c <checkOrientClock>
	/* USER CODE END EXTI3_IRQn 1 */
}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <EXTI4_IRQHandler>:

/**
 * @brief This function handles EXTI line4 interrupt.
 */
void EXTI4_IRQHandler(void) {
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI4_IRQn 0 */

	/* USER CODE END EXTI4_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002cb6:	2010      	movs	r0, #16
 8002cb8:	f001 ff1e 	bl	8004af8 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI4_IRQn 1 */
	counterclockcheckRight();
 8002cbc:	f7ff f97a 	bl	8001fb4 <counterclockcheckRight>
	/* USER CODE END EXTI4_IRQn 1 */
}
 8002cc0:	bf00      	nop
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <DMA1_Channel6_IRQHandler>:

/**
 * @brief This function handles DMA1 channel6 global interrupt.
 */
void DMA1_Channel6_IRQHandler(void) {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

	/* USER CODE END DMA1_Channel6_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002cc8:	4802      	ldr	r0, [pc, #8]	; (8002cd4 <DMA1_Channel6_IRQHandler+0x10>)
 8002cca:	f001 fc9b 	bl	8004604 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

	/* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20000214 	.word	0x20000214

08002cd8 <EXTI9_5_IRQHandler>:

/**
 * @brief This function handles EXTI line[9:5] interrupts.
 */
void EXTI9_5_IRQHandler(void) {
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI9_5_IRQn 0 */

	/* USER CODE END EXTI9_5_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002cdc:	2020      	movs	r0, #32
 8002cde:	f001 ff0b 	bl	8004af8 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI9_5_IRQn 1 */
	clockcheckLeft();
 8002ce2:	f7ff f9c7 	bl	8002074 <clockcheckLeft>

	/* USER CODE END EXTI9_5_IRQn 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	bd80      	pop	{r7, pc}
	...

08002cec <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 8002cf0:	4803      	ldr	r0, [pc, #12]	; (8002d00 <TIM2_IRQHandler+0x14>)
 8002cf2:	f003 facd 	bl	8006290 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */
	controlBothMotors();
 8002cf6:	f7ff fc93 	bl	8002620 <controlBothMotors>
	/* USER CODE END TIM2_IRQn 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	200003a0 	.word	0x200003a0

08002d04 <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void) {
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002d08:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002d0c:	f001 fef4 	bl	8004af8 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */
	checkOrientCounterClock();
 8002d10:	f7ff fd46 	bl	80027a0 <checkOrientCounterClock>
	/* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d14:	bf00      	nop
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <TIM6_DAC_IRQHandler>:

/**
 * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void) {
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	/* USER CODE END TIM6_DAC_IRQn 0 */
	HAL_TIM_IRQHandler(&htim6);
 8002d1c:	4803      	ldr	r0, [pc, #12]	; (8002d2c <TIM6_DAC_IRQHandler+0x14>)
 8002d1e:	f003 fab7 	bl	8006290 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */
	updatePositionsAndVelocities();
 8002d22:	f7fe ffef 	bl	8001d04 <updatePositionsAndVelocities>
	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	200002f0 	.word	0x200002f0

08002d30 <TIM7_IRQHandler>:

/**
 * @brief This function handles TIM7 global interrupt.
 */
void TIM7_IRQHandler(void) {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM7_IRQn 0 */

	/* USER CODE END TIM7_IRQn 0 */
	HAL_TIM_IRQHandler(&htim7);
 8002d34:	4803      	ldr	r0, [pc, #12]	; (8002d44 <TIM7_IRQHandler+0x14>)
 8002d36:	f003 faab 	bl	8006290 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM7_IRQn 1 */
	UpdateBatteryVoltage();
 8002d3a:	f7ff fc85 	bl	8002648 <UpdateBatteryVoltage>

	/* USER CODE END TIM7_IRQn 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20000484 	.word	0x20000484

08002d48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002d4c:	4b15      	ldr	r3, [pc, #84]	; (8002da4 <SystemInit+0x5c>)
 8002d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d52:	4a14      	ldr	r2, [pc, #80]	; (8002da4 <SystemInit+0x5c>)
 8002d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002d5c:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <SystemInit+0x60>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a11      	ldr	r2, [pc, #68]	; (8002da8 <SystemInit+0x60>)
 8002d62:	f043 0301 	orr.w	r3, r3, #1
 8002d66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002d68:	4b0f      	ldr	r3, [pc, #60]	; (8002da8 <SystemInit+0x60>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002d6e:	4b0e      	ldr	r3, [pc, #56]	; (8002da8 <SystemInit+0x60>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a0d      	ldr	r2, [pc, #52]	; (8002da8 <SystemInit+0x60>)
 8002d74:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002d78:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002d7c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002d7e:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <SystemInit+0x60>)
 8002d80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d84:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002d86:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <SystemInit+0x60>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a07      	ldr	r2, [pc, #28]	; (8002da8 <SystemInit+0x60>)
 8002d8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d90:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002d92:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <SystemInit+0x60>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	619a      	str	r2, [r3, #24]
}
 8002d98:	bf00      	nop
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	e000ed00 	.word	0xe000ed00
 8002da8:	40021000 	.word	0x40021000

08002dac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002de4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002db0:	f7ff ffca 	bl	8002d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002db4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002db6:	e003      	b.n	8002dc0 <LoopCopyDataInit>

08002db8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002db8:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002dba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002dbc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002dbe:	3104      	adds	r1, #4

08002dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002dc0:	480a      	ldr	r0, [pc, #40]	; (8002dec <LoopForever+0xa>)
	ldr	r3, =_edata
 8002dc2:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002dc4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002dc6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002dc8:	d3f6      	bcc.n	8002db8 <CopyDataInit>
	ldr	r2, =_sbss
 8002dca:	4a0a      	ldr	r2, [pc, #40]	; (8002df4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002dcc:	e002      	b.n	8002dd4 <LoopFillZerobss>

08002dce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002dce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002dd0:	f842 3b04 	str.w	r3, [r2], #4

08002dd4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002dd4:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <LoopForever+0x16>)
	cmp	r2, r3
 8002dd6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002dd8:	d3f9      	bcc.n	8002dce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002dda:	f004 ff4f 	bl	8007c7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002dde:	f7fe f91f 	bl	8001020 <main>

08002de2 <LoopForever>:

LoopForever:
    b LoopForever
 8002de2:	e7fe      	b.n	8002de2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002de4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002de8:	08009048 	.word	0x08009048
	ldr	r0, =_sdata
 8002dec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002df0:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 8002df4:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8002df8:	200004e8 	.word	0x200004e8

08002dfc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002dfc:	e7fe      	b.n	8002dfc <ADC1_IRQHandler>

08002dfe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b082      	sub	sp, #8
 8002e02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e08:	2003      	movs	r0, #3
 8002e0a:	f001 faa1 	bl	8004350 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e0e:	2000      	movs	r0, #0
 8002e10:	f000 f80e 	bl	8002e30 <HAL_InitTick>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d002      	beq.n	8002e20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	71fb      	strb	r3, [r7, #7]
 8002e1e:	e001      	b.n	8002e24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e20:	f7ff fd26 	bl	8002870 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e24:	79fb      	ldrb	r3, [r7, #7]
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002e3c:	4b17      	ldr	r3, [pc, #92]	; (8002e9c <HAL_InitTick+0x6c>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d023      	beq.n	8002e8c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002e44:	4b16      	ldr	r3, [pc, #88]	; (8002ea0 <HAL_InitTick+0x70>)
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	4b14      	ldr	r3, [pc, #80]	; (8002e9c <HAL_InitTick+0x6c>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f001 faad 	bl	80043ba <HAL_SYSTICK_Config>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10f      	bne.n	8002e86 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b0f      	cmp	r3, #15
 8002e6a:	d809      	bhi.n	8002e80 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	f04f 30ff 	mov.w	r0, #4294967295
 8002e74:	f001 fa77 	bl	8004366 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e78:	4a0a      	ldr	r2, [pc, #40]	; (8002ea4 <HAL_InitTick+0x74>)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	e007      	b.n	8002e90 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	73fb      	strb	r3, [r7, #15]
 8002e84:	e004      	b.n	8002e90 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	73fb      	strb	r3, [r7, #15]
 8002e8a:	e001      	b.n	8002e90 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000014 	.word	0x20000014
 8002ea0:	2000000c 	.word	0x2000000c
 8002ea4:	20000010 	.word	0x20000010

08002ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002eac:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <HAL_IncTick+0x20>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_IncTick+0x24>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	4a04      	ldr	r2, [pc, #16]	; (8002ecc <HAL_IncTick+0x24>)
 8002eba:	6013      	str	r3, [r2, #0]
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	20000014 	.word	0x20000014
 8002ecc:	200004e4 	.word	0x200004e4

08002ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ed4:	4b03      	ldr	r3, [pc, #12]	; (8002ee4 <HAL_GetTick+0x14>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	200004e4 	.word	0x200004e4

08002ee8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	431a      	orrs	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	609a      	str	r2, [r3, #8]
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	609a      	str	r2, [r3, #8]
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b087      	sub	sp, #28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
 8002f5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	3360      	adds	r3, #96	; 0x60
 8002f62:	461a      	mov	r2, r3
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	4b08      	ldr	r3, [pc, #32]	; (8002f94 <LL_ADC_SetOffset+0x44>)
 8002f72:	4013      	ands	r3, r2
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002f88:	bf00      	nop
 8002f8a:	371c      	adds	r7, #28
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	03fff000 	.word	0x03fff000

08002f98 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3360      	adds	r3, #96	; 0x60
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b087      	sub	sp, #28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	3360      	adds	r3, #96	; 0x60
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002fee:	bf00      	nop
 8002ff0:	371c      	adds	r7, #28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	3330      	adds	r3, #48	; 0x30
 8003030:	461a      	mov	r2, r3
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	0a1b      	lsrs	r3, r3, #8
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	f003 030c 	and.w	r3, r3, #12
 800303c:	4413      	add	r3, r2
 800303e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f003 031f 	and.w	r3, r3, #31
 800304a:	211f      	movs	r1, #31
 800304c:	fa01 f303 	lsl.w	r3, r1, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	401a      	ands	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	0e9b      	lsrs	r3, r3, #26
 8003058:	f003 011f 	and.w	r1, r3, #31
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	f003 031f 	and.w	r3, r3, #31
 8003062:	fa01 f303 	lsl.w	r3, r1, r3
 8003066:	431a      	orrs	r2, r3
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800306c:	bf00      	nop
 800306e:	371c      	adds	r7, #28
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003078:	b480      	push	{r7}
 800307a:	b087      	sub	sp, #28
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	3314      	adds	r3, #20
 8003088:	461a      	mov	r2, r3
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	0e5b      	lsrs	r3, r3, #25
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	4413      	add	r3, r2
 8003096:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	0d1b      	lsrs	r3, r3, #20
 80030a0:	f003 031f 	and.w	r3, r3, #31
 80030a4:	2107      	movs	r1, #7
 80030a6:	fa01 f303 	lsl.w	r3, r1, r3
 80030aa:	43db      	mvns	r3, r3
 80030ac:	401a      	ands	r2, r3
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	0d1b      	lsrs	r3, r3, #20
 80030b2:	f003 031f 	and.w	r3, r3, #31
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	fa01 f303 	lsl.w	r3, r1, r3
 80030bc:	431a      	orrs	r2, r3
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80030c2:	bf00      	nop
 80030c4:	371c      	adds	r7, #28
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
	...

080030d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e8:	43db      	mvns	r3, r3
 80030ea:	401a      	ands	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f003 0318 	and.w	r3, r3, #24
 80030f2:	4908      	ldr	r1, [pc, #32]	; (8003114 <LL_ADC_SetChannelSingleDiff+0x44>)
 80030f4:	40d9      	lsrs	r1, r3
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	400b      	ands	r3, r1
 80030fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030fe:	431a      	orrs	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003106:	bf00      	nop
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	0007ffff 	.word	0x0007ffff

08003118 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003128:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6093      	str	r3, [r2, #8]
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800314c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003150:	d101      	bne.n	8003156 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003174:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003178:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031a0:	d101      	bne.n	80031a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031c8:	f043 0201 	orr.w	r2, r3, #1
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031f0:	f043 0202 	orr.w	r2, r3, #2
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b01      	cmp	r3, #1
 8003216:	d101      	bne.n	800321c <LL_ADC_IsEnabled+0x18>
 8003218:	2301      	movs	r3, #1
 800321a:	e000      	b.n	800321e <LL_ADC_IsEnabled+0x1a>
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b02      	cmp	r3, #2
 800323c:	d101      	bne.n	8003242 <LL_ADC_IsDisableOngoing+0x18>
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <LL_ADC_IsDisableOngoing+0x1a>
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003260:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003264:	f043 0204 	orr.w	r2, r3, #4
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b04      	cmp	r3, #4
 800328a:	d101      	bne.n	8003290 <LL_ADC_REG_IsConversionOngoing+0x18>
 800328c:	2301      	movs	r3, #1
 800328e:	e000      	b.n	8003292 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	2b08      	cmp	r3, #8
 80032b0:	d101      	bne.n	80032b6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80032b2:	2301      	movs	r3, #1
 80032b4:	e000      	b.n	80032b8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032cc:	2300      	movs	r3, #0
 80032ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80032d0:	2300      	movs	r3, #0
 80032d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e12c      	b.n	8003538 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d109      	bne.n	8003300 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7ff fae3 	bl	80028b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff ff19 	bl	800313c <LL_ADC_IsDeepPowerDownEnabled>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d004      	beq.n	800331a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff feff 	bl	8003118 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff ff34 	bl	800318c <LL_ADC_IsInternalRegulatorEnabled>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d115      	bne.n	8003356 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff ff18 	bl	8003164 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003334:	4b82      	ldr	r3, [pc, #520]	; (8003540 <HAL_ADC_Init+0x27c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	099b      	lsrs	r3, r3, #6
 800333a:	4a82      	ldr	r2, [pc, #520]	; (8003544 <HAL_ADC_Init+0x280>)
 800333c:	fba2 2303 	umull	r2, r3, r2, r3
 8003340:	099b      	lsrs	r3, r3, #6
 8003342:	3301      	adds	r3, #1
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003348:	e002      	b.n	8003350 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	3b01      	subs	r3, #1
 800334e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1f9      	bne.n	800334a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff ff16 	bl	800318c <LL_ADC_IsInternalRegulatorEnabled>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10d      	bne.n	8003382 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336a:	f043 0210 	orr.w	r2, r3, #16
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003376:	f043 0201 	orr.w	r2, r3, #1
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff ff76 	bl	8003278 <LL_ADC_REG_IsConversionOngoing>
 800338c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003392:	f003 0310 	and.w	r3, r3, #16
 8003396:	2b00      	cmp	r3, #0
 8003398:	f040 80c5 	bne.w	8003526 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f040 80c1 	bne.w	8003526 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80033ac:	f043 0202 	orr.w	r2, r3, #2
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff ff23 	bl	8003204 <LL_ADC_IsEnabled>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10b      	bne.n	80033dc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033c4:	4860      	ldr	r0, [pc, #384]	; (8003548 <HAL_ADC_Init+0x284>)
 80033c6:	f7ff ff1d 	bl	8003204 <LL_ADC_IsEnabled>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d105      	bne.n	80033dc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	4619      	mov	r1, r3
 80033d6:	485d      	ldr	r0, [pc, #372]	; (800354c <HAL_ADC_Init+0x288>)
 80033d8:	f7ff fd86 	bl	8002ee8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	7e5b      	ldrb	r3, [r3, #25]
 80033e0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033e6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80033ec:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80033f2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033fa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033fc:	4313      	orrs	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d106      	bne.n	8003418 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	3b01      	subs	r3, #1
 8003410:	045b      	lsls	r3, r3, #17
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4313      	orrs	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341c:	2b00      	cmp	r3, #0
 800341e:	d009      	beq.n	8003434 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003424:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4313      	orrs	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68da      	ldr	r2, [r3, #12]
 800343a:	4b45      	ldr	r3, [pc, #276]	; (8003550 <HAL_ADC_Init+0x28c>)
 800343c:	4013      	ands	r3, r2
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6812      	ldr	r2, [r2, #0]
 8003442:	69b9      	ldr	r1, [r7, #24]
 8003444:	430b      	orrs	r3, r1
 8003446:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff ff13 	bl	8003278 <LL_ADC_REG_IsConversionOngoing>
 8003452:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff ff20 	bl	800329e <LL_ADC_INJ_IsConversionOngoing>
 800345e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d13d      	bne.n	80034e2 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d13a      	bne.n	80034e2 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003470:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003478:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003488:	f023 0302 	bic.w	r3, r3, #2
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6812      	ldr	r2, [r2, #0]
 8003490:	69b9      	ldr	r1, [r7, #24]
 8003492:	430b      	orrs	r3, r1
 8003494:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800349c:	2b01      	cmp	r3, #1
 800349e:	d118      	bne.n	80034d2 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80034aa:	f023 0304 	bic.w	r3, r3, #4
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034b6:	4311      	orrs	r1, r2
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80034bc:	4311      	orrs	r1, r2
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80034c2:	430a      	orrs	r2, r1
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0201 	orr.w	r2, r2, #1
 80034ce:	611a      	str	r2, [r3, #16]
 80034d0:	e007      	b.n	80034e2 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	691a      	ldr	r2, [r3, #16]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0201 	bic.w	r2, r2, #1
 80034e0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d10c      	bne.n	8003504 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f0:	f023 010f 	bic.w	r1, r3, #15
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	69db      	ldr	r3, [r3, #28]
 80034f8:	1e5a      	subs	r2, r3, #1
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	631a      	str	r2, [r3, #48]	; 0x30
 8003502:	e007      	b.n	8003514 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 020f 	bic.w	r2, r2, #15
 8003512:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003518:	f023 0303 	bic.w	r3, r3, #3
 800351c:	f043 0201 	orr.w	r2, r3, #1
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	655a      	str	r2, [r3, #84]	; 0x54
 8003524:	e007      	b.n	8003536 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352a:	f043 0210 	orr.w	r2, r3, #16
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003536:	7ffb      	ldrb	r3, [r7, #31]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3720      	adds	r7, #32
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	2000000c 	.word	0x2000000c
 8003544:	053e2d63 	.word	0x053e2d63
 8003548:	50040000 	.word	0x50040000
 800354c:	50040300 	.word	0x50040300
 8003550:	fff0c007 	.word	0xfff0c007

08003554 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff fe89 	bl	8003278 <LL_ADC_REG_IsConversionOngoing>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d14f      	bne.n	800360c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_ADC_Start+0x26>
 8003576:	2302      	movs	r3, #2
 8003578:	e04b      	b.n	8003612 <HAL_ADC_Start+0xbe>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 fcc6 	bl	8003f14 <ADC_Enable>
 8003588:	4603      	mov	r3, r0
 800358a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d137      	bne.n	8003602 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003596:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800359a:	f023 0301 	bic.w	r3, r3, #1
 800359e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035b2:	d106      	bne.n	80035c2 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b8:	f023 0206 	bic.w	r2, r3, #6
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	659a      	str	r2, [r3, #88]	; 0x58
 80035c0:	e002      	b.n	80035c8 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	221c      	movs	r2, #28
 80035ce:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d007      	beq.n	80035f6 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7ff fe28 	bl	8003250 <LL_ADC_REG_StartConversion>
 8003600:	e006      	b.n	8003610 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800360a:	e001      	b.n	8003610 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800360c:	2302      	movs	r3, #2
 800360e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8003610:	7bfb      	ldrb	r3, [r7, #15]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b086      	sub	sp, #24
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
 8003622:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	2b08      	cmp	r3, #8
 800362a:	d102      	bne.n	8003632 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800362c:	2308      	movs	r3, #8
 800362e:	617b      	str	r3, [r7, #20]
 8003630:	e010      	b.n	8003654 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d007      	beq.n	8003650 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003644:	f043 0220 	orr.w	r2, r3, #32
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e06f      	b.n	8003730 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8003650:	2304      	movs	r3, #4
 8003652:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003654:	f7ff fc3c 	bl	8002ed0 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800365a:	e021      	b.n	80036a0 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003662:	d01d      	beq.n	80036a0 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003664:	f7ff fc34 	bl	8002ed0 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	429a      	cmp	r2, r3
 8003672:	d302      	bcc.n	800367a <HAL_ADC_PollForConversion+0x60>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d112      	bne.n	80036a0 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	4013      	ands	r3, r2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10b      	bne.n	80036a0 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368c:	f043 0204 	orr.w	r2, r3, #4
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e047      	b.n	8003730 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	4013      	ands	r3, r2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0d6      	beq.n	800365c <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff fc9b 	bl	8002ffa <LL_ADC_REG_IsTriggerSourceSWStart>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d01c      	beq.n	8003704 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	7e5b      	ldrb	r3, [r3, #25]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d118      	bne.n	8003704 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0308 	and.w	r3, r3, #8
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d111      	bne.n	8003704 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d105      	bne.n	8003704 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fc:	f043 0201 	orr.w	r2, r3, #1
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	2b08      	cmp	r3, #8
 8003710:	d104      	bne.n	800371c <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2208      	movs	r2, #8
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	e008      	b.n	800372e <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d103      	bne.n	800372e <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	220c      	movs	r2, #12
 800372c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003746:	4618      	mov	r0, r3
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
	...

08003754 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b0b6      	sub	sp, #216	; 0xd8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003764:	2300      	movs	r3, #0
 8003766:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800376e:	2b01      	cmp	r3, #1
 8003770:	d101      	bne.n	8003776 <HAL_ADC_ConfigChannel+0x22>
 8003772:	2302      	movs	r3, #2
 8003774:	e3b9      	b.n	8003eea <HAL_ADC_ConfigChannel+0x796>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff fd78 	bl	8003278 <LL_ADC_REG_IsConversionOngoing>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	f040 839e 	bne.w	8003ecc <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b05      	cmp	r3, #5
 8003796:	d824      	bhi.n	80037e2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	3b02      	subs	r3, #2
 800379e:	2b03      	cmp	r3, #3
 80037a0:	d81b      	bhi.n	80037da <HAL_ADC_ConfigChannel+0x86>
 80037a2:	a201      	add	r2, pc, #4	; (adr r2, 80037a8 <HAL_ADC_ConfigChannel+0x54>)
 80037a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a8:	080037b9 	.word	0x080037b9
 80037ac:	080037c1 	.word	0x080037c1
 80037b0:	080037c9 	.word	0x080037c9
 80037b4:	080037d1 	.word	0x080037d1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	220c      	movs	r2, #12
 80037bc:	605a      	str	r2, [r3, #4]
          break;
 80037be:	e011      	b.n	80037e4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	2212      	movs	r2, #18
 80037c4:	605a      	str	r2, [r3, #4]
          break;
 80037c6:	e00d      	b.n	80037e4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	2218      	movs	r2, #24
 80037cc:	605a      	str	r2, [r3, #4]
          break;
 80037ce:	e009      	b.n	80037e4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037d6:	605a      	str	r2, [r3, #4]
          break;
 80037d8:	e004      	b.n	80037e4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2206      	movs	r2, #6
 80037de:	605a      	str	r2, [r3, #4]
          break;
 80037e0:	e000      	b.n	80037e4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80037e2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6818      	ldr	r0, [r3, #0]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	6859      	ldr	r1, [r3, #4]
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	461a      	mov	r2, r3
 80037f2:	f7ff fc15 	bl	8003020 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff fd3c 	bl	8003278 <LL_ADC_REG_IsConversionOngoing>
 8003800:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff fd48 	bl	800329e <LL_ADC_INJ_IsConversionOngoing>
 800380e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003812:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003816:	2b00      	cmp	r3, #0
 8003818:	f040 81a6 	bne.w	8003b68 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800381c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003820:	2b00      	cmp	r3, #0
 8003822:	f040 81a1 	bne.w	8003b68 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6818      	ldr	r0, [r3, #0]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	6819      	ldr	r1, [r3, #0]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	461a      	mov	r2, r3
 8003834:	f7ff fc20 	bl	8003078 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	695a      	ldr	r2, [r3, #20]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	08db      	lsrs	r3, r3, #3
 8003844:	f003 0303 	and.w	r3, r3, #3
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	2b04      	cmp	r3, #4
 8003858:	d00a      	beq.n	8003870 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6818      	ldr	r0, [r3, #0]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	6919      	ldr	r1, [r3, #16]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800386a:	f7ff fb71 	bl	8002f50 <LL_ADC_SetOffset>
 800386e:	e17b      	b.n	8003b68 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2100      	movs	r1, #0
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff fb8e 	bl	8002f98 <LL_ADC_GetOffsetChannel>
 800387c:	4603      	mov	r3, r0
 800387e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10a      	bne.n	800389c <HAL_ADC_ConfigChannel+0x148>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2100      	movs	r1, #0
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff fb83 	bl	8002f98 <LL_ADC_GetOffsetChannel>
 8003892:	4603      	mov	r3, r0
 8003894:	0e9b      	lsrs	r3, r3, #26
 8003896:	f003 021f 	and.w	r2, r3, #31
 800389a:	e01e      	b.n	80038da <HAL_ADC_ConfigChannel+0x186>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2100      	movs	r1, #0
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7ff fb78 	bl	8002f98 <LL_ADC_GetOffsetChannel>
 80038a8:	4603      	mov	r3, r0
 80038aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80038b2:	fa93 f3a3 	rbit	r3, r3
 80038b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80038be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80038c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80038ca:	2320      	movs	r3, #32
 80038cc:	e004      	b.n	80038d8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80038ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038d2:	fab3 f383 	clz	r3, r3
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d105      	bne.n	80038f2 <HAL_ADC_ConfigChannel+0x19e>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	0e9b      	lsrs	r3, r3, #26
 80038ec:	f003 031f 	and.w	r3, r3, #31
 80038f0:	e018      	b.n	8003924 <HAL_ADC_ConfigChannel+0x1d0>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80038fe:	fa93 f3a3 	rbit	r3, r3
 8003902:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800390a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800390e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003916:	2320      	movs	r3, #32
 8003918:	e004      	b.n	8003924 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800391a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800391e:	fab3 f383 	clz	r3, r3
 8003922:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003924:	429a      	cmp	r2, r3
 8003926:	d106      	bne.n	8003936 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2200      	movs	r2, #0
 800392e:	2100      	movs	r1, #0
 8003930:	4618      	mov	r0, r3
 8003932:	f7ff fb47 	bl	8002fc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2101      	movs	r1, #1
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff fb2b 	bl	8002f98 <LL_ADC_GetOffsetChannel>
 8003942:	4603      	mov	r3, r0
 8003944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10a      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x20e>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2101      	movs	r1, #1
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff fb20 	bl	8002f98 <LL_ADC_GetOffsetChannel>
 8003958:	4603      	mov	r3, r0
 800395a:	0e9b      	lsrs	r3, r3, #26
 800395c:	f003 021f 	and.w	r2, r3, #31
 8003960:	e01e      	b.n	80039a0 <HAL_ADC_ConfigChannel+0x24c>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2101      	movs	r1, #1
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff fb15 	bl	8002f98 <LL_ADC_GetOffsetChannel>
 800396e:	4603      	mov	r3, r0
 8003970:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003974:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003978:	fa93 f3a3 	rbit	r3, r3
 800397c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003980:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003984:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003988:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003990:	2320      	movs	r3, #32
 8003992:	e004      	b.n	800399e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003994:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003998:	fab3 f383 	clz	r3, r3
 800399c:	b2db      	uxtb	r3, r3
 800399e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d105      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x264>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	0e9b      	lsrs	r3, r3, #26
 80039b2:	f003 031f 	and.w	r3, r3, #31
 80039b6:	e018      	b.n	80039ea <HAL_ADC_ConfigChannel+0x296>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039c4:	fa93 f3a3 	rbit	r3, r3
 80039c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80039cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80039d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80039d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80039dc:	2320      	movs	r3, #32
 80039de:	e004      	b.n	80039ea <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80039e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039e4:	fab3 f383 	clz	r3, r3
 80039e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d106      	bne.n	80039fc <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2200      	movs	r2, #0
 80039f4:	2101      	movs	r1, #1
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff fae4 	bl	8002fc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2102      	movs	r1, #2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff fac8 	bl	8002f98 <LL_ADC_GetOffsetChannel>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10a      	bne.n	8003a28 <HAL_ADC_ConfigChannel+0x2d4>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2102      	movs	r1, #2
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7ff fabd 	bl	8002f98 <LL_ADC_GetOffsetChannel>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	0e9b      	lsrs	r3, r3, #26
 8003a22:	f003 021f 	and.w	r2, r3, #31
 8003a26:	e01e      	b.n	8003a66 <HAL_ADC_ConfigChannel+0x312>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2102      	movs	r1, #2
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff fab2 	bl	8002f98 <LL_ADC_GetOffsetChannel>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a3e:	fa93 f3a3 	rbit	r3, r3
 8003a42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003a46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003a4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003a56:	2320      	movs	r3, #32
 8003a58:	e004      	b.n	8003a64 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003a5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a5e:	fab3 f383 	clz	r3, r3
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d105      	bne.n	8003a7e <HAL_ADC_ConfigChannel+0x32a>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	0e9b      	lsrs	r3, r3, #26
 8003a78:	f003 031f 	and.w	r3, r3, #31
 8003a7c:	e016      	b.n	8003aac <HAL_ADC_ConfigChannel+0x358>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a8a:	fa93 f3a3 	rbit	r3, r3
 8003a8e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003a90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003a96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003a9e:	2320      	movs	r3, #32
 8003aa0:	e004      	b.n	8003aac <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003aa2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003aa6:	fab3 f383 	clz	r3, r3
 8003aaa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d106      	bne.n	8003abe <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	2102      	movs	r1, #2
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff fa83 	bl	8002fc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2103      	movs	r1, #3
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff fa67 	bl	8002f98 <LL_ADC_GetOffsetChannel>
 8003aca:	4603      	mov	r3, r0
 8003acc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10a      	bne.n	8003aea <HAL_ADC_ConfigChannel+0x396>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2103      	movs	r1, #3
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7ff fa5c 	bl	8002f98 <LL_ADC_GetOffsetChannel>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	0e9b      	lsrs	r3, r3, #26
 8003ae4:	f003 021f 	and.w	r2, r3, #31
 8003ae8:	e017      	b.n	8003b1a <HAL_ADC_ConfigChannel+0x3c6>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2103      	movs	r1, #3
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff fa51 	bl	8002f98 <LL_ADC_GetOffsetChannel>
 8003af6:	4603      	mov	r3, r0
 8003af8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003afc:	fa93 f3a3 	rbit	r3, r3
 8003b00:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003b02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b04:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003b06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003b0c:	2320      	movs	r3, #32
 8003b0e:	e003      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003b10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b12:	fab3 f383 	clz	r3, r3
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d105      	bne.n	8003b32 <HAL_ADC_ConfigChannel+0x3de>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	0e9b      	lsrs	r3, r3, #26
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	e011      	b.n	8003b56 <HAL_ADC_ConfigChannel+0x402>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b3a:	fa93 f3a3 	rbit	r3, r3
 8003b3e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003b40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b42:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003b4a:	2320      	movs	r3, #32
 8003b4c:	e003      	b.n	8003b56 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b50:	fab3 f383 	clz	r3, r3
 8003b54:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d106      	bne.n	8003b68 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	2103      	movs	r1, #3
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7ff fa2e 	bl	8002fc4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff fb49 	bl	8003204 <LL_ADC_IsEnabled>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f040 813f 	bne.w	8003df8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6818      	ldr	r0, [r3, #0]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	6819      	ldr	r1, [r3, #0]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	461a      	mov	r2, r3
 8003b88:	f7ff faa2 	bl	80030d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	4a8e      	ldr	r2, [pc, #568]	; (8003dcc <HAL_ADC_ConfigChannel+0x678>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	f040 8130 	bne.w	8003df8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10b      	bne.n	8003bc0 <HAL_ADC_ConfigChannel+0x46c>
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	0e9b      	lsrs	r3, r3, #26
 8003bae:	3301      	adds	r3, #1
 8003bb0:	f003 031f 	and.w	r3, r3, #31
 8003bb4:	2b09      	cmp	r3, #9
 8003bb6:	bf94      	ite	ls
 8003bb8:	2301      	movls	r3, #1
 8003bba:	2300      	movhi	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	e019      	b.n	8003bf4 <HAL_ADC_ConfigChannel+0x4a0>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bc8:	fa93 f3a3 	rbit	r3, r3
 8003bcc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003bce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bd0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003bd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003bd8:	2320      	movs	r3, #32
 8003bda:	e003      	b.n	8003be4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003bdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bde:	fab3 f383 	clz	r3, r3
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	3301      	adds	r3, #1
 8003be6:	f003 031f 	and.w	r3, r3, #31
 8003bea:	2b09      	cmp	r3, #9
 8003bec:	bf94      	ite	ls
 8003bee:	2301      	movls	r3, #1
 8003bf0:	2300      	movhi	r3, #0
 8003bf2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d079      	beq.n	8003cec <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d107      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x4c0>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	0e9b      	lsrs	r3, r3, #26
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	069b      	lsls	r3, r3, #26
 8003c0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c12:	e015      	b.n	8003c40 <HAL_ADC_ConfigChannel+0x4ec>
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c1c:	fa93 f3a3 	rbit	r3, r3
 8003c20:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c24:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003c2c:	2320      	movs	r3, #32
 8003c2e:	e003      	b.n	8003c38 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003c30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c32:	fab3 f383 	clz	r3, r3
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	3301      	adds	r3, #1
 8003c3a:	069b      	lsls	r3, r3, #26
 8003c3c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d109      	bne.n	8003c60 <HAL_ADC_ConfigChannel+0x50c>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	0e9b      	lsrs	r3, r3, #26
 8003c52:	3301      	adds	r3, #1
 8003c54:	f003 031f 	and.w	r3, r3, #31
 8003c58:	2101      	movs	r1, #1
 8003c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5e:	e017      	b.n	8003c90 <HAL_ADC_ConfigChannel+0x53c>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c68:	fa93 f3a3 	rbit	r3, r3
 8003c6c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c70:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003c78:	2320      	movs	r3, #32
 8003c7a:	e003      	b.n	8003c84 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003c7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c7e:	fab3 f383 	clz	r3, r3
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	3301      	adds	r3, #1
 8003c86:	f003 031f 	and.w	r3, r3, #31
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c90:	ea42 0103 	orr.w	r1, r2, r3
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10a      	bne.n	8003cb6 <HAL_ADC_ConfigChannel+0x562>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	0e9b      	lsrs	r3, r3, #26
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	f003 021f 	and.w	r2, r3, #31
 8003cac:	4613      	mov	r3, r2
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	4413      	add	r3, r2
 8003cb2:	051b      	lsls	r3, r3, #20
 8003cb4:	e018      	b.n	8003ce8 <HAL_ADC_ConfigChannel+0x594>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cbe:	fa93 f3a3 	rbit	r3, r3
 8003cc2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003cce:	2320      	movs	r3, #32
 8003cd0:	e003      	b.n	8003cda <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cd4:	fab3 f383 	clz	r3, r3
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	3301      	adds	r3, #1
 8003cdc:	f003 021f 	and.w	r2, r3, #31
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	4413      	add	r3, r2
 8003ce6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ce8:	430b      	orrs	r3, r1
 8003cea:	e080      	b.n	8003dee <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d107      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x5b4>
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	0e9b      	lsrs	r3, r3, #26
 8003cfe:	3301      	adds	r3, #1
 8003d00:	069b      	lsls	r3, r3, #26
 8003d02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d06:	e015      	b.n	8003d34 <HAL_ADC_ConfigChannel+0x5e0>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d10:	fa93 f3a3 	rbit	r3, r3
 8003d14:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d18:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003d20:	2320      	movs	r3, #32
 8003d22:	e003      	b.n	8003d2c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d26:	fab3 f383 	clz	r3, r3
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	069b      	lsls	r3, r3, #26
 8003d30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d109      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x600>
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	0e9b      	lsrs	r3, r3, #26
 8003d46:	3301      	adds	r3, #1
 8003d48:	f003 031f 	and.w	r3, r3, #31
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d52:	e017      	b.n	8003d84 <HAL_ADC_ConfigChannel+0x630>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	fa93 f3a3 	rbit	r3, r3
 8003d60:	61fb      	str	r3, [r7, #28]
  return result;
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003d6c:	2320      	movs	r3, #32
 8003d6e:	e003      	b.n	8003d78 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	fab3 f383 	clz	r3, r3
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	3301      	adds	r3, #1
 8003d7a:	f003 031f 	and.w	r3, r3, #31
 8003d7e:	2101      	movs	r1, #1
 8003d80:	fa01 f303 	lsl.w	r3, r1, r3
 8003d84:	ea42 0103 	orr.w	r1, r2, r3
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10d      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x65c>
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	0e9b      	lsrs	r3, r3, #26
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	f003 021f 	and.w	r2, r3, #31
 8003da0:	4613      	mov	r3, r2
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	4413      	add	r3, r2
 8003da6:	3b1e      	subs	r3, #30
 8003da8:	051b      	lsls	r3, r3, #20
 8003daa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003dae:	e01d      	b.n	8003dec <HAL_ADC_ConfigChannel+0x698>
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	fa93 f3a3 	rbit	r3, r3
 8003dbc:	613b      	str	r3, [r7, #16]
  return result;
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d103      	bne.n	8003dd0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003dc8:	2320      	movs	r3, #32
 8003dca:	e005      	b.n	8003dd8 <HAL_ADC_ConfigChannel+0x684>
 8003dcc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	fab3 f383 	clz	r3, r3
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	3301      	adds	r3, #1
 8003dda:	f003 021f 	and.w	r2, r3, #31
 8003dde:	4613      	mov	r3, r2
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	4413      	add	r3, r2
 8003de4:	3b1e      	subs	r3, #30
 8003de6:	051b      	lsls	r3, r3, #20
 8003de8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003dec:	430b      	orrs	r3, r1
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	6892      	ldr	r2, [r2, #8]
 8003df2:	4619      	mov	r1, r3
 8003df4:	f7ff f940 	bl	8003078 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	4b3d      	ldr	r3, [pc, #244]	; (8003ef4 <HAL_ADC_ConfigChannel+0x7a0>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d06c      	beq.n	8003ede <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e04:	483c      	ldr	r0, [pc, #240]	; (8003ef8 <HAL_ADC_ConfigChannel+0x7a4>)
 8003e06:	f7ff f895 	bl	8002f34 <LL_ADC_GetCommonPathInternalCh>
 8003e0a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a3a      	ldr	r2, [pc, #232]	; (8003efc <HAL_ADC_ConfigChannel+0x7a8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d127      	bne.n	8003e68 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d121      	bne.n	8003e68 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a35      	ldr	r2, [pc, #212]	; (8003f00 <HAL_ADC_ConfigChannel+0x7ac>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d157      	bne.n	8003ede <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e36:	4619      	mov	r1, r3
 8003e38:	482f      	ldr	r0, [pc, #188]	; (8003ef8 <HAL_ADC_ConfigChannel+0x7a4>)
 8003e3a:	f7ff f868 	bl	8002f0e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e3e:	4b31      	ldr	r3, [pc, #196]	; (8003f04 <HAL_ADC_ConfigChannel+0x7b0>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	099b      	lsrs	r3, r3, #6
 8003e44:	4a30      	ldr	r2, [pc, #192]	; (8003f08 <HAL_ADC_ConfigChannel+0x7b4>)
 8003e46:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4a:	099b      	lsrs	r3, r3, #6
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	4613      	mov	r3, r2
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	4413      	add	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e58:	e002      	b.n	8003e60 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1f9      	bne.n	8003e5a <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e66:	e03a      	b.n	8003ede <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a27      	ldr	r2, [pc, #156]	; (8003f0c <HAL_ADC_ConfigChannel+0x7b8>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d113      	bne.n	8003e9a <HAL_ADC_ConfigChannel+0x746>
 8003e72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10d      	bne.n	8003e9a <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a1f      	ldr	r2, [pc, #124]	; (8003f00 <HAL_ADC_ConfigChannel+0x7ac>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d12a      	bne.n	8003ede <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e90:	4619      	mov	r1, r3
 8003e92:	4819      	ldr	r0, [pc, #100]	; (8003ef8 <HAL_ADC_ConfigChannel+0x7a4>)
 8003e94:	f7ff f83b 	bl	8002f0e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e98:	e021      	b.n	8003ede <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a1c      	ldr	r2, [pc, #112]	; (8003f10 <HAL_ADC_ConfigChannel+0x7bc>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d11c      	bne.n	8003ede <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ea4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ea8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d116      	bne.n	8003ede <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a12      	ldr	r2, [pc, #72]	; (8003f00 <HAL_ADC_ConfigChannel+0x7ac>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d111      	bne.n	8003ede <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003eba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ebe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	480c      	ldr	r0, [pc, #48]	; (8003ef8 <HAL_ADC_ConfigChannel+0x7a4>)
 8003ec6:	f7ff f822 	bl	8002f0e <LL_ADC_SetCommonPathInternalCh>
 8003eca:	e008      	b.n	8003ede <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed0:	f043 0220 	orr.w	r2, r3, #32
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ee6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	37d8      	adds	r7, #216	; 0xd8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	80080000 	.word	0x80080000
 8003ef8:	50040300 	.word	0x50040300
 8003efc:	c7520000 	.word	0xc7520000
 8003f00:	50040000 	.word	0x50040000
 8003f04:	2000000c 	.word	0x2000000c
 8003f08:	053e2d63 	.word	0x053e2d63
 8003f0c:	cb840000 	.word	0xcb840000
 8003f10:	80000001 	.word	0x80000001

08003f14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff f96f 	bl	8003204 <LL_ADC_IsEnabled>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d14d      	bne.n	8003fc8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689a      	ldr	r2, [r3, #8]
 8003f32:	4b28      	ldr	r3, [pc, #160]	; (8003fd4 <ADC_Enable+0xc0>)
 8003f34:	4013      	ands	r3, r2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00d      	beq.n	8003f56 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3e:	f043 0210 	orr.w	r2, r3, #16
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4a:	f043 0201 	orr.w	r2, r3, #1
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e039      	b.n	8003fca <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7ff f92a 	bl	80031b4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003f60:	f7fe ffb6 	bl	8002ed0 <HAL_GetTick>
 8003f64:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f66:	e028      	b.n	8003fba <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff f949 	bl	8003204 <LL_ADC_IsEnabled>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d104      	bne.n	8003f82 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff f919 	bl	80031b4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003f82:	f7fe ffa5 	bl	8002ed0 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d914      	bls.n	8003fba <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d00d      	beq.n	8003fba <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa2:	f043 0210 	orr.w	r2, r3, #16
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fae:	f043 0201 	orr.w	r2, r3, #1
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e007      	b.n	8003fca <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d1cf      	bne.n	8003f68 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	8000003f 	.word	0x8000003f

08003fd8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff f920 	bl	800322a <LL_ADC_IsDisableOngoing>
 8003fea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7ff f907 	bl	8003204 <LL_ADC_IsEnabled>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d047      	beq.n	800408c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d144      	bne.n	800408c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f003 030d 	and.w	r3, r3, #13
 800400c:	2b01      	cmp	r3, #1
 800400e:	d10c      	bne.n	800402a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	f7ff f8e1 	bl	80031dc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2203      	movs	r2, #3
 8004020:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004022:	f7fe ff55 	bl	8002ed0 <HAL_GetTick>
 8004026:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004028:	e029      	b.n	800407e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402e:	f043 0210 	orr.w	r2, r3, #16
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403a:	f043 0201 	orr.w	r2, r3, #1
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e023      	b.n	800408e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004046:	f7fe ff43 	bl	8002ed0 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d914      	bls.n	800407e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00d      	beq.n	800407e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004066:	f043 0210 	orr.w	r2, r3, #16
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004072:	f043 0201 	orr.w	r2, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e007      	b.n	800408e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1dc      	bne.n	8004046 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <LL_ADC_StartCalibration>:
{
 8004096:	b480      	push	{r7}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
 800409e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80040a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80040b2:	4313      	orrs	r3, r2
 80040b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	609a      	str	r2, [r3, #8]
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <LL_ADC_IsCalibrationOnGoing>:
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040dc:	d101      	bne.n	80040e2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_ADCEx_Calibration_Start+0x1c>
 8004108:	2302      	movs	r3, #2
 800410a:	e04d      	b.n	80041a8 <HAL_ADCEx_Calibration_Start+0xb8>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7ff ff5f 	bl	8003fd8 <ADC_Disable>
 800411a:	4603      	mov	r3, r0
 800411c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800411e:	7bfb      	ldrb	r3, [r7, #15]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d136      	bne.n	8004192 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004128:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800412c:	f023 0302 	bic.w	r3, r3, #2
 8004130:	f043 0202 	orr.w	r2, r3, #2
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6839      	ldr	r1, [r7, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f7ff ffa9 	bl	8004096 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004144:	e014      	b.n	8004170 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	3301      	adds	r3, #1
 800414a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8004152:	d30d      	bcc.n	8004170 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004158:	f023 0312 	bic.w	r3, r3, #18
 800415c:	f043 0210 	orr.w	r2, r3, #16
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e01b      	b.n	80041a8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4618      	mov	r0, r3
 8004176:	f7ff ffa7 	bl	80040c8 <LL_ADC_IsCalibrationOnGoing>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1e2      	bne.n	8004146 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004184:	f023 0303 	bic.w	r3, r3, #3
 8004188:	f043 0201 	orr.w	r2, r3, #1
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	655a      	str	r2, [r3, #84]	; 0x54
 8004190:	e005      	b.n	800419e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004196:	f043 0210 	orr.w	r2, r3, #16
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80041a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041c0:	4b0c      	ldr	r3, [pc, #48]	; (80041f4 <__NVIC_SetPriorityGrouping+0x44>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041cc:	4013      	ands	r3, r2
 80041ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041e2:	4a04      	ldr	r2, [pc, #16]	; (80041f4 <__NVIC_SetPriorityGrouping+0x44>)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	60d3      	str	r3, [r2, #12]
}
 80041e8:	bf00      	nop
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	e000ed00 	.word	0xe000ed00

080041f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041fc:	4b04      	ldr	r3, [pc, #16]	; (8004210 <__NVIC_GetPriorityGrouping+0x18>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	0a1b      	lsrs	r3, r3, #8
 8004202:	f003 0307 	and.w	r3, r3, #7
}
 8004206:	4618      	mov	r0, r3
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	e000ed00 	.word	0xe000ed00

08004214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800421e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004222:	2b00      	cmp	r3, #0
 8004224:	db0b      	blt.n	800423e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004226:	79fb      	ldrb	r3, [r7, #7]
 8004228:	f003 021f 	and.w	r2, r3, #31
 800422c:	4907      	ldr	r1, [pc, #28]	; (800424c <__NVIC_EnableIRQ+0x38>)
 800422e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	2001      	movs	r0, #1
 8004236:	fa00 f202 	lsl.w	r2, r0, r2
 800423a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	e000e100 	.word	0xe000e100

08004250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	4603      	mov	r3, r0
 8004258:	6039      	str	r1, [r7, #0]
 800425a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800425c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004260:	2b00      	cmp	r3, #0
 8004262:	db0a      	blt.n	800427a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	b2da      	uxtb	r2, r3
 8004268:	490c      	ldr	r1, [pc, #48]	; (800429c <__NVIC_SetPriority+0x4c>)
 800426a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800426e:	0112      	lsls	r2, r2, #4
 8004270:	b2d2      	uxtb	r2, r2
 8004272:	440b      	add	r3, r1
 8004274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004278:	e00a      	b.n	8004290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	b2da      	uxtb	r2, r3
 800427e:	4908      	ldr	r1, [pc, #32]	; (80042a0 <__NVIC_SetPriority+0x50>)
 8004280:	79fb      	ldrb	r3, [r7, #7]
 8004282:	f003 030f 	and.w	r3, r3, #15
 8004286:	3b04      	subs	r3, #4
 8004288:	0112      	lsls	r2, r2, #4
 800428a:	b2d2      	uxtb	r2, r2
 800428c:	440b      	add	r3, r1
 800428e:	761a      	strb	r2, [r3, #24]
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	e000e100 	.word	0xe000e100
 80042a0:	e000ed00 	.word	0xe000ed00

080042a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b089      	sub	sp, #36	; 0x24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f1c3 0307 	rsb	r3, r3, #7
 80042be:	2b04      	cmp	r3, #4
 80042c0:	bf28      	it	cs
 80042c2:	2304      	movcs	r3, #4
 80042c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	3304      	adds	r3, #4
 80042ca:	2b06      	cmp	r3, #6
 80042cc:	d902      	bls.n	80042d4 <NVIC_EncodePriority+0x30>
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	3b03      	subs	r3, #3
 80042d2:	e000      	b.n	80042d6 <NVIC_EncodePriority+0x32>
 80042d4:	2300      	movs	r3, #0
 80042d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042d8:	f04f 32ff 	mov.w	r2, #4294967295
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	fa02 f303 	lsl.w	r3, r2, r3
 80042e2:	43da      	mvns	r2, r3
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	401a      	ands	r2, r3
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042ec:	f04f 31ff 	mov.w	r1, #4294967295
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	fa01 f303 	lsl.w	r3, r1, r3
 80042f6:	43d9      	mvns	r1, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042fc:	4313      	orrs	r3, r2
         );
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3724      	adds	r7, #36	; 0x24
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
	...

0800430c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3b01      	subs	r3, #1
 8004318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800431c:	d301      	bcc.n	8004322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800431e:	2301      	movs	r3, #1
 8004320:	e00f      	b.n	8004342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004322:	4a0a      	ldr	r2, [pc, #40]	; (800434c <SysTick_Config+0x40>)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3b01      	subs	r3, #1
 8004328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800432a:	210f      	movs	r1, #15
 800432c:	f04f 30ff 	mov.w	r0, #4294967295
 8004330:	f7ff ff8e 	bl	8004250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004334:	4b05      	ldr	r3, [pc, #20]	; (800434c <SysTick_Config+0x40>)
 8004336:	2200      	movs	r2, #0
 8004338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800433a:	4b04      	ldr	r3, [pc, #16]	; (800434c <SysTick_Config+0x40>)
 800433c:	2207      	movs	r2, #7
 800433e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	e000e010 	.word	0xe000e010

08004350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f7ff ff29 	bl	80041b0 <__NVIC_SetPriorityGrouping>
}
 800435e:	bf00      	nop
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b086      	sub	sp, #24
 800436a:	af00      	add	r7, sp, #0
 800436c:	4603      	mov	r3, r0
 800436e:	60b9      	str	r1, [r7, #8]
 8004370:	607a      	str	r2, [r7, #4]
 8004372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004374:	2300      	movs	r3, #0
 8004376:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004378:	f7ff ff3e 	bl	80041f8 <__NVIC_GetPriorityGrouping>
 800437c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	68b9      	ldr	r1, [r7, #8]
 8004382:	6978      	ldr	r0, [r7, #20]
 8004384:	f7ff ff8e 	bl	80042a4 <NVIC_EncodePriority>
 8004388:	4602      	mov	r2, r0
 800438a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800438e:	4611      	mov	r1, r2
 8004390:	4618      	mov	r0, r3
 8004392:	f7ff ff5d 	bl	8004250 <__NVIC_SetPriority>
}
 8004396:	bf00      	nop
 8004398:	3718      	adds	r7, #24
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b082      	sub	sp, #8
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	4603      	mov	r3, r0
 80043a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7ff ff31 	bl	8004214 <__NVIC_EnableIRQ>
}
 80043b2:	bf00      	nop
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b082      	sub	sp, #8
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7ff ffa2 	bl	800430c <SysTick_Config>
 80043c8:	4603      	mov	r3, r0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e098      	b.n	8004518 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	461a      	mov	r2, r3
 80043ec:	4b4d      	ldr	r3, [pc, #308]	; (8004524 <HAL_DMA_Init+0x150>)
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d80f      	bhi.n	8004412 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	461a      	mov	r2, r3
 80043f8:	4b4b      	ldr	r3, [pc, #300]	; (8004528 <HAL_DMA_Init+0x154>)
 80043fa:	4413      	add	r3, r2
 80043fc:	4a4b      	ldr	r2, [pc, #300]	; (800452c <HAL_DMA_Init+0x158>)
 80043fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004402:	091b      	lsrs	r3, r3, #4
 8004404:	009a      	lsls	r2, r3, #2
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a48      	ldr	r2, [pc, #288]	; (8004530 <HAL_DMA_Init+0x15c>)
 800440e:	641a      	str	r2, [r3, #64]	; 0x40
 8004410:	e00e      	b.n	8004430 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	461a      	mov	r2, r3
 8004418:	4b46      	ldr	r3, [pc, #280]	; (8004534 <HAL_DMA_Init+0x160>)
 800441a:	4413      	add	r3, r2
 800441c:	4a43      	ldr	r2, [pc, #268]	; (800452c <HAL_DMA_Init+0x158>)
 800441e:	fba2 2303 	umull	r2, r3, r2, r3
 8004422:	091b      	lsrs	r3, r3, #4
 8004424:	009a      	lsls	r2, r3, #2
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a42      	ldr	r2, [pc, #264]	; (8004538 <HAL_DMA_Init+0x164>)
 800442e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800444a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004454:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004460:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800446c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	4313      	orrs	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800448a:	d039      	beq.n	8004500 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	4a27      	ldr	r2, [pc, #156]	; (8004530 <HAL_DMA_Init+0x15c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d11a      	bne.n	80044cc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004496:	4b29      	ldr	r3, [pc, #164]	; (800453c <HAL_DMA_Init+0x168>)
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449e:	f003 031c 	and.w	r3, r3, #28
 80044a2:	210f      	movs	r1, #15
 80044a4:	fa01 f303 	lsl.w	r3, r1, r3
 80044a8:	43db      	mvns	r3, r3
 80044aa:	4924      	ldr	r1, [pc, #144]	; (800453c <HAL_DMA_Init+0x168>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80044b0:	4b22      	ldr	r3, [pc, #136]	; (800453c <HAL_DMA_Init+0x168>)
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6859      	ldr	r1, [r3, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044bc:	f003 031c 	and.w	r3, r3, #28
 80044c0:	fa01 f303 	lsl.w	r3, r1, r3
 80044c4:	491d      	ldr	r1, [pc, #116]	; (800453c <HAL_DMA_Init+0x168>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	600b      	str	r3, [r1, #0]
 80044ca:	e019      	b.n	8004500 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80044cc:	4b1c      	ldr	r3, [pc, #112]	; (8004540 <HAL_DMA_Init+0x16c>)
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d4:	f003 031c 	and.w	r3, r3, #28
 80044d8:	210f      	movs	r1, #15
 80044da:	fa01 f303 	lsl.w	r3, r1, r3
 80044de:	43db      	mvns	r3, r3
 80044e0:	4917      	ldr	r1, [pc, #92]	; (8004540 <HAL_DMA_Init+0x16c>)
 80044e2:	4013      	ands	r3, r2
 80044e4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80044e6:	4b16      	ldr	r3, [pc, #88]	; (8004540 <HAL_DMA_Init+0x16c>)
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6859      	ldr	r1, [r3, #4]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f2:	f003 031c 	and.w	r3, r3, #28
 80044f6:	fa01 f303 	lsl.w	r3, r1, r3
 80044fa:	4911      	ldr	r1, [pc, #68]	; (8004540 <HAL_DMA_Init+0x16c>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	40020407 	.word	0x40020407
 8004528:	bffdfff8 	.word	0xbffdfff8
 800452c:	cccccccd 	.word	0xcccccccd
 8004530:	40020000 	.word	0x40020000
 8004534:	bffdfbf8 	.word	0xbffdfbf8
 8004538:	40020400 	.word	0x40020400
 800453c:	400200a8 	.word	0x400200a8
 8004540:	400204a8 	.word	0x400204a8

08004544 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004552:	2300      	movs	r3, #0
 8004554:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800455c:	2b01      	cmp	r3, #1
 800455e:	d101      	bne.n	8004564 <HAL_DMA_Start_IT+0x20>
 8004560:	2302      	movs	r3, #2
 8004562:	e04b      	b.n	80045fc <HAL_DMA_Start_IT+0xb8>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b01      	cmp	r3, #1
 8004576:	d13a      	bne.n	80045ee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 0201 	bic.w	r2, r2, #1
 8004594:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	68b9      	ldr	r1, [r7, #8]
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 f8e0 	bl	8004762 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d008      	beq.n	80045bc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f042 020e 	orr.w	r2, r2, #14
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	e00f      	b.n	80045dc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0204 	bic.w	r2, r2, #4
 80045ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 020a 	orr.w	r2, r2, #10
 80045da:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0201 	orr.w	r2, r2, #1
 80045ea:	601a      	str	r2, [r3, #0]
 80045ec:	e005      	b.n	80045fa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80045f6:	2302      	movs	r3, #2
 80045f8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80045fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3718      	adds	r7, #24
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004620:	f003 031c 	and.w	r3, r3, #28
 8004624:	2204      	movs	r2, #4
 8004626:	409a      	lsls	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4013      	ands	r3, r2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d026      	beq.n	800467e <HAL_DMA_IRQHandler+0x7a>
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f003 0304 	and.w	r3, r3, #4
 8004636:	2b00      	cmp	r3, #0
 8004638:	d021      	beq.n	800467e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0320 	and.w	r3, r3, #32
 8004644:	2b00      	cmp	r3, #0
 8004646:	d107      	bne.n	8004658 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 0204 	bic.w	r2, r2, #4
 8004656:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465c:	f003 021c 	and.w	r2, r3, #28
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004664:	2104      	movs	r1, #4
 8004666:	fa01 f202 	lsl.w	r2, r1, r2
 800466a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004670:	2b00      	cmp	r3, #0
 8004672:	d071      	beq.n	8004758 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800467c:	e06c      	b.n	8004758 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004682:	f003 031c 	and.w	r3, r3, #28
 8004686:	2202      	movs	r2, #2
 8004688:	409a      	lsls	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	4013      	ands	r3, r2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d02e      	beq.n	80046f0 <HAL_DMA_IRQHandler+0xec>
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d029      	beq.n	80046f0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0320 	and.w	r3, r3, #32
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10b      	bne.n	80046c2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 020a 	bic.w	r2, r2, #10
 80046b8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c6:	f003 021c 	and.w	r2, r3, #28
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	2102      	movs	r1, #2
 80046d0:	fa01 f202 	lsl.w	r2, r1, r2
 80046d4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d038      	beq.n	8004758 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80046ee:	e033      	b.n	8004758 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f4:	f003 031c 	and.w	r3, r3, #28
 80046f8:	2208      	movs	r2, #8
 80046fa:	409a      	lsls	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4013      	ands	r3, r2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d02a      	beq.n	800475a <HAL_DMA_IRQHandler+0x156>
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	f003 0308 	and.w	r3, r3, #8
 800470a:	2b00      	cmp	r3, #0
 800470c:	d025      	beq.n	800475a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 020e 	bic.w	r2, r2, #14
 800471c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004722:	f003 021c 	and.w	r2, r3, #28
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	2101      	movs	r1, #1
 800472c:	fa01 f202 	lsl.w	r2, r1, r2
 8004730:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474c:	2b00      	cmp	r3, #0
 800474e:	d004      	beq.n	800475a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004758:	bf00      	nop
 800475a:	bf00      	nop
}
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004762:	b480      	push	{r7}
 8004764:	b085      	sub	sp, #20
 8004766:	af00      	add	r7, sp, #0
 8004768:	60f8      	str	r0, [r7, #12]
 800476a:	60b9      	str	r1, [r7, #8]
 800476c:	607a      	str	r2, [r7, #4]
 800476e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004774:	f003 021c 	and.w	r2, r3, #28
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477c:	2101      	movs	r1, #1
 800477e:	fa01 f202 	lsl.w	r2, r1, r2
 8004782:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	2b10      	cmp	r3, #16
 8004792:	d108      	bne.n	80047a6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80047a4:	e007      	b.n	80047b6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	60da      	str	r2, [r3, #12]
}
 80047b6:	bf00      	nop
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
	...

080047c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047ce:	2300      	movs	r3, #0
 80047d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047d2:	e148      	b.n	8004a66 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	2101      	movs	r1, #1
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	fa01 f303 	lsl.w	r3, r1, r3
 80047e0:	4013      	ands	r3, r2
 80047e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f000 813a 	beq.w	8004a60 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d00b      	beq.n	800480c <HAL_GPIO_Init+0x48>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d007      	beq.n	800480c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004800:	2b11      	cmp	r3, #17
 8004802:	d003      	beq.n	800480c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	2b12      	cmp	r3, #18
 800480a:	d130      	bne.n	800486e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	2203      	movs	r2, #3
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	43db      	mvns	r3, r3
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	4013      	ands	r3, r2
 8004822:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	fa02 f303 	lsl.w	r3, r2, r3
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	4313      	orrs	r3, r2
 8004834:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004842:	2201      	movs	r2, #1
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	fa02 f303 	lsl.w	r3, r2, r3
 800484a:	43db      	mvns	r3, r3
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4013      	ands	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	091b      	lsrs	r3, r3, #4
 8004858:	f003 0201 	and.w	r2, r3, #1
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	fa02 f303 	lsl.w	r3, r2, r3
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	4313      	orrs	r3, r2
 8004866:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	2203      	movs	r2, #3
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	43db      	mvns	r3, r3
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	4013      	ands	r3, r2
 8004884:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	689a      	ldr	r2, [r3, #8]
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	4313      	orrs	r3, r2
 8004896:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d003      	beq.n	80048ae <HAL_GPIO_Init+0xea>
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2b12      	cmp	r3, #18
 80048ac:	d123      	bne.n	80048f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	08da      	lsrs	r2, r3, #3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	3208      	adds	r2, #8
 80048b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f003 0307 	and.w	r3, r3, #7
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	220f      	movs	r2, #15
 80048c6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ca:	43db      	mvns	r3, r3
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	4013      	ands	r3, r2
 80048d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	691a      	ldr	r2, [r3, #16]
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	fa02 f303 	lsl.w	r3, r2, r3
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	08da      	lsrs	r2, r3, #3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3208      	adds	r2, #8
 80048f0:	6939      	ldr	r1, [r7, #16]
 80048f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	2203      	movs	r2, #3
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	43db      	mvns	r3, r3
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	4013      	ands	r3, r2
 800490c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f003 0203 	and.w	r2, r3, #3
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	fa02 f303 	lsl.w	r3, r2, r3
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	4313      	orrs	r3, r2
 8004922:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 8094 	beq.w	8004a60 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004938:	4b52      	ldr	r3, [pc, #328]	; (8004a84 <HAL_GPIO_Init+0x2c0>)
 800493a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800493c:	4a51      	ldr	r2, [pc, #324]	; (8004a84 <HAL_GPIO_Init+0x2c0>)
 800493e:	f043 0301 	orr.w	r3, r3, #1
 8004942:	6613      	str	r3, [r2, #96]	; 0x60
 8004944:	4b4f      	ldr	r3, [pc, #316]	; (8004a84 <HAL_GPIO_Init+0x2c0>)
 8004946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	60bb      	str	r3, [r7, #8]
 800494e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004950:	4a4d      	ldr	r2, [pc, #308]	; (8004a88 <HAL_GPIO_Init+0x2c4>)
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	089b      	lsrs	r3, r3, #2
 8004956:	3302      	adds	r3, #2
 8004958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800495c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f003 0303 	and.w	r3, r3, #3
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	220f      	movs	r2, #15
 8004968:	fa02 f303 	lsl.w	r3, r2, r3
 800496c:	43db      	mvns	r3, r3
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	4013      	ands	r3, r2
 8004972:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800497a:	d00d      	beq.n	8004998 <HAL_GPIO_Init+0x1d4>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a43      	ldr	r2, [pc, #268]	; (8004a8c <HAL_GPIO_Init+0x2c8>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d007      	beq.n	8004994 <HAL_GPIO_Init+0x1d0>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a42      	ldr	r2, [pc, #264]	; (8004a90 <HAL_GPIO_Init+0x2cc>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d101      	bne.n	8004990 <HAL_GPIO_Init+0x1cc>
 800498c:	2302      	movs	r3, #2
 800498e:	e004      	b.n	800499a <HAL_GPIO_Init+0x1d6>
 8004990:	2307      	movs	r3, #7
 8004992:	e002      	b.n	800499a <HAL_GPIO_Init+0x1d6>
 8004994:	2301      	movs	r3, #1
 8004996:	e000      	b.n	800499a <HAL_GPIO_Init+0x1d6>
 8004998:	2300      	movs	r3, #0
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	f002 0203 	and.w	r2, r2, #3
 80049a0:	0092      	lsls	r2, r2, #2
 80049a2:	4093      	lsls	r3, r2
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80049aa:	4937      	ldr	r1, [pc, #220]	; (8004a88 <HAL_GPIO_Init+0x2c4>)
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	089b      	lsrs	r3, r3, #2
 80049b0:	3302      	adds	r3, #2
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80049b8:	4b36      	ldr	r3, [pc, #216]	; (8004a94 <HAL_GPIO_Init+0x2d0>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	43db      	mvns	r3, r3
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	4013      	ands	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d003      	beq.n	80049dc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4313      	orrs	r3, r2
 80049da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80049dc:	4a2d      	ldr	r2, [pc, #180]	; (8004a94 <HAL_GPIO_Init+0x2d0>)
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80049e2:	4b2c      	ldr	r3, [pc, #176]	; (8004a94 <HAL_GPIO_Init+0x2d0>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	43db      	mvns	r3, r3
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	4013      	ands	r3, r2
 80049f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a06:	4a23      	ldr	r2, [pc, #140]	; (8004a94 <HAL_GPIO_Init+0x2d0>)
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a0c:	4b21      	ldr	r3, [pc, #132]	; (8004a94 <HAL_GPIO_Init+0x2d0>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	43db      	mvns	r3, r3
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d003      	beq.n	8004a30 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a30:	4a18      	ldr	r2, [pc, #96]	; (8004a94 <HAL_GPIO_Init+0x2d0>)
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a36:	4b17      	ldr	r3, [pc, #92]	; (8004a94 <HAL_GPIO_Init+0x2d0>)
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	43db      	mvns	r3, r3
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	4013      	ands	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a5a:	4a0e      	ldr	r2, [pc, #56]	; (8004a94 <HAL_GPIO_Init+0x2d0>)
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	3301      	adds	r3, #1
 8004a64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f47f aeaf 	bne.w	80047d4 <HAL_GPIO_Init+0x10>
  }
}
 8004a76:	bf00      	nop
 8004a78:	bf00      	nop
 8004a7a:	371c      	adds	r7, #28
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr
 8004a84:	40021000 	.word	0x40021000
 8004a88:	40010000 	.word	0x40010000
 8004a8c:	48000400 	.word	0x48000400
 8004a90:	48000800 	.word	0x48000800
 8004a94:	40010400 	.word	0x40010400

08004a98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691a      	ldr	r2, [r3, #16]
 8004aa8:	887b      	ldrh	r3, [r7, #2]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d002      	beq.n	8004ab6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	73fb      	strb	r3, [r7, #15]
 8004ab4:	e001      	b.n	8004aba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	807b      	strh	r3, [r7, #2]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ad8:	787b      	ldrb	r3, [r7, #1]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d003      	beq.n	8004ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ade:	887a      	ldrh	r2, [r7, #2]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ae4:	e002      	b.n	8004aec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ae6:	887a      	ldrh	r2, [r7, #2]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	4603      	mov	r3, r0
 8004b00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b02:	4b08      	ldr	r3, [pc, #32]	; (8004b24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b04:	695a      	ldr	r2, [r3, #20]
 8004b06:	88fb      	ldrh	r3, [r7, #6]
 8004b08:	4013      	ands	r3, r2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d006      	beq.n	8004b1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b0e:	4a05      	ldr	r2, [pc, #20]	; (8004b24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b10:	88fb      	ldrh	r3, [r7, #6]
 8004b12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b14:	88fb      	ldrh	r3, [r7, #6]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 f806 	bl	8004b28 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b1c:	bf00      	nop
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40010400 	.word	0x40010400

08004b28 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	4603      	mov	r3, r0
 8004b30:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
	...

08004b40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004b44:	4b04      	ldr	r3, [pc, #16]	; (8004b58 <HAL_PWREx_GetVoltageRange+0x18>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	40007000 	.word	0x40007000

08004b5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b6a:	d130      	bne.n	8004bce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b6c:	4b23      	ldr	r3, [pc, #140]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b78:	d038      	beq.n	8004bec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b7a:	4b20      	ldr	r3, [pc, #128]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b82:	4a1e      	ldr	r2, [pc, #120]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b88:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b8a:	4b1d      	ldr	r3, [pc, #116]	; (8004c00 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2232      	movs	r2, #50	; 0x32
 8004b90:	fb02 f303 	mul.w	r3, r2, r3
 8004b94:	4a1b      	ldr	r2, [pc, #108]	; (8004c04 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004b96:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9a:	0c9b      	lsrs	r3, r3, #18
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ba0:	e002      	b.n	8004ba8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ba8:	4b14      	ldr	r3, [pc, #80]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bb4:	d102      	bne.n	8004bbc <HAL_PWREx_ControlVoltageScaling+0x60>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1f2      	bne.n	8004ba2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004bbc:	4b0f      	ldr	r3, [pc, #60]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc8:	d110      	bne.n	8004bec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e00f      	b.n	8004bee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bce:	4b0b      	ldr	r3, [pc, #44]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bda:	d007      	beq.n	8004bec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004bdc:	4b07      	ldr	r3, [pc, #28]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004be4:	4a05      	ldr	r2, [pc, #20]	; (8004bfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004be6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	40007000 	.word	0x40007000
 8004c00:	2000000c 	.word	0x2000000c
 8004c04:	431bde83 	.word	0x431bde83

08004c08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b088      	sub	sp, #32
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d102      	bne.n	8004c1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	f000 bc11 	b.w	800543e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c1c:	4ba0      	ldr	r3, [pc, #640]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f003 030c 	and.w	r3, r3, #12
 8004c24:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c26:	4b9e      	ldr	r3, [pc, #632]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0310 	and.w	r3, r3, #16
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f000 80e4 	beq.w	8004e06 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d007      	beq.n	8004c54 <HAL_RCC_OscConfig+0x4c>
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	2b0c      	cmp	r3, #12
 8004c48:	f040 808b 	bne.w	8004d62 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	f040 8087 	bne.w	8004d62 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c54:	4b92      	ldr	r3, [pc, #584]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d005      	beq.n	8004c6c <HAL_RCC_OscConfig+0x64>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e3e8      	b.n	800543e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1a      	ldr	r2, [r3, #32]
 8004c70:	4b8b      	ldr	r3, [pc, #556]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0308 	and.w	r3, r3, #8
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d004      	beq.n	8004c86 <HAL_RCC_OscConfig+0x7e>
 8004c7c:	4b88      	ldr	r3, [pc, #544]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c84:	e005      	b.n	8004c92 <HAL_RCC_OscConfig+0x8a>
 8004c86:	4b86      	ldr	r3, [pc, #536]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c8c:	091b      	lsrs	r3, r3, #4
 8004c8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d223      	bcs.n	8004cde <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 fd7a 	bl	8005794 <RCC_SetFlashLatencyFromMSIRange>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e3c9      	b.n	800543e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004caa:	4b7d      	ldr	r3, [pc, #500]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a7c      	ldr	r2, [pc, #496]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004cb0:	f043 0308 	orr.w	r3, r3, #8
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	4b7a      	ldr	r3, [pc, #488]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	4977      	ldr	r1, [pc, #476]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cc8:	4b75      	ldr	r3, [pc, #468]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	69db      	ldr	r3, [r3, #28]
 8004cd4:	021b      	lsls	r3, r3, #8
 8004cd6:	4972      	ldr	r1, [pc, #456]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	604b      	str	r3, [r1, #4]
 8004cdc:	e025      	b.n	8004d2a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cde:	4b70      	ldr	r3, [pc, #448]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a6f      	ldr	r2, [pc, #444]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004ce4:	f043 0308 	orr.w	r3, r3, #8
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	4b6d      	ldr	r3, [pc, #436]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	496a      	ldr	r1, [pc, #424]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cfc:	4b68      	ldr	r3, [pc, #416]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	69db      	ldr	r3, [r3, #28]
 8004d08:	021b      	lsls	r3, r3, #8
 8004d0a:	4965      	ldr	r1, [pc, #404]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d109      	bne.n	8004d2a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 fd3a 	bl	8005794 <RCC_SetFlashLatencyFromMSIRange>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e389      	b.n	800543e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d2a:	f000 fc6f 	bl	800560c <HAL_RCC_GetSysClockFreq>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	4b5b      	ldr	r3, [pc, #364]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	091b      	lsrs	r3, r3, #4
 8004d36:	f003 030f 	and.w	r3, r3, #15
 8004d3a:	495a      	ldr	r1, [pc, #360]	; (8004ea4 <HAL_RCC_OscConfig+0x29c>)
 8004d3c:	5ccb      	ldrb	r3, [r1, r3]
 8004d3e:	f003 031f 	and.w	r3, r3, #31
 8004d42:	fa22 f303 	lsr.w	r3, r2, r3
 8004d46:	4a58      	ldr	r2, [pc, #352]	; (8004ea8 <HAL_RCC_OscConfig+0x2a0>)
 8004d48:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004d4a:	4b58      	ldr	r3, [pc, #352]	; (8004eac <HAL_RCC_OscConfig+0x2a4>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fe f86e 	bl	8002e30 <HAL_InitTick>
 8004d54:	4603      	mov	r3, r0
 8004d56:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004d58:	7bfb      	ldrb	r3, [r7, #15]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d052      	beq.n	8004e04 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004d5e:	7bfb      	ldrb	r3, [r7, #15]
 8004d60:	e36d      	b.n	800543e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d032      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004d6a:	4b4d      	ldr	r3, [pc, #308]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a4c      	ldr	r2, [pc, #304]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004d70:	f043 0301 	orr.w	r3, r3, #1
 8004d74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d76:	f7fe f8ab 	bl	8002ed0 <HAL_GetTick>
 8004d7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d7c:	e008      	b.n	8004d90 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d7e:	f7fe f8a7 	bl	8002ed0 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e356      	b.n	800543e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d90:	4b43      	ldr	r3, [pc, #268]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0f0      	beq.n	8004d7e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d9c:	4b40      	ldr	r3, [pc, #256]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a3f      	ldr	r2, [pc, #252]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004da2:	f043 0308 	orr.w	r3, r3, #8
 8004da6:	6013      	str	r3, [r2, #0]
 8004da8:	4b3d      	ldr	r3, [pc, #244]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	493a      	ldr	r1, [pc, #232]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004dba:	4b39      	ldr	r3, [pc, #228]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	021b      	lsls	r3, r3, #8
 8004dc8:	4935      	ldr	r1, [pc, #212]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	604b      	str	r3, [r1, #4]
 8004dce:	e01a      	b.n	8004e06 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004dd0:	4b33      	ldr	r3, [pc, #204]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a32      	ldr	r2, [pc, #200]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004dd6:	f023 0301 	bic.w	r3, r3, #1
 8004dda:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ddc:	f7fe f878 	bl	8002ed0 <HAL_GetTick>
 8004de0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004de2:	e008      	b.n	8004df6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004de4:	f7fe f874 	bl	8002ed0 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d901      	bls.n	8004df6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e323      	b.n	800543e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004df6:	4b2a      	ldr	r3, [pc, #168]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1f0      	bne.n	8004de4 <HAL_RCC_OscConfig+0x1dc>
 8004e02:	e000      	b.n	8004e06 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e04:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d073      	beq.n	8004efa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	2b08      	cmp	r3, #8
 8004e16:	d005      	beq.n	8004e24 <HAL_RCC_OscConfig+0x21c>
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	2b0c      	cmp	r3, #12
 8004e1c:	d10e      	bne.n	8004e3c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2b03      	cmp	r3, #3
 8004e22:	d10b      	bne.n	8004e3c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e24:	4b1e      	ldr	r3, [pc, #120]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d063      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x2f0>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d15f      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e300      	b.n	800543e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e44:	d106      	bne.n	8004e54 <HAL_RCC_OscConfig+0x24c>
 8004e46:	4b16      	ldr	r3, [pc, #88]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a15      	ldr	r2, [pc, #84]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e50:	6013      	str	r3, [r2, #0]
 8004e52:	e01d      	b.n	8004e90 <HAL_RCC_OscConfig+0x288>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e5c:	d10c      	bne.n	8004e78 <HAL_RCC_OscConfig+0x270>
 8004e5e:	4b10      	ldr	r3, [pc, #64]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a0f      	ldr	r2, [pc, #60]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e68:	6013      	str	r3, [r2, #0]
 8004e6a:	4b0d      	ldr	r3, [pc, #52]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a0c      	ldr	r2, [pc, #48]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	e00b      	b.n	8004e90 <HAL_RCC_OscConfig+0x288>
 8004e78:	4b09      	ldr	r3, [pc, #36]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a08      	ldr	r2, [pc, #32]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e82:	6013      	str	r3, [r2, #0]
 8004e84:	4b06      	ldr	r3, [pc, #24]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a05      	ldr	r2, [pc, #20]	; (8004ea0 <HAL_RCC_OscConfig+0x298>)
 8004e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d01b      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e98:	f7fe f81a 	bl	8002ed0 <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e9e:	e010      	b.n	8004ec2 <HAL_RCC_OscConfig+0x2ba>
 8004ea0:	40021000 	.word	0x40021000
 8004ea4:	08008e18 	.word	0x08008e18
 8004ea8:	2000000c 	.word	0x2000000c
 8004eac:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004eb0:	f7fe f80e 	bl	8002ed0 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b64      	cmp	r3, #100	; 0x64
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e2bd      	b.n	800543e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ec2:	4baf      	ldr	r3, [pc, #700]	; (8005180 <HAL_RCC_OscConfig+0x578>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d0f0      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x2a8>
 8004ece:	e014      	b.n	8004efa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed0:	f7fd fffe 	bl	8002ed0 <HAL_GetTick>
 8004ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ed6:	e008      	b.n	8004eea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ed8:	f7fd fffa 	bl	8002ed0 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b64      	cmp	r3, #100	; 0x64
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e2a9      	b.n	800543e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004eea:	4ba5      	ldr	r3, [pc, #660]	; (8005180 <HAL_RCC_OscConfig+0x578>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1f0      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x2d0>
 8004ef6:	e000      	b.n	8004efa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ef8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d060      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	2b04      	cmp	r3, #4
 8004f0a:	d005      	beq.n	8004f18 <HAL_RCC_OscConfig+0x310>
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	2b0c      	cmp	r3, #12
 8004f10:	d119      	bne.n	8004f46 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d116      	bne.n	8004f46 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f18:	4b99      	ldr	r3, [pc, #612]	; (8005180 <HAL_RCC_OscConfig+0x578>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d005      	beq.n	8004f30 <HAL_RCC_OscConfig+0x328>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d101      	bne.n	8004f30 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e286      	b.n	800543e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f30:	4b93      	ldr	r3, [pc, #588]	; (8005180 <HAL_RCC_OscConfig+0x578>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	061b      	lsls	r3, r3, #24
 8004f3e:	4990      	ldr	r1, [pc, #576]	; (8005180 <HAL_RCC_OscConfig+0x578>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f44:	e040      	b.n	8004fc8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d023      	beq.n	8004f96 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f4e:	4b8c      	ldr	r3, [pc, #560]	; (8005180 <HAL_RCC_OscConfig+0x578>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a8b      	ldr	r2, [pc, #556]	; (8005180 <HAL_RCC_OscConfig+0x578>)
 8004f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5a:	f7fd ffb9 	bl	8002ed0 <HAL_GetTick>
 8004f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f60:	e008      	b.n	8004f74 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f62:	f7fd ffb5 	bl	8002ed0 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e264      	b.n	800543e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f74:	4b82      	ldr	r3, [pc, #520]	; (8005180 <HAL_RCC_OscConfig+0x578>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d0f0      	beq.n	8004f62 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f80:	4b7f      	ldr	r3, [pc, #508]	; (8005180 <HAL_RCC_OscConfig+0x578>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	061b      	lsls	r3, r3, #24
 8004f8e:	497c      	ldr	r1, [pc, #496]	; (8005180 <HAL_RCC_OscConfig+0x578>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	604b      	str	r3, [r1, #4]
 8004f94:	e018      	b.n	8004fc8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f96:	4b7a      	ldr	r3, [pc, #488]	; (8005180 <HAL_RCC_OscConfig+0x578>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a79      	ldr	r2, [pc, #484]	; (8005180 <HAL_RCC_OscConfig+0x578>)
 8004f9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa2:	f7fd ff95 	bl	8002ed0 <HAL_GetTick>
 8004fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fa8:	e008      	b.n	8004fbc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004faa:	f7fd ff91 	bl	8002ed0 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e240      	b.n	800543e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fbc:	4b70      	ldr	r3, [pc, #448]	; (8005180 <HAL_RCC_OscConfig+0x578>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1f0      	bne.n	8004faa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0308 	and.w	r3, r3, #8
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d03c      	beq.n	800504e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d01c      	beq.n	8005016 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fdc:	4b68      	ldr	r3, [pc, #416]	; (8005180 <HAL_RCC_OscConfig+0x578>)
 8004fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fe2:	4a67      	ldr	r2, [pc, #412]	; (8005180 <HAL_RCC_OscConfig+0x578>)
 8004fe4:	f043 0301 	orr.w	r3, r3, #1
 8004fe8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fec:	f7fd ff70 	bl	8002ed0 <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ff4:	f7fd ff6c 	bl	8002ed0 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e21b      	b.n	800543e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005006:	4b5e      	ldr	r3, [pc, #376]	; (8005180 <HAL_RCC_OscConfig+0x578>)
 8005008:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0ef      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x3ec>
 8005014:	e01b      	b.n	800504e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005016:	4b5a      	ldr	r3, [pc, #360]	; (8005180 <HAL_RCC_OscConfig+0x578>)
 8005018:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800501c:	4a58      	ldr	r2, [pc, #352]	; (8005180 <HAL_RCC_OscConfig+0x578>)
 800501e:	f023 0301 	bic.w	r3, r3, #1
 8005022:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005026:	f7fd ff53 	bl	8002ed0 <HAL_GetTick>
 800502a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800502c:	e008      	b.n	8005040 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800502e:	f7fd ff4f 	bl	8002ed0 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	2b02      	cmp	r3, #2
 800503a:	d901      	bls.n	8005040 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e1fe      	b.n	800543e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005040:	4b4f      	ldr	r3, [pc, #316]	; (8005180 <HAL_RCC_OscConfig+0x578>)
 8005042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1ef      	bne.n	800502e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0304 	and.w	r3, r3, #4
 8005056:	2b00      	cmp	r3, #0
 8005058:	f000 80a6 	beq.w	80051a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800505c:	2300      	movs	r3, #0
 800505e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005060:	4b47      	ldr	r3, [pc, #284]	; (8005180 <HAL_RCC_OscConfig+0x578>)
 8005062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10d      	bne.n	8005088 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800506c:	4b44      	ldr	r3, [pc, #272]	; (8005180 <HAL_RCC_OscConfig+0x578>)
 800506e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005070:	4a43      	ldr	r2, [pc, #268]	; (8005180 <HAL_RCC_OscConfig+0x578>)
 8005072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005076:	6593      	str	r3, [r2, #88]	; 0x58
 8005078:	4b41      	ldr	r3, [pc, #260]	; (8005180 <HAL_RCC_OscConfig+0x578>)
 800507a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005080:	60bb      	str	r3, [r7, #8]
 8005082:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005084:	2301      	movs	r3, #1
 8005086:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005088:	4b3e      	ldr	r3, [pc, #248]	; (8005184 <HAL_RCC_OscConfig+0x57c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005090:	2b00      	cmp	r3, #0
 8005092:	d118      	bne.n	80050c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005094:	4b3b      	ldr	r3, [pc, #236]	; (8005184 <HAL_RCC_OscConfig+0x57c>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a3a      	ldr	r2, [pc, #232]	; (8005184 <HAL_RCC_OscConfig+0x57c>)
 800509a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800509e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050a0:	f7fd ff16 	bl	8002ed0 <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050a8:	f7fd ff12 	bl	8002ed0 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e1c1      	b.n	800543e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050ba:	4b32      	ldr	r3, [pc, #200]	; (8005184 <HAL_RCC_OscConfig+0x57c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d108      	bne.n	80050e0 <HAL_RCC_OscConfig+0x4d8>
 80050ce:	4b2c      	ldr	r3, [pc, #176]	; (8005180 <HAL_RCC_OscConfig+0x578>)
 80050d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d4:	4a2a      	ldr	r2, [pc, #168]	; (8005180 <HAL_RCC_OscConfig+0x578>)
 80050d6:	f043 0301 	orr.w	r3, r3, #1
 80050da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050de:	e024      	b.n	800512a <HAL_RCC_OscConfig+0x522>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	2b05      	cmp	r3, #5
 80050e6:	d110      	bne.n	800510a <HAL_RCC_OscConfig+0x502>
 80050e8:	4b25      	ldr	r3, [pc, #148]	; (8005180 <HAL_RCC_OscConfig+0x578>)
 80050ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ee:	4a24      	ldr	r2, [pc, #144]	; (8005180 <HAL_RCC_OscConfig+0x578>)
 80050f0:	f043 0304 	orr.w	r3, r3, #4
 80050f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050f8:	4b21      	ldr	r3, [pc, #132]	; (8005180 <HAL_RCC_OscConfig+0x578>)
 80050fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fe:	4a20      	ldr	r2, [pc, #128]	; (8005180 <HAL_RCC_OscConfig+0x578>)
 8005100:	f043 0301 	orr.w	r3, r3, #1
 8005104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005108:	e00f      	b.n	800512a <HAL_RCC_OscConfig+0x522>
 800510a:	4b1d      	ldr	r3, [pc, #116]	; (8005180 <HAL_RCC_OscConfig+0x578>)
 800510c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005110:	4a1b      	ldr	r2, [pc, #108]	; (8005180 <HAL_RCC_OscConfig+0x578>)
 8005112:	f023 0301 	bic.w	r3, r3, #1
 8005116:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800511a:	4b19      	ldr	r3, [pc, #100]	; (8005180 <HAL_RCC_OscConfig+0x578>)
 800511c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005120:	4a17      	ldr	r2, [pc, #92]	; (8005180 <HAL_RCC_OscConfig+0x578>)
 8005122:	f023 0304 	bic.w	r3, r3, #4
 8005126:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d016      	beq.n	8005160 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005132:	f7fd fecd 	bl	8002ed0 <HAL_GetTick>
 8005136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005138:	e00a      	b.n	8005150 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800513a:	f7fd fec9 	bl	8002ed0 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	f241 3288 	movw	r2, #5000	; 0x1388
 8005148:	4293      	cmp	r3, r2
 800514a:	d901      	bls.n	8005150 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e176      	b.n	800543e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005150:	4b0b      	ldr	r3, [pc, #44]	; (8005180 <HAL_RCC_OscConfig+0x578>)
 8005152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d0ed      	beq.n	800513a <HAL_RCC_OscConfig+0x532>
 800515e:	e01a      	b.n	8005196 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005160:	f7fd feb6 	bl	8002ed0 <HAL_GetTick>
 8005164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005166:	e00f      	b.n	8005188 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005168:	f7fd feb2 	bl	8002ed0 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	f241 3288 	movw	r2, #5000	; 0x1388
 8005176:	4293      	cmp	r3, r2
 8005178:	d906      	bls.n	8005188 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e15f      	b.n	800543e <HAL_RCC_OscConfig+0x836>
 800517e:	bf00      	nop
 8005180:	40021000 	.word	0x40021000
 8005184:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005188:	4baa      	ldr	r3, [pc, #680]	; (8005434 <HAL_RCC_OscConfig+0x82c>)
 800518a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1e8      	bne.n	8005168 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005196:	7ffb      	ldrb	r3, [r7, #31]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d105      	bne.n	80051a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800519c:	4ba5      	ldr	r3, [pc, #660]	; (8005434 <HAL_RCC_OscConfig+0x82c>)
 800519e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a0:	4aa4      	ldr	r2, [pc, #656]	; (8005434 <HAL_RCC_OscConfig+0x82c>)
 80051a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0320 	and.w	r3, r3, #32
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d03c      	beq.n	800522e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d01c      	beq.n	80051f6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80051bc:	4b9d      	ldr	r3, [pc, #628]	; (8005434 <HAL_RCC_OscConfig+0x82c>)
 80051be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051c2:	4a9c      	ldr	r2, [pc, #624]	; (8005434 <HAL_RCC_OscConfig+0x82c>)
 80051c4:	f043 0301 	orr.w	r3, r3, #1
 80051c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051cc:	f7fd fe80 	bl	8002ed0 <HAL_GetTick>
 80051d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051d4:	f7fd fe7c 	bl	8002ed0 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e12b      	b.n	800543e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051e6:	4b93      	ldr	r3, [pc, #588]	; (8005434 <HAL_RCC_OscConfig+0x82c>)
 80051e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d0ef      	beq.n	80051d4 <HAL_RCC_OscConfig+0x5cc>
 80051f4:	e01b      	b.n	800522e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80051f6:	4b8f      	ldr	r3, [pc, #572]	; (8005434 <HAL_RCC_OscConfig+0x82c>)
 80051f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051fc:	4a8d      	ldr	r2, [pc, #564]	; (8005434 <HAL_RCC_OscConfig+0x82c>)
 80051fe:	f023 0301 	bic.w	r3, r3, #1
 8005202:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005206:	f7fd fe63 	bl	8002ed0 <HAL_GetTick>
 800520a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800520c:	e008      	b.n	8005220 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800520e:	f7fd fe5f 	bl	8002ed0 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	2b02      	cmp	r3, #2
 800521a:	d901      	bls.n	8005220 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e10e      	b.n	800543e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005220:	4b84      	ldr	r3, [pc, #528]	; (8005434 <HAL_RCC_OscConfig+0x82c>)
 8005222:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1ef      	bne.n	800520e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005232:	2b00      	cmp	r3, #0
 8005234:	f000 8102 	beq.w	800543c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523c:	2b02      	cmp	r3, #2
 800523e:	f040 80c5 	bne.w	80053cc <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005242:	4b7c      	ldr	r3, [pc, #496]	; (8005434 <HAL_RCC_OscConfig+0x82c>)
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f003 0203 	and.w	r2, r3, #3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005252:	429a      	cmp	r2, r3
 8005254:	d12c      	bne.n	80052b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005260:	3b01      	subs	r3, #1
 8005262:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005264:	429a      	cmp	r2, r3
 8005266:	d123      	bne.n	80052b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005272:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005274:	429a      	cmp	r2, r3
 8005276:	d11b      	bne.n	80052b0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005282:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005284:	429a      	cmp	r2, r3
 8005286:	d113      	bne.n	80052b0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005292:	085b      	lsrs	r3, r3, #1
 8005294:	3b01      	subs	r3, #1
 8005296:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005298:	429a      	cmp	r2, r3
 800529a:	d109      	bne.n	80052b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	085b      	lsrs	r3, r3, #1
 80052a8:	3b01      	subs	r3, #1
 80052aa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d067      	beq.n	8005380 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	2b0c      	cmp	r3, #12
 80052b4:	d062      	beq.n	800537c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80052b6:	4b5f      	ldr	r3, [pc, #380]	; (8005434 <HAL_RCC_OscConfig+0x82c>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e0bb      	b.n	800543e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80052c6:	4b5b      	ldr	r3, [pc, #364]	; (8005434 <HAL_RCC_OscConfig+0x82c>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a5a      	ldr	r2, [pc, #360]	; (8005434 <HAL_RCC_OscConfig+0x82c>)
 80052cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052d0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80052d2:	f7fd fdfd 	bl	8002ed0 <HAL_GetTick>
 80052d6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052d8:	e008      	b.n	80052ec <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052da:	f7fd fdf9 	bl	8002ed0 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d901      	bls.n	80052ec <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e0a8      	b.n	800543e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052ec:	4b51      	ldr	r3, [pc, #324]	; (8005434 <HAL_RCC_OscConfig+0x82c>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1f0      	bne.n	80052da <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052f8:	4b4e      	ldr	r3, [pc, #312]	; (8005434 <HAL_RCC_OscConfig+0x82c>)
 80052fa:	68da      	ldr	r2, [r3, #12]
 80052fc:	4b4e      	ldr	r3, [pc, #312]	; (8005438 <HAL_RCC_OscConfig+0x830>)
 80052fe:	4013      	ands	r3, r2
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005308:	3a01      	subs	r2, #1
 800530a:	0112      	lsls	r2, r2, #4
 800530c:	4311      	orrs	r1, r2
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005312:	0212      	lsls	r2, r2, #8
 8005314:	4311      	orrs	r1, r2
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800531a:	0852      	lsrs	r2, r2, #1
 800531c:	3a01      	subs	r2, #1
 800531e:	0552      	lsls	r2, r2, #21
 8005320:	4311      	orrs	r1, r2
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005326:	0852      	lsrs	r2, r2, #1
 8005328:	3a01      	subs	r2, #1
 800532a:	0652      	lsls	r2, r2, #25
 800532c:	4311      	orrs	r1, r2
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005332:	06d2      	lsls	r2, r2, #27
 8005334:	430a      	orrs	r2, r1
 8005336:	493f      	ldr	r1, [pc, #252]	; (8005434 <HAL_RCC_OscConfig+0x82c>)
 8005338:	4313      	orrs	r3, r2
 800533a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800533c:	4b3d      	ldr	r3, [pc, #244]	; (8005434 <HAL_RCC_OscConfig+0x82c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a3c      	ldr	r2, [pc, #240]	; (8005434 <HAL_RCC_OscConfig+0x82c>)
 8005342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005346:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005348:	4b3a      	ldr	r3, [pc, #232]	; (8005434 <HAL_RCC_OscConfig+0x82c>)
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	4a39      	ldr	r2, [pc, #228]	; (8005434 <HAL_RCC_OscConfig+0x82c>)
 800534e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005352:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005354:	f7fd fdbc 	bl	8002ed0 <HAL_GetTick>
 8005358:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800535a:	e008      	b.n	800536e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800535c:	f7fd fdb8 	bl	8002ed0 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b02      	cmp	r3, #2
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e067      	b.n	800543e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800536e:	4b31      	ldr	r3, [pc, #196]	; (8005434 <HAL_RCC_OscConfig+0x82c>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d0f0      	beq.n	800535c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800537a:	e05f      	b.n	800543c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e05e      	b.n	800543e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005380:	4b2c      	ldr	r3, [pc, #176]	; (8005434 <HAL_RCC_OscConfig+0x82c>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d157      	bne.n	800543c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800538c:	4b29      	ldr	r3, [pc, #164]	; (8005434 <HAL_RCC_OscConfig+0x82c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a28      	ldr	r2, [pc, #160]	; (8005434 <HAL_RCC_OscConfig+0x82c>)
 8005392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005396:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005398:	4b26      	ldr	r3, [pc, #152]	; (8005434 <HAL_RCC_OscConfig+0x82c>)
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	4a25      	ldr	r2, [pc, #148]	; (8005434 <HAL_RCC_OscConfig+0x82c>)
 800539e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80053a4:	f7fd fd94 	bl	8002ed0 <HAL_GetTick>
 80053a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053aa:	e008      	b.n	80053be <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053ac:	f7fd fd90 	bl	8002ed0 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d901      	bls.n	80053be <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e03f      	b.n	800543e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053be:	4b1d      	ldr	r3, [pc, #116]	; (8005434 <HAL_RCC_OscConfig+0x82c>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d0f0      	beq.n	80053ac <HAL_RCC_OscConfig+0x7a4>
 80053ca:	e037      	b.n	800543c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	2b0c      	cmp	r3, #12
 80053d0:	d02d      	beq.n	800542e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053d2:	4b18      	ldr	r3, [pc, #96]	; (8005434 <HAL_RCC_OscConfig+0x82c>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a17      	ldr	r2, [pc, #92]	; (8005434 <HAL_RCC_OscConfig+0x82c>)
 80053d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053dc:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053de:	4b15      	ldr	r3, [pc, #84]	; (8005434 <HAL_RCC_OscConfig+0x82c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d105      	bne.n	80053f6 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80053ea:	4b12      	ldr	r3, [pc, #72]	; (8005434 <HAL_RCC_OscConfig+0x82c>)
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	4a11      	ldr	r2, [pc, #68]	; (8005434 <HAL_RCC_OscConfig+0x82c>)
 80053f0:	f023 0303 	bic.w	r3, r3, #3
 80053f4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80053f6:	4b0f      	ldr	r3, [pc, #60]	; (8005434 <HAL_RCC_OscConfig+0x82c>)
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	4a0e      	ldr	r2, [pc, #56]	; (8005434 <HAL_RCC_OscConfig+0x82c>)
 80053fc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005404:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005406:	f7fd fd63 	bl	8002ed0 <HAL_GetTick>
 800540a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800540c:	e008      	b.n	8005420 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800540e:	f7fd fd5f 	bl	8002ed0 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	2b02      	cmp	r3, #2
 800541a:	d901      	bls.n	8005420 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e00e      	b.n	800543e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005420:	4b04      	ldr	r3, [pc, #16]	; (8005434 <HAL_RCC_OscConfig+0x82c>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1f0      	bne.n	800540e <HAL_RCC_OscConfig+0x806>
 800542c:	e006      	b.n	800543c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e005      	b.n	800543e <HAL_RCC_OscConfig+0x836>
 8005432:	bf00      	nop
 8005434:	40021000 	.word	0x40021000
 8005438:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3720      	adds	r7, #32
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop

08005448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e0c8      	b.n	80055ee <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800545c:	4b66      	ldr	r3, [pc, #408]	; (80055f8 <HAL_RCC_ClockConfig+0x1b0>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0307 	and.w	r3, r3, #7
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	429a      	cmp	r2, r3
 8005468:	d910      	bls.n	800548c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800546a:	4b63      	ldr	r3, [pc, #396]	; (80055f8 <HAL_RCC_ClockConfig+0x1b0>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f023 0207 	bic.w	r2, r3, #7
 8005472:	4961      	ldr	r1, [pc, #388]	; (80055f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	4313      	orrs	r3, r2
 8005478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800547a:	4b5f      	ldr	r3, [pc, #380]	; (80055f8 <HAL_RCC_ClockConfig+0x1b0>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0307 	and.w	r3, r3, #7
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	429a      	cmp	r2, r3
 8005486:	d001      	beq.n	800548c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e0b0      	b.n	80055ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	2b00      	cmp	r3, #0
 8005496:	d04c      	beq.n	8005532 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	2b03      	cmp	r3, #3
 800549e:	d107      	bne.n	80054b0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054a0:	4b56      	ldr	r3, [pc, #344]	; (80055fc <HAL_RCC_ClockConfig+0x1b4>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d121      	bne.n	80054f0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e09e      	b.n	80055ee <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d107      	bne.n	80054c8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054b8:	4b50      	ldr	r3, [pc, #320]	; (80055fc <HAL_RCC_ClockConfig+0x1b4>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d115      	bne.n	80054f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e092      	b.n	80055ee <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d107      	bne.n	80054e0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80054d0:	4b4a      	ldr	r3, [pc, #296]	; (80055fc <HAL_RCC_ClockConfig+0x1b4>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d109      	bne.n	80054f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e086      	b.n	80055ee <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054e0:	4b46      	ldr	r3, [pc, #280]	; (80055fc <HAL_RCC_ClockConfig+0x1b4>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e07e      	b.n	80055ee <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054f0:	4b42      	ldr	r3, [pc, #264]	; (80055fc <HAL_RCC_ClockConfig+0x1b4>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f023 0203 	bic.w	r2, r3, #3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	493f      	ldr	r1, [pc, #252]	; (80055fc <HAL_RCC_ClockConfig+0x1b4>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005502:	f7fd fce5 	bl	8002ed0 <HAL_GetTick>
 8005506:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005508:	e00a      	b.n	8005520 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800550a:	f7fd fce1 	bl	8002ed0 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	f241 3288 	movw	r2, #5000	; 0x1388
 8005518:	4293      	cmp	r3, r2
 800551a:	d901      	bls.n	8005520 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e066      	b.n	80055ee <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005520:	4b36      	ldr	r3, [pc, #216]	; (80055fc <HAL_RCC_ClockConfig+0x1b4>)
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f003 020c 	and.w	r2, r3, #12
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	429a      	cmp	r2, r3
 8005530:	d1eb      	bne.n	800550a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d008      	beq.n	8005550 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800553e:	4b2f      	ldr	r3, [pc, #188]	; (80055fc <HAL_RCC_ClockConfig+0x1b4>)
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	492c      	ldr	r1, [pc, #176]	; (80055fc <HAL_RCC_ClockConfig+0x1b4>)
 800554c:	4313      	orrs	r3, r2
 800554e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005550:	4b29      	ldr	r3, [pc, #164]	; (80055f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	429a      	cmp	r2, r3
 800555c:	d210      	bcs.n	8005580 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800555e:	4b26      	ldr	r3, [pc, #152]	; (80055f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f023 0207 	bic.w	r2, r3, #7
 8005566:	4924      	ldr	r1, [pc, #144]	; (80055f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	4313      	orrs	r3, r2
 800556c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800556e:	4b22      	ldr	r3, [pc, #136]	; (80055f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	429a      	cmp	r2, r3
 800557a:	d001      	beq.n	8005580 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e036      	b.n	80055ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0304 	and.w	r3, r3, #4
 8005588:	2b00      	cmp	r3, #0
 800558a:	d008      	beq.n	800559e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800558c:	4b1b      	ldr	r3, [pc, #108]	; (80055fc <HAL_RCC_ClockConfig+0x1b4>)
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	4918      	ldr	r1, [pc, #96]	; (80055fc <HAL_RCC_ClockConfig+0x1b4>)
 800559a:	4313      	orrs	r3, r2
 800559c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0308 	and.w	r3, r3, #8
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d009      	beq.n	80055be <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055aa:	4b14      	ldr	r3, [pc, #80]	; (80055fc <HAL_RCC_ClockConfig+0x1b4>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	00db      	lsls	r3, r3, #3
 80055b8:	4910      	ldr	r1, [pc, #64]	; (80055fc <HAL_RCC_ClockConfig+0x1b4>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80055be:	f000 f825 	bl	800560c <HAL_RCC_GetSysClockFreq>
 80055c2:	4602      	mov	r2, r0
 80055c4:	4b0d      	ldr	r3, [pc, #52]	; (80055fc <HAL_RCC_ClockConfig+0x1b4>)
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	091b      	lsrs	r3, r3, #4
 80055ca:	f003 030f 	and.w	r3, r3, #15
 80055ce:	490c      	ldr	r1, [pc, #48]	; (8005600 <HAL_RCC_ClockConfig+0x1b8>)
 80055d0:	5ccb      	ldrb	r3, [r1, r3]
 80055d2:	f003 031f 	and.w	r3, r3, #31
 80055d6:	fa22 f303 	lsr.w	r3, r2, r3
 80055da:	4a0a      	ldr	r2, [pc, #40]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 80055dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80055de:	4b0a      	ldr	r3, [pc, #40]	; (8005608 <HAL_RCC_ClockConfig+0x1c0>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7fd fc24 	bl	8002e30 <HAL_InitTick>
 80055e8:	4603      	mov	r3, r0
 80055ea:	72fb      	strb	r3, [r7, #11]

  return status;
 80055ec:	7afb      	ldrb	r3, [r7, #11]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	40022000 	.word	0x40022000
 80055fc:	40021000 	.word	0x40021000
 8005600:	08008e18 	.word	0x08008e18
 8005604:	2000000c 	.word	0x2000000c
 8005608:	20000010 	.word	0x20000010

0800560c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800560c:	b480      	push	{r7}
 800560e:	b089      	sub	sp, #36	; 0x24
 8005610:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005612:	2300      	movs	r3, #0
 8005614:	61fb      	str	r3, [r7, #28]
 8005616:	2300      	movs	r3, #0
 8005618:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800561a:	4b3e      	ldr	r3, [pc, #248]	; (8005714 <HAL_RCC_GetSysClockFreq+0x108>)
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f003 030c 	and.w	r3, r3, #12
 8005622:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005624:	4b3b      	ldr	r3, [pc, #236]	; (8005714 <HAL_RCC_GetSysClockFreq+0x108>)
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f003 0303 	and.w	r3, r3, #3
 800562c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d005      	beq.n	8005640 <HAL_RCC_GetSysClockFreq+0x34>
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	2b0c      	cmp	r3, #12
 8005638:	d121      	bne.n	800567e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d11e      	bne.n	800567e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005640:	4b34      	ldr	r3, [pc, #208]	; (8005714 <HAL_RCC_GetSysClockFreq+0x108>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0308 	and.w	r3, r3, #8
 8005648:	2b00      	cmp	r3, #0
 800564a:	d107      	bne.n	800565c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800564c:	4b31      	ldr	r3, [pc, #196]	; (8005714 <HAL_RCC_GetSysClockFreq+0x108>)
 800564e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005652:	0a1b      	lsrs	r3, r3, #8
 8005654:	f003 030f 	and.w	r3, r3, #15
 8005658:	61fb      	str	r3, [r7, #28]
 800565a:	e005      	b.n	8005668 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800565c:	4b2d      	ldr	r3, [pc, #180]	; (8005714 <HAL_RCC_GetSysClockFreq+0x108>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	091b      	lsrs	r3, r3, #4
 8005662:	f003 030f 	and.w	r3, r3, #15
 8005666:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005668:	4a2b      	ldr	r2, [pc, #172]	; (8005718 <HAL_RCC_GetSysClockFreq+0x10c>)
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005670:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10d      	bne.n	8005694 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800567c:	e00a      	b.n	8005694 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	2b04      	cmp	r3, #4
 8005682:	d102      	bne.n	800568a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005684:	4b25      	ldr	r3, [pc, #148]	; (800571c <HAL_RCC_GetSysClockFreq+0x110>)
 8005686:	61bb      	str	r3, [r7, #24]
 8005688:	e004      	b.n	8005694 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	2b08      	cmp	r3, #8
 800568e:	d101      	bne.n	8005694 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005690:	4b23      	ldr	r3, [pc, #140]	; (8005720 <HAL_RCC_GetSysClockFreq+0x114>)
 8005692:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	2b0c      	cmp	r3, #12
 8005698:	d134      	bne.n	8005704 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800569a:	4b1e      	ldr	r3, [pc, #120]	; (8005714 <HAL_RCC_GetSysClockFreq+0x108>)
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d003      	beq.n	80056b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	2b03      	cmp	r3, #3
 80056ae:	d003      	beq.n	80056b8 <HAL_RCC_GetSysClockFreq+0xac>
 80056b0:	e005      	b.n	80056be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80056b2:	4b1a      	ldr	r3, [pc, #104]	; (800571c <HAL_RCC_GetSysClockFreq+0x110>)
 80056b4:	617b      	str	r3, [r7, #20]
      break;
 80056b6:	e005      	b.n	80056c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80056b8:	4b19      	ldr	r3, [pc, #100]	; (8005720 <HAL_RCC_GetSysClockFreq+0x114>)
 80056ba:	617b      	str	r3, [r7, #20]
      break;
 80056bc:	e002      	b.n	80056c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	617b      	str	r3, [r7, #20]
      break;
 80056c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80056c4:	4b13      	ldr	r3, [pc, #76]	; (8005714 <HAL_RCC_GetSysClockFreq+0x108>)
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	091b      	lsrs	r3, r3, #4
 80056ca:	f003 0307 	and.w	r3, r3, #7
 80056ce:	3301      	adds	r3, #1
 80056d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80056d2:	4b10      	ldr	r3, [pc, #64]	; (8005714 <HAL_RCC_GetSysClockFreq+0x108>)
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	0a1b      	lsrs	r3, r3, #8
 80056d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	fb02 f203 	mul.w	r2, r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056ea:	4b0a      	ldr	r3, [pc, #40]	; (8005714 <HAL_RCC_GetSysClockFreq+0x108>)
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	0e5b      	lsrs	r3, r3, #25
 80056f0:	f003 0303 	and.w	r3, r3, #3
 80056f4:	3301      	adds	r3, #1
 80056f6:	005b      	lsls	r3, r3, #1
 80056f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005702:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005704:	69bb      	ldr	r3, [r7, #24]
}
 8005706:	4618      	mov	r0, r3
 8005708:	3724      	adds	r7, #36	; 0x24
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	40021000 	.word	0x40021000
 8005718:	08008e30 	.word	0x08008e30
 800571c:	00f42400 	.word	0x00f42400
 8005720:	007a1200 	.word	0x007a1200

08005724 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005724:	b480      	push	{r7}
 8005726:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005728:	4b03      	ldr	r3, [pc, #12]	; (8005738 <HAL_RCC_GetHCLKFreq+0x14>)
 800572a:	681b      	ldr	r3, [r3, #0]
}
 800572c:	4618      	mov	r0, r3
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	2000000c 	.word	0x2000000c

0800573c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005740:	f7ff fff0 	bl	8005724 <HAL_RCC_GetHCLKFreq>
 8005744:	4602      	mov	r2, r0
 8005746:	4b06      	ldr	r3, [pc, #24]	; (8005760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	0a1b      	lsrs	r3, r3, #8
 800574c:	f003 0307 	and.w	r3, r3, #7
 8005750:	4904      	ldr	r1, [pc, #16]	; (8005764 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005752:	5ccb      	ldrb	r3, [r1, r3]
 8005754:	f003 031f 	and.w	r3, r3, #31
 8005758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800575c:	4618      	mov	r0, r3
 800575e:	bd80      	pop	{r7, pc}
 8005760:	40021000 	.word	0x40021000
 8005764:	08008e28 	.word	0x08008e28

08005768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800576c:	f7ff ffda 	bl	8005724 <HAL_RCC_GetHCLKFreq>
 8005770:	4602      	mov	r2, r0
 8005772:	4b06      	ldr	r3, [pc, #24]	; (800578c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	0adb      	lsrs	r3, r3, #11
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	4904      	ldr	r1, [pc, #16]	; (8005790 <HAL_RCC_GetPCLK2Freq+0x28>)
 800577e:	5ccb      	ldrb	r3, [r1, r3]
 8005780:	f003 031f 	and.w	r3, r3, #31
 8005784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005788:	4618      	mov	r0, r3
 800578a:	bd80      	pop	{r7, pc}
 800578c:	40021000 	.word	0x40021000
 8005790:	08008e28 	.word	0x08008e28

08005794 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800579c:	2300      	movs	r3, #0
 800579e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80057a0:	4b2a      	ldr	r3, [pc, #168]	; (800584c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80057ac:	f7ff f9c8 	bl	8004b40 <HAL_PWREx_GetVoltageRange>
 80057b0:	6178      	str	r0, [r7, #20]
 80057b2:	e014      	b.n	80057de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80057b4:	4b25      	ldr	r3, [pc, #148]	; (800584c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b8:	4a24      	ldr	r2, [pc, #144]	; (800584c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057be:	6593      	str	r3, [r2, #88]	; 0x58
 80057c0:	4b22      	ldr	r3, [pc, #136]	; (800584c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057c8:	60fb      	str	r3, [r7, #12]
 80057ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80057cc:	f7ff f9b8 	bl	8004b40 <HAL_PWREx_GetVoltageRange>
 80057d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80057d2:	4b1e      	ldr	r3, [pc, #120]	; (800584c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d6:	4a1d      	ldr	r2, [pc, #116]	; (800584c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057e4:	d10b      	bne.n	80057fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b80      	cmp	r3, #128	; 0x80
 80057ea:	d919      	bls.n	8005820 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2ba0      	cmp	r3, #160	; 0xa0
 80057f0:	d902      	bls.n	80057f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80057f2:	2302      	movs	r3, #2
 80057f4:	613b      	str	r3, [r7, #16]
 80057f6:	e013      	b.n	8005820 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80057f8:	2301      	movs	r3, #1
 80057fa:	613b      	str	r3, [r7, #16]
 80057fc:	e010      	b.n	8005820 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2b80      	cmp	r3, #128	; 0x80
 8005802:	d902      	bls.n	800580a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005804:	2303      	movs	r3, #3
 8005806:	613b      	str	r3, [r7, #16]
 8005808:	e00a      	b.n	8005820 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b80      	cmp	r3, #128	; 0x80
 800580e:	d102      	bne.n	8005816 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005810:	2302      	movs	r3, #2
 8005812:	613b      	str	r3, [r7, #16]
 8005814:	e004      	b.n	8005820 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b70      	cmp	r3, #112	; 0x70
 800581a:	d101      	bne.n	8005820 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800581c:	2301      	movs	r3, #1
 800581e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005820:	4b0b      	ldr	r3, [pc, #44]	; (8005850 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f023 0207 	bic.w	r2, r3, #7
 8005828:	4909      	ldr	r1, [pc, #36]	; (8005850 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	4313      	orrs	r3, r2
 800582e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005830:	4b07      	ldr	r3, [pc, #28]	; (8005850 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0307 	and.w	r3, r3, #7
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	429a      	cmp	r2, r3
 800583c:	d001      	beq.n	8005842 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e000      	b.n	8005844 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3718      	adds	r7, #24
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	40021000 	.word	0x40021000
 8005850:	40022000 	.word	0x40022000

08005854 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800585c:	2300      	movs	r3, #0
 800585e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005860:	2300      	movs	r3, #0
 8005862:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800586c:	2b00      	cmp	r3, #0
 800586e:	d031      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005874:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005878:	d01a      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800587a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800587e:	d814      	bhi.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005880:	2b00      	cmp	r3, #0
 8005882:	d009      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005884:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005888:	d10f      	bne.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800588a:	4bac      	ldr	r3, [pc, #688]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	4aab      	ldr	r2, [pc, #684]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005894:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005896:	e00c      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	3304      	adds	r3, #4
 800589c:	2100      	movs	r1, #0
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 f9cc 	bl	8005c3c <RCCEx_PLLSAI1_Config>
 80058a4:	4603      	mov	r3, r0
 80058a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80058a8:	e003      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	74fb      	strb	r3, [r7, #19]
      break;
 80058ae:	e000      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80058b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058b2:	7cfb      	ldrb	r3, [r7, #19]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10b      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058b8:	4ba0      	ldr	r3, [pc, #640]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80058ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c6:	499d      	ldr	r1, [pc, #628]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80058ce:	e001      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d0:	7cfb      	ldrb	r3, [r7, #19]
 80058d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 8099 	beq.w	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058e2:	2300      	movs	r3, #0
 80058e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80058e6:	4b95      	ldr	r3, [pc, #596]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80058e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80058f2:	2301      	movs	r3, #1
 80058f4:	e000      	b.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80058f6:	2300      	movs	r3, #0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00d      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058fc:	4b8f      	ldr	r3, [pc, #572]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80058fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005900:	4a8e      	ldr	r2, [pc, #568]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005906:	6593      	str	r3, [r2, #88]	; 0x58
 8005908:	4b8c      	ldr	r3, [pc, #560]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800590a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800590c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005910:	60bb      	str	r3, [r7, #8]
 8005912:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005914:	2301      	movs	r3, #1
 8005916:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005918:	4b89      	ldr	r3, [pc, #548]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a88      	ldr	r2, [pc, #544]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800591e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005922:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005924:	f7fd fad4 	bl	8002ed0 <HAL_GetTick>
 8005928:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800592a:	e009      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800592c:	f7fd fad0 	bl	8002ed0 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b02      	cmp	r3, #2
 8005938:	d902      	bls.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	74fb      	strb	r3, [r7, #19]
        break;
 800593e:	e005      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005940:	4b7f      	ldr	r3, [pc, #508]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005948:	2b00      	cmp	r3, #0
 800594a:	d0ef      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800594c:	7cfb      	ldrb	r3, [r7, #19]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d155      	bne.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005952:	4b7a      	ldr	r3, [pc, #488]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005958:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800595c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d01e      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	429a      	cmp	r2, r3
 800596c:	d019      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800596e:	4b73      	ldr	r3, [pc, #460]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005978:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800597a:	4b70      	ldr	r3, [pc, #448]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800597c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005980:	4a6e      	ldr	r2, [pc, #440]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005986:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800598a:	4b6c      	ldr	r3, [pc, #432]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800598c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005990:	4a6a      	ldr	r2, [pc, #424]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005996:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800599a:	4a68      	ldr	r2, [pc, #416]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d016      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ac:	f7fd fa90 	bl	8002ed0 <HAL_GetTick>
 80059b0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059b2:	e00b      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059b4:	f7fd fa8c 	bl	8002ed0 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	f241 3288 	movw	r2, #5000	; 0x1388
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d902      	bls.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	74fb      	strb	r3, [r7, #19]
            break;
 80059ca:	e006      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059cc:	4b5b      	ldr	r3, [pc, #364]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80059ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d0ec      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80059da:	7cfb      	ldrb	r3, [r7, #19]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10b      	bne.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059e0:	4b56      	ldr	r3, [pc, #344]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80059e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ee:	4953      	ldr	r1, [pc, #332]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80059f6:	e004      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059f8:	7cfb      	ldrb	r3, [r7, #19]
 80059fa:	74bb      	strb	r3, [r7, #18]
 80059fc:	e001      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059fe:	7cfb      	ldrb	r3, [r7, #19]
 8005a00:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a02:	7c7b      	ldrb	r3, [r7, #17]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d105      	bne.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a08:	4b4c      	ldr	r3, [pc, #304]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a0c:	4a4b      	ldr	r2, [pc, #300]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a12:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00a      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a20:	4b46      	ldr	r3, [pc, #280]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a26:	f023 0203 	bic.w	r2, r3, #3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	4943      	ldr	r1, [pc, #268]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00a      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a42:	4b3e      	ldr	r3, [pc, #248]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a48:	f023 020c 	bic.w	r2, r3, #12
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a50:	493a      	ldr	r1, [pc, #232]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0320 	and.w	r3, r3, #32
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00a      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a64:	4b35      	ldr	r3, [pc, #212]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a72:	4932      	ldr	r1, [pc, #200]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00a      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a86:	4b2d      	ldr	r3, [pc, #180]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a94:	4929      	ldr	r1, [pc, #164]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00a      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005aa8:	4b24      	ldr	r3, [pc, #144]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab6:	4921      	ldr	r1, [pc, #132]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00a      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005aca:	4b1c      	ldr	r3, [pc, #112]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad8:	4918      	ldr	r1, [pc, #96]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00a      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005aec:	4b13      	ldr	r3, [pc, #76]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afa:	4910      	ldr	r1, [pc, #64]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d02c      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b0e:	4b0b      	ldr	r3, [pc, #44]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b14:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1c:	4907      	ldr	r1, [pc, #28]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b2c:	d10a      	bne.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b2e:	4b03      	ldr	r3, [pc, #12]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	4a02      	ldr	r2, [pc, #8]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005b34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b38:	60d3      	str	r3, [r2, #12]
 8005b3a:	e015      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8005b3c:	40021000 	.word	0x40021000
 8005b40:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b4c:	d10c      	bne.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	3304      	adds	r3, #4
 8005b52:	2101      	movs	r1, #1
 8005b54:	4618      	mov	r0, r3
 8005b56:	f000 f871 	bl	8005c3c <RCCEx_PLLSAI1_Config>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005b5e:	7cfb      	ldrb	r3, [r7, #19]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d001      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8005b64:	7cfb      	ldrb	r3, [r7, #19]
 8005b66:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d028      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b74:	4b30      	ldr	r3, [pc, #192]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b82:	492d      	ldr	r1, [pc, #180]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b92:	d106      	bne.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b94:	4b28      	ldr	r3, [pc, #160]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	4a27      	ldr	r2, [pc, #156]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b9e:	60d3      	str	r3, [r2, #12]
 8005ba0:	e011      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005baa:	d10c      	bne.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	3304      	adds	r3, #4
 8005bb0:	2101      	movs	r1, #1
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 f842 	bl	8005c3c <RCCEx_PLLSAI1_Config>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bbc:	7cfb      	ldrb	r3, [r7, #19]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8005bc2:	7cfb      	ldrb	r3, [r7, #19]
 8005bc4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d01c      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005bd2:	4b19      	ldr	r3, [pc, #100]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005be0:	4915      	ldr	r1, [pc, #84]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bf0:	d10c      	bne.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	3304      	adds	r3, #4
 8005bf6:	2102      	movs	r1, #2
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 f81f 	bl	8005c3c <RCCEx_PLLSAI1_Config>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c02:	7cfb      	ldrb	r3, [r7, #19]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005c08:	7cfb      	ldrb	r3, [r7, #19]
 8005c0a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00a      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005c18:	4b07      	ldr	r3, [pc, #28]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c1e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c26:	4904      	ldr	r1, [pc, #16]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005c2e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	40021000 	.word	0x40021000

08005c3c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c46:	2300      	movs	r3, #0
 8005c48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c4a:	4b74      	ldr	r3, [pc, #464]	; (8005e1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	f003 0303 	and.w	r3, r3, #3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d018      	beq.n	8005c88 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005c56:	4b71      	ldr	r3, [pc, #452]	; (8005e1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	f003 0203 	and.w	r2, r3, #3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d10d      	bne.n	8005c82 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
       ||
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d009      	beq.n	8005c82 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005c6e:	4b6b      	ldr	r3, [pc, #428]	; (8005e1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	091b      	lsrs	r3, r3, #4
 8005c74:	f003 0307 	and.w	r3, r3, #7
 8005c78:	1c5a      	adds	r2, r3, #1
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
       ||
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d047      	beq.n	8005d12 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	73fb      	strb	r3, [r7, #15]
 8005c86:	e044      	b.n	8005d12 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b03      	cmp	r3, #3
 8005c8e:	d018      	beq.n	8005cc2 <RCCEx_PLLSAI1_Config+0x86>
 8005c90:	2b03      	cmp	r3, #3
 8005c92:	d825      	bhi.n	8005ce0 <RCCEx_PLLSAI1_Config+0xa4>
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d002      	beq.n	8005c9e <RCCEx_PLLSAI1_Config+0x62>
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d009      	beq.n	8005cb0 <RCCEx_PLLSAI1_Config+0x74>
 8005c9c:	e020      	b.n	8005ce0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c9e:	4b5f      	ldr	r3, [pc, #380]	; (8005e1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d11d      	bne.n	8005ce6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cae:	e01a      	b.n	8005ce6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005cb0:	4b5a      	ldr	r3, [pc, #360]	; (8005e1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d116      	bne.n	8005cea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cc0:	e013      	b.n	8005cea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005cc2:	4b56      	ldr	r3, [pc, #344]	; (8005e1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10f      	bne.n	8005cee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005cce:	4b53      	ldr	r3, [pc, #332]	; (8005e1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d109      	bne.n	8005cee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005cde:	e006      	b.n	8005cee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ce4:	e004      	b.n	8005cf0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005ce6:	bf00      	nop
 8005ce8:	e002      	b.n	8005cf0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005cea:	bf00      	nop
 8005cec:	e000      	b.n	8005cf0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005cee:	bf00      	nop
    }

    if(status == HAL_OK)
 8005cf0:	7bfb      	ldrb	r3, [r7, #15]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10d      	bne.n	8005d12 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005cf6:	4b49      	ldr	r3, [pc, #292]	; (8005e1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6819      	ldr	r1, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	3b01      	subs	r3, #1
 8005d08:	011b      	lsls	r3, r3, #4
 8005d0a:	430b      	orrs	r3, r1
 8005d0c:	4943      	ldr	r1, [pc, #268]	; (8005e1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005d12:	7bfb      	ldrb	r3, [r7, #15]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d17c      	bne.n	8005e12 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005d18:	4b40      	ldr	r3, [pc, #256]	; (8005e1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a3f      	ldr	r2, [pc, #252]	; (8005e1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d24:	f7fd f8d4 	bl	8002ed0 <HAL_GetTick>
 8005d28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d2a:	e009      	b.n	8005d40 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d2c:	f7fd f8d0 	bl	8002ed0 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d902      	bls.n	8005d40 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	73fb      	strb	r3, [r7, #15]
        break;
 8005d3e:	e005      	b.n	8005d4c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d40:	4b36      	ldr	r3, [pc, #216]	; (8005e1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1ef      	bne.n	8005d2c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005d4c:	7bfb      	ldrb	r3, [r7, #15]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d15f      	bne.n	8005e12 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d110      	bne.n	8005d7a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d58:	4b30      	ldr	r3, [pc, #192]	; (8005e1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005d60:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	6892      	ldr	r2, [r2, #8]
 8005d68:	0211      	lsls	r1, r2, #8
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	68d2      	ldr	r2, [r2, #12]
 8005d6e:	06d2      	lsls	r2, r2, #27
 8005d70:	430a      	orrs	r2, r1
 8005d72:	492a      	ldr	r1, [pc, #168]	; (8005e1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d74:	4313      	orrs	r3, r2
 8005d76:	610b      	str	r3, [r1, #16]
 8005d78:	e027      	b.n	8005dca <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d112      	bne.n	8005da6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d80:	4b26      	ldr	r3, [pc, #152]	; (8005e1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005d88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	6892      	ldr	r2, [r2, #8]
 8005d90:	0211      	lsls	r1, r2, #8
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	6912      	ldr	r2, [r2, #16]
 8005d96:	0852      	lsrs	r2, r2, #1
 8005d98:	3a01      	subs	r2, #1
 8005d9a:	0552      	lsls	r2, r2, #21
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	491f      	ldr	r1, [pc, #124]	; (8005e1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005da0:	4313      	orrs	r3, r2
 8005da2:	610b      	str	r3, [r1, #16]
 8005da4:	e011      	b.n	8005dca <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005da6:	4b1d      	ldr	r3, [pc, #116]	; (8005e1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005dae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	6892      	ldr	r2, [r2, #8]
 8005db6:	0211      	lsls	r1, r2, #8
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	6952      	ldr	r2, [r2, #20]
 8005dbc:	0852      	lsrs	r2, r2, #1
 8005dbe:	3a01      	subs	r2, #1
 8005dc0:	0652      	lsls	r2, r2, #25
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	4915      	ldr	r1, [pc, #84]	; (8005e1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005dca:	4b14      	ldr	r3, [pc, #80]	; (8005e1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a13      	ldr	r2, [pc, #76]	; (8005e1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dd0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005dd4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dd6:	f7fd f87b 	bl	8002ed0 <HAL_GetTick>
 8005dda:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ddc:	e009      	b.n	8005df2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005dde:	f7fd f877 	bl	8002ed0 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d902      	bls.n	8005df2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	73fb      	strb	r3, [r7, #15]
          break;
 8005df0:	e005      	b.n	8005dfe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005df2:	4b0a      	ldr	r3, [pc, #40]	; (8005e1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d0ef      	beq.n	8005dde <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005dfe:	7bfb      	ldrb	r3, [r7, #15]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d106      	bne.n	8005e12 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005e04:	4b05      	ldr	r3, [pc, #20]	; (8005e1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e06:	691a      	ldr	r2, [r3, #16]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	4903      	ldr	r1, [pc, #12]	; (8005e1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	40021000 	.word	0x40021000

08005e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d101      	bne.n	8005e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e049      	b.n	8005ec6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d106      	bne.n	8005e4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f7fc fdde 	bl	8002a08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	3304      	adds	r3, #4
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	4610      	mov	r0, r2
 8005e60:	f000 fcee 	bl	8006840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
	...

08005ed0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d001      	beq.n	8005ee8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e03b      	b.n	8005f60 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2202      	movs	r2, #2
 8005eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68da      	ldr	r2, [r3, #12]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f042 0201 	orr.w	r2, r2, #1
 8005efe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a19      	ldr	r2, [pc, #100]	; (8005f6c <HAL_TIM_Base_Start_IT+0x9c>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d009      	beq.n	8005f1e <HAL_TIM_Base_Start_IT+0x4e>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f12:	d004      	beq.n	8005f1e <HAL_TIM_Base_Start_IT+0x4e>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a15      	ldr	r2, [pc, #84]	; (8005f70 <HAL_TIM_Base_Start_IT+0xa0>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d115      	bne.n	8005f4a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	689a      	ldr	r2, [r3, #8]
 8005f24:	4b13      	ldr	r3, [pc, #76]	; (8005f74 <HAL_TIM_Base_Start_IT+0xa4>)
 8005f26:	4013      	ands	r3, r2
 8005f28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2b06      	cmp	r3, #6
 8005f2e:	d015      	beq.n	8005f5c <HAL_TIM_Base_Start_IT+0x8c>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f36:	d011      	beq.n	8005f5c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f042 0201 	orr.w	r2, r2, #1
 8005f46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f48:	e008      	b.n	8005f5c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f042 0201 	orr.w	r2, r2, #1
 8005f58:	601a      	str	r2, [r3, #0]
 8005f5a:	e000      	b.n	8005f5e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3714      	adds	r7, #20
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	40012c00 	.word	0x40012c00
 8005f70:	40014000 	.word	0x40014000
 8005f74:	00010007 	.word	0x00010007

08005f78 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e049      	b.n	800601e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d106      	bne.n	8005fa4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7fc fd0e 	bl	80029c0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	3304      	adds	r3, #4
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	4610      	mov	r0, r2
 8005fb8:	f000 fc42 	bl	8006840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b082      	sub	sp, #8
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e049      	b.n	80060cc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b00      	cmp	r3, #0
 8006042:	d106      	bne.n	8006052 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f7fc fc97 	bl	8002980 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2202      	movs	r2, #2
 8006056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	3304      	adds	r3, #4
 8006062:	4619      	mov	r1, r3
 8006064:	4610      	mov	r0, r2
 8006066:	f000 fbeb 	bl	8006840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d109      	bne.n	80060f8 <HAL_TIM_PWM_Start+0x24>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	bf14      	ite	ne
 80060f0:	2301      	movne	r3, #1
 80060f2:	2300      	moveq	r3, #0
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	e03c      	b.n	8006172 <HAL_TIM_PWM_Start+0x9e>
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	2b04      	cmp	r3, #4
 80060fc:	d109      	bne.n	8006112 <HAL_TIM_PWM_Start+0x3e>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b01      	cmp	r3, #1
 8006108:	bf14      	ite	ne
 800610a:	2301      	movne	r3, #1
 800610c:	2300      	moveq	r3, #0
 800610e:	b2db      	uxtb	r3, r3
 8006110:	e02f      	b.n	8006172 <HAL_TIM_PWM_Start+0x9e>
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	2b08      	cmp	r3, #8
 8006116:	d109      	bne.n	800612c <HAL_TIM_PWM_Start+0x58>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800611e:	b2db      	uxtb	r3, r3
 8006120:	2b01      	cmp	r3, #1
 8006122:	bf14      	ite	ne
 8006124:	2301      	movne	r3, #1
 8006126:	2300      	moveq	r3, #0
 8006128:	b2db      	uxtb	r3, r3
 800612a:	e022      	b.n	8006172 <HAL_TIM_PWM_Start+0x9e>
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	2b0c      	cmp	r3, #12
 8006130:	d109      	bne.n	8006146 <HAL_TIM_PWM_Start+0x72>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b01      	cmp	r3, #1
 800613c:	bf14      	ite	ne
 800613e:	2301      	movne	r3, #1
 8006140:	2300      	moveq	r3, #0
 8006142:	b2db      	uxtb	r3, r3
 8006144:	e015      	b.n	8006172 <HAL_TIM_PWM_Start+0x9e>
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2b10      	cmp	r3, #16
 800614a:	d109      	bne.n	8006160 <HAL_TIM_PWM_Start+0x8c>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b01      	cmp	r3, #1
 8006156:	bf14      	ite	ne
 8006158:	2301      	movne	r3, #1
 800615a:	2300      	moveq	r3, #0
 800615c:	b2db      	uxtb	r3, r3
 800615e:	e008      	b.n	8006172 <HAL_TIM_PWM_Start+0x9e>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006166:	b2db      	uxtb	r3, r3
 8006168:	2b01      	cmp	r3, #1
 800616a:	bf14      	ite	ne
 800616c:	2301      	movne	r3, #1
 800616e:	2300      	moveq	r3, #0
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e07e      	b.n	8006278 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d104      	bne.n	800618a <HAL_TIM_PWM_Start+0xb6>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2202      	movs	r2, #2
 8006184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006188:	e023      	b.n	80061d2 <HAL_TIM_PWM_Start+0xfe>
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	2b04      	cmp	r3, #4
 800618e:	d104      	bne.n	800619a <HAL_TIM_PWM_Start+0xc6>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2202      	movs	r2, #2
 8006194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006198:	e01b      	b.n	80061d2 <HAL_TIM_PWM_Start+0xfe>
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	2b08      	cmp	r3, #8
 800619e:	d104      	bne.n	80061aa <HAL_TIM_PWM_Start+0xd6>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2202      	movs	r2, #2
 80061a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061a8:	e013      	b.n	80061d2 <HAL_TIM_PWM_Start+0xfe>
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2b0c      	cmp	r3, #12
 80061ae:	d104      	bne.n	80061ba <HAL_TIM_PWM_Start+0xe6>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2202      	movs	r2, #2
 80061b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061b8:	e00b      	b.n	80061d2 <HAL_TIM_PWM_Start+0xfe>
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2b10      	cmp	r3, #16
 80061be:	d104      	bne.n	80061ca <HAL_TIM_PWM_Start+0xf6>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2202      	movs	r2, #2
 80061c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061c8:	e003      	b.n	80061d2 <HAL_TIM_PWM_Start+0xfe>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2202      	movs	r2, #2
 80061ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2201      	movs	r2, #1
 80061d8:	6839      	ldr	r1, [r7, #0]
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 fe12 	bl	8006e04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a26      	ldr	r2, [pc, #152]	; (8006280 <HAL_TIM_PWM_Start+0x1ac>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d009      	beq.n	80061fe <HAL_TIM_PWM_Start+0x12a>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a25      	ldr	r2, [pc, #148]	; (8006284 <HAL_TIM_PWM_Start+0x1b0>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d004      	beq.n	80061fe <HAL_TIM_PWM_Start+0x12a>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a23      	ldr	r2, [pc, #140]	; (8006288 <HAL_TIM_PWM_Start+0x1b4>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d101      	bne.n	8006202 <HAL_TIM_PWM_Start+0x12e>
 80061fe:	2301      	movs	r3, #1
 8006200:	e000      	b.n	8006204 <HAL_TIM_PWM_Start+0x130>
 8006202:	2300      	movs	r3, #0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d007      	beq.n	8006218 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006216:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a18      	ldr	r2, [pc, #96]	; (8006280 <HAL_TIM_PWM_Start+0x1ac>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d009      	beq.n	8006236 <HAL_TIM_PWM_Start+0x162>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800622a:	d004      	beq.n	8006236 <HAL_TIM_PWM_Start+0x162>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a14      	ldr	r2, [pc, #80]	; (8006284 <HAL_TIM_PWM_Start+0x1b0>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d115      	bne.n	8006262 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	689a      	ldr	r2, [r3, #8]
 800623c:	4b13      	ldr	r3, [pc, #76]	; (800628c <HAL_TIM_PWM_Start+0x1b8>)
 800623e:	4013      	ands	r3, r2
 8006240:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2b06      	cmp	r3, #6
 8006246:	d015      	beq.n	8006274 <HAL_TIM_PWM_Start+0x1a0>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800624e:	d011      	beq.n	8006274 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f042 0201 	orr.w	r2, r2, #1
 800625e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006260:	e008      	b.n	8006274 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f042 0201 	orr.w	r2, r2, #1
 8006270:	601a      	str	r2, [r3, #0]
 8006272:	e000      	b.n	8006276 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006274:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	40012c00 	.word	0x40012c00
 8006284:	40014000 	.word	0x40014000
 8006288:	40014400 	.word	0x40014400
 800628c:	00010007 	.word	0x00010007

08006290 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	f003 0302 	and.w	r3, r3, #2
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d122      	bne.n	80062ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	f003 0302 	and.w	r3, r3, #2
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d11b      	bne.n	80062ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f06f 0202 	mvn.w	r2, #2
 80062bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	f003 0303 	and.w	r3, r3, #3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 fa96 	bl	8006804 <HAL_TIM_IC_CaptureCallback>
 80062d8:	e005      	b.n	80062e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fa88 	bl	80067f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 fa99 	bl	8006818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	f003 0304 	and.w	r3, r3, #4
 80062f6:	2b04      	cmp	r3, #4
 80062f8:	d122      	bne.n	8006340 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	f003 0304 	and.w	r3, r3, #4
 8006304:	2b04      	cmp	r3, #4
 8006306:	d11b      	bne.n	8006340 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f06f 0204 	mvn.w	r2, #4
 8006310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2202      	movs	r2, #2
 8006316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006322:	2b00      	cmp	r3, #0
 8006324:	d003      	beq.n	800632e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fa6c 	bl	8006804 <HAL_TIM_IC_CaptureCallback>
 800632c:	e005      	b.n	800633a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fa5e 	bl	80067f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 fa6f 	bl	8006818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	f003 0308 	and.w	r3, r3, #8
 800634a:	2b08      	cmp	r3, #8
 800634c:	d122      	bne.n	8006394 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	f003 0308 	and.w	r3, r3, #8
 8006358:	2b08      	cmp	r3, #8
 800635a:	d11b      	bne.n	8006394 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f06f 0208 	mvn.w	r2, #8
 8006364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2204      	movs	r2, #4
 800636a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	69db      	ldr	r3, [r3, #28]
 8006372:	f003 0303 	and.w	r3, r3, #3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d003      	beq.n	8006382 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 fa42 	bl	8006804 <HAL_TIM_IC_CaptureCallback>
 8006380:	e005      	b.n	800638e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 fa34 	bl	80067f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 fa45 	bl	8006818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	f003 0310 	and.w	r3, r3, #16
 800639e:	2b10      	cmp	r3, #16
 80063a0:	d122      	bne.n	80063e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	f003 0310 	and.w	r3, r3, #16
 80063ac:	2b10      	cmp	r3, #16
 80063ae:	d11b      	bne.n	80063e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f06f 0210 	mvn.w	r2, #16
 80063b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2208      	movs	r2, #8
 80063be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	69db      	ldr	r3, [r3, #28]
 80063c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d003      	beq.n	80063d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fa18 	bl	8006804 <HAL_TIM_IC_CaptureCallback>
 80063d4:	e005      	b.n	80063e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 fa0a 	bl	80067f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 fa1b 	bl	8006818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d10e      	bne.n	8006414 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	2b01      	cmp	r3, #1
 8006402:	d107      	bne.n	8006414 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f06f 0201 	mvn.w	r2, #1
 800640c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f9e4 	bl	80067dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800641e:	2b80      	cmp	r3, #128	; 0x80
 8006420:	d10e      	bne.n	8006440 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800642c:	2b80      	cmp	r3, #128	; 0x80
 800642e:	d107      	bne.n	8006440 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 fdf0 	bl	8007020 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800644a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800644e:	d10e      	bne.n	800646e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800645a:	2b80      	cmp	r3, #128	; 0x80
 800645c:	d107      	bne.n	800646e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 fde3 	bl	8007034 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006478:	2b40      	cmp	r3, #64	; 0x40
 800647a:	d10e      	bne.n	800649a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006486:	2b40      	cmp	r3, #64	; 0x40
 8006488:	d107      	bne.n	800649a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 f9c9 	bl	800682c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	f003 0320 	and.w	r3, r3, #32
 80064a4:	2b20      	cmp	r3, #32
 80064a6:	d10e      	bne.n	80064c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	f003 0320 	and.w	r3, r3, #32
 80064b2:	2b20      	cmp	r3, #32
 80064b4:	d107      	bne.n	80064c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f06f 0220 	mvn.w	r2, #32
 80064be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 fda3 	bl	800700c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064c6:	bf00      	nop
 80064c8:	3708      	adds	r7, #8
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
	...

080064d0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d101      	bne.n	80064ea <HAL_TIM_OC_ConfigChannel+0x1a>
 80064e6:	2302      	movs	r3, #2
 80064e8:	e064      	b.n	80065b4 <HAL_TIM_OC_ConfigChannel+0xe4>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2b14      	cmp	r3, #20
 80064f6:	d857      	bhi.n	80065a8 <HAL_TIM_OC_ConfigChannel+0xd8>
 80064f8:	a201      	add	r2, pc, #4	; (adr r2, 8006500 <HAL_TIM_OC_ConfigChannel+0x30>)
 80064fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fe:	bf00      	nop
 8006500:	08006555 	.word	0x08006555
 8006504:	080065a9 	.word	0x080065a9
 8006508:	080065a9 	.word	0x080065a9
 800650c:	080065a9 	.word	0x080065a9
 8006510:	08006563 	.word	0x08006563
 8006514:	080065a9 	.word	0x080065a9
 8006518:	080065a9 	.word	0x080065a9
 800651c:	080065a9 	.word	0x080065a9
 8006520:	08006571 	.word	0x08006571
 8006524:	080065a9 	.word	0x080065a9
 8006528:	080065a9 	.word	0x080065a9
 800652c:	080065a9 	.word	0x080065a9
 8006530:	0800657f 	.word	0x0800657f
 8006534:	080065a9 	.word	0x080065a9
 8006538:	080065a9 	.word	0x080065a9
 800653c:	080065a9 	.word	0x080065a9
 8006540:	0800658d 	.word	0x0800658d
 8006544:	080065a9 	.word	0x080065a9
 8006548:	080065a9 	.word	0x080065a9
 800654c:	080065a9 	.word	0x080065a9
 8006550:	0800659b 	.word	0x0800659b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68b9      	ldr	r1, [r7, #8]
 800655a:	4618      	mov	r0, r3
 800655c:	f000 f9d4 	bl	8006908 <TIM_OC1_SetConfig>
      break;
 8006560:	e023      	b.n	80065aa <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68b9      	ldr	r1, [r7, #8]
 8006568:	4618      	mov	r0, r3
 800656a:	f000 fa49 	bl	8006a00 <TIM_OC2_SetConfig>
      break;
 800656e:	e01c      	b.n	80065aa <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68b9      	ldr	r1, [r7, #8]
 8006576:	4618      	mov	r0, r3
 8006578:	f000 fabc 	bl	8006af4 <TIM_OC3_SetConfig>
      break;
 800657c:	e015      	b.n	80065aa <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68b9      	ldr	r1, [r7, #8]
 8006584:	4618      	mov	r0, r3
 8006586:	f000 fb2d 	bl	8006be4 <TIM_OC4_SetConfig>
      break;
 800658a:	e00e      	b.n	80065aa <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68b9      	ldr	r1, [r7, #8]
 8006592:	4618      	mov	r0, r3
 8006594:	f000 fb84 	bl	8006ca0 <TIM_OC5_SetConfig>
      break;
 8006598:	e007      	b.n	80065aa <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68b9      	ldr	r1, [r7, #8]
 80065a0:	4618      	mov	r0, r3
 80065a2:	f000 fbd5 	bl	8006d50 <TIM_OC6_SetConfig>
      break;
 80065a6:	e000      	b.n	80065aa <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 80065a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d101      	bne.n	80065d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80065d2:	2302      	movs	r3, #2
 80065d4:	e0fd      	b.n	80067d2 <HAL_TIM_PWM_ConfigChannel+0x216>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2b14      	cmp	r3, #20
 80065e2:	f200 80f0 	bhi.w	80067c6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80065e6:	a201      	add	r2, pc, #4	; (adr r2, 80065ec <HAL_TIM_PWM_ConfigChannel+0x30>)
 80065e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ec:	08006641 	.word	0x08006641
 80065f0:	080067c7 	.word	0x080067c7
 80065f4:	080067c7 	.word	0x080067c7
 80065f8:	080067c7 	.word	0x080067c7
 80065fc:	08006681 	.word	0x08006681
 8006600:	080067c7 	.word	0x080067c7
 8006604:	080067c7 	.word	0x080067c7
 8006608:	080067c7 	.word	0x080067c7
 800660c:	080066c3 	.word	0x080066c3
 8006610:	080067c7 	.word	0x080067c7
 8006614:	080067c7 	.word	0x080067c7
 8006618:	080067c7 	.word	0x080067c7
 800661c:	08006703 	.word	0x08006703
 8006620:	080067c7 	.word	0x080067c7
 8006624:	080067c7 	.word	0x080067c7
 8006628:	080067c7 	.word	0x080067c7
 800662c:	08006745 	.word	0x08006745
 8006630:	080067c7 	.word	0x080067c7
 8006634:	080067c7 	.word	0x080067c7
 8006638:	080067c7 	.word	0x080067c7
 800663c:	08006785 	.word	0x08006785
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68b9      	ldr	r1, [r7, #8]
 8006646:	4618      	mov	r0, r3
 8006648:	f000 f95e 	bl	8006908 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	699a      	ldr	r2, [r3, #24]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f042 0208 	orr.w	r2, r2, #8
 800665a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	699a      	ldr	r2, [r3, #24]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f022 0204 	bic.w	r2, r2, #4
 800666a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6999      	ldr	r1, [r3, #24]
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	691a      	ldr	r2, [r3, #16]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	430a      	orrs	r2, r1
 800667c:	619a      	str	r2, [r3, #24]
      break;
 800667e:	e0a3      	b.n	80067c8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68b9      	ldr	r1, [r7, #8]
 8006686:	4618      	mov	r0, r3
 8006688:	f000 f9ba 	bl	8006a00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	699a      	ldr	r2, [r3, #24]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800669a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	699a      	ldr	r2, [r3, #24]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6999      	ldr	r1, [r3, #24]
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	021a      	lsls	r2, r3, #8
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	430a      	orrs	r2, r1
 80066be:	619a      	str	r2, [r3, #24]
      break;
 80066c0:	e082      	b.n	80067c8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68b9      	ldr	r1, [r7, #8]
 80066c8:	4618      	mov	r0, r3
 80066ca:	f000 fa13 	bl	8006af4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	69da      	ldr	r2, [r3, #28]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f042 0208 	orr.w	r2, r2, #8
 80066dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	69da      	ldr	r2, [r3, #28]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 0204 	bic.w	r2, r2, #4
 80066ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	69d9      	ldr	r1, [r3, #28]
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	691a      	ldr	r2, [r3, #16]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	430a      	orrs	r2, r1
 80066fe:	61da      	str	r2, [r3, #28]
      break;
 8006700:	e062      	b.n	80067c8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68b9      	ldr	r1, [r7, #8]
 8006708:	4618      	mov	r0, r3
 800670a:	f000 fa6b 	bl	8006be4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	69da      	ldr	r2, [r3, #28]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800671c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	69da      	ldr	r2, [r3, #28]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800672c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	69d9      	ldr	r1, [r3, #28]
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	021a      	lsls	r2, r3, #8
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	61da      	str	r2, [r3, #28]
      break;
 8006742:	e041      	b.n	80067c8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68b9      	ldr	r1, [r7, #8]
 800674a:	4618      	mov	r0, r3
 800674c:	f000 faa8 	bl	8006ca0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f042 0208 	orr.w	r2, r2, #8
 800675e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f022 0204 	bic.w	r2, r2, #4
 800676e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	691a      	ldr	r2, [r3, #16]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	430a      	orrs	r2, r1
 8006780:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006782:	e021      	b.n	80067c8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68b9      	ldr	r1, [r7, #8]
 800678a:	4618      	mov	r0, r3
 800678c:	f000 fae0 	bl	8006d50 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800679e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	021a      	lsls	r2, r3, #8
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	430a      	orrs	r2, r1
 80067c2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80067c4:	e000      	b.n	80067c8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80067c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop

080067dc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800680c:	bf00      	nop
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a2a      	ldr	r2, [pc, #168]	; (80068fc <TIM_Base_SetConfig+0xbc>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d003      	beq.n	8006860 <TIM_Base_SetConfig+0x20>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800685e:	d108      	bne.n	8006872 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006866:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	4313      	orrs	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a21      	ldr	r2, [pc, #132]	; (80068fc <TIM_Base_SetConfig+0xbc>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d00b      	beq.n	8006892 <TIM_Base_SetConfig+0x52>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006880:	d007      	beq.n	8006892 <TIM_Base_SetConfig+0x52>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a1e      	ldr	r2, [pc, #120]	; (8006900 <TIM_Base_SetConfig+0xc0>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d003      	beq.n	8006892 <TIM_Base_SetConfig+0x52>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a1d      	ldr	r2, [pc, #116]	; (8006904 <TIM_Base_SetConfig+0xc4>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d108      	bne.n	80068a4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006898:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	689a      	ldr	r2, [r3, #8]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a0c      	ldr	r2, [pc, #48]	; (80068fc <TIM_Base_SetConfig+0xbc>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d007      	beq.n	80068e0 <TIM_Base_SetConfig+0xa0>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a0b      	ldr	r2, [pc, #44]	; (8006900 <TIM_Base_SetConfig+0xc0>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d003      	beq.n	80068e0 <TIM_Base_SetConfig+0xa0>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a0a      	ldr	r2, [pc, #40]	; (8006904 <TIM_Base_SetConfig+0xc4>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d103      	bne.n	80068e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	691a      	ldr	r2, [r3, #16]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	615a      	str	r2, [r3, #20]
}
 80068ee:	bf00      	nop
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	40012c00 	.word	0x40012c00
 8006900:	40014000 	.word	0x40014000
 8006904:	40014400 	.word	0x40014400

08006908 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006908:	b480      	push	{r7}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	f023 0201 	bic.w	r2, r3, #1
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800693a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f023 0303 	bic.w	r3, r3, #3
 8006942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	4313      	orrs	r3, r2
 800694c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	f023 0302 	bic.w	r3, r3, #2
 8006954:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	4313      	orrs	r3, r2
 800695e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a24      	ldr	r2, [pc, #144]	; (80069f4 <TIM_OC1_SetConfig+0xec>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d007      	beq.n	8006978 <TIM_OC1_SetConfig+0x70>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a23      	ldr	r2, [pc, #140]	; (80069f8 <TIM_OC1_SetConfig+0xf0>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d003      	beq.n	8006978 <TIM_OC1_SetConfig+0x70>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a22      	ldr	r2, [pc, #136]	; (80069fc <TIM_OC1_SetConfig+0xf4>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d10c      	bne.n	8006992 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f023 0308 	bic.w	r3, r3, #8
 800697e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	4313      	orrs	r3, r2
 8006988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	f023 0304 	bic.w	r3, r3, #4
 8006990:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a17      	ldr	r2, [pc, #92]	; (80069f4 <TIM_OC1_SetConfig+0xec>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d007      	beq.n	80069aa <TIM_OC1_SetConfig+0xa2>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a16      	ldr	r2, [pc, #88]	; (80069f8 <TIM_OC1_SetConfig+0xf0>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d003      	beq.n	80069aa <TIM_OC1_SetConfig+0xa2>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a15      	ldr	r2, [pc, #84]	; (80069fc <TIM_OC1_SetConfig+0xf4>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d111      	bne.n	80069ce <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	693a      	ldr	r2, [r7, #16]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	685a      	ldr	r2, [r3, #4]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	621a      	str	r2, [r3, #32]
}
 80069e8:	bf00      	nop
 80069ea:	371c      	adds	r7, #28
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr
 80069f4:	40012c00 	.word	0x40012c00
 80069f8:	40014000 	.word	0x40014000
 80069fc:	40014400 	.word	0x40014400

08006a00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b087      	sub	sp, #28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	f023 0210 	bic.w	r2, r3, #16
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	021b      	lsls	r3, r3, #8
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	f023 0320 	bic.w	r3, r3, #32
 8006a4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	011b      	lsls	r3, r3, #4
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a22      	ldr	r2, [pc, #136]	; (8006ae8 <TIM_OC2_SetConfig+0xe8>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d10d      	bne.n	8006a80 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	011b      	lsls	r3, r3, #4
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a19      	ldr	r2, [pc, #100]	; (8006ae8 <TIM_OC2_SetConfig+0xe8>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d007      	beq.n	8006a98 <TIM_OC2_SetConfig+0x98>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a18      	ldr	r2, [pc, #96]	; (8006aec <TIM_OC2_SetConfig+0xec>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d003      	beq.n	8006a98 <TIM_OC2_SetConfig+0x98>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a17      	ldr	r2, [pc, #92]	; (8006af0 <TIM_OC2_SetConfig+0xf0>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d113      	bne.n	8006ac0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006aa6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	695b      	ldr	r3, [r3, #20]
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	621a      	str	r2, [r3, #32]
}
 8006ada:	bf00      	nop
 8006adc:	371c      	adds	r7, #28
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	40012c00 	.word	0x40012c00
 8006aec:	40014000 	.word	0x40014000
 8006af0:	40014400 	.word	0x40014400

08006af4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b087      	sub	sp, #28
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a1b      	ldr	r3, [r3, #32]
 8006b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	69db      	ldr	r3, [r3, #28]
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f023 0303 	bic.w	r3, r3, #3
 8006b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	021b      	lsls	r3, r3, #8
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a21      	ldr	r2, [pc, #132]	; (8006bd8 <TIM_OC3_SetConfig+0xe4>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d10d      	bne.n	8006b72 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	021b      	lsls	r3, r3, #8
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a18      	ldr	r2, [pc, #96]	; (8006bd8 <TIM_OC3_SetConfig+0xe4>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d007      	beq.n	8006b8a <TIM_OC3_SetConfig+0x96>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a17      	ldr	r2, [pc, #92]	; (8006bdc <TIM_OC3_SetConfig+0xe8>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d003      	beq.n	8006b8a <TIM_OC3_SetConfig+0x96>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a16      	ldr	r2, [pc, #88]	; (8006be0 <TIM_OC3_SetConfig+0xec>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d113      	bne.n	8006bb2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	011b      	lsls	r3, r3, #4
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	011b      	lsls	r3, r3, #4
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	685a      	ldr	r2, [r3, #4]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	697a      	ldr	r2, [r7, #20]
 8006bca:	621a      	str	r2, [r3, #32]
}
 8006bcc:	bf00      	nop
 8006bce:	371c      	adds	r7, #28
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr
 8006bd8:	40012c00 	.word	0x40012c00
 8006bdc:	40014000 	.word	0x40014000
 8006be0:	40014400 	.word	0x40014400

08006be4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b087      	sub	sp, #28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	69db      	ldr	r3, [r3, #28]
 8006c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	021b      	lsls	r3, r3, #8
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	031b      	lsls	r3, r3, #12
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a14      	ldr	r2, [pc, #80]	; (8006c94 <TIM_OC4_SetConfig+0xb0>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d007      	beq.n	8006c58 <TIM_OC4_SetConfig+0x74>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a13      	ldr	r2, [pc, #76]	; (8006c98 <TIM_OC4_SetConfig+0xb4>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d003      	beq.n	8006c58 <TIM_OC4_SetConfig+0x74>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a12      	ldr	r2, [pc, #72]	; (8006c9c <TIM_OC4_SetConfig+0xb8>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d109      	bne.n	8006c6c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	695b      	ldr	r3, [r3, #20]
 8006c64:	019b      	lsls	r3, r3, #6
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	697a      	ldr	r2, [r7, #20]
 8006c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	693a      	ldr	r2, [r7, #16]
 8006c84:	621a      	str	r2, [r3, #32]
}
 8006c86:	bf00      	nop
 8006c88:	371c      	adds	r7, #28
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	40012c00 	.word	0x40012c00
 8006c98:	40014000 	.word	0x40014000
 8006c9c:	40014400 	.word	0x40014400

08006ca0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b087      	sub	sp, #28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006ce4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	041b      	lsls	r3, r3, #16
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a13      	ldr	r2, [pc, #76]	; (8006d44 <TIM_OC5_SetConfig+0xa4>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d007      	beq.n	8006d0a <TIM_OC5_SetConfig+0x6a>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a12      	ldr	r2, [pc, #72]	; (8006d48 <TIM_OC5_SetConfig+0xa8>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d003      	beq.n	8006d0a <TIM_OC5_SetConfig+0x6a>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a11      	ldr	r2, [pc, #68]	; (8006d4c <TIM_OC5_SetConfig+0xac>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d109      	bne.n	8006d1e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	021b      	lsls	r3, r3, #8
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	685a      	ldr	r2, [r3, #4]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	621a      	str	r2, [r3, #32]
}
 8006d38:	bf00      	nop
 8006d3a:	371c      	adds	r7, #28
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr
 8006d44:	40012c00 	.word	0x40012c00
 8006d48:	40014000 	.word	0x40014000
 8006d4c:	40014400 	.word	0x40014400

08006d50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b087      	sub	sp, #28
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	021b      	lsls	r3, r3, #8
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	051b      	lsls	r3, r3, #20
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a14      	ldr	r2, [pc, #80]	; (8006df8 <TIM_OC6_SetConfig+0xa8>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d007      	beq.n	8006dbc <TIM_OC6_SetConfig+0x6c>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a13      	ldr	r2, [pc, #76]	; (8006dfc <TIM_OC6_SetConfig+0xac>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d003      	beq.n	8006dbc <TIM_OC6_SetConfig+0x6c>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a12      	ldr	r2, [pc, #72]	; (8006e00 <TIM_OC6_SetConfig+0xb0>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d109      	bne.n	8006dd0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	695b      	ldr	r3, [r3, #20]
 8006dc8:	029b      	lsls	r3, r3, #10
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	697a      	ldr	r2, [r7, #20]
 8006dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	685a      	ldr	r2, [r3, #4]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	621a      	str	r2, [r3, #32]
}
 8006dea:	bf00      	nop
 8006dec:	371c      	adds	r7, #28
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	40012c00 	.word	0x40012c00
 8006dfc:	40014000 	.word	0x40014000
 8006e00:	40014400 	.word	0x40014400

08006e04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b087      	sub	sp, #28
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	f003 031f 	and.w	r3, r3, #31
 8006e16:	2201      	movs	r2, #1
 8006e18:	fa02 f303 	lsl.w	r3, r2, r3
 8006e1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6a1a      	ldr	r2, [r3, #32]
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	43db      	mvns	r3, r3
 8006e26:	401a      	ands	r2, r3
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6a1a      	ldr	r2, [r3, #32]
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	f003 031f 	and.w	r3, r3, #31
 8006e36:	6879      	ldr	r1, [r7, #4]
 8006e38:	fa01 f303 	lsl.w	r3, r1, r3
 8006e3c:	431a      	orrs	r2, r3
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	621a      	str	r2, [r3, #32]
}
 8006e42:	bf00      	nop
 8006e44:	371c      	adds	r7, #28
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
	...

08006e50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d101      	bne.n	8006e68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e64:	2302      	movs	r3, #2
 8006e66:	e04f      	b.n	8006f08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2202      	movs	r2, #2
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a21      	ldr	r2, [pc, #132]	; (8006f14 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d108      	bne.n	8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006e98:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a14      	ldr	r2, [pc, #80]	; (8006f14 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d009      	beq.n	8006edc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ed0:	d004      	beq.n	8006edc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a10      	ldr	r2, [pc, #64]	; (8006f18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d10c      	bne.n	8006ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ee2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	68ba      	ldr	r2, [r7, #8]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3714      	adds	r7, #20
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr
 8006f14:	40012c00 	.word	0x40012c00
 8006f18:	40014000 	.word	0x40014000

08006f1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f26:	2300      	movs	r3, #0
 8006f28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d101      	bne.n	8006f38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006f34:	2302      	movs	r3, #2
 8006f36:	e060      	b.n	8006ffa <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	695b      	ldr	r3, [r3, #20]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	041b      	lsls	r3, r3, #16
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a14      	ldr	r2, [pc, #80]	; (8007008 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d115      	bne.n	8006fe8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc6:	051b      	lsls	r3, r3, #20
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	69db      	ldr	r3, [r3, #28]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	6a1b      	ldr	r3, [r3, #32]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3714      	adds	r7, #20
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	40012c00 	.word	0x40012c00

0800700c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007014:	bf00      	nop
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d101      	bne.n	800705a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e040      	b.n	80070dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800705e:	2b00      	cmp	r3, #0
 8007060:	d106      	bne.n	8007070 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7fb fd46 	bl	8002afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2224      	movs	r2, #36	; 0x24
 8007074:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f022 0201 	bic.w	r2, r2, #1
 8007084:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 f92e 	bl	80072e8 <UART_SetConfig>
 800708c:	4603      	mov	r3, r0
 800708e:	2b01      	cmp	r3, #1
 8007090:	d101      	bne.n	8007096 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e022      	b.n	80070dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709a:	2b00      	cmp	r3, #0
 800709c:	d002      	beq.n	80070a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 fb2e 	bl	8007700 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	685a      	ldr	r2, [r3, #4]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	689a      	ldr	r2, [r3, #8]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f042 0201 	orr.w	r2, r2, #1
 80070d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 fbb5 	bl	8007844 <UART_CheckIdleState>
 80070da:	4603      	mov	r3, r0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3708      	adds	r7, #8
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b08a      	sub	sp, #40	; 0x28
 80070e8:	af02      	add	r7, sp, #8
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	603b      	str	r3, [r7, #0]
 80070f0:	4613      	mov	r3, r2
 80070f2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070f8:	2b20      	cmp	r3, #32
 80070fa:	f040 8082 	bne.w	8007202 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d002      	beq.n	800710a <HAL_UART_Transmit+0x26>
 8007104:	88fb      	ldrh	r3, [r7, #6]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d101      	bne.n	800710e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e07a      	b.n	8007204 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007114:	2b01      	cmp	r3, #1
 8007116:	d101      	bne.n	800711c <HAL_UART_Transmit+0x38>
 8007118:	2302      	movs	r3, #2
 800711a:	e073      	b.n	8007204 <HAL_UART_Transmit+0x120>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2221      	movs	r2, #33	; 0x21
 8007130:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007132:	f7fb fecd 	bl	8002ed0 <HAL_GetTick>
 8007136:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	88fa      	ldrh	r2, [r7, #6]
 800713c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	88fa      	ldrh	r2, [r7, #6]
 8007144:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007150:	d108      	bne.n	8007164 <HAL_UART_Transmit+0x80>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d104      	bne.n	8007164 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800715a:	2300      	movs	r3, #0
 800715c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	61bb      	str	r3, [r7, #24]
 8007162:	e003      	b.n	800716c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007168:	2300      	movs	r3, #0
 800716a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007174:	e02d      	b.n	80071d2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	9300      	str	r3, [sp, #0]
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	2200      	movs	r2, #0
 800717e:	2180      	movs	r1, #128	; 0x80
 8007180:	68f8      	ldr	r0, [r7, #12]
 8007182:	f000 fba8 	bl	80078d6 <UART_WaitOnFlagUntilTimeout>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d001      	beq.n	8007190 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	e039      	b.n	8007204 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10b      	bne.n	80071ae <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	881a      	ldrh	r2, [r3, #0]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071a2:	b292      	uxth	r2, r2
 80071a4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	3302      	adds	r3, #2
 80071aa:	61bb      	str	r3, [r7, #24]
 80071ac:	e008      	b.n	80071c0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	781a      	ldrb	r2, [r3, #0]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	b292      	uxth	r2, r2
 80071b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	3301      	adds	r3, #1
 80071be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	3b01      	subs	r3, #1
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80071d8:	b29b      	uxth	r3, r3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1cb      	bne.n	8007176 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	9300      	str	r3, [sp, #0]
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	2200      	movs	r2, #0
 80071e6:	2140      	movs	r1, #64	; 0x40
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f000 fb74 	bl	80078d6 <UART_WaitOnFlagUntilTimeout>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d001      	beq.n	80071f8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	e005      	b.n	8007204 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2220      	movs	r2, #32
 80071fc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80071fe:	2300      	movs	r3, #0
 8007200:	e000      	b.n	8007204 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007202:	2302      	movs	r3, #2
  }
}
 8007204:	4618      	mov	r0, r3
 8007206:	3720      	adds	r7, #32
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	4613      	mov	r3, r2
 8007218:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800721e:	2b20      	cmp	r3, #32
 8007220:	d131      	bne.n	8007286 <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d002      	beq.n	800722e <HAL_UART_Receive_DMA+0x22>
 8007228:	88fb      	ldrh	r3, [r7, #6]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d101      	bne.n	8007232 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e02a      	b.n	8007288 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007238:	2b01      	cmp	r3, #1
 800723a:	d101      	bne.n	8007240 <HAL_UART_Receive_DMA+0x34>
 800723c:	2302      	movs	r3, #2
 800723e:	e023      	b.n	8007288 <HAL_UART_Receive_DMA+0x7c>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a0f      	ldr	r2, [pc, #60]	; (8007290 <HAL_UART_Receive_DMA+0x84>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d00e      	beq.n	8007276 <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007262:	2b00      	cmp	r3, #0
 8007264:	d007      	beq.n	8007276 <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007274:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8007276:	88fb      	ldrh	r3, [r7, #6]
 8007278:	461a      	mov	r2, r3
 800727a:	68b9      	ldr	r1, [r7, #8]
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f000 fba7 	bl	80079d0 <UART_Start_Receive_DMA>
 8007282:	4603      	mov	r3, r0
 8007284:	e000      	b.n	8007288 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8007286:	2302      	movs	r3, #2
  }
}
 8007288:	4618      	mov	r0, r3
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	40008000 	.word	0x40008000

08007294 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800729c:	bf00      	nop
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80072b0:	bf00      	nop
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80072c4:	bf00      	nop
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	460b      	mov	r3, r1
 80072da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80072dc:	bf00      	nop
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072e8:	b5b0      	push	{r4, r5, r7, lr}
 80072ea:	b088      	sub	sp, #32
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072f0:	2300      	movs	r3, #0
 80072f2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	689a      	ldr	r2, [r3, #8]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	431a      	orrs	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	695b      	ldr	r3, [r3, #20]
 8007302:	431a      	orrs	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	69db      	ldr	r3, [r3, #28]
 8007308:	4313      	orrs	r3, r2
 800730a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	4baf      	ldr	r3, [pc, #700]	; (80075d0 <UART_SetConfig+0x2e8>)
 8007314:	4013      	ands	r3, r2
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	6812      	ldr	r2, [r2, #0]
 800731a:	69f9      	ldr	r1, [r7, #28]
 800731c:	430b      	orrs	r3, r1
 800731e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68da      	ldr	r2, [r3, #12]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	430a      	orrs	r2, r1
 8007334:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4aa4      	ldr	r2, [pc, #656]	; (80075d4 <UART_SetConfig+0x2ec>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d004      	beq.n	8007350 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	69fa      	ldr	r2, [r7, #28]
 800734c:	4313      	orrs	r3, r2
 800734e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	69fa      	ldr	r2, [r7, #28]
 8007360:	430a      	orrs	r2, r1
 8007362:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a9b      	ldr	r2, [pc, #620]	; (80075d8 <UART_SetConfig+0x2f0>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d121      	bne.n	80073b2 <UART_SetConfig+0xca>
 800736e:	4b9b      	ldr	r3, [pc, #620]	; (80075dc <UART_SetConfig+0x2f4>)
 8007370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007374:	f003 0303 	and.w	r3, r3, #3
 8007378:	2b03      	cmp	r3, #3
 800737a:	d817      	bhi.n	80073ac <UART_SetConfig+0xc4>
 800737c:	a201      	add	r2, pc, #4	; (adr r2, 8007384 <UART_SetConfig+0x9c>)
 800737e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007382:	bf00      	nop
 8007384:	08007395 	.word	0x08007395
 8007388:	080073a1 	.word	0x080073a1
 800738c:	0800739b 	.word	0x0800739b
 8007390:	080073a7 	.word	0x080073a7
 8007394:	2301      	movs	r3, #1
 8007396:	76fb      	strb	r3, [r7, #27]
 8007398:	e070      	b.n	800747c <UART_SetConfig+0x194>
 800739a:	2302      	movs	r3, #2
 800739c:	76fb      	strb	r3, [r7, #27]
 800739e:	e06d      	b.n	800747c <UART_SetConfig+0x194>
 80073a0:	2304      	movs	r3, #4
 80073a2:	76fb      	strb	r3, [r7, #27]
 80073a4:	e06a      	b.n	800747c <UART_SetConfig+0x194>
 80073a6:	2308      	movs	r3, #8
 80073a8:	76fb      	strb	r3, [r7, #27]
 80073aa:	e067      	b.n	800747c <UART_SetConfig+0x194>
 80073ac:	2310      	movs	r3, #16
 80073ae:	76fb      	strb	r3, [r7, #27]
 80073b0:	e064      	b.n	800747c <UART_SetConfig+0x194>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a8a      	ldr	r2, [pc, #552]	; (80075e0 <UART_SetConfig+0x2f8>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d132      	bne.n	8007422 <UART_SetConfig+0x13a>
 80073bc:	4b87      	ldr	r3, [pc, #540]	; (80075dc <UART_SetConfig+0x2f4>)
 80073be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c2:	f003 030c 	and.w	r3, r3, #12
 80073c6:	2b0c      	cmp	r3, #12
 80073c8:	d828      	bhi.n	800741c <UART_SetConfig+0x134>
 80073ca:	a201      	add	r2, pc, #4	; (adr r2, 80073d0 <UART_SetConfig+0xe8>)
 80073cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d0:	08007405 	.word	0x08007405
 80073d4:	0800741d 	.word	0x0800741d
 80073d8:	0800741d 	.word	0x0800741d
 80073dc:	0800741d 	.word	0x0800741d
 80073e0:	08007411 	.word	0x08007411
 80073e4:	0800741d 	.word	0x0800741d
 80073e8:	0800741d 	.word	0x0800741d
 80073ec:	0800741d 	.word	0x0800741d
 80073f0:	0800740b 	.word	0x0800740b
 80073f4:	0800741d 	.word	0x0800741d
 80073f8:	0800741d 	.word	0x0800741d
 80073fc:	0800741d 	.word	0x0800741d
 8007400:	08007417 	.word	0x08007417
 8007404:	2300      	movs	r3, #0
 8007406:	76fb      	strb	r3, [r7, #27]
 8007408:	e038      	b.n	800747c <UART_SetConfig+0x194>
 800740a:	2302      	movs	r3, #2
 800740c:	76fb      	strb	r3, [r7, #27]
 800740e:	e035      	b.n	800747c <UART_SetConfig+0x194>
 8007410:	2304      	movs	r3, #4
 8007412:	76fb      	strb	r3, [r7, #27]
 8007414:	e032      	b.n	800747c <UART_SetConfig+0x194>
 8007416:	2308      	movs	r3, #8
 8007418:	76fb      	strb	r3, [r7, #27]
 800741a:	e02f      	b.n	800747c <UART_SetConfig+0x194>
 800741c:	2310      	movs	r3, #16
 800741e:	76fb      	strb	r3, [r7, #27]
 8007420:	e02c      	b.n	800747c <UART_SetConfig+0x194>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a6b      	ldr	r2, [pc, #428]	; (80075d4 <UART_SetConfig+0x2ec>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d125      	bne.n	8007478 <UART_SetConfig+0x190>
 800742c:	4b6b      	ldr	r3, [pc, #428]	; (80075dc <UART_SetConfig+0x2f4>)
 800742e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007432:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007436:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800743a:	d017      	beq.n	800746c <UART_SetConfig+0x184>
 800743c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007440:	d817      	bhi.n	8007472 <UART_SetConfig+0x18a>
 8007442:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007446:	d00b      	beq.n	8007460 <UART_SetConfig+0x178>
 8007448:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800744c:	d811      	bhi.n	8007472 <UART_SetConfig+0x18a>
 800744e:	2b00      	cmp	r3, #0
 8007450:	d003      	beq.n	800745a <UART_SetConfig+0x172>
 8007452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007456:	d006      	beq.n	8007466 <UART_SetConfig+0x17e>
 8007458:	e00b      	b.n	8007472 <UART_SetConfig+0x18a>
 800745a:	2300      	movs	r3, #0
 800745c:	76fb      	strb	r3, [r7, #27]
 800745e:	e00d      	b.n	800747c <UART_SetConfig+0x194>
 8007460:	2302      	movs	r3, #2
 8007462:	76fb      	strb	r3, [r7, #27]
 8007464:	e00a      	b.n	800747c <UART_SetConfig+0x194>
 8007466:	2304      	movs	r3, #4
 8007468:	76fb      	strb	r3, [r7, #27]
 800746a:	e007      	b.n	800747c <UART_SetConfig+0x194>
 800746c:	2308      	movs	r3, #8
 800746e:	76fb      	strb	r3, [r7, #27]
 8007470:	e004      	b.n	800747c <UART_SetConfig+0x194>
 8007472:	2310      	movs	r3, #16
 8007474:	76fb      	strb	r3, [r7, #27]
 8007476:	e001      	b.n	800747c <UART_SetConfig+0x194>
 8007478:	2310      	movs	r3, #16
 800747a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a54      	ldr	r2, [pc, #336]	; (80075d4 <UART_SetConfig+0x2ec>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d173      	bne.n	800756e <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007486:	7efb      	ldrb	r3, [r7, #27]
 8007488:	2b08      	cmp	r3, #8
 800748a:	d824      	bhi.n	80074d6 <UART_SetConfig+0x1ee>
 800748c:	a201      	add	r2, pc, #4	; (adr r2, 8007494 <UART_SetConfig+0x1ac>)
 800748e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007492:	bf00      	nop
 8007494:	080074b9 	.word	0x080074b9
 8007498:	080074d7 	.word	0x080074d7
 800749c:	080074c1 	.word	0x080074c1
 80074a0:	080074d7 	.word	0x080074d7
 80074a4:	080074c7 	.word	0x080074c7
 80074a8:	080074d7 	.word	0x080074d7
 80074ac:	080074d7 	.word	0x080074d7
 80074b0:	080074d7 	.word	0x080074d7
 80074b4:	080074cf 	.word	0x080074cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074b8:	f7fe f940 	bl	800573c <HAL_RCC_GetPCLK1Freq>
 80074bc:	6178      	str	r0, [r7, #20]
        break;
 80074be:	e00f      	b.n	80074e0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074c0:	4b48      	ldr	r3, [pc, #288]	; (80075e4 <UART_SetConfig+0x2fc>)
 80074c2:	617b      	str	r3, [r7, #20]
        break;
 80074c4:	e00c      	b.n	80074e0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074c6:	f7fe f8a1 	bl	800560c <HAL_RCC_GetSysClockFreq>
 80074ca:	6178      	str	r0, [r7, #20]
        break;
 80074cc:	e008      	b.n	80074e0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074d2:	617b      	str	r3, [r7, #20]
        break;
 80074d4:	e004      	b.n	80074e0 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 80074d6:	2300      	movs	r3, #0
 80074d8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	76bb      	strb	r3, [r7, #26]
        break;
 80074de:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f000 80fe 	beq.w	80076e4 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	685a      	ldr	r2, [r3, #4]
 80074ec:	4613      	mov	r3, r2
 80074ee:	005b      	lsls	r3, r3, #1
 80074f0:	4413      	add	r3, r2
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d305      	bcc.n	8007504 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80074fe:	697a      	ldr	r2, [r7, #20]
 8007500:	429a      	cmp	r2, r3
 8007502:	d902      	bls.n	800750a <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	76bb      	strb	r3, [r7, #26]
 8007508:	e0ec      	b.n	80076e4 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	4618      	mov	r0, r3
 800750e:	f04f 0100 	mov.w	r1, #0
 8007512:	f04f 0200 	mov.w	r2, #0
 8007516:	f04f 0300 	mov.w	r3, #0
 800751a:	020b      	lsls	r3, r1, #8
 800751c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007520:	0202      	lsls	r2, r0, #8
 8007522:	6879      	ldr	r1, [r7, #4]
 8007524:	6849      	ldr	r1, [r1, #4]
 8007526:	0849      	lsrs	r1, r1, #1
 8007528:	4608      	mov	r0, r1
 800752a:	f04f 0100 	mov.w	r1, #0
 800752e:	1814      	adds	r4, r2, r0
 8007530:	eb43 0501 	adc.w	r5, r3, r1
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	461a      	mov	r2, r3
 800753a:	f04f 0300 	mov.w	r3, #0
 800753e:	4620      	mov	r0, r4
 8007540:	4629      	mov	r1, r5
 8007542:	f7f9 fb13 	bl	8000b6c <__aeabi_uldivmod>
 8007546:	4602      	mov	r2, r0
 8007548:	460b      	mov	r3, r1
 800754a:	4613      	mov	r3, r2
 800754c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007554:	d308      	bcc.n	8007568 <UART_SetConfig+0x280>
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800755c:	d204      	bcs.n	8007568 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	60da      	str	r2, [r3, #12]
 8007566:	e0bd      	b.n	80076e4 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	76bb      	strb	r3, [r7, #26]
 800756c:	e0ba      	b.n	80076e4 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	69db      	ldr	r3, [r3, #28]
 8007572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007576:	d168      	bne.n	800764a <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8007578:	7efb      	ldrb	r3, [r7, #27]
 800757a:	2b08      	cmp	r3, #8
 800757c:	d834      	bhi.n	80075e8 <UART_SetConfig+0x300>
 800757e:	a201      	add	r2, pc, #4	; (adr r2, 8007584 <UART_SetConfig+0x29c>)
 8007580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007584:	080075a9 	.word	0x080075a9
 8007588:	080075b1 	.word	0x080075b1
 800758c:	080075b9 	.word	0x080075b9
 8007590:	080075e9 	.word	0x080075e9
 8007594:	080075bf 	.word	0x080075bf
 8007598:	080075e9 	.word	0x080075e9
 800759c:	080075e9 	.word	0x080075e9
 80075a0:	080075e9 	.word	0x080075e9
 80075a4:	080075c7 	.word	0x080075c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075a8:	f7fe f8c8 	bl	800573c <HAL_RCC_GetPCLK1Freq>
 80075ac:	6178      	str	r0, [r7, #20]
        break;
 80075ae:	e020      	b.n	80075f2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075b0:	f7fe f8da 	bl	8005768 <HAL_RCC_GetPCLK2Freq>
 80075b4:	6178      	str	r0, [r7, #20]
        break;
 80075b6:	e01c      	b.n	80075f2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075b8:	4b0a      	ldr	r3, [pc, #40]	; (80075e4 <UART_SetConfig+0x2fc>)
 80075ba:	617b      	str	r3, [r7, #20]
        break;
 80075bc:	e019      	b.n	80075f2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075be:	f7fe f825 	bl	800560c <HAL_RCC_GetSysClockFreq>
 80075c2:	6178      	str	r0, [r7, #20]
        break;
 80075c4:	e015      	b.n	80075f2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075ca:	617b      	str	r3, [r7, #20]
        break;
 80075cc:	e011      	b.n	80075f2 <UART_SetConfig+0x30a>
 80075ce:	bf00      	nop
 80075d0:	efff69f3 	.word	0xefff69f3
 80075d4:	40008000 	.word	0x40008000
 80075d8:	40013800 	.word	0x40013800
 80075dc:	40021000 	.word	0x40021000
 80075e0:	40004400 	.word	0x40004400
 80075e4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80075e8:	2300      	movs	r3, #0
 80075ea:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	76bb      	strb	r3, [r7, #26]
        break;
 80075f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d075      	beq.n	80076e4 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	005a      	lsls	r2, r3, #1
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	085b      	lsrs	r3, r3, #1
 8007602:	441a      	add	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	fbb2 f3f3 	udiv	r3, r2, r3
 800760c:	b29b      	uxth	r3, r3
 800760e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	2b0f      	cmp	r3, #15
 8007614:	d916      	bls.n	8007644 <UART_SetConfig+0x35c>
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800761c:	d212      	bcs.n	8007644 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	b29b      	uxth	r3, r3
 8007622:	f023 030f 	bic.w	r3, r3, #15
 8007626:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	085b      	lsrs	r3, r3, #1
 800762c:	b29b      	uxth	r3, r3
 800762e:	f003 0307 	and.w	r3, r3, #7
 8007632:	b29a      	uxth	r2, r3
 8007634:	89fb      	ldrh	r3, [r7, #14]
 8007636:	4313      	orrs	r3, r2
 8007638:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	89fa      	ldrh	r2, [r7, #14]
 8007640:	60da      	str	r2, [r3, #12]
 8007642:	e04f      	b.n	80076e4 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	76bb      	strb	r3, [r7, #26]
 8007648:	e04c      	b.n	80076e4 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800764a:	7efb      	ldrb	r3, [r7, #27]
 800764c:	2b08      	cmp	r3, #8
 800764e:	d828      	bhi.n	80076a2 <UART_SetConfig+0x3ba>
 8007650:	a201      	add	r2, pc, #4	; (adr r2, 8007658 <UART_SetConfig+0x370>)
 8007652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007656:	bf00      	nop
 8007658:	0800767d 	.word	0x0800767d
 800765c:	08007685 	.word	0x08007685
 8007660:	0800768d 	.word	0x0800768d
 8007664:	080076a3 	.word	0x080076a3
 8007668:	08007693 	.word	0x08007693
 800766c:	080076a3 	.word	0x080076a3
 8007670:	080076a3 	.word	0x080076a3
 8007674:	080076a3 	.word	0x080076a3
 8007678:	0800769b 	.word	0x0800769b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800767c:	f7fe f85e 	bl	800573c <HAL_RCC_GetPCLK1Freq>
 8007680:	6178      	str	r0, [r7, #20]
        break;
 8007682:	e013      	b.n	80076ac <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007684:	f7fe f870 	bl	8005768 <HAL_RCC_GetPCLK2Freq>
 8007688:	6178      	str	r0, [r7, #20]
        break;
 800768a:	e00f      	b.n	80076ac <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800768c:	4b1b      	ldr	r3, [pc, #108]	; (80076fc <UART_SetConfig+0x414>)
 800768e:	617b      	str	r3, [r7, #20]
        break;
 8007690:	e00c      	b.n	80076ac <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007692:	f7fd ffbb 	bl	800560c <HAL_RCC_GetSysClockFreq>
 8007696:	6178      	str	r0, [r7, #20]
        break;
 8007698:	e008      	b.n	80076ac <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800769a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800769e:	617b      	str	r3, [r7, #20]
        break;
 80076a0:	e004      	b.n	80076ac <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 80076a2:	2300      	movs	r3, #0
 80076a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	76bb      	strb	r3, [r7, #26]
        break;
 80076aa:	bf00      	nop
    }

    if (pclk != 0U)
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d018      	beq.n	80076e4 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	085a      	lsrs	r2, r3, #1
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	441a      	add	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	2b0f      	cmp	r3, #15
 80076cc:	d908      	bls.n	80076e0 <UART_SetConfig+0x3f8>
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076d4:	d204      	bcs.n	80076e0 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	60da      	str	r2, [r3, #12]
 80076de:	e001      	b.n	80076e4 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80076f0:	7ebb      	ldrb	r3, [r7, #26]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3720      	adds	r7, #32
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bdb0      	pop	{r4, r5, r7, pc}
 80076fa:	bf00      	nop
 80076fc:	00f42400 	.word	0x00f42400

08007700 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770c:	f003 0301 	and.w	r3, r3, #1
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00a      	beq.n	800772a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	430a      	orrs	r2, r1
 8007728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772e:	f003 0302 	and.w	r3, r3, #2
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00a      	beq.n	800774c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	430a      	orrs	r2, r1
 800774a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007750:	f003 0304 	and.w	r3, r3, #4
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00a      	beq.n	800776e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	430a      	orrs	r2, r1
 800776c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007772:	f003 0308 	and.w	r3, r3, #8
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00a      	beq.n	8007790 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	430a      	orrs	r2, r1
 800778e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007794:	f003 0310 	and.w	r3, r3, #16
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00a      	beq.n	80077b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	430a      	orrs	r2, r1
 80077b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b6:	f003 0320 	and.w	r3, r3, #32
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00a      	beq.n	80077d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	430a      	orrs	r2, r1
 80077d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d01a      	beq.n	8007816 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	430a      	orrs	r2, r1
 80077f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077fe:	d10a      	bne.n	8007816 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	430a      	orrs	r2, r1
 8007814:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00a      	beq.n	8007838 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	430a      	orrs	r2, r1
 8007836:	605a      	str	r2, [r3, #4]
  }
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b086      	sub	sp, #24
 8007848:	af02      	add	r7, sp, #8
 800784a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007854:	f7fb fb3c 	bl	8002ed0 <HAL_GetTick>
 8007858:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f003 0308 	and.w	r3, r3, #8
 8007864:	2b08      	cmp	r3, #8
 8007866:	d10e      	bne.n	8007886 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007868:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800786c:	9300      	str	r3, [sp, #0]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f82d 	bl	80078d6 <UART_WaitOnFlagUntilTimeout>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d001      	beq.n	8007886 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007882:	2303      	movs	r3, #3
 8007884:	e023      	b.n	80078ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0304 	and.w	r3, r3, #4
 8007890:	2b04      	cmp	r3, #4
 8007892:	d10e      	bne.n	80078b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007894:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007898:	9300      	str	r3, [sp, #0]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f817 	bl	80078d6 <UART_WaitOnFlagUntilTimeout>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d001      	beq.n	80078b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078ae:	2303      	movs	r3, #3
 80078b0:	e00d      	b.n	80078ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2220      	movs	r2, #32
 80078b6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2220      	movs	r2, #32
 80078bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b084      	sub	sp, #16
 80078da:	af00      	add	r7, sp, #0
 80078dc:	60f8      	str	r0, [r7, #12]
 80078de:	60b9      	str	r1, [r7, #8]
 80078e0:	603b      	str	r3, [r7, #0]
 80078e2:	4613      	mov	r3, r2
 80078e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078e6:	e05e      	b.n	80079a6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ee:	d05a      	beq.n	80079a6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078f0:	f7fb faee 	bl	8002ed0 <HAL_GetTick>
 80078f4:	4602      	mov	r2, r0
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	69ba      	ldr	r2, [r7, #24]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d302      	bcc.n	8007906 <UART_WaitOnFlagUntilTimeout+0x30>
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d11b      	bne.n	800793e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007914:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	689a      	ldr	r2, [r3, #8]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f022 0201 	bic.w	r2, r2, #1
 8007924:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2220      	movs	r2, #32
 800792a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2220      	movs	r2, #32
 8007930:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800793a:	2303      	movs	r3, #3
 800793c:	e043      	b.n	80079c6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 0304 	and.w	r3, r3, #4
 8007948:	2b00      	cmp	r3, #0
 800794a:	d02c      	beq.n	80079a6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	69db      	ldr	r3, [r3, #28]
 8007952:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007956:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800795a:	d124      	bne.n	80079a6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007964:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007974:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	689a      	ldr	r2, [r3, #8]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f022 0201 	bic.w	r2, r2, #1
 8007984:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2220      	movs	r2, #32
 800798a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2220      	movs	r2, #32
 8007990:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2220      	movs	r2, #32
 8007996:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80079a2:	2303      	movs	r3, #3
 80079a4:	e00f      	b.n	80079c6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	69da      	ldr	r2, [r3, #28]
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	4013      	ands	r3, r2
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	bf0c      	ite	eq
 80079b6:	2301      	moveq	r3, #1
 80079b8:	2300      	movne	r3, #0
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	461a      	mov	r2, r3
 80079be:	79fb      	ldrb	r3, [r7, #7]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d091      	beq.n	80078e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
	...

080079d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	4613      	mov	r3, r2
 80079dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	68ba      	ldr	r2, [r7, #8]
 80079e2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	88fa      	ldrh	r2, [r7, #6]
 80079e8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2222      	movs	r2, #34	; 0x22
 80079f8:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d02b      	beq.n	8007a5a <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a06:	4a25      	ldr	r2, [pc, #148]	; (8007a9c <UART_Start_Receive_DMA+0xcc>)
 8007a08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a0e:	4a24      	ldr	r2, [pc, #144]	; (8007aa0 <UART_Start_Receive_DMA+0xd0>)
 8007a10:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a16:	4a23      	ldr	r2, [pc, #140]	; (8007aa4 <UART_Start_Receive_DMA+0xd4>)
 8007a18:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a1e:	2200      	movs	r2, #0
 8007a20:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	3324      	adds	r3, #36	; 0x24
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a32:	461a      	mov	r2, r3
 8007a34:	88fb      	ldrh	r3, [r7, #6]
 8007a36:	f7fc fd85 	bl	8004544 <HAL_DMA_Start_IT>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00c      	beq.n	8007a5a <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2210      	movs	r2, #16
 8007a44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2220      	movs	r2, #32
 8007a54:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e01c      	b.n	8007a94 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a70:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	689a      	ldr	r2, [r3, #8]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f042 0201 	orr.w	r2, r2, #1
 8007a80:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	689a      	ldr	r2, [r3, #8]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a90:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3710      	adds	r7, #16
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	08007b31 	.word	0x08007b31
 8007aa0:	08007bc9 	.word	0x08007bc9
 8007aa4:	08007c01 	.word	0x08007c01

08007aa8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007abe:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2220      	movs	r2, #32
 8007ac4:	679a      	str	r2, [r3, #120]	; 0x78
}
 8007ac6:	bf00      	nop
 8007ac8:	370c      	adds	r7, #12
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr

08007ad2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	b083      	sub	sp, #12
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007ae8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	689a      	ldr	r2, [r3, #8]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f022 0201 	bic.w	r2, r2, #1
 8007af8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d107      	bne.n	8007b12 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f022 0210 	bic.w	r2, r2, #16
 8007b10:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2220      	movs	r2, #32
 8007b16:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b3c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 0320 	and.w	r3, r3, #32
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d12a      	bne.n	8007ba2 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b62:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	689a      	ldr	r2, [r3, #8]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f022 0201 	bic.w	r2, r2, #1
 8007b72:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	689a      	ldr	r2, [r3, #8]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b82:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2220      	movs	r2, #32
 8007b88:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d107      	bne.n	8007ba2 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f022 0210 	bic.w	r2, r2, #16
 8007ba0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d107      	bne.n	8007bba <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f7ff fb8c 	bl	80072d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007bb8:	e002      	b.n	8007bc0 <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f7ff fb6a 	bl	8007294 <HAL_UART_RxCpltCallback>
}
 8007bc0:	bf00      	nop
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d109      	bne.n	8007bf2 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007be4:	085b      	lsrs	r3, r3, #1
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	4619      	mov	r1, r3
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f7ff fb70 	bl	80072d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007bf0:	e002      	b.n	8007bf8 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f7ff fb58 	bl	80072a8 <HAL_UART_RxHalfCpltCallback>
}
 8007bf8:	bf00      	nop
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b086      	sub	sp, #24
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c12:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c18:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c24:	2b80      	cmp	r3, #128	; 0x80
 8007c26:	d109      	bne.n	8007c3c <UART_DMAError+0x3c>
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	2b21      	cmp	r3, #33	; 0x21
 8007c2c:	d106      	bne.n	8007c3c <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007c36:	6978      	ldr	r0, [r7, #20]
 8007c38:	f7ff ff36 	bl	8007aa8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c46:	2b40      	cmp	r3, #64	; 0x40
 8007c48:	d109      	bne.n	8007c5e <UART_DMAError+0x5e>
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2b22      	cmp	r3, #34	; 0x22
 8007c4e:	d106      	bne.n	8007c5e <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007c58:	6978      	ldr	r0, [r7, #20]
 8007c5a:	f7ff ff3a 	bl	8007ad2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c64:	f043 0210 	orr.w	r2, r3, #16
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c6e:	6978      	ldr	r0, [r7, #20]
 8007c70:	f7ff fb24 	bl	80072bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c74:	bf00      	nop
 8007c76:	3718      	adds	r7, #24
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <__libc_init_array>:
 8007c7c:	b570      	push	{r4, r5, r6, lr}
 8007c7e:	4d0d      	ldr	r5, [pc, #52]	; (8007cb4 <__libc_init_array+0x38>)
 8007c80:	4c0d      	ldr	r4, [pc, #52]	; (8007cb8 <__libc_init_array+0x3c>)
 8007c82:	1b64      	subs	r4, r4, r5
 8007c84:	10a4      	asrs	r4, r4, #2
 8007c86:	2600      	movs	r6, #0
 8007c88:	42a6      	cmp	r6, r4
 8007c8a:	d109      	bne.n	8007ca0 <__libc_init_array+0x24>
 8007c8c:	4d0b      	ldr	r5, [pc, #44]	; (8007cbc <__libc_init_array+0x40>)
 8007c8e:	4c0c      	ldr	r4, [pc, #48]	; (8007cc0 <__libc_init_array+0x44>)
 8007c90:	f001 f8b4 	bl	8008dfc <_init>
 8007c94:	1b64      	subs	r4, r4, r5
 8007c96:	10a4      	asrs	r4, r4, #2
 8007c98:	2600      	movs	r6, #0
 8007c9a:	42a6      	cmp	r6, r4
 8007c9c:	d105      	bne.n	8007caa <__libc_init_array+0x2e>
 8007c9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ca0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ca4:	4798      	blx	r3
 8007ca6:	3601      	adds	r6, #1
 8007ca8:	e7ee      	b.n	8007c88 <__libc_init_array+0xc>
 8007caa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cae:	4798      	blx	r3
 8007cb0:	3601      	adds	r6, #1
 8007cb2:	e7f2      	b.n	8007c9a <__libc_init_array+0x1e>
 8007cb4:	08009040 	.word	0x08009040
 8007cb8:	08009040 	.word	0x08009040
 8007cbc:	08009040 	.word	0x08009040
 8007cc0:	08009044 	.word	0x08009044

08007cc4 <memcpy>:
 8007cc4:	440a      	add	r2, r1
 8007cc6:	4291      	cmp	r1, r2
 8007cc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ccc:	d100      	bne.n	8007cd0 <memcpy+0xc>
 8007cce:	4770      	bx	lr
 8007cd0:	b510      	push	{r4, lr}
 8007cd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cda:	4291      	cmp	r1, r2
 8007cdc:	d1f9      	bne.n	8007cd2 <memcpy+0xe>
 8007cde:	bd10      	pop	{r4, pc}

08007ce0 <memset>:
 8007ce0:	4402      	add	r2, r0
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d100      	bne.n	8007cea <memset+0xa>
 8007ce8:	4770      	bx	lr
 8007cea:	f803 1b01 	strb.w	r1, [r3], #1
 8007cee:	e7f9      	b.n	8007ce4 <memset+0x4>

08007cf0 <cos>:
 8007cf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007cf2:	ec53 2b10 	vmov	r2, r3, d0
 8007cf6:	4824      	ldr	r0, [pc, #144]	; (8007d88 <cos+0x98>)
 8007cf8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007cfc:	4281      	cmp	r1, r0
 8007cfe:	dc06      	bgt.n	8007d0e <cos+0x1e>
 8007d00:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8007d80 <cos+0x90>
 8007d04:	f000 faa4 	bl	8008250 <__kernel_cos>
 8007d08:	ec51 0b10 	vmov	r0, r1, d0
 8007d0c:	e007      	b.n	8007d1e <cos+0x2e>
 8007d0e:	481f      	ldr	r0, [pc, #124]	; (8007d8c <cos+0x9c>)
 8007d10:	4281      	cmp	r1, r0
 8007d12:	dd09      	ble.n	8007d28 <cos+0x38>
 8007d14:	ee10 0a10 	vmov	r0, s0
 8007d18:	4619      	mov	r1, r3
 8007d1a:	f7f8 fa5d 	bl	80001d8 <__aeabi_dsub>
 8007d1e:	ec41 0b10 	vmov	d0, r0, r1
 8007d22:	b005      	add	sp, #20
 8007d24:	f85d fb04 	ldr.w	pc, [sp], #4
 8007d28:	4668      	mov	r0, sp
 8007d2a:	f000 f885 	bl	8007e38 <__ieee754_rem_pio2>
 8007d2e:	f000 0003 	and.w	r0, r0, #3
 8007d32:	2801      	cmp	r0, #1
 8007d34:	d007      	beq.n	8007d46 <cos+0x56>
 8007d36:	2802      	cmp	r0, #2
 8007d38:	d012      	beq.n	8007d60 <cos+0x70>
 8007d3a:	b9c0      	cbnz	r0, 8007d6e <cos+0x7e>
 8007d3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007d40:	ed9d 0b00 	vldr	d0, [sp]
 8007d44:	e7de      	b.n	8007d04 <cos+0x14>
 8007d46:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007d4a:	ed9d 0b00 	vldr	d0, [sp]
 8007d4e:	f000 fe87 	bl	8008a60 <__kernel_sin>
 8007d52:	ec53 2b10 	vmov	r2, r3, d0
 8007d56:	ee10 0a10 	vmov	r0, s0
 8007d5a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007d5e:	e7de      	b.n	8007d1e <cos+0x2e>
 8007d60:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007d64:	ed9d 0b00 	vldr	d0, [sp]
 8007d68:	f000 fa72 	bl	8008250 <__kernel_cos>
 8007d6c:	e7f1      	b.n	8007d52 <cos+0x62>
 8007d6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007d72:	ed9d 0b00 	vldr	d0, [sp]
 8007d76:	2001      	movs	r0, #1
 8007d78:	f000 fe72 	bl	8008a60 <__kernel_sin>
 8007d7c:	e7c4      	b.n	8007d08 <cos+0x18>
 8007d7e:	bf00      	nop
	...
 8007d88:	3fe921fb 	.word	0x3fe921fb
 8007d8c:	7fefffff 	.word	0x7fefffff

08007d90 <sin>:
 8007d90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d92:	ec53 2b10 	vmov	r2, r3, d0
 8007d96:	4826      	ldr	r0, [pc, #152]	; (8007e30 <sin+0xa0>)
 8007d98:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007d9c:	4281      	cmp	r1, r0
 8007d9e:	dc07      	bgt.n	8007db0 <sin+0x20>
 8007da0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007e28 <sin+0x98>
 8007da4:	2000      	movs	r0, #0
 8007da6:	f000 fe5b 	bl	8008a60 <__kernel_sin>
 8007daa:	ec51 0b10 	vmov	r0, r1, d0
 8007dae:	e007      	b.n	8007dc0 <sin+0x30>
 8007db0:	4820      	ldr	r0, [pc, #128]	; (8007e34 <sin+0xa4>)
 8007db2:	4281      	cmp	r1, r0
 8007db4:	dd09      	ble.n	8007dca <sin+0x3a>
 8007db6:	ee10 0a10 	vmov	r0, s0
 8007dba:	4619      	mov	r1, r3
 8007dbc:	f7f8 fa0c 	bl	80001d8 <__aeabi_dsub>
 8007dc0:	ec41 0b10 	vmov	d0, r0, r1
 8007dc4:	b005      	add	sp, #20
 8007dc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8007dca:	4668      	mov	r0, sp
 8007dcc:	f000 f834 	bl	8007e38 <__ieee754_rem_pio2>
 8007dd0:	f000 0003 	and.w	r0, r0, #3
 8007dd4:	2801      	cmp	r0, #1
 8007dd6:	d008      	beq.n	8007dea <sin+0x5a>
 8007dd8:	2802      	cmp	r0, #2
 8007dda:	d00d      	beq.n	8007df8 <sin+0x68>
 8007ddc:	b9d0      	cbnz	r0, 8007e14 <sin+0x84>
 8007dde:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007de2:	ed9d 0b00 	vldr	d0, [sp]
 8007de6:	2001      	movs	r0, #1
 8007de8:	e7dd      	b.n	8007da6 <sin+0x16>
 8007dea:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007dee:	ed9d 0b00 	vldr	d0, [sp]
 8007df2:	f000 fa2d 	bl	8008250 <__kernel_cos>
 8007df6:	e7d8      	b.n	8007daa <sin+0x1a>
 8007df8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007dfc:	ed9d 0b00 	vldr	d0, [sp]
 8007e00:	2001      	movs	r0, #1
 8007e02:	f000 fe2d 	bl	8008a60 <__kernel_sin>
 8007e06:	ec53 2b10 	vmov	r2, r3, d0
 8007e0a:	ee10 0a10 	vmov	r0, s0
 8007e0e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007e12:	e7d5      	b.n	8007dc0 <sin+0x30>
 8007e14:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007e18:	ed9d 0b00 	vldr	d0, [sp]
 8007e1c:	f000 fa18 	bl	8008250 <__kernel_cos>
 8007e20:	e7f1      	b.n	8007e06 <sin+0x76>
 8007e22:	bf00      	nop
 8007e24:	f3af 8000 	nop.w
	...
 8007e30:	3fe921fb 	.word	0x3fe921fb
 8007e34:	7fefffff 	.word	0x7fefffff

08007e38 <__ieee754_rem_pio2>:
 8007e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3c:	ed2d 8b02 	vpush	{d8}
 8007e40:	ec55 4b10 	vmov	r4, r5, d0
 8007e44:	4bca      	ldr	r3, [pc, #808]	; (8008170 <__ieee754_rem_pio2+0x338>)
 8007e46:	b08b      	sub	sp, #44	; 0x2c
 8007e48:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007e4c:	4598      	cmp	r8, r3
 8007e4e:	4682      	mov	sl, r0
 8007e50:	9502      	str	r5, [sp, #8]
 8007e52:	dc08      	bgt.n	8007e66 <__ieee754_rem_pio2+0x2e>
 8007e54:	2200      	movs	r2, #0
 8007e56:	2300      	movs	r3, #0
 8007e58:	ed80 0b00 	vstr	d0, [r0]
 8007e5c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007e60:	f04f 0b00 	mov.w	fp, #0
 8007e64:	e028      	b.n	8007eb8 <__ieee754_rem_pio2+0x80>
 8007e66:	4bc3      	ldr	r3, [pc, #780]	; (8008174 <__ieee754_rem_pio2+0x33c>)
 8007e68:	4598      	cmp	r8, r3
 8007e6a:	dc78      	bgt.n	8007f5e <__ieee754_rem_pio2+0x126>
 8007e6c:	9b02      	ldr	r3, [sp, #8]
 8007e6e:	4ec2      	ldr	r6, [pc, #776]	; (8008178 <__ieee754_rem_pio2+0x340>)
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	ee10 0a10 	vmov	r0, s0
 8007e76:	a3b0      	add	r3, pc, #704	; (adr r3, 8008138 <__ieee754_rem_pio2+0x300>)
 8007e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7c:	4629      	mov	r1, r5
 8007e7e:	dd39      	ble.n	8007ef4 <__ieee754_rem_pio2+0xbc>
 8007e80:	f7f8 f9aa 	bl	80001d8 <__aeabi_dsub>
 8007e84:	45b0      	cmp	r8, r6
 8007e86:	4604      	mov	r4, r0
 8007e88:	460d      	mov	r5, r1
 8007e8a:	d01b      	beq.n	8007ec4 <__ieee754_rem_pio2+0x8c>
 8007e8c:	a3ac      	add	r3, pc, #688	; (adr r3, 8008140 <__ieee754_rem_pio2+0x308>)
 8007e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e92:	f7f8 f9a1 	bl	80001d8 <__aeabi_dsub>
 8007e96:	4602      	mov	r2, r0
 8007e98:	460b      	mov	r3, r1
 8007e9a:	e9ca 2300 	strd	r2, r3, [sl]
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	4629      	mov	r1, r5
 8007ea2:	f7f8 f999 	bl	80001d8 <__aeabi_dsub>
 8007ea6:	a3a6      	add	r3, pc, #664	; (adr r3, 8008140 <__ieee754_rem_pio2+0x308>)
 8007ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eac:	f7f8 f994 	bl	80001d8 <__aeabi_dsub>
 8007eb0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007eb4:	f04f 0b01 	mov.w	fp, #1
 8007eb8:	4658      	mov	r0, fp
 8007eba:	b00b      	add	sp, #44	; 0x2c
 8007ebc:	ecbd 8b02 	vpop	{d8}
 8007ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec4:	a3a0      	add	r3, pc, #640	; (adr r3, 8008148 <__ieee754_rem_pio2+0x310>)
 8007ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eca:	f7f8 f985 	bl	80001d8 <__aeabi_dsub>
 8007ece:	a3a0      	add	r3, pc, #640	; (adr r3, 8008150 <__ieee754_rem_pio2+0x318>)
 8007ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed4:	4604      	mov	r4, r0
 8007ed6:	460d      	mov	r5, r1
 8007ed8:	f7f8 f97e 	bl	80001d8 <__aeabi_dsub>
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	e9ca 2300 	strd	r2, r3, [sl]
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	4629      	mov	r1, r5
 8007ee8:	f7f8 f976 	bl	80001d8 <__aeabi_dsub>
 8007eec:	a398      	add	r3, pc, #608	; (adr r3, 8008150 <__ieee754_rem_pio2+0x318>)
 8007eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef2:	e7db      	b.n	8007eac <__ieee754_rem_pio2+0x74>
 8007ef4:	f7f8 f972 	bl	80001dc <__adddf3>
 8007ef8:	45b0      	cmp	r8, r6
 8007efa:	4604      	mov	r4, r0
 8007efc:	460d      	mov	r5, r1
 8007efe:	d016      	beq.n	8007f2e <__ieee754_rem_pio2+0xf6>
 8007f00:	a38f      	add	r3, pc, #572	; (adr r3, 8008140 <__ieee754_rem_pio2+0x308>)
 8007f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f06:	f7f8 f969 	bl	80001dc <__adddf3>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	e9ca 2300 	strd	r2, r3, [sl]
 8007f12:	4620      	mov	r0, r4
 8007f14:	4629      	mov	r1, r5
 8007f16:	f7f8 f95f 	bl	80001d8 <__aeabi_dsub>
 8007f1a:	a389      	add	r3, pc, #548	; (adr r3, 8008140 <__ieee754_rem_pio2+0x308>)
 8007f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f20:	f7f8 f95c 	bl	80001dc <__adddf3>
 8007f24:	f04f 3bff 	mov.w	fp, #4294967295
 8007f28:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007f2c:	e7c4      	b.n	8007eb8 <__ieee754_rem_pio2+0x80>
 8007f2e:	a386      	add	r3, pc, #536	; (adr r3, 8008148 <__ieee754_rem_pio2+0x310>)
 8007f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f34:	f7f8 f952 	bl	80001dc <__adddf3>
 8007f38:	a385      	add	r3, pc, #532	; (adr r3, 8008150 <__ieee754_rem_pio2+0x318>)
 8007f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3e:	4604      	mov	r4, r0
 8007f40:	460d      	mov	r5, r1
 8007f42:	f7f8 f94b 	bl	80001dc <__adddf3>
 8007f46:	4602      	mov	r2, r0
 8007f48:	460b      	mov	r3, r1
 8007f4a:	e9ca 2300 	strd	r2, r3, [sl]
 8007f4e:	4620      	mov	r0, r4
 8007f50:	4629      	mov	r1, r5
 8007f52:	f7f8 f941 	bl	80001d8 <__aeabi_dsub>
 8007f56:	a37e      	add	r3, pc, #504	; (adr r3, 8008150 <__ieee754_rem_pio2+0x318>)
 8007f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5c:	e7e0      	b.n	8007f20 <__ieee754_rem_pio2+0xe8>
 8007f5e:	4b87      	ldr	r3, [pc, #540]	; (800817c <__ieee754_rem_pio2+0x344>)
 8007f60:	4598      	cmp	r8, r3
 8007f62:	f300 80d9 	bgt.w	8008118 <__ieee754_rem_pio2+0x2e0>
 8007f66:	f000 fe39 	bl	8008bdc <fabs>
 8007f6a:	ec55 4b10 	vmov	r4, r5, d0
 8007f6e:	ee10 0a10 	vmov	r0, s0
 8007f72:	a379      	add	r3, pc, #484	; (adr r3, 8008158 <__ieee754_rem_pio2+0x320>)
 8007f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f78:	4629      	mov	r1, r5
 8007f7a:	f7f8 fae5 	bl	8000548 <__aeabi_dmul>
 8007f7e:	4b80      	ldr	r3, [pc, #512]	; (8008180 <__ieee754_rem_pio2+0x348>)
 8007f80:	2200      	movs	r2, #0
 8007f82:	f7f8 f92b 	bl	80001dc <__adddf3>
 8007f86:	f7f8 fd79 	bl	8000a7c <__aeabi_d2iz>
 8007f8a:	4683      	mov	fp, r0
 8007f8c:	f7f8 fa72 	bl	8000474 <__aeabi_i2d>
 8007f90:	4602      	mov	r2, r0
 8007f92:	460b      	mov	r3, r1
 8007f94:	ec43 2b18 	vmov	d8, r2, r3
 8007f98:	a367      	add	r3, pc, #412	; (adr r3, 8008138 <__ieee754_rem_pio2+0x300>)
 8007f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9e:	f7f8 fad3 	bl	8000548 <__aeabi_dmul>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	4629      	mov	r1, r5
 8007faa:	f7f8 f915 	bl	80001d8 <__aeabi_dsub>
 8007fae:	a364      	add	r3, pc, #400	; (adr r3, 8008140 <__ieee754_rem_pio2+0x308>)
 8007fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb4:	4606      	mov	r6, r0
 8007fb6:	460f      	mov	r7, r1
 8007fb8:	ec51 0b18 	vmov	r0, r1, d8
 8007fbc:	f7f8 fac4 	bl	8000548 <__aeabi_dmul>
 8007fc0:	f1bb 0f1f 	cmp.w	fp, #31
 8007fc4:	4604      	mov	r4, r0
 8007fc6:	460d      	mov	r5, r1
 8007fc8:	dc0d      	bgt.n	8007fe6 <__ieee754_rem_pio2+0x1ae>
 8007fca:	4b6e      	ldr	r3, [pc, #440]	; (8008184 <__ieee754_rem_pio2+0x34c>)
 8007fcc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fd4:	4543      	cmp	r3, r8
 8007fd6:	d006      	beq.n	8007fe6 <__ieee754_rem_pio2+0x1ae>
 8007fd8:	4622      	mov	r2, r4
 8007fda:	462b      	mov	r3, r5
 8007fdc:	4630      	mov	r0, r6
 8007fde:	4639      	mov	r1, r7
 8007fe0:	f7f8 f8fa 	bl	80001d8 <__aeabi_dsub>
 8007fe4:	e00f      	b.n	8008006 <__ieee754_rem_pio2+0x1ce>
 8007fe6:	462b      	mov	r3, r5
 8007fe8:	4622      	mov	r2, r4
 8007fea:	4630      	mov	r0, r6
 8007fec:	4639      	mov	r1, r7
 8007fee:	f7f8 f8f3 	bl	80001d8 <__aeabi_dsub>
 8007ff2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007ff6:	9303      	str	r3, [sp, #12]
 8007ff8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007ffc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8008000:	f1b8 0f10 	cmp.w	r8, #16
 8008004:	dc02      	bgt.n	800800c <__ieee754_rem_pio2+0x1d4>
 8008006:	e9ca 0100 	strd	r0, r1, [sl]
 800800a:	e039      	b.n	8008080 <__ieee754_rem_pio2+0x248>
 800800c:	a34e      	add	r3, pc, #312	; (adr r3, 8008148 <__ieee754_rem_pio2+0x310>)
 800800e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008012:	ec51 0b18 	vmov	r0, r1, d8
 8008016:	f7f8 fa97 	bl	8000548 <__aeabi_dmul>
 800801a:	4604      	mov	r4, r0
 800801c:	460d      	mov	r5, r1
 800801e:	4602      	mov	r2, r0
 8008020:	460b      	mov	r3, r1
 8008022:	4630      	mov	r0, r6
 8008024:	4639      	mov	r1, r7
 8008026:	f7f8 f8d7 	bl	80001d8 <__aeabi_dsub>
 800802a:	4602      	mov	r2, r0
 800802c:	460b      	mov	r3, r1
 800802e:	4680      	mov	r8, r0
 8008030:	4689      	mov	r9, r1
 8008032:	4630      	mov	r0, r6
 8008034:	4639      	mov	r1, r7
 8008036:	f7f8 f8cf 	bl	80001d8 <__aeabi_dsub>
 800803a:	4622      	mov	r2, r4
 800803c:	462b      	mov	r3, r5
 800803e:	f7f8 f8cb 	bl	80001d8 <__aeabi_dsub>
 8008042:	a343      	add	r3, pc, #268	; (adr r3, 8008150 <__ieee754_rem_pio2+0x318>)
 8008044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008048:	4604      	mov	r4, r0
 800804a:	460d      	mov	r5, r1
 800804c:	ec51 0b18 	vmov	r0, r1, d8
 8008050:	f7f8 fa7a 	bl	8000548 <__aeabi_dmul>
 8008054:	4622      	mov	r2, r4
 8008056:	462b      	mov	r3, r5
 8008058:	f7f8 f8be 	bl	80001d8 <__aeabi_dsub>
 800805c:	4602      	mov	r2, r0
 800805e:	460b      	mov	r3, r1
 8008060:	4604      	mov	r4, r0
 8008062:	460d      	mov	r5, r1
 8008064:	4640      	mov	r0, r8
 8008066:	4649      	mov	r1, r9
 8008068:	f7f8 f8b6 	bl	80001d8 <__aeabi_dsub>
 800806c:	9a03      	ldr	r2, [sp, #12]
 800806e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008072:	1ad3      	subs	r3, r2, r3
 8008074:	2b31      	cmp	r3, #49	; 0x31
 8008076:	dc24      	bgt.n	80080c2 <__ieee754_rem_pio2+0x28a>
 8008078:	e9ca 0100 	strd	r0, r1, [sl]
 800807c:	4646      	mov	r6, r8
 800807e:	464f      	mov	r7, r9
 8008080:	e9da 8900 	ldrd	r8, r9, [sl]
 8008084:	4630      	mov	r0, r6
 8008086:	4642      	mov	r2, r8
 8008088:	464b      	mov	r3, r9
 800808a:	4639      	mov	r1, r7
 800808c:	f7f8 f8a4 	bl	80001d8 <__aeabi_dsub>
 8008090:	462b      	mov	r3, r5
 8008092:	4622      	mov	r2, r4
 8008094:	f7f8 f8a0 	bl	80001d8 <__aeabi_dsub>
 8008098:	9b02      	ldr	r3, [sp, #8]
 800809a:	2b00      	cmp	r3, #0
 800809c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80080a0:	f6bf af0a 	bge.w	8007eb8 <__ieee754_rem_pio2+0x80>
 80080a4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80080a8:	f8ca 3004 	str.w	r3, [sl, #4]
 80080ac:	f8ca 8000 	str.w	r8, [sl]
 80080b0:	f8ca 0008 	str.w	r0, [sl, #8]
 80080b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080b8:	f8ca 300c 	str.w	r3, [sl, #12]
 80080bc:	f1cb 0b00 	rsb	fp, fp, #0
 80080c0:	e6fa      	b.n	8007eb8 <__ieee754_rem_pio2+0x80>
 80080c2:	a327      	add	r3, pc, #156	; (adr r3, 8008160 <__ieee754_rem_pio2+0x328>)
 80080c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c8:	ec51 0b18 	vmov	r0, r1, d8
 80080cc:	f7f8 fa3c 	bl	8000548 <__aeabi_dmul>
 80080d0:	4604      	mov	r4, r0
 80080d2:	460d      	mov	r5, r1
 80080d4:	4602      	mov	r2, r0
 80080d6:	460b      	mov	r3, r1
 80080d8:	4640      	mov	r0, r8
 80080da:	4649      	mov	r1, r9
 80080dc:	f7f8 f87c 	bl	80001d8 <__aeabi_dsub>
 80080e0:	4602      	mov	r2, r0
 80080e2:	460b      	mov	r3, r1
 80080e4:	4606      	mov	r6, r0
 80080e6:	460f      	mov	r7, r1
 80080e8:	4640      	mov	r0, r8
 80080ea:	4649      	mov	r1, r9
 80080ec:	f7f8 f874 	bl	80001d8 <__aeabi_dsub>
 80080f0:	4622      	mov	r2, r4
 80080f2:	462b      	mov	r3, r5
 80080f4:	f7f8 f870 	bl	80001d8 <__aeabi_dsub>
 80080f8:	a31b      	add	r3, pc, #108	; (adr r3, 8008168 <__ieee754_rem_pio2+0x330>)
 80080fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fe:	4604      	mov	r4, r0
 8008100:	460d      	mov	r5, r1
 8008102:	ec51 0b18 	vmov	r0, r1, d8
 8008106:	f7f8 fa1f 	bl	8000548 <__aeabi_dmul>
 800810a:	4622      	mov	r2, r4
 800810c:	462b      	mov	r3, r5
 800810e:	f7f8 f863 	bl	80001d8 <__aeabi_dsub>
 8008112:	4604      	mov	r4, r0
 8008114:	460d      	mov	r5, r1
 8008116:	e75f      	b.n	8007fd8 <__ieee754_rem_pio2+0x1a0>
 8008118:	4b1b      	ldr	r3, [pc, #108]	; (8008188 <__ieee754_rem_pio2+0x350>)
 800811a:	4598      	cmp	r8, r3
 800811c:	dd36      	ble.n	800818c <__ieee754_rem_pio2+0x354>
 800811e:	ee10 2a10 	vmov	r2, s0
 8008122:	462b      	mov	r3, r5
 8008124:	4620      	mov	r0, r4
 8008126:	4629      	mov	r1, r5
 8008128:	f7f8 f856 	bl	80001d8 <__aeabi_dsub>
 800812c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008130:	e9ca 0100 	strd	r0, r1, [sl]
 8008134:	e694      	b.n	8007e60 <__ieee754_rem_pio2+0x28>
 8008136:	bf00      	nop
 8008138:	54400000 	.word	0x54400000
 800813c:	3ff921fb 	.word	0x3ff921fb
 8008140:	1a626331 	.word	0x1a626331
 8008144:	3dd0b461 	.word	0x3dd0b461
 8008148:	1a600000 	.word	0x1a600000
 800814c:	3dd0b461 	.word	0x3dd0b461
 8008150:	2e037073 	.word	0x2e037073
 8008154:	3ba3198a 	.word	0x3ba3198a
 8008158:	6dc9c883 	.word	0x6dc9c883
 800815c:	3fe45f30 	.word	0x3fe45f30
 8008160:	2e000000 	.word	0x2e000000
 8008164:	3ba3198a 	.word	0x3ba3198a
 8008168:	252049c1 	.word	0x252049c1
 800816c:	397b839a 	.word	0x397b839a
 8008170:	3fe921fb 	.word	0x3fe921fb
 8008174:	4002d97b 	.word	0x4002d97b
 8008178:	3ff921fb 	.word	0x3ff921fb
 800817c:	413921fb 	.word	0x413921fb
 8008180:	3fe00000 	.word	0x3fe00000
 8008184:	08008e60 	.word	0x08008e60
 8008188:	7fefffff 	.word	0x7fefffff
 800818c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008190:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8008194:	ee10 0a10 	vmov	r0, s0
 8008198:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800819c:	ee10 6a10 	vmov	r6, s0
 80081a0:	460f      	mov	r7, r1
 80081a2:	f7f8 fc6b 	bl	8000a7c <__aeabi_d2iz>
 80081a6:	f7f8 f965 	bl	8000474 <__aeabi_i2d>
 80081aa:	4602      	mov	r2, r0
 80081ac:	460b      	mov	r3, r1
 80081ae:	4630      	mov	r0, r6
 80081b0:	4639      	mov	r1, r7
 80081b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80081b6:	f7f8 f80f 	bl	80001d8 <__aeabi_dsub>
 80081ba:	4b22      	ldr	r3, [pc, #136]	; (8008244 <__ieee754_rem_pio2+0x40c>)
 80081bc:	2200      	movs	r2, #0
 80081be:	f7f8 f9c3 	bl	8000548 <__aeabi_dmul>
 80081c2:	460f      	mov	r7, r1
 80081c4:	4606      	mov	r6, r0
 80081c6:	f7f8 fc59 	bl	8000a7c <__aeabi_d2iz>
 80081ca:	f7f8 f953 	bl	8000474 <__aeabi_i2d>
 80081ce:	4602      	mov	r2, r0
 80081d0:	460b      	mov	r3, r1
 80081d2:	4630      	mov	r0, r6
 80081d4:	4639      	mov	r1, r7
 80081d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80081da:	f7f7 fffd 	bl	80001d8 <__aeabi_dsub>
 80081de:	4b19      	ldr	r3, [pc, #100]	; (8008244 <__ieee754_rem_pio2+0x40c>)
 80081e0:	2200      	movs	r2, #0
 80081e2:	f7f8 f9b1 	bl	8000548 <__aeabi_dmul>
 80081e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80081ea:	ad04      	add	r5, sp, #16
 80081ec:	f04f 0803 	mov.w	r8, #3
 80081f0:	46a9      	mov	r9, r5
 80081f2:	2600      	movs	r6, #0
 80081f4:	2700      	movs	r7, #0
 80081f6:	4632      	mov	r2, r6
 80081f8:	463b      	mov	r3, r7
 80081fa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80081fe:	46c3      	mov	fp, r8
 8008200:	3d08      	subs	r5, #8
 8008202:	f108 38ff 	add.w	r8, r8, #4294967295
 8008206:	f7f8 fc07 	bl	8000a18 <__aeabi_dcmpeq>
 800820a:	2800      	cmp	r0, #0
 800820c:	d1f3      	bne.n	80081f6 <__ieee754_rem_pio2+0x3be>
 800820e:	4b0e      	ldr	r3, [pc, #56]	; (8008248 <__ieee754_rem_pio2+0x410>)
 8008210:	9301      	str	r3, [sp, #4]
 8008212:	2302      	movs	r3, #2
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	4622      	mov	r2, r4
 8008218:	465b      	mov	r3, fp
 800821a:	4651      	mov	r1, sl
 800821c:	4648      	mov	r0, r9
 800821e:	f000 f8df 	bl	80083e0 <__kernel_rem_pio2>
 8008222:	9b02      	ldr	r3, [sp, #8]
 8008224:	2b00      	cmp	r3, #0
 8008226:	4683      	mov	fp, r0
 8008228:	f6bf ae46 	bge.w	8007eb8 <__ieee754_rem_pio2+0x80>
 800822c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008230:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008234:	f8ca 3004 	str.w	r3, [sl, #4]
 8008238:	f8da 300c 	ldr.w	r3, [sl, #12]
 800823c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008240:	e73a      	b.n	80080b8 <__ieee754_rem_pio2+0x280>
 8008242:	bf00      	nop
 8008244:	41700000 	.word	0x41700000
 8008248:	08008ee0 	.word	0x08008ee0
 800824c:	00000000 	.word	0x00000000

08008250 <__kernel_cos>:
 8008250:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008254:	ec57 6b10 	vmov	r6, r7, d0
 8008258:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800825c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008260:	ed8d 1b00 	vstr	d1, [sp]
 8008264:	da07      	bge.n	8008276 <__kernel_cos+0x26>
 8008266:	ee10 0a10 	vmov	r0, s0
 800826a:	4639      	mov	r1, r7
 800826c:	f7f8 fc06 	bl	8000a7c <__aeabi_d2iz>
 8008270:	2800      	cmp	r0, #0
 8008272:	f000 8088 	beq.w	8008386 <__kernel_cos+0x136>
 8008276:	4632      	mov	r2, r6
 8008278:	463b      	mov	r3, r7
 800827a:	4630      	mov	r0, r6
 800827c:	4639      	mov	r1, r7
 800827e:	f7f8 f963 	bl	8000548 <__aeabi_dmul>
 8008282:	4b51      	ldr	r3, [pc, #324]	; (80083c8 <__kernel_cos+0x178>)
 8008284:	2200      	movs	r2, #0
 8008286:	4604      	mov	r4, r0
 8008288:	460d      	mov	r5, r1
 800828a:	f7f8 f95d 	bl	8000548 <__aeabi_dmul>
 800828e:	a340      	add	r3, pc, #256	; (adr r3, 8008390 <__kernel_cos+0x140>)
 8008290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008294:	4682      	mov	sl, r0
 8008296:	468b      	mov	fp, r1
 8008298:	4620      	mov	r0, r4
 800829a:	4629      	mov	r1, r5
 800829c:	f7f8 f954 	bl	8000548 <__aeabi_dmul>
 80082a0:	a33d      	add	r3, pc, #244	; (adr r3, 8008398 <__kernel_cos+0x148>)
 80082a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a6:	f7f7 ff99 	bl	80001dc <__adddf3>
 80082aa:	4622      	mov	r2, r4
 80082ac:	462b      	mov	r3, r5
 80082ae:	f7f8 f94b 	bl	8000548 <__aeabi_dmul>
 80082b2:	a33b      	add	r3, pc, #236	; (adr r3, 80083a0 <__kernel_cos+0x150>)
 80082b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b8:	f7f7 ff8e 	bl	80001d8 <__aeabi_dsub>
 80082bc:	4622      	mov	r2, r4
 80082be:	462b      	mov	r3, r5
 80082c0:	f7f8 f942 	bl	8000548 <__aeabi_dmul>
 80082c4:	a338      	add	r3, pc, #224	; (adr r3, 80083a8 <__kernel_cos+0x158>)
 80082c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ca:	f7f7 ff87 	bl	80001dc <__adddf3>
 80082ce:	4622      	mov	r2, r4
 80082d0:	462b      	mov	r3, r5
 80082d2:	f7f8 f939 	bl	8000548 <__aeabi_dmul>
 80082d6:	a336      	add	r3, pc, #216	; (adr r3, 80083b0 <__kernel_cos+0x160>)
 80082d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082dc:	f7f7 ff7c 	bl	80001d8 <__aeabi_dsub>
 80082e0:	4622      	mov	r2, r4
 80082e2:	462b      	mov	r3, r5
 80082e4:	f7f8 f930 	bl	8000548 <__aeabi_dmul>
 80082e8:	a333      	add	r3, pc, #204	; (adr r3, 80083b8 <__kernel_cos+0x168>)
 80082ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ee:	f7f7 ff75 	bl	80001dc <__adddf3>
 80082f2:	4622      	mov	r2, r4
 80082f4:	462b      	mov	r3, r5
 80082f6:	f7f8 f927 	bl	8000548 <__aeabi_dmul>
 80082fa:	4622      	mov	r2, r4
 80082fc:	462b      	mov	r3, r5
 80082fe:	f7f8 f923 	bl	8000548 <__aeabi_dmul>
 8008302:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008306:	4604      	mov	r4, r0
 8008308:	460d      	mov	r5, r1
 800830a:	4630      	mov	r0, r6
 800830c:	4639      	mov	r1, r7
 800830e:	f7f8 f91b 	bl	8000548 <__aeabi_dmul>
 8008312:	460b      	mov	r3, r1
 8008314:	4602      	mov	r2, r0
 8008316:	4629      	mov	r1, r5
 8008318:	4620      	mov	r0, r4
 800831a:	f7f7 ff5d 	bl	80001d8 <__aeabi_dsub>
 800831e:	4b2b      	ldr	r3, [pc, #172]	; (80083cc <__kernel_cos+0x17c>)
 8008320:	4598      	cmp	r8, r3
 8008322:	4606      	mov	r6, r0
 8008324:	460f      	mov	r7, r1
 8008326:	dc10      	bgt.n	800834a <__kernel_cos+0xfa>
 8008328:	4602      	mov	r2, r0
 800832a:	460b      	mov	r3, r1
 800832c:	4650      	mov	r0, sl
 800832e:	4659      	mov	r1, fp
 8008330:	f7f7 ff52 	bl	80001d8 <__aeabi_dsub>
 8008334:	460b      	mov	r3, r1
 8008336:	4926      	ldr	r1, [pc, #152]	; (80083d0 <__kernel_cos+0x180>)
 8008338:	4602      	mov	r2, r0
 800833a:	2000      	movs	r0, #0
 800833c:	f7f7 ff4c 	bl	80001d8 <__aeabi_dsub>
 8008340:	ec41 0b10 	vmov	d0, r0, r1
 8008344:	b003      	add	sp, #12
 8008346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800834a:	4b22      	ldr	r3, [pc, #136]	; (80083d4 <__kernel_cos+0x184>)
 800834c:	4920      	ldr	r1, [pc, #128]	; (80083d0 <__kernel_cos+0x180>)
 800834e:	4598      	cmp	r8, r3
 8008350:	bfcc      	ite	gt
 8008352:	4d21      	ldrgt	r5, [pc, #132]	; (80083d8 <__kernel_cos+0x188>)
 8008354:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008358:	2400      	movs	r4, #0
 800835a:	4622      	mov	r2, r4
 800835c:	462b      	mov	r3, r5
 800835e:	2000      	movs	r0, #0
 8008360:	f7f7 ff3a 	bl	80001d8 <__aeabi_dsub>
 8008364:	4622      	mov	r2, r4
 8008366:	4680      	mov	r8, r0
 8008368:	4689      	mov	r9, r1
 800836a:	462b      	mov	r3, r5
 800836c:	4650      	mov	r0, sl
 800836e:	4659      	mov	r1, fp
 8008370:	f7f7 ff32 	bl	80001d8 <__aeabi_dsub>
 8008374:	4632      	mov	r2, r6
 8008376:	463b      	mov	r3, r7
 8008378:	f7f7 ff2e 	bl	80001d8 <__aeabi_dsub>
 800837c:	4602      	mov	r2, r0
 800837e:	460b      	mov	r3, r1
 8008380:	4640      	mov	r0, r8
 8008382:	4649      	mov	r1, r9
 8008384:	e7da      	b.n	800833c <__kernel_cos+0xec>
 8008386:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80083c0 <__kernel_cos+0x170>
 800838a:	e7db      	b.n	8008344 <__kernel_cos+0xf4>
 800838c:	f3af 8000 	nop.w
 8008390:	be8838d4 	.word	0xbe8838d4
 8008394:	bda8fae9 	.word	0xbda8fae9
 8008398:	bdb4b1c4 	.word	0xbdb4b1c4
 800839c:	3e21ee9e 	.word	0x3e21ee9e
 80083a0:	809c52ad 	.word	0x809c52ad
 80083a4:	3e927e4f 	.word	0x3e927e4f
 80083a8:	19cb1590 	.word	0x19cb1590
 80083ac:	3efa01a0 	.word	0x3efa01a0
 80083b0:	16c15177 	.word	0x16c15177
 80083b4:	3f56c16c 	.word	0x3f56c16c
 80083b8:	5555554c 	.word	0x5555554c
 80083bc:	3fa55555 	.word	0x3fa55555
 80083c0:	00000000 	.word	0x00000000
 80083c4:	3ff00000 	.word	0x3ff00000
 80083c8:	3fe00000 	.word	0x3fe00000
 80083cc:	3fd33332 	.word	0x3fd33332
 80083d0:	3ff00000 	.word	0x3ff00000
 80083d4:	3fe90000 	.word	0x3fe90000
 80083d8:	3fd20000 	.word	0x3fd20000
 80083dc:	00000000 	.word	0x00000000

080083e0 <__kernel_rem_pio2>:
 80083e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e4:	ed2d 8b02 	vpush	{d8}
 80083e8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80083ec:	f112 0f14 	cmn.w	r2, #20
 80083f0:	9308      	str	r3, [sp, #32]
 80083f2:	9101      	str	r1, [sp, #4]
 80083f4:	4bc6      	ldr	r3, [pc, #792]	; (8008710 <__kernel_rem_pio2+0x330>)
 80083f6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80083f8:	9009      	str	r0, [sp, #36]	; 0x24
 80083fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80083fe:	9304      	str	r3, [sp, #16]
 8008400:	9b08      	ldr	r3, [sp, #32]
 8008402:	f103 33ff 	add.w	r3, r3, #4294967295
 8008406:	bfa8      	it	ge
 8008408:	1ed4      	subge	r4, r2, #3
 800840a:	9306      	str	r3, [sp, #24]
 800840c:	bfb2      	itee	lt
 800840e:	2400      	movlt	r4, #0
 8008410:	2318      	movge	r3, #24
 8008412:	fb94 f4f3 	sdivge	r4, r4, r3
 8008416:	f06f 0317 	mvn.w	r3, #23
 800841a:	fb04 3303 	mla	r3, r4, r3, r3
 800841e:	eb03 0a02 	add.w	sl, r3, r2
 8008422:	9b04      	ldr	r3, [sp, #16]
 8008424:	9a06      	ldr	r2, [sp, #24]
 8008426:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8008700 <__kernel_rem_pio2+0x320>
 800842a:	eb03 0802 	add.w	r8, r3, r2
 800842e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008430:	1aa7      	subs	r7, r4, r2
 8008432:	ae20      	add	r6, sp, #128	; 0x80
 8008434:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008438:	2500      	movs	r5, #0
 800843a:	4545      	cmp	r5, r8
 800843c:	dd18      	ble.n	8008470 <__kernel_rem_pio2+0x90>
 800843e:	9b08      	ldr	r3, [sp, #32]
 8008440:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008444:	aa20      	add	r2, sp, #128	; 0x80
 8008446:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8008700 <__kernel_rem_pio2+0x320>
 800844a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800844e:	f1c3 0301 	rsb	r3, r3, #1
 8008452:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8008456:	9307      	str	r3, [sp, #28]
 8008458:	9b07      	ldr	r3, [sp, #28]
 800845a:	9a04      	ldr	r2, [sp, #16]
 800845c:	4443      	add	r3, r8
 800845e:	429a      	cmp	r2, r3
 8008460:	db2f      	blt.n	80084c2 <__kernel_rem_pio2+0xe2>
 8008462:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008466:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800846a:	462f      	mov	r7, r5
 800846c:	2600      	movs	r6, #0
 800846e:	e01b      	b.n	80084a8 <__kernel_rem_pio2+0xc8>
 8008470:	42ef      	cmn	r7, r5
 8008472:	d407      	bmi.n	8008484 <__kernel_rem_pio2+0xa4>
 8008474:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008478:	f7f7 fffc 	bl	8000474 <__aeabi_i2d>
 800847c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008480:	3501      	adds	r5, #1
 8008482:	e7da      	b.n	800843a <__kernel_rem_pio2+0x5a>
 8008484:	ec51 0b18 	vmov	r0, r1, d8
 8008488:	e7f8      	b.n	800847c <__kernel_rem_pio2+0x9c>
 800848a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800848e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008492:	f7f8 f859 	bl	8000548 <__aeabi_dmul>
 8008496:	4602      	mov	r2, r0
 8008498:	460b      	mov	r3, r1
 800849a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800849e:	f7f7 fe9d 	bl	80001dc <__adddf3>
 80084a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084a6:	3601      	adds	r6, #1
 80084a8:	9b06      	ldr	r3, [sp, #24]
 80084aa:	429e      	cmp	r6, r3
 80084ac:	f1a7 0708 	sub.w	r7, r7, #8
 80084b0:	ddeb      	ble.n	800848a <__kernel_rem_pio2+0xaa>
 80084b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80084b6:	3508      	adds	r5, #8
 80084b8:	ecab 7b02 	vstmia	fp!, {d7}
 80084bc:	f108 0801 	add.w	r8, r8, #1
 80084c0:	e7ca      	b.n	8008458 <__kernel_rem_pio2+0x78>
 80084c2:	9b04      	ldr	r3, [sp, #16]
 80084c4:	aa0c      	add	r2, sp, #48	; 0x30
 80084c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80084ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80084cc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80084ce:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80084d2:	9c04      	ldr	r4, [sp, #16]
 80084d4:	930a      	str	r3, [sp, #40]	; 0x28
 80084d6:	ab98      	add	r3, sp, #608	; 0x260
 80084d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80084dc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80084e0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80084e4:	f8cd b008 	str.w	fp, [sp, #8]
 80084e8:	4625      	mov	r5, r4
 80084ea:	2d00      	cmp	r5, #0
 80084ec:	dc78      	bgt.n	80085e0 <__kernel_rem_pio2+0x200>
 80084ee:	ec47 6b10 	vmov	d0, r6, r7
 80084f2:	4650      	mov	r0, sl
 80084f4:	f000 fbfc 	bl	8008cf0 <scalbn>
 80084f8:	ec57 6b10 	vmov	r6, r7, d0
 80084fc:	2200      	movs	r2, #0
 80084fe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008502:	ee10 0a10 	vmov	r0, s0
 8008506:	4639      	mov	r1, r7
 8008508:	f7f8 f81e 	bl	8000548 <__aeabi_dmul>
 800850c:	ec41 0b10 	vmov	d0, r0, r1
 8008510:	f000 fb6e 	bl	8008bf0 <floor>
 8008514:	4b7f      	ldr	r3, [pc, #508]	; (8008714 <__kernel_rem_pio2+0x334>)
 8008516:	ec51 0b10 	vmov	r0, r1, d0
 800851a:	2200      	movs	r2, #0
 800851c:	f7f8 f814 	bl	8000548 <__aeabi_dmul>
 8008520:	4602      	mov	r2, r0
 8008522:	460b      	mov	r3, r1
 8008524:	4630      	mov	r0, r6
 8008526:	4639      	mov	r1, r7
 8008528:	f7f7 fe56 	bl	80001d8 <__aeabi_dsub>
 800852c:	460f      	mov	r7, r1
 800852e:	4606      	mov	r6, r0
 8008530:	f7f8 faa4 	bl	8000a7c <__aeabi_d2iz>
 8008534:	9007      	str	r0, [sp, #28]
 8008536:	f7f7 ff9d 	bl	8000474 <__aeabi_i2d>
 800853a:	4602      	mov	r2, r0
 800853c:	460b      	mov	r3, r1
 800853e:	4630      	mov	r0, r6
 8008540:	4639      	mov	r1, r7
 8008542:	f7f7 fe49 	bl	80001d8 <__aeabi_dsub>
 8008546:	f1ba 0f00 	cmp.w	sl, #0
 800854a:	4606      	mov	r6, r0
 800854c:	460f      	mov	r7, r1
 800854e:	dd70      	ble.n	8008632 <__kernel_rem_pio2+0x252>
 8008550:	1e62      	subs	r2, r4, #1
 8008552:	ab0c      	add	r3, sp, #48	; 0x30
 8008554:	9d07      	ldr	r5, [sp, #28]
 8008556:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800855a:	f1ca 0118 	rsb	r1, sl, #24
 800855e:	fa40 f301 	asr.w	r3, r0, r1
 8008562:	441d      	add	r5, r3
 8008564:	408b      	lsls	r3, r1
 8008566:	1ac0      	subs	r0, r0, r3
 8008568:	ab0c      	add	r3, sp, #48	; 0x30
 800856a:	9507      	str	r5, [sp, #28]
 800856c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008570:	f1ca 0317 	rsb	r3, sl, #23
 8008574:	fa40 f303 	asr.w	r3, r0, r3
 8008578:	9302      	str	r3, [sp, #8]
 800857a:	9b02      	ldr	r3, [sp, #8]
 800857c:	2b00      	cmp	r3, #0
 800857e:	dd66      	ble.n	800864e <__kernel_rem_pio2+0x26e>
 8008580:	9b07      	ldr	r3, [sp, #28]
 8008582:	2200      	movs	r2, #0
 8008584:	3301      	adds	r3, #1
 8008586:	9307      	str	r3, [sp, #28]
 8008588:	4615      	mov	r5, r2
 800858a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800858e:	4294      	cmp	r4, r2
 8008590:	f300 8099 	bgt.w	80086c6 <__kernel_rem_pio2+0x2e6>
 8008594:	f1ba 0f00 	cmp.w	sl, #0
 8008598:	dd07      	ble.n	80085aa <__kernel_rem_pio2+0x1ca>
 800859a:	f1ba 0f01 	cmp.w	sl, #1
 800859e:	f000 80a5 	beq.w	80086ec <__kernel_rem_pio2+0x30c>
 80085a2:	f1ba 0f02 	cmp.w	sl, #2
 80085a6:	f000 80c1 	beq.w	800872c <__kernel_rem_pio2+0x34c>
 80085aa:	9b02      	ldr	r3, [sp, #8]
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	d14e      	bne.n	800864e <__kernel_rem_pio2+0x26e>
 80085b0:	4632      	mov	r2, r6
 80085b2:	463b      	mov	r3, r7
 80085b4:	4958      	ldr	r1, [pc, #352]	; (8008718 <__kernel_rem_pio2+0x338>)
 80085b6:	2000      	movs	r0, #0
 80085b8:	f7f7 fe0e 	bl	80001d8 <__aeabi_dsub>
 80085bc:	4606      	mov	r6, r0
 80085be:	460f      	mov	r7, r1
 80085c0:	2d00      	cmp	r5, #0
 80085c2:	d044      	beq.n	800864e <__kernel_rem_pio2+0x26e>
 80085c4:	4650      	mov	r0, sl
 80085c6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8008708 <__kernel_rem_pio2+0x328>
 80085ca:	f000 fb91 	bl	8008cf0 <scalbn>
 80085ce:	4630      	mov	r0, r6
 80085d0:	4639      	mov	r1, r7
 80085d2:	ec53 2b10 	vmov	r2, r3, d0
 80085d6:	f7f7 fdff 	bl	80001d8 <__aeabi_dsub>
 80085da:	4606      	mov	r6, r0
 80085dc:	460f      	mov	r7, r1
 80085de:	e036      	b.n	800864e <__kernel_rem_pio2+0x26e>
 80085e0:	4b4e      	ldr	r3, [pc, #312]	; (800871c <__kernel_rem_pio2+0x33c>)
 80085e2:	2200      	movs	r2, #0
 80085e4:	4630      	mov	r0, r6
 80085e6:	4639      	mov	r1, r7
 80085e8:	f7f7 ffae 	bl	8000548 <__aeabi_dmul>
 80085ec:	f7f8 fa46 	bl	8000a7c <__aeabi_d2iz>
 80085f0:	f7f7 ff40 	bl	8000474 <__aeabi_i2d>
 80085f4:	4b4a      	ldr	r3, [pc, #296]	; (8008720 <__kernel_rem_pio2+0x340>)
 80085f6:	2200      	movs	r2, #0
 80085f8:	4680      	mov	r8, r0
 80085fa:	4689      	mov	r9, r1
 80085fc:	f7f7 ffa4 	bl	8000548 <__aeabi_dmul>
 8008600:	4602      	mov	r2, r0
 8008602:	460b      	mov	r3, r1
 8008604:	4630      	mov	r0, r6
 8008606:	4639      	mov	r1, r7
 8008608:	f7f7 fde6 	bl	80001d8 <__aeabi_dsub>
 800860c:	f7f8 fa36 	bl	8000a7c <__aeabi_d2iz>
 8008610:	9b02      	ldr	r3, [sp, #8]
 8008612:	f843 0b04 	str.w	r0, [r3], #4
 8008616:	3d01      	subs	r5, #1
 8008618:	9302      	str	r3, [sp, #8]
 800861a:	ab70      	add	r3, sp, #448	; 0x1c0
 800861c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008624:	4640      	mov	r0, r8
 8008626:	4649      	mov	r1, r9
 8008628:	f7f7 fdd8 	bl	80001dc <__adddf3>
 800862c:	4606      	mov	r6, r0
 800862e:	460f      	mov	r7, r1
 8008630:	e75b      	b.n	80084ea <__kernel_rem_pio2+0x10a>
 8008632:	d105      	bne.n	8008640 <__kernel_rem_pio2+0x260>
 8008634:	1e63      	subs	r3, r4, #1
 8008636:	aa0c      	add	r2, sp, #48	; 0x30
 8008638:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800863c:	15c3      	asrs	r3, r0, #23
 800863e:	e79b      	b.n	8008578 <__kernel_rem_pio2+0x198>
 8008640:	4b38      	ldr	r3, [pc, #224]	; (8008724 <__kernel_rem_pio2+0x344>)
 8008642:	2200      	movs	r2, #0
 8008644:	f7f8 fa06 	bl	8000a54 <__aeabi_dcmpge>
 8008648:	2800      	cmp	r0, #0
 800864a:	d139      	bne.n	80086c0 <__kernel_rem_pio2+0x2e0>
 800864c:	9002      	str	r0, [sp, #8]
 800864e:	2200      	movs	r2, #0
 8008650:	2300      	movs	r3, #0
 8008652:	4630      	mov	r0, r6
 8008654:	4639      	mov	r1, r7
 8008656:	f7f8 f9df 	bl	8000a18 <__aeabi_dcmpeq>
 800865a:	2800      	cmp	r0, #0
 800865c:	f000 80b4 	beq.w	80087c8 <__kernel_rem_pio2+0x3e8>
 8008660:	f104 3bff 	add.w	fp, r4, #4294967295
 8008664:	465b      	mov	r3, fp
 8008666:	2200      	movs	r2, #0
 8008668:	9904      	ldr	r1, [sp, #16]
 800866a:	428b      	cmp	r3, r1
 800866c:	da65      	bge.n	800873a <__kernel_rem_pio2+0x35a>
 800866e:	2a00      	cmp	r2, #0
 8008670:	d07b      	beq.n	800876a <__kernel_rem_pio2+0x38a>
 8008672:	ab0c      	add	r3, sp, #48	; 0x30
 8008674:	f1aa 0a18 	sub.w	sl, sl, #24
 8008678:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800867c:	2b00      	cmp	r3, #0
 800867e:	f000 80a0 	beq.w	80087c2 <__kernel_rem_pio2+0x3e2>
 8008682:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8008708 <__kernel_rem_pio2+0x328>
 8008686:	4650      	mov	r0, sl
 8008688:	f000 fb32 	bl	8008cf0 <scalbn>
 800868c:	4f23      	ldr	r7, [pc, #140]	; (800871c <__kernel_rem_pio2+0x33c>)
 800868e:	ec55 4b10 	vmov	r4, r5, d0
 8008692:	46d8      	mov	r8, fp
 8008694:	2600      	movs	r6, #0
 8008696:	f1b8 0f00 	cmp.w	r8, #0
 800869a:	f280 80cf 	bge.w	800883c <__kernel_rem_pio2+0x45c>
 800869e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8008700 <__kernel_rem_pio2+0x320>
 80086a2:	465f      	mov	r7, fp
 80086a4:	f04f 0800 	mov.w	r8, #0
 80086a8:	2f00      	cmp	r7, #0
 80086aa:	f2c0 80fd 	blt.w	80088a8 <__kernel_rem_pio2+0x4c8>
 80086ae:	ab70      	add	r3, sp, #448	; 0x1c0
 80086b0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8008728 <__kernel_rem_pio2+0x348>
 80086b4:	ec55 4b18 	vmov	r4, r5, d8
 80086b8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80086bc:	2600      	movs	r6, #0
 80086be:	e0e5      	b.n	800888c <__kernel_rem_pio2+0x4ac>
 80086c0:	2302      	movs	r3, #2
 80086c2:	9302      	str	r3, [sp, #8]
 80086c4:	e75c      	b.n	8008580 <__kernel_rem_pio2+0x1a0>
 80086c6:	f8db 3000 	ldr.w	r3, [fp]
 80086ca:	b955      	cbnz	r5, 80086e2 <__kernel_rem_pio2+0x302>
 80086cc:	b123      	cbz	r3, 80086d8 <__kernel_rem_pio2+0x2f8>
 80086ce:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80086d2:	f8cb 3000 	str.w	r3, [fp]
 80086d6:	2301      	movs	r3, #1
 80086d8:	3201      	adds	r2, #1
 80086da:	f10b 0b04 	add.w	fp, fp, #4
 80086de:	461d      	mov	r5, r3
 80086e0:	e755      	b.n	800858e <__kernel_rem_pio2+0x1ae>
 80086e2:	1acb      	subs	r3, r1, r3
 80086e4:	f8cb 3000 	str.w	r3, [fp]
 80086e8:	462b      	mov	r3, r5
 80086ea:	e7f5      	b.n	80086d8 <__kernel_rem_pio2+0x2f8>
 80086ec:	1e62      	subs	r2, r4, #1
 80086ee:	ab0c      	add	r3, sp, #48	; 0x30
 80086f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086f4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80086f8:	a90c      	add	r1, sp, #48	; 0x30
 80086fa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80086fe:	e754      	b.n	80085aa <__kernel_rem_pio2+0x1ca>
	...
 800870c:	3ff00000 	.word	0x3ff00000
 8008710:	08009028 	.word	0x08009028
 8008714:	40200000 	.word	0x40200000
 8008718:	3ff00000 	.word	0x3ff00000
 800871c:	3e700000 	.word	0x3e700000
 8008720:	41700000 	.word	0x41700000
 8008724:	3fe00000 	.word	0x3fe00000
 8008728:	08008fe8 	.word	0x08008fe8
 800872c:	1e62      	subs	r2, r4, #1
 800872e:	ab0c      	add	r3, sp, #48	; 0x30
 8008730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008734:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008738:	e7de      	b.n	80086f8 <__kernel_rem_pio2+0x318>
 800873a:	a90c      	add	r1, sp, #48	; 0x30
 800873c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008740:	3b01      	subs	r3, #1
 8008742:	430a      	orrs	r2, r1
 8008744:	e790      	b.n	8008668 <__kernel_rem_pio2+0x288>
 8008746:	3301      	adds	r3, #1
 8008748:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800874c:	2900      	cmp	r1, #0
 800874e:	d0fa      	beq.n	8008746 <__kernel_rem_pio2+0x366>
 8008750:	9a08      	ldr	r2, [sp, #32]
 8008752:	18e3      	adds	r3, r4, r3
 8008754:	18a6      	adds	r6, r4, r2
 8008756:	aa20      	add	r2, sp, #128	; 0x80
 8008758:	1c65      	adds	r5, r4, #1
 800875a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800875e:	9302      	str	r3, [sp, #8]
 8008760:	9b02      	ldr	r3, [sp, #8]
 8008762:	42ab      	cmp	r3, r5
 8008764:	da04      	bge.n	8008770 <__kernel_rem_pio2+0x390>
 8008766:	461c      	mov	r4, r3
 8008768:	e6b5      	b.n	80084d6 <__kernel_rem_pio2+0xf6>
 800876a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800876c:	2301      	movs	r3, #1
 800876e:	e7eb      	b.n	8008748 <__kernel_rem_pio2+0x368>
 8008770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008772:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008776:	f7f7 fe7d 	bl	8000474 <__aeabi_i2d>
 800877a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800877e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008780:	46b3      	mov	fp, r6
 8008782:	461c      	mov	r4, r3
 8008784:	2700      	movs	r7, #0
 8008786:	f04f 0800 	mov.w	r8, #0
 800878a:	f04f 0900 	mov.w	r9, #0
 800878e:	9b06      	ldr	r3, [sp, #24]
 8008790:	429f      	cmp	r7, r3
 8008792:	dd06      	ble.n	80087a2 <__kernel_rem_pio2+0x3c2>
 8008794:	ab70      	add	r3, sp, #448	; 0x1c0
 8008796:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800879a:	e9c3 8900 	strd	r8, r9, [r3]
 800879e:	3501      	adds	r5, #1
 80087a0:	e7de      	b.n	8008760 <__kernel_rem_pio2+0x380>
 80087a2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80087a6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80087aa:	f7f7 fecd 	bl	8000548 <__aeabi_dmul>
 80087ae:	4602      	mov	r2, r0
 80087b0:	460b      	mov	r3, r1
 80087b2:	4640      	mov	r0, r8
 80087b4:	4649      	mov	r1, r9
 80087b6:	f7f7 fd11 	bl	80001dc <__adddf3>
 80087ba:	3701      	adds	r7, #1
 80087bc:	4680      	mov	r8, r0
 80087be:	4689      	mov	r9, r1
 80087c0:	e7e5      	b.n	800878e <__kernel_rem_pio2+0x3ae>
 80087c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80087c6:	e754      	b.n	8008672 <__kernel_rem_pio2+0x292>
 80087c8:	ec47 6b10 	vmov	d0, r6, r7
 80087cc:	f1ca 0000 	rsb	r0, sl, #0
 80087d0:	f000 fa8e 	bl	8008cf0 <scalbn>
 80087d4:	ec57 6b10 	vmov	r6, r7, d0
 80087d8:	4b9f      	ldr	r3, [pc, #636]	; (8008a58 <__kernel_rem_pio2+0x678>)
 80087da:	ee10 0a10 	vmov	r0, s0
 80087de:	2200      	movs	r2, #0
 80087e0:	4639      	mov	r1, r7
 80087e2:	f7f8 f937 	bl	8000a54 <__aeabi_dcmpge>
 80087e6:	b300      	cbz	r0, 800882a <__kernel_rem_pio2+0x44a>
 80087e8:	4b9c      	ldr	r3, [pc, #624]	; (8008a5c <__kernel_rem_pio2+0x67c>)
 80087ea:	2200      	movs	r2, #0
 80087ec:	4630      	mov	r0, r6
 80087ee:	4639      	mov	r1, r7
 80087f0:	f7f7 feaa 	bl	8000548 <__aeabi_dmul>
 80087f4:	f7f8 f942 	bl	8000a7c <__aeabi_d2iz>
 80087f8:	4605      	mov	r5, r0
 80087fa:	f7f7 fe3b 	bl	8000474 <__aeabi_i2d>
 80087fe:	4b96      	ldr	r3, [pc, #600]	; (8008a58 <__kernel_rem_pio2+0x678>)
 8008800:	2200      	movs	r2, #0
 8008802:	f7f7 fea1 	bl	8000548 <__aeabi_dmul>
 8008806:	460b      	mov	r3, r1
 8008808:	4602      	mov	r2, r0
 800880a:	4639      	mov	r1, r7
 800880c:	4630      	mov	r0, r6
 800880e:	f7f7 fce3 	bl	80001d8 <__aeabi_dsub>
 8008812:	f7f8 f933 	bl	8000a7c <__aeabi_d2iz>
 8008816:	f104 0b01 	add.w	fp, r4, #1
 800881a:	ab0c      	add	r3, sp, #48	; 0x30
 800881c:	f10a 0a18 	add.w	sl, sl, #24
 8008820:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008824:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8008828:	e72b      	b.n	8008682 <__kernel_rem_pio2+0x2a2>
 800882a:	4630      	mov	r0, r6
 800882c:	4639      	mov	r1, r7
 800882e:	f7f8 f925 	bl	8000a7c <__aeabi_d2iz>
 8008832:	ab0c      	add	r3, sp, #48	; 0x30
 8008834:	46a3      	mov	fp, r4
 8008836:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800883a:	e722      	b.n	8008682 <__kernel_rem_pio2+0x2a2>
 800883c:	ab70      	add	r3, sp, #448	; 0x1c0
 800883e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8008842:	ab0c      	add	r3, sp, #48	; 0x30
 8008844:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008848:	f7f7 fe14 	bl	8000474 <__aeabi_i2d>
 800884c:	4622      	mov	r2, r4
 800884e:	462b      	mov	r3, r5
 8008850:	f7f7 fe7a 	bl	8000548 <__aeabi_dmul>
 8008854:	4632      	mov	r2, r6
 8008856:	e9c9 0100 	strd	r0, r1, [r9]
 800885a:	463b      	mov	r3, r7
 800885c:	4620      	mov	r0, r4
 800885e:	4629      	mov	r1, r5
 8008860:	f7f7 fe72 	bl	8000548 <__aeabi_dmul>
 8008864:	f108 38ff 	add.w	r8, r8, #4294967295
 8008868:	4604      	mov	r4, r0
 800886a:	460d      	mov	r5, r1
 800886c:	e713      	b.n	8008696 <__kernel_rem_pio2+0x2b6>
 800886e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008872:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8008876:	f7f7 fe67 	bl	8000548 <__aeabi_dmul>
 800887a:	4602      	mov	r2, r0
 800887c:	460b      	mov	r3, r1
 800887e:	4620      	mov	r0, r4
 8008880:	4629      	mov	r1, r5
 8008882:	f7f7 fcab 	bl	80001dc <__adddf3>
 8008886:	3601      	adds	r6, #1
 8008888:	4604      	mov	r4, r0
 800888a:	460d      	mov	r5, r1
 800888c:	9b04      	ldr	r3, [sp, #16]
 800888e:	429e      	cmp	r6, r3
 8008890:	dc01      	bgt.n	8008896 <__kernel_rem_pio2+0x4b6>
 8008892:	45b0      	cmp	r8, r6
 8008894:	daeb      	bge.n	800886e <__kernel_rem_pio2+0x48e>
 8008896:	ab48      	add	r3, sp, #288	; 0x120
 8008898:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800889c:	e9c3 4500 	strd	r4, r5, [r3]
 80088a0:	3f01      	subs	r7, #1
 80088a2:	f108 0801 	add.w	r8, r8, #1
 80088a6:	e6ff      	b.n	80086a8 <__kernel_rem_pio2+0x2c8>
 80088a8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	dc0b      	bgt.n	80088c6 <__kernel_rem_pio2+0x4e6>
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	dc6e      	bgt.n	8008990 <__kernel_rem_pio2+0x5b0>
 80088b2:	d045      	beq.n	8008940 <__kernel_rem_pio2+0x560>
 80088b4:	9b07      	ldr	r3, [sp, #28]
 80088b6:	f003 0007 	and.w	r0, r3, #7
 80088ba:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80088be:	ecbd 8b02 	vpop	{d8}
 80088c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088c6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80088c8:	2b03      	cmp	r3, #3
 80088ca:	d1f3      	bne.n	80088b4 <__kernel_rem_pio2+0x4d4>
 80088cc:	ab48      	add	r3, sp, #288	; 0x120
 80088ce:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80088d2:	46d0      	mov	r8, sl
 80088d4:	46d9      	mov	r9, fp
 80088d6:	f1b9 0f00 	cmp.w	r9, #0
 80088da:	f1a8 0808 	sub.w	r8, r8, #8
 80088de:	dc64      	bgt.n	80089aa <__kernel_rem_pio2+0x5ca>
 80088e0:	465c      	mov	r4, fp
 80088e2:	2c01      	cmp	r4, #1
 80088e4:	f1aa 0a08 	sub.w	sl, sl, #8
 80088e8:	dc7e      	bgt.n	80089e8 <__kernel_rem_pio2+0x608>
 80088ea:	2000      	movs	r0, #0
 80088ec:	2100      	movs	r1, #0
 80088ee:	f1bb 0f01 	cmp.w	fp, #1
 80088f2:	f300 8097 	bgt.w	8008a24 <__kernel_rem_pio2+0x644>
 80088f6:	9b02      	ldr	r3, [sp, #8]
 80088f8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 80088fc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8008900:	2b00      	cmp	r3, #0
 8008902:	f040 8099 	bne.w	8008a38 <__kernel_rem_pio2+0x658>
 8008906:	9b01      	ldr	r3, [sp, #4]
 8008908:	e9c3 5600 	strd	r5, r6, [r3]
 800890c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8008910:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008914:	e7ce      	b.n	80088b4 <__kernel_rem_pio2+0x4d4>
 8008916:	ab48      	add	r3, sp, #288	; 0x120
 8008918:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800891c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008920:	f7f7 fc5c 	bl	80001dc <__adddf3>
 8008924:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008928:	f1bb 0f00 	cmp.w	fp, #0
 800892c:	daf3      	bge.n	8008916 <__kernel_rem_pio2+0x536>
 800892e:	9b02      	ldr	r3, [sp, #8]
 8008930:	b113      	cbz	r3, 8008938 <__kernel_rem_pio2+0x558>
 8008932:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008936:	4619      	mov	r1, r3
 8008938:	9b01      	ldr	r3, [sp, #4]
 800893a:	e9c3 0100 	strd	r0, r1, [r3]
 800893e:	e7b9      	b.n	80088b4 <__kernel_rem_pio2+0x4d4>
 8008940:	2000      	movs	r0, #0
 8008942:	2100      	movs	r1, #0
 8008944:	e7f0      	b.n	8008928 <__kernel_rem_pio2+0x548>
 8008946:	ab48      	add	r3, sp, #288	; 0x120
 8008948:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800894c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008950:	f7f7 fc44 	bl	80001dc <__adddf3>
 8008954:	3c01      	subs	r4, #1
 8008956:	2c00      	cmp	r4, #0
 8008958:	daf5      	bge.n	8008946 <__kernel_rem_pio2+0x566>
 800895a:	9b02      	ldr	r3, [sp, #8]
 800895c:	b1e3      	cbz	r3, 8008998 <__kernel_rem_pio2+0x5b8>
 800895e:	4602      	mov	r2, r0
 8008960:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008964:	9c01      	ldr	r4, [sp, #4]
 8008966:	e9c4 2300 	strd	r2, r3, [r4]
 800896a:	4602      	mov	r2, r0
 800896c:	460b      	mov	r3, r1
 800896e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8008972:	f7f7 fc31 	bl	80001d8 <__aeabi_dsub>
 8008976:	ad4a      	add	r5, sp, #296	; 0x128
 8008978:	2401      	movs	r4, #1
 800897a:	45a3      	cmp	fp, r4
 800897c:	da0f      	bge.n	800899e <__kernel_rem_pio2+0x5be>
 800897e:	9b02      	ldr	r3, [sp, #8]
 8008980:	b113      	cbz	r3, 8008988 <__kernel_rem_pio2+0x5a8>
 8008982:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008986:	4619      	mov	r1, r3
 8008988:	9b01      	ldr	r3, [sp, #4]
 800898a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800898e:	e791      	b.n	80088b4 <__kernel_rem_pio2+0x4d4>
 8008990:	465c      	mov	r4, fp
 8008992:	2000      	movs	r0, #0
 8008994:	2100      	movs	r1, #0
 8008996:	e7de      	b.n	8008956 <__kernel_rem_pio2+0x576>
 8008998:	4602      	mov	r2, r0
 800899a:	460b      	mov	r3, r1
 800899c:	e7e2      	b.n	8008964 <__kernel_rem_pio2+0x584>
 800899e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80089a2:	f7f7 fc1b 	bl	80001dc <__adddf3>
 80089a6:	3401      	adds	r4, #1
 80089a8:	e7e7      	b.n	800897a <__kernel_rem_pio2+0x59a>
 80089aa:	e9d8 4500 	ldrd	r4, r5, [r8]
 80089ae:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80089b2:	4620      	mov	r0, r4
 80089b4:	4632      	mov	r2, r6
 80089b6:	463b      	mov	r3, r7
 80089b8:	4629      	mov	r1, r5
 80089ba:	f7f7 fc0f 	bl	80001dc <__adddf3>
 80089be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089c2:	4602      	mov	r2, r0
 80089c4:	460b      	mov	r3, r1
 80089c6:	4620      	mov	r0, r4
 80089c8:	4629      	mov	r1, r5
 80089ca:	f7f7 fc05 	bl	80001d8 <__aeabi_dsub>
 80089ce:	4632      	mov	r2, r6
 80089d0:	463b      	mov	r3, r7
 80089d2:	f7f7 fc03 	bl	80001dc <__adddf3>
 80089d6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80089da:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80089de:	ed88 7b00 	vstr	d7, [r8]
 80089e2:	f109 39ff 	add.w	r9, r9, #4294967295
 80089e6:	e776      	b.n	80088d6 <__kernel_rem_pio2+0x4f6>
 80089e8:	e9da 8900 	ldrd	r8, r9, [sl]
 80089ec:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80089f0:	4640      	mov	r0, r8
 80089f2:	4632      	mov	r2, r6
 80089f4:	463b      	mov	r3, r7
 80089f6:	4649      	mov	r1, r9
 80089f8:	f7f7 fbf0 	bl	80001dc <__adddf3>
 80089fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a00:	4602      	mov	r2, r0
 8008a02:	460b      	mov	r3, r1
 8008a04:	4640      	mov	r0, r8
 8008a06:	4649      	mov	r1, r9
 8008a08:	f7f7 fbe6 	bl	80001d8 <__aeabi_dsub>
 8008a0c:	4632      	mov	r2, r6
 8008a0e:	463b      	mov	r3, r7
 8008a10:	f7f7 fbe4 	bl	80001dc <__adddf3>
 8008a14:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008a18:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008a1c:	ed8a 7b00 	vstr	d7, [sl]
 8008a20:	3c01      	subs	r4, #1
 8008a22:	e75e      	b.n	80088e2 <__kernel_rem_pio2+0x502>
 8008a24:	ab48      	add	r3, sp, #288	; 0x120
 8008a26:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2e:	f7f7 fbd5 	bl	80001dc <__adddf3>
 8008a32:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a36:	e75a      	b.n	80088ee <__kernel_rem_pio2+0x50e>
 8008a38:	9b01      	ldr	r3, [sp, #4]
 8008a3a:	9a01      	ldr	r2, [sp, #4]
 8008a3c:	601d      	str	r5, [r3, #0]
 8008a3e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8008a42:	605c      	str	r4, [r3, #4]
 8008a44:	609f      	str	r7, [r3, #8]
 8008a46:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8008a4a:	60d3      	str	r3, [r2, #12]
 8008a4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a50:	6110      	str	r0, [r2, #16]
 8008a52:	6153      	str	r3, [r2, #20]
 8008a54:	e72e      	b.n	80088b4 <__kernel_rem_pio2+0x4d4>
 8008a56:	bf00      	nop
 8008a58:	41700000 	.word	0x41700000
 8008a5c:	3e700000 	.word	0x3e700000

08008a60 <__kernel_sin>:
 8008a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a64:	ed2d 8b04 	vpush	{d8-d9}
 8008a68:	eeb0 8a41 	vmov.f32	s16, s2
 8008a6c:	eef0 8a61 	vmov.f32	s17, s3
 8008a70:	ec55 4b10 	vmov	r4, r5, d0
 8008a74:	b083      	sub	sp, #12
 8008a76:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008a7a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008a7e:	9001      	str	r0, [sp, #4]
 8008a80:	da06      	bge.n	8008a90 <__kernel_sin+0x30>
 8008a82:	ee10 0a10 	vmov	r0, s0
 8008a86:	4629      	mov	r1, r5
 8008a88:	f7f7 fff8 	bl	8000a7c <__aeabi_d2iz>
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	d051      	beq.n	8008b34 <__kernel_sin+0xd4>
 8008a90:	4622      	mov	r2, r4
 8008a92:	462b      	mov	r3, r5
 8008a94:	4620      	mov	r0, r4
 8008a96:	4629      	mov	r1, r5
 8008a98:	f7f7 fd56 	bl	8000548 <__aeabi_dmul>
 8008a9c:	4682      	mov	sl, r0
 8008a9e:	468b      	mov	fp, r1
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	4629      	mov	r1, r5
 8008aa8:	f7f7 fd4e 	bl	8000548 <__aeabi_dmul>
 8008aac:	a341      	add	r3, pc, #260	; (adr r3, 8008bb4 <__kernel_sin+0x154>)
 8008aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab2:	4680      	mov	r8, r0
 8008ab4:	4689      	mov	r9, r1
 8008ab6:	4650      	mov	r0, sl
 8008ab8:	4659      	mov	r1, fp
 8008aba:	f7f7 fd45 	bl	8000548 <__aeabi_dmul>
 8008abe:	a33f      	add	r3, pc, #252	; (adr r3, 8008bbc <__kernel_sin+0x15c>)
 8008ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac4:	f7f7 fb88 	bl	80001d8 <__aeabi_dsub>
 8008ac8:	4652      	mov	r2, sl
 8008aca:	465b      	mov	r3, fp
 8008acc:	f7f7 fd3c 	bl	8000548 <__aeabi_dmul>
 8008ad0:	a33c      	add	r3, pc, #240	; (adr r3, 8008bc4 <__kernel_sin+0x164>)
 8008ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad6:	f7f7 fb81 	bl	80001dc <__adddf3>
 8008ada:	4652      	mov	r2, sl
 8008adc:	465b      	mov	r3, fp
 8008ade:	f7f7 fd33 	bl	8000548 <__aeabi_dmul>
 8008ae2:	a33a      	add	r3, pc, #232	; (adr r3, 8008bcc <__kernel_sin+0x16c>)
 8008ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae8:	f7f7 fb76 	bl	80001d8 <__aeabi_dsub>
 8008aec:	4652      	mov	r2, sl
 8008aee:	465b      	mov	r3, fp
 8008af0:	f7f7 fd2a 	bl	8000548 <__aeabi_dmul>
 8008af4:	a337      	add	r3, pc, #220	; (adr r3, 8008bd4 <__kernel_sin+0x174>)
 8008af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afa:	f7f7 fb6f 	bl	80001dc <__adddf3>
 8008afe:	9b01      	ldr	r3, [sp, #4]
 8008b00:	4606      	mov	r6, r0
 8008b02:	460f      	mov	r7, r1
 8008b04:	b9eb      	cbnz	r3, 8008b42 <__kernel_sin+0xe2>
 8008b06:	4602      	mov	r2, r0
 8008b08:	460b      	mov	r3, r1
 8008b0a:	4650      	mov	r0, sl
 8008b0c:	4659      	mov	r1, fp
 8008b0e:	f7f7 fd1b 	bl	8000548 <__aeabi_dmul>
 8008b12:	a325      	add	r3, pc, #148	; (adr r3, 8008ba8 <__kernel_sin+0x148>)
 8008b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b18:	f7f7 fb5e 	bl	80001d8 <__aeabi_dsub>
 8008b1c:	4642      	mov	r2, r8
 8008b1e:	464b      	mov	r3, r9
 8008b20:	f7f7 fd12 	bl	8000548 <__aeabi_dmul>
 8008b24:	4602      	mov	r2, r0
 8008b26:	460b      	mov	r3, r1
 8008b28:	4620      	mov	r0, r4
 8008b2a:	4629      	mov	r1, r5
 8008b2c:	f7f7 fb56 	bl	80001dc <__adddf3>
 8008b30:	4604      	mov	r4, r0
 8008b32:	460d      	mov	r5, r1
 8008b34:	ec45 4b10 	vmov	d0, r4, r5
 8008b38:	b003      	add	sp, #12
 8008b3a:	ecbd 8b04 	vpop	{d8-d9}
 8008b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b42:	4b1b      	ldr	r3, [pc, #108]	; (8008bb0 <__kernel_sin+0x150>)
 8008b44:	ec51 0b18 	vmov	r0, r1, d8
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f7f7 fcfd 	bl	8000548 <__aeabi_dmul>
 8008b4e:	4632      	mov	r2, r6
 8008b50:	ec41 0b19 	vmov	d9, r0, r1
 8008b54:	463b      	mov	r3, r7
 8008b56:	4640      	mov	r0, r8
 8008b58:	4649      	mov	r1, r9
 8008b5a:	f7f7 fcf5 	bl	8000548 <__aeabi_dmul>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	460b      	mov	r3, r1
 8008b62:	ec51 0b19 	vmov	r0, r1, d9
 8008b66:	f7f7 fb37 	bl	80001d8 <__aeabi_dsub>
 8008b6a:	4652      	mov	r2, sl
 8008b6c:	465b      	mov	r3, fp
 8008b6e:	f7f7 fceb 	bl	8000548 <__aeabi_dmul>
 8008b72:	ec53 2b18 	vmov	r2, r3, d8
 8008b76:	f7f7 fb2f 	bl	80001d8 <__aeabi_dsub>
 8008b7a:	a30b      	add	r3, pc, #44	; (adr r3, 8008ba8 <__kernel_sin+0x148>)
 8008b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b80:	4606      	mov	r6, r0
 8008b82:	460f      	mov	r7, r1
 8008b84:	4640      	mov	r0, r8
 8008b86:	4649      	mov	r1, r9
 8008b88:	f7f7 fcde 	bl	8000548 <__aeabi_dmul>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	460b      	mov	r3, r1
 8008b90:	4630      	mov	r0, r6
 8008b92:	4639      	mov	r1, r7
 8008b94:	f7f7 fb22 	bl	80001dc <__adddf3>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	4629      	mov	r1, r5
 8008ba0:	f7f7 fb1a 	bl	80001d8 <__aeabi_dsub>
 8008ba4:	e7c4      	b.n	8008b30 <__kernel_sin+0xd0>
 8008ba6:	bf00      	nop
 8008ba8:	55555549 	.word	0x55555549
 8008bac:	3fc55555 	.word	0x3fc55555
 8008bb0:	3fe00000 	.word	0x3fe00000
 8008bb4:	5acfd57c 	.word	0x5acfd57c
 8008bb8:	3de5d93a 	.word	0x3de5d93a
 8008bbc:	8a2b9ceb 	.word	0x8a2b9ceb
 8008bc0:	3e5ae5e6 	.word	0x3e5ae5e6
 8008bc4:	57b1fe7d 	.word	0x57b1fe7d
 8008bc8:	3ec71de3 	.word	0x3ec71de3
 8008bcc:	19c161d5 	.word	0x19c161d5
 8008bd0:	3f2a01a0 	.word	0x3f2a01a0
 8008bd4:	1110f8a6 	.word	0x1110f8a6
 8008bd8:	3f811111 	.word	0x3f811111

08008bdc <fabs>:
 8008bdc:	ec51 0b10 	vmov	r0, r1, d0
 8008be0:	ee10 2a10 	vmov	r2, s0
 8008be4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008be8:	ec43 2b10 	vmov	d0, r2, r3
 8008bec:	4770      	bx	lr
	...

08008bf0 <floor>:
 8008bf0:	ec51 0b10 	vmov	r0, r1, d0
 8008bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bf8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008bfc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008c00:	2e13      	cmp	r6, #19
 8008c02:	ee10 5a10 	vmov	r5, s0
 8008c06:	ee10 8a10 	vmov	r8, s0
 8008c0a:	460c      	mov	r4, r1
 8008c0c:	dc32      	bgt.n	8008c74 <floor+0x84>
 8008c0e:	2e00      	cmp	r6, #0
 8008c10:	da14      	bge.n	8008c3c <floor+0x4c>
 8008c12:	a333      	add	r3, pc, #204	; (adr r3, 8008ce0 <floor+0xf0>)
 8008c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c18:	f7f7 fae0 	bl	80001dc <__adddf3>
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	2300      	movs	r3, #0
 8008c20:	f7f7 ff22 	bl	8000a68 <__aeabi_dcmpgt>
 8008c24:	b138      	cbz	r0, 8008c36 <floor+0x46>
 8008c26:	2c00      	cmp	r4, #0
 8008c28:	da57      	bge.n	8008cda <floor+0xea>
 8008c2a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008c2e:	431d      	orrs	r5, r3
 8008c30:	d001      	beq.n	8008c36 <floor+0x46>
 8008c32:	4c2d      	ldr	r4, [pc, #180]	; (8008ce8 <floor+0xf8>)
 8008c34:	2500      	movs	r5, #0
 8008c36:	4621      	mov	r1, r4
 8008c38:	4628      	mov	r0, r5
 8008c3a:	e025      	b.n	8008c88 <floor+0x98>
 8008c3c:	4f2b      	ldr	r7, [pc, #172]	; (8008cec <floor+0xfc>)
 8008c3e:	4137      	asrs	r7, r6
 8008c40:	ea01 0307 	and.w	r3, r1, r7
 8008c44:	4303      	orrs	r3, r0
 8008c46:	d01f      	beq.n	8008c88 <floor+0x98>
 8008c48:	a325      	add	r3, pc, #148	; (adr r3, 8008ce0 <floor+0xf0>)
 8008c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4e:	f7f7 fac5 	bl	80001dc <__adddf3>
 8008c52:	2200      	movs	r2, #0
 8008c54:	2300      	movs	r3, #0
 8008c56:	f7f7 ff07 	bl	8000a68 <__aeabi_dcmpgt>
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	d0eb      	beq.n	8008c36 <floor+0x46>
 8008c5e:	2c00      	cmp	r4, #0
 8008c60:	bfbe      	ittt	lt
 8008c62:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008c66:	fa43 f606 	asrlt.w	r6, r3, r6
 8008c6a:	19a4      	addlt	r4, r4, r6
 8008c6c:	ea24 0407 	bic.w	r4, r4, r7
 8008c70:	2500      	movs	r5, #0
 8008c72:	e7e0      	b.n	8008c36 <floor+0x46>
 8008c74:	2e33      	cmp	r6, #51	; 0x33
 8008c76:	dd0b      	ble.n	8008c90 <floor+0xa0>
 8008c78:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008c7c:	d104      	bne.n	8008c88 <floor+0x98>
 8008c7e:	ee10 2a10 	vmov	r2, s0
 8008c82:	460b      	mov	r3, r1
 8008c84:	f7f7 faaa 	bl	80001dc <__adddf3>
 8008c88:	ec41 0b10 	vmov	d0, r0, r1
 8008c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c90:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008c94:	f04f 33ff 	mov.w	r3, #4294967295
 8008c98:	fa23 f707 	lsr.w	r7, r3, r7
 8008c9c:	4207      	tst	r7, r0
 8008c9e:	d0f3      	beq.n	8008c88 <floor+0x98>
 8008ca0:	a30f      	add	r3, pc, #60	; (adr r3, 8008ce0 <floor+0xf0>)
 8008ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca6:	f7f7 fa99 	bl	80001dc <__adddf3>
 8008caa:	2200      	movs	r2, #0
 8008cac:	2300      	movs	r3, #0
 8008cae:	f7f7 fedb 	bl	8000a68 <__aeabi_dcmpgt>
 8008cb2:	2800      	cmp	r0, #0
 8008cb4:	d0bf      	beq.n	8008c36 <floor+0x46>
 8008cb6:	2c00      	cmp	r4, #0
 8008cb8:	da02      	bge.n	8008cc0 <floor+0xd0>
 8008cba:	2e14      	cmp	r6, #20
 8008cbc:	d103      	bne.n	8008cc6 <floor+0xd6>
 8008cbe:	3401      	adds	r4, #1
 8008cc0:	ea25 0507 	bic.w	r5, r5, r7
 8008cc4:	e7b7      	b.n	8008c36 <floor+0x46>
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008ccc:	fa03 f606 	lsl.w	r6, r3, r6
 8008cd0:	4435      	add	r5, r6
 8008cd2:	4545      	cmp	r5, r8
 8008cd4:	bf38      	it	cc
 8008cd6:	18e4      	addcc	r4, r4, r3
 8008cd8:	e7f2      	b.n	8008cc0 <floor+0xd0>
 8008cda:	2500      	movs	r5, #0
 8008cdc:	462c      	mov	r4, r5
 8008cde:	e7aa      	b.n	8008c36 <floor+0x46>
 8008ce0:	8800759c 	.word	0x8800759c
 8008ce4:	7e37e43c 	.word	0x7e37e43c
 8008ce8:	bff00000 	.word	0xbff00000
 8008cec:	000fffff 	.word	0x000fffff

08008cf0 <scalbn>:
 8008cf0:	b570      	push	{r4, r5, r6, lr}
 8008cf2:	ec55 4b10 	vmov	r4, r5, d0
 8008cf6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008cfa:	4606      	mov	r6, r0
 8008cfc:	462b      	mov	r3, r5
 8008cfe:	b99a      	cbnz	r2, 8008d28 <scalbn+0x38>
 8008d00:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008d04:	4323      	orrs	r3, r4
 8008d06:	d036      	beq.n	8008d76 <scalbn+0x86>
 8008d08:	4b39      	ldr	r3, [pc, #228]	; (8008df0 <scalbn+0x100>)
 8008d0a:	4629      	mov	r1, r5
 8008d0c:	ee10 0a10 	vmov	r0, s0
 8008d10:	2200      	movs	r2, #0
 8008d12:	f7f7 fc19 	bl	8000548 <__aeabi_dmul>
 8008d16:	4b37      	ldr	r3, [pc, #220]	; (8008df4 <scalbn+0x104>)
 8008d18:	429e      	cmp	r6, r3
 8008d1a:	4604      	mov	r4, r0
 8008d1c:	460d      	mov	r5, r1
 8008d1e:	da10      	bge.n	8008d42 <scalbn+0x52>
 8008d20:	a32b      	add	r3, pc, #172	; (adr r3, 8008dd0 <scalbn+0xe0>)
 8008d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d26:	e03a      	b.n	8008d9e <scalbn+0xae>
 8008d28:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008d2c:	428a      	cmp	r2, r1
 8008d2e:	d10c      	bne.n	8008d4a <scalbn+0x5a>
 8008d30:	ee10 2a10 	vmov	r2, s0
 8008d34:	4620      	mov	r0, r4
 8008d36:	4629      	mov	r1, r5
 8008d38:	f7f7 fa50 	bl	80001dc <__adddf3>
 8008d3c:	4604      	mov	r4, r0
 8008d3e:	460d      	mov	r5, r1
 8008d40:	e019      	b.n	8008d76 <scalbn+0x86>
 8008d42:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008d46:	460b      	mov	r3, r1
 8008d48:	3a36      	subs	r2, #54	; 0x36
 8008d4a:	4432      	add	r2, r6
 8008d4c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008d50:	428a      	cmp	r2, r1
 8008d52:	dd08      	ble.n	8008d66 <scalbn+0x76>
 8008d54:	2d00      	cmp	r5, #0
 8008d56:	a120      	add	r1, pc, #128	; (adr r1, 8008dd8 <scalbn+0xe8>)
 8008d58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d5c:	da1c      	bge.n	8008d98 <scalbn+0xa8>
 8008d5e:	a120      	add	r1, pc, #128	; (adr r1, 8008de0 <scalbn+0xf0>)
 8008d60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d64:	e018      	b.n	8008d98 <scalbn+0xa8>
 8008d66:	2a00      	cmp	r2, #0
 8008d68:	dd08      	ble.n	8008d7c <scalbn+0x8c>
 8008d6a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008d6e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008d72:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008d76:	ec45 4b10 	vmov	d0, r4, r5
 8008d7a:	bd70      	pop	{r4, r5, r6, pc}
 8008d7c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008d80:	da19      	bge.n	8008db6 <scalbn+0xc6>
 8008d82:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008d86:	429e      	cmp	r6, r3
 8008d88:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008d8c:	dd0a      	ble.n	8008da4 <scalbn+0xb4>
 8008d8e:	a112      	add	r1, pc, #72	; (adr r1, 8008dd8 <scalbn+0xe8>)
 8008d90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d1e2      	bne.n	8008d5e <scalbn+0x6e>
 8008d98:	a30f      	add	r3, pc, #60	; (adr r3, 8008dd8 <scalbn+0xe8>)
 8008d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9e:	f7f7 fbd3 	bl	8000548 <__aeabi_dmul>
 8008da2:	e7cb      	b.n	8008d3c <scalbn+0x4c>
 8008da4:	a10a      	add	r1, pc, #40	; (adr r1, 8008dd0 <scalbn+0xe0>)
 8008da6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d0b8      	beq.n	8008d20 <scalbn+0x30>
 8008dae:	a10e      	add	r1, pc, #56	; (adr r1, 8008de8 <scalbn+0xf8>)
 8008db0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008db4:	e7b4      	b.n	8008d20 <scalbn+0x30>
 8008db6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008dba:	3236      	adds	r2, #54	; 0x36
 8008dbc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008dc0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	4b0c      	ldr	r3, [pc, #48]	; (8008df8 <scalbn+0x108>)
 8008dc8:	2200      	movs	r2, #0
 8008dca:	e7e8      	b.n	8008d9e <scalbn+0xae>
 8008dcc:	f3af 8000 	nop.w
 8008dd0:	c2f8f359 	.word	0xc2f8f359
 8008dd4:	01a56e1f 	.word	0x01a56e1f
 8008dd8:	8800759c 	.word	0x8800759c
 8008ddc:	7e37e43c 	.word	0x7e37e43c
 8008de0:	8800759c 	.word	0x8800759c
 8008de4:	fe37e43c 	.word	0xfe37e43c
 8008de8:	c2f8f359 	.word	0xc2f8f359
 8008dec:	81a56e1f 	.word	0x81a56e1f
 8008df0:	43500000 	.word	0x43500000
 8008df4:	ffff3cb0 	.word	0xffff3cb0
 8008df8:	3c900000 	.word	0x3c900000

08008dfc <_init>:
 8008dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dfe:	bf00      	nop
 8008e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e02:	bc08      	pop	{r3}
 8008e04:	469e      	mov	lr, r3
 8008e06:	4770      	bx	lr

08008e08 <_fini>:
 8008e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e0a:	bf00      	nop
 8008e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e0e:	bc08      	pop	{r3}
 8008e10:	469e      	mov	lr, r3
 8008e12:	4770      	bx	lr
