
MotorController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085fc  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08008790  08008790  00018790  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089b0  080089b0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080089b0  080089b0  000189b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089b8  080089b8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089b8  080089b8  000189b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089bc  080089bc  000189bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080089c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  2000001c  080089dc  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  080089dc  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017735  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c64  00000000  00000000  00037781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  0003a3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001310  00000000  00000000  0003b800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003777  00000000  00000000  0003cb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014970  00000000  00000000  00040287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbeff  00000000  00000000  00054bf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00130af6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059bc  00000000  00000000  00130b4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008774 	.word	0x08008774

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08008774 	.word	0x08008774

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b96e 	b.w	8000e60 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	468c      	mov	ip, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 8083 	bne.w	8000cb2 <__udivmoddi4+0x116>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	4617      	mov	r7, r2
 8000bb0:	d947      	bls.n	8000c42 <__udivmoddi4+0xa6>
 8000bb2:	fab2 f282 	clz	r2, r2
 8000bb6:	b142      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb8:	f1c2 0020 	rsb	r0, r2, #32
 8000bbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000bc0:	4091      	lsls	r1, r2
 8000bc2:	4097      	lsls	r7, r2
 8000bc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000bc8:	4094      	lsls	r4, r2
 8000bca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000bd4:	fa1f fe87 	uxth.w	lr, r7
 8000bd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be0:	fb06 f10e 	mul.w	r1, r6, lr
 8000be4:	4299      	cmp	r1, r3
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x60>
 8000be8:	18fb      	adds	r3, r7, r3
 8000bea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bee:	f080 8119 	bcs.w	8000e24 <__udivmoddi4+0x288>
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	f240 8116 	bls.w	8000e24 <__udivmoddi4+0x288>
 8000bf8:	3e02      	subs	r6, #2
 8000bfa:	443b      	add	r3, r7
 8000bfc:	1a5b      	subs	r3, r3, r1
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c04:	fb08 3310 	mls	r3, r8, r0, r3
 8000c08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	45a6      	cmp	lr, r4
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x8c>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1a:	f080 8105 	bcs.w	8000e28 <__udivmoddi4+0x28c>
 8000c1e:	45a6      	cmp	lr, r4
 8000c20:	f240 8102 	bls.w	8000e28 <__udivmoddi4+0x28c>
 8000c24:	3802      	subs	r0, #2
 8000c26:	443c      	add	r4, r7
 8000c28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	2600      	movs	r6, #0
 8000c32:	b11d      	cbz	r5, 8000c3c <__udivmoddi4+0xa0>
 8000c34:	40d4      	lsrs	r4, r2
 8000c36:	2300      	movs	r3, #0
 8000c38:	e9c5 4300 	strd	r4, r3, [r5]
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	b902      	cbnz	r2, 8000c46 <__udivmoddi4+0xaa>
 8000c44:	deff      	udf	#255	; 0xff
 8000c46:	fab2 f282 	clz	r2, r2
 8000c4a:	2a00      	cmp	r2, #0
 8000c4c:	d150      	bne.n	8000cf0 <__udivmoddi4+0x154>
 8000c4e:	1bcb      	subs	r3, r1, r7
 8000c50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c54:	fa1f f887 	uxth.w	r8, r7
 8000c58:	2601      	movs	r6, #1
 8000c5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c5e:	0c21      	lsrs	r1, r4, #16
 8000c60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c68:	fb08 f30c 	mul.w	r3, r8, ip
 8000c6c:	428b      	cmp	r3, r1
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0xe4>
 8000c70:	1879      	adds	r1, r7, r1
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0xe2>
 8000c78:	428b      	cmp	r3, r1
 8000c7a:	f200 80e9 	bhi.w	8000e50 <__udivmoddi4+0x2b4>
 8000c7e:	4684      	mov	ip, r0
 8000c80:	1ac9      	subs	r1, r1, r3
 8000c82:	b2a3      	uxth	r3, r4
 8000c84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c90:	fb08 f800 	mul.w	r8, r8, r0
 8000c94:	45a0      	cmp	r8, r4
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0x10c>
 8000c98:	193c      	adds	r4, r7, r4
 8000c9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x10a>
 8000ca0:	45a0      	cmp	r8, r4
 8000ca2:	f200 80d9 	bhi.w	8000e58 <__udivmoddi4+0x2bc>
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	eba4 0408 	sub.w	r4, r4, r8
 8000cac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cb0:	e7bf      	b.n	8000c32 <__udivmoddi4+0x96>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0x12e>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80b1 	beq.w	8000e1e <__udivmoddi4+0x282>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x1cc>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0x140>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80b8 	bhi.w	8000e4c <__udivmoddi4+0x2b0>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0103 	sbc.w	r1, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	468c      	mov	ip, r1
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0a8      	beq.n	8000c3c <__udivmoddi4+0xa0>
 8000cea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cee:	e7a5      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f603 	lsr.w	r6, r0, r3
 8000cf8:	4097      	lsls	r7, r2
 8000cfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000cfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d02:	40d9      	lsrs	r1, r3
 8000d04:	4330      	orrs	r0, r6
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d0c:	fa1f f887 	uxth.w	r8, r7
 8000d10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d18:	fb06 f108 	mul.w	r1, r6, r8
 8000d1c:	4299      	cmp	r1, r3
 8000d1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x19c>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d2a:	f080 808d 	bcs.w	8000e48 <__udivmoddi4+0x2ac>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 808a 	bls.w	8000e48 <__udivmoddi4+0x2ac>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b281      	uxth	r1, r0
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d48:	fb00 f308 	mul.w	r3, r0, r8
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	d907      	bls.n	8000d60 <__udivmoddi4+0x1c4>
 8000d50:	1879      	adds	r1, r7, r1
 8000d52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d56:	d273      	bcs.n	8000e40 <__udivmoddi4+0x2a4>
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d971      	bls.n	8000e40 <__udivmoddi4+0x2a4>
 8000d5c:	3802      	subs	r0, #2
 8000d5e:	4439      	add	r1, r7
 8000d60:	1acb      	subs	r3, r1, r3
 8000d62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d66:	e778      	b.n	8000c5a <__udivmoddi4+0xbe>
 8000d68:	f1c6 0c20 	rsb	ip, r6, #32
 8000d6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d74:	431c      	orrs	r4, r3
 8000d76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d86:	431f      	orrs	r7, r3
 8000d88:	0c3b      	lsrs	r3, r7, #16
 8000d8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d8e:	fa1f f884 	uxth.w	r8, r4
 8000d92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d9e:	458a      	cmp	sl, r1
 8000da0:	fa02 f206 	lsl.w	r2, r2, r6
 8000da4:	fa00 f306 	lsl.w	r3, r0, r6
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x220>
 8000daa:	1861      	adds	r1, r4, r1
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db0:	d248      	bcs.n	8000e44 <__udivmoddi4+0x2a8>
 8000db2:	458a      	cmp	sl, r1
 8000db4:	d946      	bls.n	8000e44 <__udivmoddi4+0x2a8>
 8000db6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dba:	4421      	add	r1, r4
 8000dbc:	eba1 010a 	sub.w	r1, r1, sl
 8000dc0:	b2bf      	uxth	r7, r7
 8000dc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dce:	fb00 f808 	mul.w	r8, r0, r8
 8000dd2:	45b8      	cmp	r8, r7
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x24a>
 8000dd6:	19e7      	adds	r7, r4, r7
 8000dd8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ddc:	d22e      	bcs.n	8000e3c <__udivmoddi4+0x2a0>
 8000dde:	45b8      	cmp	r8, r7
 8000de0:	d92c      	bls.n	8000e3c <__udivmoddi4+0x2a0>
 8000de2:	3802      	subs	r0, #2
 8000de4:	4427      	add	r7, r4
 8000de6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dea:	eba7 0708 	sub.w	r7, r7, r8
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	454f      	cmp	r7, r9
 8000df4:	46c6      	mov	lr, r8
 8000df6:	4649      	mov	r1, r9
 8000df8:	d31a      	bcc.n	8000e30 <__udivmoddi4+0x294>
 8000dfa:	d017      	beq.n	8000e2c <__udivmoddi4+0x290>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x27a>
 8000dfe:	ebb3 020e 	subs.w	r2, r3, lr
 8000e02:	eb67 0701 	sbc.w	r7, r7, r1
 8000e06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e0a:	40f2      	lsrs	r2, r6
 8000e0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e10:	40f7      	lsrs	r7, r6
 8000e12:	e9c5 2700 	strd	r2, r7, [r5]
 8000e16:	2600      	movs	r6, #0
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	462e      	mov	r6, r5
 8000e20:	4628      	mov	r0, r5
 8000e22:	e70b      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000e24:	4606      	mov	r6, r0
 8000e26:	e6e9      	b.n	8000bfc <__udivmoddi4+0x60>
 8000e28:	4618      	mov	r0, r3
 8000e2a:	e6fd      	b.n	8000c28 <__udivmoddi4+0x8c>
 8000e2c:	4543      	cmp	r3, r8
 8000e2e:	d2e5      	bcs.n	8000dfc <__udivmoddi4+0x260>
 8000e30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e34:	eb69 0104 	sbc.w	r1, r9, r4
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e7df      	b.n	8000dfc <__udivmoddi4+0x260>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	e7d2      	b.n	8000de6 <__udivmoddi4+0x24a>
 8000e40:	4660      	mov	r0, ip
 8000e42:	e78d      	b.n	8000d60 <__udivmoddi4+0x1c4>
 8000e44:	4681      	mov	r9, r0
 8000e46:	e7b9      	b.n	8000dbc <__udivmoddi4+0x220>
 8000e48:	4666      	mov	r6, ip
 8000e4a:	e775      	b.n	8000d38 <__udivmoddi4+0x19c>
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	e74a      	b.n	8000ce6 <__udivmoddi4+0x14a>
 8000e50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e54:	4439      	add	r1, r7
 8000e56:	e713      	b.n	8000c80 <__udivmoddi4+0xe4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	443c      	add	r4, r7
 8000e5c:	e724      	b.n	8000ca8 <__udivmoddi4+0x10c>
 8000e5e:	bf00      	nop

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <to_frame>:
 */

#include "comm_relay.h"
#include "stdint.h"

int to_frame(char * frame, uint8_t *revolutionAddr, uint8_t *ID) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]

	int i = 2, j = 0, PACKAGE_SIZE = 0;
 8000e70:	2302      	movs	r3, #2
 8000e72:	61fb      	str	r3, [r7, #28]
 8000e74:	2300      	movs	r3, #0
 8000e76:	61bb      	str	r3, [r7, #24]
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]

	frame[0] = COMM_DEL_START;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2224      	movs	r2, #36	; 0x24
 8000e80:	701a      	strb	r2, [r3, #0]
	frame[1] = ID;
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	3301      	adds	r3, #1
 8000e88:	b2d2      	uxtb	r2, r2
 8000e8a:	701a      	strb	r2, [r3, #0]

	if (ID == 3) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b03      	cmp	r3, #3
 8000e90:	d102      	bne.n	8000e98 <to_frame+0x34>
		PACKAGE_SIZE = 5;
 8000e92:	2305      	movs	r3, #5
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	e02d      	b.n	8000ef4 <to_frame+0x90>
	} else if (ID == 2) {
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d12a      	bne.n	8000ef4 <to_frame+0x90>
		PACKAGE_SIZE = 24;
 8000e9e:	2318      	movs	r3, #24
 8000ea0:	617b      	str	r3, [r7, #20]
	}

	for (; i < FRAME_SIZE && j < PACKAGE_SIZE; i++, j++) {
 8000ea2:	e027      	b.n	8000ef4 <to_frame+0x90>
		char c;
		c = *(revolutionAddr + j);
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	68ba      	ldr	r2, [r7, #8]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	74fb      	strb	r3, [r7, #19]

		if (is_special_character(c)) {
 8000eae:	7cfb      	ldrb	r3, [r7, #19]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f000 f830 	bl	8000f16 <is_special_character>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d010      	beq.n	8000ede <to_frame+0x7a>
			frame[i] = COMM_ESCAPE;
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	2223      	movs	r2, #35	; 0x23
 8000ec4:	701a      	strb	r2, [r3, #0]
			frame[i+1] = c + 2;
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	4413      	add	r3, r2
 8000ece:	7cfa      	ldrb	r2, [r7, #19]
 8000ed0:	3202      	adds	r2, #2
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	701a      	strb	r2, [r3, #0]
			i++;
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	61fb      	str	r3, [r7, #28]
 8000edc:	e004      	b.n	8000ee8 <to_frame+0x84>
		} else {
			frame[i] = c;
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	68fa      	ldr	r2, [r7, #12]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	7cfa      	ldrb	r2, [r7, #19]
 8000ee6:	701a      	strb	r2, [r3, #0]
	for (; i < FRAME_SIZE && j < PACKAGE_SIZE; i++, j++) {
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	3301      	adds	r3, #1
 8000eec:	61fb      	str	r3, [r7, #28]
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	61bb      	str	r3, [r7, #24]
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	2b32      	cmp	r3, #50	; 0x32
 8000ef8:	dc03      	bgt.n	8000f02 <to_frame+0x9e>
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	dbd0      	blt.n	8000ea4 <to_frame+0x40>
		}
	}

	frame[i] = COMM_DEL_STOP;
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	68fa      	ldr	r2, [r7, #12]
 8000f06:	4413      	add	r3, r2
 8000f08:	2240      	movs	r2, #64	; 0x40
 8000f0a:	701a      	strb	r2, [r3, #0]

	return 1;
 8000f0c:	2301      	movs	r3, #1
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3720      	adds	r7, #32
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <is_special_character>:


int is_special_character(char c) {
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	71fb      	strb	r3, [r7, #7]
	if ((c == COMM_DEL_START) || (c == COMM_DEL_STOP) || (c == COMM_ESCAPE) || (c == 0)) return 1;
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	2b24      	cmp	r3, #36	; 0x24
 8000f24:	d008      	beq.n	8000f38 <is_special_character+0x22>
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	2b40      	cmp	r3, #64	; 0x40
 8000f2a:	d005      	beq.n	8000f38 <is_special_character+0x22>
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	2b23      	cmp	r3, #35	; 0x23
 8000f30:	d002      	beq.n	8000f38 <is_special_character+0x22>
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d101      	bne.n	8000f3c <is_special_character+0x26>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e000      	b.n	8000f3e <is_special_character+0x28>
	return 0;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f50:	f001 fc29 	bl	80027a6 <HAL_Init>

	/* USER CODE BEGIN Init */

	// Motor Initialization
	motor_init(&motorR, 'R');
 8000f54:	2152      	movs	r1, #82	; 0x52
 8000f56:	4825      	ldr	r0, [pc, #148]	; (8000fec <main+0xa0>)
 8000f58:	f000 fb8a 	bl	8001670 <motor_init>
	motor_init(&motorL, 'L');
 8000f5c:	214c      	movs	r1, #76	; 0x4c
 8000f5e:	4824      	ldr	r0, [pc, #144]	; (8000ff0 <main+0xa4>)
 8000f60:	f000 fb86 	bl	8001670 <motor_init>

	motorEncoder_init(&encoderR);
 8000f64:	4823      	ldr	r0, [pc, #140]	; (8000ff4 <main+0xa8>)
 8000f66:	f000 fb99 	bl	800169c <motorEncoder_init>
	motorEncoder_init(&encoderL);
 8000f6a:	4823      	ldr	r0, [pc, #140]	; (8000ff8 <main+0xac>)
 8000f6c:	f000 fb96 	bl	800169c <motorEncoder_init>

	motorController_init(&controllerR, &motorR, &encoderR);
 8000f70:	4a20      	ldr	r2, [pc, #128]	; (8000ff4 <main+0xa8>)
 8000f72:	491e      	ldr	r1, [pc, #120]	; (8000fec <main+0xa0>)
 8000f74:	4821      	ldr	r0, [pc, #132]	; (8000ffc <main+0xb0>)
 8000f76:	f000 fbac 	bl	80016d2 <motorController_init>
	motorController_init(&controllerL, &motorL, &encoderL);
 8000f7a:	4a1f      	ldr	r2, [pc, #124]	; (8000ff8 <main+0xac>)
 8000f7c:	491c      	ldr	r1, [pc, #112]	; (8000ff0 <main+0xa4>)
 8000f7e:	4820      	ldr	r0, [pc, #128]	; (8001000 <main+0xb4>)
 8000f80:	f000 fba7 	bl	80016d2 <motorController_init>

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f84:	f000 f84c 	bl	8001020 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f88:	f000 fad2 	bl	8001530 <MX_GPIO_Init>
	MX_TIM1_Init();
 8000f8c:	f000 f940 	bl	8001210 <MX_TIM1_Init>
	MX_TIM6_Init();
 8000f90:	f000 fa30 	bl	80013f4 <MX_TIM6_Init>
	MX_USART2_UART_Init();
 8000f94:	f000 fa9c 	bl	80014d0 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8000f98:	f000 f8c6 	bl	8001128 <MX_ADC1_Init>
	MX_TIM7_Init();
 8000f9c:	f000 fa60 	bl	8001460 <MX_TIM7_Init>
	MX_TIM2_Init();
 8000fa0:	f000 f9d2 	bl	8001348 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim6);
 8000fa4:	4817      	ldr	r0, [pc, #92]	; (8001004 <main+0xb8>)
 8000fa6:	f004 faed 	bl	8005584 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8000faa:	4817      	ldr	r0, [pc, #92]	; (8001008 <main+0xbc>)
 8000fac:	f004 faea 	bl	8005584 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart2, &message, 1);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	4916      	ldr	r1, [pc, #88]	; (800100c <main+0xc0>)
 8000fb4:	4816      	ldr	r0, [pc, #88]	; (8001010 <main+0xc4>)
 8000fb6:	f005 fb7f 	bl	80066b8 <HAL_UART_Receive_IT>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000fba:	217f      	movs	r1, #127	; 0x7f
 8000fbc:	4815      	ldr	r0, [pc, #84]	; (8001014 <main+0xc8>)
 8000fbe:	f002 fd6b 	bl	8003a98 <HAL_ADCEx_Calibration_Start>

	positionCalculationPeriod = ((htim6.Instance->ARR + 1) / (80000000 / (htim6.Instance->PSC + 1)));
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <main+0xb8>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc8:	1c5a      	adds	r2, r3, #1
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <main+0xb8>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	4911      	ldr	r1, [pc, #68]	; (8001018 <main+0xcc>)
 8000fd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fdc:	ee07 3a90 	vmov	s15, r3
 8000fe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fe4:	4b0d      	ldr	r3, [pc, #52]	; (800101c <main+0xd0>)
 8000fe6:	edc3 7a00 	vstr	s15, [r3]

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000fea:	e7fe      	b.n	8000fea <main+0x9e>
 8000fec:	200000ac 	.word	0x200000ac
 8000ff0:	200000b4 	.word	0x200000b4
 8000ff4:	2000031c 	.word	0x2000031c
 8000ff8:	200002bc 	.word	0x200002bc
 8000ffc:	20000188 	.word	0x20000188
 8001000:	200000c0 	.word	0x200000c0
 8001004:	2000013c 	.word	0x2000013c
 8001008:	200002d0 	.word	0x200002d0
 800100c:	20000038 	.word	0x20000038
 8001010:	20000238 	.word	0x20000238
 8001014:	200000d8 	.word	0x200000d8
 8001018:	04c4b400 	.word	0x04c4b400
 800101c:	200000bc 	.word	0x200000bc

08001020 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b0ac      	sub	sp, #176	; 0xb0
 8001024:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001026:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800102a:	2244      	movs	r2, #68	; 0x44
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f006 fb12 	bl	8007658 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001034:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	2254      	movs	r2, #84	; 0x54
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f006 fb04 	bl	8007658 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001050:	2310      	movs	r3, #16
 8001052:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001054:	2301      	movs	r3, #1
 8001056:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.MSICalibrationValue = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001060:	2360      	movs	r3, #96	; 0x60
 8001062:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001066:	2302      	movs	r3, #2
 8001068:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800106c:	2301      	movs	r3, #1
 800106e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001072:	2301      	movs	r3, #1
 8001074:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.PLL.PLLN = 40;
 8001078:	2328      	movs	r3, #40	; 0x28
 800107a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800107e:	2307      	movs	r3, #7
 8001080:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001084:	2302      	movs	r3, #2
 8001086:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800108a:	2302      	movs	r3, #2
 800108c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001090:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001094:	4618      	mov	r0, r3
 8001096:	f003 f911 	bl	80042bc <HAL_RCC_OscConfig>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <SystemClock_Config+0x84>
		Error_Handler();
 80010a0:	f000 ffda 	bl	8002058 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80010a4:	230f      	movs	r3, #15
 80010a6:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a8:	2303      	movs	r3, #3
 80010aa:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	66bb      	str	r3, [r7, #104]	; 0x68

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80010b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010bc:	2104      	movs	r1, #4
 80010be:	4618      	mov	r0, r3
 80010c0:	f003 fd1c 	bl	8004afc <HAL_RCC_ClockConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <SystemClock_Config+0xae>
		Error_Handler();
 80010ca:	f000 ffc5 	bl	8002058 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_ADC;
 80010ce:	f244 0302 	movw	r3, #16386	; 0x4002
 80010d2:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80010d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80010dc:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80010de:	2301      	movs	r3, #1
 80010e0:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80010e2:	2301      	movs	r3, #1
 80010e4:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80010e6:	2310      	movs	r3, #16
 80010e8:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80010ea:	2307      	movs	r3, #7
 80010ec:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010ee:	2302      	movs	r3, #2
 80010f0:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 80010f2:	2308      	movs	r3, #8
 80010f4:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80010f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010fa:	623b      	str	r3, [r7, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	4618      	mov	r0, r3
 8001100:	f003 ff02 	bl	8004f08 <HAL_RCCEx_PeriphCLKConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0xee>
		Error_Handler();
 800110a:	f000 ffa5 	bl	8002058 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 800110e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001112:	f003 f87d 	bl	8004210 <HAL_PWREx_ControlVoltageScaling>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <SystemClock_Config+0x100>
		Error_Handler();
 800111c:	f000 ff9c 	bl	8002058 <Error_Handler>
	}
}
 8001120:	bf00      	nop
 8001122:	37b0      	adds	r7, #176	; 0xb0
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800112e:	f107 0308 	add.w	r3, r7, #8
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]
 800113e:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001140:	4b2f      	ldr	r3, [pc, #188]	; (8001200 <MX_ADC1_Init+0xd8>)
 8001142:	4a30      	ldr	r2, [pc, #192]	; (8001204 <MX_ADC1_Init+0xdc>)
 8001144:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001146:	4b2e      	ldr	r3, [pc, #184]	; (8001200 <MX_ADC1_Init+0xd8>)
 8001148:	2200      	movs	r2, #0
 800114a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800114c:	4b2c      	ldr	r3, [pc, #176]	; (8001200 <MX_ADC1_Init+0xd8>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001152:	4b2b      	ldr	r3, [pc, #172]	; (8001200 <MX_ADC1_Init+0xd8>)
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001158:	4b29      	ldr	r3, [pc, #164]	; (8001200 <MX_ADC1_Init+0xd8>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800115e:	4b28      	ldr	r3, [pc, #160]	; (8001200 <MX_ADC1_Init+0xd8>)
 8001160:	2204      	movs	r2, #4
 8001162:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001164:	4b26      	ldr	r3, [pc, #152]	; (8001200 <MX_ADC1_Init+0xd8>)
 8001166:	2200      	movs	r2, #0
 8001168:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800116a:	4b25      	ldr	r3, [pc, #148]	; (8001200 <MX_ADC1_Init+0xd8>)
 800116c:	2200      	movs	r2, #0
 800116e:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8001170:	4b23      	ldr	r3, [pc, #140]	; (8001200 <MX_ADC1_Init+0xd8>)
 8001172:	2201      	movs	r2, #1
 8001174:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001176:	4b22      	ldr	r3, [pc, #136]	; (8001200 <MX_ADC1_Init+0xd8>)
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800117e:	4b20      	ldr	r3, [pc, #128]	; (8001200 <MX_ADC1_Init+0xd8>)
 8001180:	2200      	movs	r2, #0
 8001182:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001184:	4b1e      	ldr	r3, [pc, #120]	; (8001200 <MX_ADC1_Init+0xd8>)
 8001186:	2200      	movs	r2, #0
 8001188:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800118a:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <MX_ADC1_Init+0xd8>)
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001192:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <MX_ADC1_Init+0xd8>)
 8001194:	2200      	movs	r2, #0
 8001196:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8001198:	4b19      	ldr	r3, [pc, #100]	; (8001200 <MX_ADC1_Init+0xd8>)
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80011a0:	4817      	ldr	r0, [pc, #92]	; (8001200 <MX_ADC1_Init+0xd8>)
 80011a2:	f001 fd63 	bl	8002c6c <HAL_ADC_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_ADC1_Init+0x88>
		Error_Handler();
 80011ac:	f000 ff54 	bl	8002058 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 80011b0:	4b15      	ldr	r3, [pc, #84]	; (8001208 <MX_ADC1_Init+0xe0>)
 80011b2:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80011b4:	2306      	movs	r3, #6
 80011b6:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011b8:	2300      	movs	r3, #0
 80011ba:	613b      	str	r3, [r7, #16]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011bc:	237f      	movs	r3, #127	; 0x7f
 80011be:	617b      	str	r3, [r7, #20]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011c0:	2304      	movs	r3, #4
 80011c2:	61bb      	str	r3, [r7, #24]
	sConfig.Offset = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80011c8:	f107 0308 	add.w	r3, r7, #8
 80011cc:	4619      	mov	r1, r3
 80011ce:	480c      	ldr	r0, [pc, #48]	; (8001200 <MX_ADC1_Init+0xd8>)
 80011d0:	f001 ff94 	bl	80030fc <HAL_ADC_ConfigChannel>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_ADC1_Init+0xb6>
		Error_Handler();
 80011da:	f000 ff3d 	bl	8002058 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */
	__HAL_RCC_ADC_CLK_ENABLE();
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <MX_ADC1_Init+0xe4>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e2:	4a0a      	ldr	r2, [pc, #40]	; (800120c <MX_ADC1_Init+0xe4>)
 80011e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ea:	4b08      	ldr	r3, [pc, #32]	; (800120c <MX_ADC1_Init+0xe4>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
	/* USER CODE END ADC1_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	3720      	adds	r7, #32
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200000d8 	.word	0x200000d8
 8001204:	50040000 	.word	0x50040000
 8001208:	21800100 	.word	0x21800100
 800120c:	40021000 	.word	0x40021000

08001210 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b096      	sub	sp, #88	; 0x58
 8001214:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001216:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001222:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]
 8001232:	615a      	str	r2, [r3, #20]
 8001234:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	222c      	movs	r2, #44	; 0x2c
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f006 fa0b 	bl	8007658 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001242:	4b3f      	ldr	r3, [pc, #252]	; (8001340 <MX_TIM1_Init+0x130>)
 8001244:	4a3f      	ldr	r2, [pc, #252]	; (8001344 <MX_TIM1_Init+0x134>)
 8001246:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001248:	4b3d      	ldr	r3, [pc, #244]	; (8001340 <MX_TIM1_Init+0x130>)
 800124a:	2200      	movs	r2, #0
 800124c:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124e:	4b3c      	ldr	r3, [pc, #240]	; (8001340 <MX_TIM1_Init+0x130>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001254:	4b3a      	ldr	r3, [pc, #232]	; (8001340 <MX_TIM1_Init+0x130>)
 8001256:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800125a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125c:	4b38      	ldr	r3, [pc, #224]	; (8001340 <MX_TIM1_Init+0x130>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001262:	4b37      	ldr	r3, [pc, #220]	; (8001340 <MX_TIM1_Init+0x130>)
 8001264:	2200      	movs	r2, #0
 8001266:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001268:	4b35      	ldr	r3, [pc, #212]	; (8001340 <MX_TIM1_Init+0x130>)
 800126a:	2280      	movs	r2, #128	; 0x80
 800126c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800126e:	4834      	ldr	r0, [pc, #208]	; (8001340 <MX_TIM1_Init+0x130>)
 8001270:	f004 fa33 	bl	80056da <HAL_TIM_PWM_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM1_Init+0x6e>
		Error_Handler();
 800127a:	f000 feed 	bl	8002058 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127e:	2300      	movs	r3, #0
 8001280:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001282:	2300      	movs	r3, #0
 8001284:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 800128a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800128e:	4619      	mov	r1, r3
 8001290:	482b      	ldr	r0, [pc, #172]	; (8001340 <MX_TIM1_Init+0x130>)
 8001292:	f005 f833 	bl	80062fc <HAL_TIMEx_MasterConfigSynchronization>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM1_Init+0x90>
		Error_Handler();
 800129c:	f000 fedc 	bl	8002058 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012a0:	2360      	movs	r3, #96	; 0x60
 80012a2:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012a8:	2300      	movs	r3, #0
 80012aa:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012ac:	2300      	movs	r3, #0
 80012ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012b4:	2300      	movs	r3, #0
 80012b6:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012b8:	2300      	movs	r3, #0
 80012ba:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80012bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012c0:	2200      	movs	r2, #0
 80012c2:	4619      	mov	r1, r3
 80012c4:	481e      	ldr	r0, [pc, #120]	; (8001340 <MX_TIM1_Init+0x130>)
 80012c6:	f004 fbf5 	bl	8005ab4 <HAL_TIM_PWM_ConfigChannel>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM1_Init+0xc4>
		Error_Handler();
 80012d0:	f000 fec2 	bl	8002058 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 80012d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012d8:	2204      	movs	r2, #4
 80012da:	4619      	mov	r1, r3
 80012dc:	4818      	ldr	r0, [pc, #96]	; (8001340 <MX_TIM1_Init+0x130>)
 80012de:	f004 fbe9 	bl	8005ab4 <HAL_TIM_PWM_ConfigChannel>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM1_Init+0xdc>
		Error_Handler();
 80012e8:	f000 feb6 	bl	8002058 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001300:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001304:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800130a:	2300      	movs	r3, #0
 800130c:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800130e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	4619      	mov	r1, r3
 8001320:	4807      	ldr	r0, [pc, #28]	; (8001340 <MX_TIM1_Init+0x130>)
 8001322:	f005 f851 	bl	80063c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM1_Init+0x120>
		Error_Handler();
 800132c:	f000 fe94 	bl	8002058 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001330:	4803      	ldr	r0, [pc, #12]	; (8001340 <MX_TIM1_Init+0x130>)
 8001332:	f001 f8b7 	bl	80024a4 <HAL_TIM_MspPostInit>

}
 8001336:	bf00      	nop
 8001338:	3758      	adds	r7, #88	; 0x58
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200001a0 	.word	0x200001a0
 8001344:	40012c00 	.word	0x40012c00

08001348 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	; 0x28
 800134c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800134e:	f107 031c 	add.w	r3, r7, #28
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800135a:	463b      	mov	r3, r7
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
 8001368:	615a      	str	r2, [r3, #20]
 800136a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800136c:	4b20      	ldr	r3, [pc, #128]	; (80013f0 <MX_TIM2_Init+0xa8>)
 800136e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001372:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 80 - 1;
 8001374:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <MX_TIM2_Init+0xa8>)
 8001376:	224f      	movs	r2, #79	; 0x4f
 8001378:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137a:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <MX_TIM2_Init+0xa8>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10000 - 1;
 8001380:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <MX_TIM2_Init+0xa8>)
 8001382:	f242 720f 	movw	r2, #9999	; 0x270f
 8001386:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001388:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <MX_TIM2_Init+0xa8>)
 800138a:	2200      	movs	r2, #0
 800138c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138e:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <MX_TIM2_Init+0xa8>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK) {
 8001394:	4816      	ldr	r0, [pc, #88]	; (80013f0 <MX_TIM2_Init+0xa8>)
 8001396:	f004 f949 	bl	800562c <HAL_TIM_OC_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM2_Init+0x5c>
		Error_Handler();
 80013a0:	f000 fe5a 	bl	8002058 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	4619      	mov	r1, r3
 80013b2:	480f      	ldr	r0, [pc, #60]	; (80013f0 <MX_TIM2_Init+0xa8>)
 80013b4:	f004 ffa2 	bl	80062fc <HAL_TIMEx_MasterConfigSynchronization>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM2_Init+0x7a>
		Error_Handler();
 80013be:	f000 fe4b 	bl	8002058 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80013c2:	2300      	movs	r3, #0
 80013c4:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 80013d2:	463b      	mov	r3, r7
 80013d4:	2204      	movs	r2, #4
 80013d6:	4619      	mov	r1, r3
 80013d8:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_TIM2_Init+0xa8>)
 80013da:	f004 faf5 	bl	80059c8 <HAL_TIM_OC_ConfigChannel>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM2_Init+0xa0>
		Error_Handler();
 80013e4:	f000 fe38 	bl	8002058 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	3728      	adds	r7, #40	; 0x28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	200001ec 	.word	0x200001ec

080013f4 <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8001404:	4b14      	ldr	r3, [pc, #80]	; (8001458 <MX_TIM6_Init+0x64>)
 8001406:	4a15      	ldr	r2, [pc, #84]	; (800145c <MX_TIM6_Init+0x68>)
 8001408:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 160 - 1;
 800140a:	4b13      	ldr	r3, [pc, #76]	; (8001458 <MX_TIM6_Init+0x64>)
 800140c:	229f      	movs	r2, #159	; 0x9f
 800140e:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <MX_TIM6_Init+0x64>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 50000 - 1;
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <MX_TIM6_Init+0x64>)
 8001418:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800141c:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800141e:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <MX_TIM6_Init+0x64>)
 8001420:	2280      	movs	r2, #128	; 0x80
 8001422:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8001424:	480c      	ldr	r0, [pc, #48]	; (8001458 <MX_TIM6_Init+0x64>)
 8001426:	f004 f855 	bl	80054d4 <HAL_TIM_Base_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM6_Init+0x40>
		Error_Handler();
 8001430:	f000 fe12 	bl	8002058 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001434:	2300      	movs	r3, #0
 8001436:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	4619      	mov	r1, r3
 8001440:	4805      	ldr	r0, [pc, #20]	; (8001458 <MX_TIM6_Init+0x64>)
 8001442:	f004 ff5b 	bl	80062fc <HAL_TIMEx_MasterConfigSynchronization>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM6_Init+0x5c>
		Error_Handler();
 800144c:	f000 fe04 	bl	8002058 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	2000013c 	.word	0x2000013c
 800145c:	40001000 	.word	0x40001000

08001460 <MX_TIM7_Init>:
/**
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 8001470:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <MX_TIM7_Init+0x68>)
 8001472:	4a16      	ldr	r2, [pc, #88]	; (80014cc <MX_TIM7_Init+0x6c>)
 8001474:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 65535;
 8001476:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <MX_TIM7_Init+0x68>)
 8001478:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800147c:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <MX_TIM7_Init+0x68>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 12207 - 1;
 8001484:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <MX_TIM7_Init+0x68>)
 8001486:	f642 72ae 	movw	r2, #12206	; 0x2fae
 800148a:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800148c:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <MX_TIM7_Init+0x68>)
 800148e:	2280      	movs	r2, #128	; 0x80
 8001490:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8001492:	480d      	ldr	r0, [pc, #52]	; (80014c8 <MX_TIM7_Init+0x68>)
 8001494:	f004 f81e 	bl	80054d4 <HAL_TIM_Base_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM7_Init+0x42>
		Error_Handler();
 800149e:	f000 fddb 	bl	8002058 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	4619      	mov	r1, r3
 80014ae:	4806      	ldr	r0, [pc, #24]	; (80014c8 <MX_TIM7_Init+0x68>)
 80014b0:	f004 ff24 	bl	80062fc <HAL_TIMEx_MasterConfigSynchronization>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM7_Init+0x5e>
		Error_Handler();
 80014ba:	f000 fdcd 	bl	8002058 <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200002d0 	.word	0x200002d0
 80014cc:	40001400 	.word	0x40001400

080014d0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80014d4:	4b14      	ldr	r3, [pc, #80]	; (8001528 <MX_USART2_UART_Init+0x58>)
 80014d6:	4a15      	ldr	r2, [pc, #84]	; (800152c <MX_USART2_UART_Init+0x5c>)
 80014d8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80014da:	4b13      	ldr	r3, [pc, #76]	; (8001528 <MX_USART2_UART_Init+0x58>)
 80014dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <MX_USART2_UART_Init+0x58>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80014e8:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <MX_USART2_UART_Init+0x58>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <MX_USART2_UART_Init+0x58>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <MX_USART2_UART_Init+0x58>)
 80014f6:	220c      	movs	r2, #12
 80014f8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <MX_USART2_UART_Init+0x58>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001500:	4b09      	ldr	r3, [pc, #36]	; (8001528 <MX_USART2_UART_Init+0x58>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001506:	4b08      	ldr	r3, [pc, #32]	; (8001528 <MX_USART2_UART_Init+0x58>)
 8001508:	2200      	movs	r2, #0
 800150a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <MX_USART2_UART_Init+0x58>)
 800150e:	2200      	movs	r2, #0
 8001510:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001512:	4805      	ldr	r0, [pc, #20]	; (8001528 <MX_USART2_UART_Init+0x58>)
 8001514:	f004 ffee 	bl	80064f4 <HAL_UART_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800151e:	f000 fd9b 	bl	8002058 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000238 	.word	0x20000238
 800152c:	40004400 	.word	0x40004400

08001530 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001536:	f107 030c 	add.w	r3, r7, #12
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
 8001544:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001546:	4b47      	ldr	r3, [pc, #284]	; (8001664 <MX_GPIO_Init+0x134>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	4a46      	ldr	r2, [pc, #280]	; (8001664 <MX_GPIO_Init+0x134>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001552:	4b44      	ldr	r3, [pc, #272]	; (8001664 <MX_GPIO_Init+0x134>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800155e:	4b41      	ldr	r3, [pc, #260]	; (8001664 <MX_GPIO_Init+0x134>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001562:	4a40      	ldr	r2, [pc, #256]	; (8001664 <MX_GPIO_Init+0x134>)
 8001564:	f043 0302 	orr.w	r3, r3, #2
 8001568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800156a:	4b3e      	ldr	r3, [pc, #248]	; (8001664 <MX_GPIO_Init+0x134>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, DIR_L1_Pin | DIR_L2_Pin, GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	21c0      	movs	r1, #192	; 0xc0
 800157a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157e:	f002 fdfd 	bl	800417c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, DIR_R1_Pin | DIR_R2_Pin, GPIO_PIN_RESET);
 8001582:	2200      	movs	r2, #0
 8001584:	21c0      	movs	r1, #192	; 0xc0
 8001586:	4838      	ldr	r0, [pc, #224]	; (8001668 <MX_GPIO_Init+0x138>)
 8001588:	f002 fdf8 	bl	800417c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : Motor_Left_clock_Pin orientation_counterclock_Pin */
	GPIO_InitStruct.Pin = Motor_Left_clock_Pin | orientation_counterclock_Pin;
 800158c:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8001590:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001592:	4b36      	ldr	r3, [pc, #216]	; (800166c <MX_GPIO_Init+0x13c>)
 8001594:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001596:	2302      	movs	r3, #2
 8001598:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159a:	f107 030c 	add.w	r3, r7, #12
 800159e:	4619      	mov	r1, r3
 80015a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a4:	f002 fc68 	bl	8003e78 <HAL_GPIO_Init>

	/*Configure GPIO pins : DIR_L1_Pin DIR_L2_Pin */
	GPIO_InitStruct.Pin = DIR_L1_Pin | DIR_L2_Pin;
 80015a8:	23c0      	movs	r3, #192	; 0xc0
 80015aa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ac:	2301      	movs	r3, #1
 80015ae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	4619      	mov	r1, r3
 80015be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c2:	f002 fc59 	bl	8003e78 <HAL_GPIO_Init>

	/*Configure GPIO pins : motor_Right_clock_Pin Motor_left_counterclock_Pin orientation_clock_Pin Motor_counterclock_right_Pin */
	GPIO_InitStruct.Pin = motor_Right_clock_Pin | Motor_left_counterclock_Pin | orientation_clock_Pin | Motor_counterclock_right_Pin;
 80015c6:	231b      	movs	r3, #27
 80015c8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015ca:	4b28      	ldr	r3, [pc, #160]	; (800166c <MX_GPIO_Init+0x13c>)
 80015cc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015ce:	2302      	movs	r3, #2
 80015d0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d2:	f107 030c 	add.w	r3, r7, #12
 80015d6:	4619      	mov	r1, r3
 80015d8:	4823      	ldr	r0, [pc, #140]	; (8001668 <MX_GPIO_Init+0x138>)
 80015da:	f002 fc4d 	bl	8003e78 <HAL_GPIO_Init>

	/*Configure GPIO pins : DIR_R1_Pin DIR_R2_Pin */
	GPIO_InitStruct.Pin = DIR_R1_Pin | DIR_R2_Pin;
 80015de:	23c0      	movs	r3, #192	; 0xc0
 80015e0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e2:	2301      	movs	r3, #1
 80015e4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ee:	f107 030c 	add.w	r3, r7, #12
 80015f2:	4619      	mov	r1, r3
 80015f4:	481c      	ldr	r0, [pc, #112]	; (8001668 <MX_GPIO_Init+0x138>)
 80015f6:	f002 fc3f 	bl	8003e78 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2100      	movs	r1, #0
 80015fe:	2006      	movs	r0, #6
 8001600:	f002 fb85 	bl	8003d0e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001604:	2006      	movs	r0, #6
 8001606:	f002 fb9e 	bl	8003d46 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2100      	movs	r1, #0
 800160e:	2007      	movs	r0, #7
 8001610:	f002 fb7d 	bl	8003d0e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001614:	2007      	movs	r0, #7
 8001616:	f002 fb96 	bl	8003d46 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2100      	movs	r1, #0
 800161e:	2009      	movs	r0, #9
 8001620:	f002 fb75 	bl	8003d0e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001624:	2009      	movs	r0, #9
 8001626:	f002 fb8e 	bl	8003d46 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	2100      	movs	r1, #0
 800162e:	200a      	movs	r0, #10
 8001630:	f002 fb6d 	bl	8003d0e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001634:	200a      	movs	r0, #10
 8001636:	f002 fb86 	bl	8003d46 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800163a:	2200      	movs	r2, #0
 800163c:	2100      	movs	r1, #0
 800163e:	2017      	movs	r0, #23
 8001640:	f002 fb65 	bl	8003d0e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001644:	2017      	movs	r0, #23
 8001646:	f002 fb7e 	bl	8003d46 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	2100      	movs	r1, #0
 800164e:	2028      	movs	r0, #40	; 0x28
 8001650:	f002 fb5d 	bl	8003d0e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001654:	2028      	movs	r0, #40	; 0x28
 8001656:	f002 fb76 	bl	8003d46 <HAL_NVIC_EnableIRQ>

}
 800165a:	bf00      	nop
 800165c:	3720      	adds	r7, #32
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40021000 	.word	0x40021000
 8001668:	48000400 	.word	0x48000400
 800166c:	10110000 	.word	0x10110000

08001670 <motor_init>:

/* USER CODE BEGIN 4 */
void motor_init(Motor *m, char name) {
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	70fb      	strb	r3, [r7, #3]
	m->name = name;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	78fa      	ldrb	r2, [r7, #3]
 8001680:	701a      	strb	r2, [r3, #0]
	m->direction = 0;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	705a      	strb	r2, [r3, #1]
	m->dutyCycle = 0.0;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	605a      	str	r2, [r3, #4]
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <motorEncoder_init>:

void motorEncoder_init(MotorEncoder *e) {
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	e->fineAdjustment = 0;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	811a      	strh	r2, [r3, #8]
	e->lastAngle = 0.0;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	605a      	str	r2, [r3, #4]
	e->lastTicks = 0;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
	e->output = 0.0;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
	e->revolutions = 0;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	60da      	str	r2, [r3, #12]
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <motorController_init>:

void motorController_init(MotorController *c, Motor *m, MotorEncoder *e) {
 80016d2:	b480      	push	{r7}
 80016d4:	b085      	sub	sp, #20
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	60f8      	str	r0, [r7, #12]
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
	c->Encoder = e;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	615a      	str	r2, [r3, #20]
	c->lastError = 0.0;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
	c->motor = m;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	611a      	str	r2, [r3, #16]
	c->reference = 0.0;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
	c->voltage = 0.0;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	60da      	str	r2, [r3, #12]
	c->measurement = 0.0;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	605a      	str	r2, [r3, #4]
}
 800170a:	bf00      	nop
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
	...

08001718 <calcDistance>:

float calcDistance(MotorController *c) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
	float deltaTicks = c->Encoder->output * TOTAL_WHEEL_TICKS - c->Encoder->lastTicks;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	edd3 7a04 	vldr	s15, [r3, #16]
 8001728:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001788 <calcDistance+0x70>
 800172c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	ee07 3a90 	vmov	s15, r3
 800173a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800173e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001742:	edc7 7a03 	vstr	s15, [r7, #12]
	return M_PI * WHEELDIA * (deltaTicks / TOTAL_WHEEL_TICKS);
 8001746:	edd7 7a03 	vldr	s15, [r7, #12]
 800174a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001788 <calcDistance+0x70>
 800174e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001752:	ee16 0a90 	vmov	r0, s13
 8001756:	f7fe fe9f 	bl	8000498 <__aeabi_f2d>
 800175a:	a309      	add	r3, pc, #36	; (adr r3, 8001780 <calcDistance+0x68>)
 800175c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001760:	f7fe fef2 	bl	8000548 <__aeabi_dmul>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4610      	mov	r0, r2
 800176a:	4619      	mov	r1, r3
 800176c:	f7ff f9ae 	bl	8000acc <__aeabi_d2f>
 8001770:	4603      	mov	r3, r0
 8001772:	ee07 3a90 	vmov	s15, r3
}
 8001776:	eeb0 0a67 	vmov.f32	s0, s15
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	9217271a 	.word	0x9217271a
 8001784:	3fd015bf 	.word	0x3fd015bf
 8001788:	44f00000 	.word	0x44f00000
 800178c:	00000000 	.word	0x00000000

08001790 <calcPositionAndVelocity>:

void calcPositionAndVelocity() {
 8001790:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001794:	b084      	sub	sp, #16
 8001796:	af00      	add	r7, sp, #0
	float distR = calcDistance(&controllerR);
 8001798:	487d      	ldr	r0, [pc, #500]	; (8001990 <calcPositionAndVelocity+0x200>)
 800179a:	f7ff ffbd 	bl	8001718 <calcDistance>
 800179e:	ed87 0a03 	vstr	s0, [r7, #12]
	float distL = calcDistance(&controllerL);
 80017a2:	487c      	ldr	r0, [pc, #496]	; (8001994 <calcPositionAndVelocity+0x204>)
 80017a4:	f7ff ffb8 	bl	8001718 <calcDistance>
 80017a8:	ed87 0a02 	vstr	s0, [r7, #8]
	controllerR.Encoder->lastTicks = controllerR.Encoder->output * TOTAL_WHEEL_TICKS;
 80017ac:	4b78      	ldr	r3, [pc, #480]	; (8001990 <calcPositionAndVelocity+0x200>)
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	edd3 7a04 	vldr	s15, [r3, #16]
 80017b4:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8001998 <calcPositionAndVelocity+0x208>
 80017b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017bc:	4b74      	ldr	r3, [pc, #464]	; (8001990 <calcPositionAndVelocity+0x200>)
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017c4:	ee17 2a90 	vmov	r2, s15
 80017c8:	601a      	str	r2, [r3, #0]
	controllerL.Encoder->lastTicks = controllerL.Encoder->output * TOTAL_WHEEL_TICKS;
 80017ca:	4b72      	ldr	r3, [pc, #456]	; (8001994 <calcPositionAndVelocity+0x204>)
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	edd3 7a04 	vldr	s15, [r3, #16]
 80017d2:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001998 <calcPositionAndVelocity+0x208>
 80017d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017da:	4b6e      	ldr	r3, [pc, #440]	; (8001994 <calcPositionAndVelocity+0x204>)
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017e2:	ee17 2a90 	vmov	r2, s15
 80017e6:	601a      	str	r2, [r3, #0]
	float dist = (distL + distR) / 2;
 80017e8:	ed97 7a02 	vldr	s14, [r7, #8]
 80017ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80017f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017f4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80017f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017fc:	edc7 7a01 	vstr	s15, [r7, #4]
	posX = posX + dist * cos(posPhi);
 8001800:	4b66      	ldr	r3, [pc, #408]	; (800199c <calcPositionAndVelocity+0x20c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe fe47 	bl	8000498 <__aeabi_f2d>
 800180a:	4604      	mov	r4, r0
 800180c:	460d      	mov	r5, r1
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7fe fe42 	bl	8000498 <__aeabi_f2d>
 8001814:	4680      	mov	r8, r0
 8001816:	4689      	mov	r9, r1
 8001818:	4b61      	ldr	r3, [pc, #388]	; (80019a0 <calcPositionAndVelocity+0x210>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fe3b 	bl	8000498 <__aeabi_f2d>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	ec43 2b10 	vmov	d0, r2, r3
 800182a:	f005 ff1d 	bl	8007668 <cos>
 800182e:	ec53 2b10 	vmov	r2, r3, d0
 8001832:	4640      	mov	r0, r8
 8001834:	4649      	mov	r1, r9
 8001836:	f7fe fe87 	bl	8000548 <__aeabi_dmul>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4620      	mov	r0, r4
 8001840:	4629      	mov	r1, r5
 8001842:	f7fe fccb 	bl	80001dc <__adddf3>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	f7ff f93d 	bl	8000acc <__aeabi_d2f>
 8001852:	4603      	mov	r3, r0
 8001854:	4a51      	ldr	r2, [pc, #324]	; (800199c <calcPositionAndVelocity+0x20c>)
 8001856:	6013      	str	r3, [r2, #0]
	posY = posY + dist * sin(posPhi);
 8001858:	4b52      	ldr	r3, [pc, #328]	; (80019a4 <calcPositionAndVelocity+0x214>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fe1b 	bl	8000498 <__aeabi_f2d>
 8001862:	4604      	mov	r4, r0
 8001864:	460d      	mov	r5, r1
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7fe fe16 	bl	8000498 <__aeabi_f2d>
 800186c:	4680      	mov	r8, r0
 800186e:	4689      	mov	r9, r1
 8001870:	4b4b      	ldr	r3, [pc, #300]	; (80019a0 <calcPositionAndVelocity+0x210>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe fe0f 	bl	8000498 <__aeabi_f2d>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	ec43 2b10 	vmov	d0, r2, r3
 8001882:	f005 ff41 	bl	8007708 <sin>
 8001886:	ec53 2b10 	vmov	r2, r3, d0
 800188a:	4640      	mov	r0, r8
 800188c:	4649      	mov	r1, r9
 800188e:	f7fe fe5b 	bl	8000548 <__aeabi_dmul>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4620      	mov	r0, r4
 8001898:	4629      	mov	r1, r5
 800189a:	f7fe fc9f 	bl	80001dc <__adddf3>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	f7ff f911 	bl	8000acc <__aeabi_d2f>
 80018aa:	4603      	mov	r3, r0
 80018ac:	4a3d      	ldr	r2, [pc, #244]	; (80019a4 <calcPositionAndVelocity+0x214>)
 80018ae:	6013      	str	r3, [r2, #0]
	posPhi = posPhi + (distR - distL) / DISBETWHEEL;
 80018b0:	4b3b      	ldr	r3, [pc, #236]	; (80019a0 <calcPositionAndVelocity+0x210>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7fe fdef 	bl	8000498 <__aeabi_f2d>
 80018ba:	4604      	mov	r4, r0
 80018bc:	460d      	mov	r5, r1
 80018be:	ed97 7a03 	vldr	s14, [r7, #12]
 80018c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80018c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ca:	ee17 0a90 	vmov	r0, s15
 80018ce:	f7fe fde3 	bl	8000498 <__aeabi_f2d>
 80018d2:	a32d      	add	r3, pc, #180	; (adr r3, 8001988 <calcPositionAndVelocity+0x1f8>)
 80018d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d8:	f7fe ff60 	bl	800079c <__aeabi_ddiv>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4620      	mov	r0, r4
 80018e2:	4629      	mov	r1, r5
 80018e4:	f7fe fc7a 	bl	80001dc <__adddf3>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	f7ff f8ec 	bl	8000acc <__aeabi_d2f>
 80018f4:	4603      	mov	r3, r0
 80018f6:	4a2a      	ldr	r2, [pc, #168]	; (80019a0 <calcPositionAndVelocity+0x210>)
 80018f8:	6013      	str	r3, [r2, #0]
	//Vi ved, at der går rundt regnet 5 ms mellem vi kommer her:
	velPhi = ((posPhi - posPhiPrev)) / positionCalculationPeriod;
 80018fa:	4b29      	ldr	r3, [pc, #164]	; (80019a0 <calcPositionAndVelocity+0x210>)
 80018fc:	ed93 7a00 	vldr	s14, [r3]
 8001900:	4b29      	ldr	r3, [pc, #164]	; (80019a8 <calcPositionAndVelocity+0x218>)
 8001902:	edd3 7a00 	vldr	s15, [r3]
 8001906:	ee77 6a67 	vsub.f32	s13, s14, s15
 800190a:	4b28      	ldr	r3, [pc, #160]	; (80019ac <calcPositionAndVelocity+0x21c>)
 800190c:	ed93 7a00 	vldr	s14, [r3]
 8001910:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001914:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <calcPositionAndVelocity+0x220>)
 8001916:	edc3 7a00 	vstr	s15, [r3]
	velX = (posX - posXPrev) / positionCalculationPeriod;
 800191a:	4b20      	ldr	r3, [pc, #128]	; (800199c <calcPositionAndVelocity+0x20c>)
 800191c:	ed93 7a00 	vldr	s14, [r3]
 8001920:	4b24      	ldr	r3, [pc, #144]	; (80019b4 <calcPositionAndVelocity+0x224>)
 8001922:	edd3 7a00 	vldr	s15, [r3]
 8001926:	ee77 6a67 	vsub.f32	s13, s14, s15
 800192a:	4b20      	ldr	r3, [pc, #128]	; (80019ac <calcPositionAndVelocity+0x21c>)
 800192c:	ed93 7a00 	vldr	s14, [r3]
 8001930:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001934:	4b20      	ldr	r3, [pc, #128]	; (80019b8 <calcPositionAndVelocity+0x228>)
 8001936:	edc3 7a00 	vstr	s15, [r3]
	velY = (posY - posYPrev) / positionCalculationPeriod;
 800193a:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <calcPositionAndVelocity+0x214>)
 800193c:	ed93 7a00 	vldr	s14, [r3]
 8001940:	4b1e      	ldr	r3, [pc, #120]	; (80019bc <calcPositionAndVelocity+0x22c>)
 8001942:	edd3 7a00 	vldr	s15, [r3]
 8001946:	ee77 6a67 	vsub.f32	s13, s14, s15
 800194a:	4b18      	ldr	r3, [pc, #96]	; (80019ac <calcPositionAndVelocity+0x21c>)
 800194c:	ed93 7a00 	vldr	s14, [r3]
 8001950:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001954:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <calcPositionAndVelocity+0x230>)
 8001956:	edc3 7a00 	vstr	s15, [r3]
	//OBS. Tiden, koden over dette stykke tager, gør denne udregning forkert, men møj tæt på.
	posPhiPrev = posPhi;
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <calcPositionAndVelocity+0x210>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <calcPositionAndVelocity+0x218>)
 8001960:	6013      	str	r3, [r2, #0]
	posXPrev = posX;
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <calcPositionAndVelocity+0x20c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a13      	ldr	r2, [pc, #76]	; (80019b4 <calcPositionAndVelocity+0x224>)
 8001968:	6013      	str	r3, [r2, #0]
	posYPrev = posY;
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <calcPositionAndVelocity+0x214>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a13      	ldr	r2, [pc, #76]	; (80019bc <calcPositionAndVelocity+0x22c>)
 8001970:	6013      	str	r3, [r2, #0]

	// Encoder data from top plate
	calcOrientOutput();
 8001972:	f000 fb77 	bl	8002064 <calcOrientOutput>
	sendOrientData();
 8001976:	f000 fc6f 	bl	8002258 <sendOrientData>
}
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001984:	f3af 8000 	nop.w
 8001988:	851eb852 	.word	0x851eb852
 800198c:	3fd851eb 	.word	0x3fd851eb
 8001990:	20000188 	.word	0x20000188
 8001994:	200000c0 	.word	0x200000c0
 8001998:	44f00000 	.word	0x44f00000
 800199c:	20000040 	.word	0x20000040
 80019a0:	20000050 	.word	0x20000050
 80019a4:	20000048 	.word	0x20000048
 80019a8:	20000054 	.word	0x20000054
 80019ac:	200000bc 	.word	0x200000bc
 80019b0:	20000060 	.word	0x20000060
 80019b4:	20000044 	.word	0x20000044
 80019b8:	20000058 	.word	0x20000058
 80019bc:	2000004c 	.word	0x2000004c
 80019c0:	2000005c 	.word	0x2000005c

080019c4 <resetEncoder>:
		to_frame(packedMotorData, position, 3);
		HAL_UART_Transmit(&huart2, packedMotorData, sizeof(packedMotorData), HAL_MAX_DELAY);
	}
}

void resetEncoder(MotorController *c) {
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
	c->Encoder->output = 0.0;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	611a      	str	r2, [r3, #16]
	c->Encoder->fineAdjustment = 0;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	2200      	movs	r2, #0
 80019dc:	811a      	strh	r2, [r3, #8]
	c->Encoder->revolutions = 0;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	2200      	movs	r2, #0
 80019e4:	60da      	str	r2, [r3, #12]
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
	...

080019f4 <clockcheckRight>:

void clockcheckRight() {
 80019f4:	b598      	push	{r3, r4, r7, lr}
 80019f6:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)) {
 80019f8:	2101      	movs	r1, #1
 80019fa:	4829      	ldr	r0, [pc, #164]	; (8001aa0 <clockcheckRight+0xac>)
 80019fc:	f002 fba6 	bl	800414c <HAL_GPIO_ReadPin>
 8001a00:	4603      	mov	r3, r0
 8001a02:	461c      	mov	r4, r3
 8001a04:	2110      	movs	r1, #16
 8001a06:	4826      	ldr	r0, [pc, #152]	; (8001aa0 <clockcheckRight+0xac>)
 8001a08:	f002 fba0 	bl	800414c <HAL_GPIO_ReadPin>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	429c      	cmp	r4, r3
 8001a10:	d121      	bne.n	8001a56 <clockcheckRight+0x62>
		controllerR.motor->direction = -1;
 8001a12:	4b24      	ldr	r3, [pc, #144]	; (8001aa4 <clockcheckRight+0xb0>)
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	22ff      	movs	r2, #255	; 0xff
 8001a18:	705a      	strb	r2, [r3, #1]
		controllerR.Encoder->fineAdjustment = abs((controllerR.Encoder->fineAdjustment + controllerR.motor->direction) % TOTAL_WHEEL_TICKS);
 8001a1a:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <clockcheckRight+0xb0>)
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b1f      	ldr	r3, [pc, #124]	; (8001aa4 <clockcheckRight+0xb0>)
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	785b      	ldrb	r3, [r3, #1]
 8001a2a:	441a      	add	r2, r3
 8001a2c:	4b1e      	ldr	r3, [pc, #120]	; (8001aa8 <clockcheckRight+0xb4>)
 8001a2e:	fb83 1302 	smull	r1, r3, r3, r2
 8001a32:	4413      	add	r3, r2
 8001a34:	1299      	asrs	r1, r3, #10
 8001a36:	17d3      	asrs	r3, r2, #31
 8001a38:	1ac9      	subs	r1, r1, r3
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	011b      	lsls	r3, r3, #4
 8001a3e:	1a5b      	subs	r3, r3, r1
 8001a40:	01db      	lsls	r3, r3, #7
 8001a42:	1ad1      	subs	r1, r2, r3
 8001a44:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 8001a48:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 8001a4c:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <clockcheckRight+0xb0>)
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	b212      	sxth	r2, r2
 8001a52:	811a      	strh	r2, [r3, #8]
 8001a54:	e01f      	b.n	8001a96 <clockcheckRight+0xa2>
	} else {
		controllerR.motor->direction = 1;
 8001a56:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <clockcheckRight+0xb0>)
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	705a      	strb	r2, [r3, #1]
		controllerR.Encoder->fineAdjustment = abs((controllerR.Encoder->fineAdjustment + controllerR.motor->direction) % (TOTAL_WHEEL_TICKS + 1));
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <clockcheckRight+0xb0>)
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a66:	461a      	mov	r2, r3
 8001a68:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <clockcheckRight+0xb0>)
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	785b      	ldrb	r3, [r3, #1]
 8001a6e:	18d1      	adds	r1, r2, r3
 8001a70:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <clockcheckRight+0xb8>)
 8001a72:	fb83 2301 	smull	r2, r3, r3, r1
 8001a76:	115a      	asrs	r2, r3, #5
 8001a78:	17cb      	asrs	r3, r1, #31
 8001a7a:	1ad2      	subs	r2, r2, r3
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	011b      	lsls	r3, r3, #4
 8001a80:	1a9b      	subs	r3, r3, r2
 8001a82:	01db      	lsls	r3, r3, #7
 8001a84:	4413      	add	r3, r2
 8001a86:	1aca      	subs	r2, r1, r3
 8001a88:	2a00      	cmp	r2, #0
 8001a8a:	bfb8      	it	lt
 8001a8c:	4252      	neglt	r2, r2
 8001a8e:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <clockcheckRight+0xb0>)
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	b212      	sxth	r2, r2
 8001a94:	811a      	strh	r2, [r3, #8]
	}

	checkRevolutions(&controllerR);
 8001a96:	4803      	ldr	r0, [pc, #12]	; (8001aa4 <clockcheckRight+0xb0>)
 8001a98:	f000 f92c 	bl	8001cf4 <checkRevolutions>
}
 8001a9c:	bf00      	nop
 8001a9e:	bd98      	pop	{r3, r4, r7, pc}
 8001aa0:	48000400 	.word	0x48000400
 8001aa4:	20000188 	.word	0x20000188
 8001aa8:	88888889 	.word	0x88888889
 8001aac:	0443b2b5 	.word	0x0443b2b5

08001ab0 <counterclockcheckRight>:

void counterclockcheckRight() {
 8001ab0:	b598      	push	{r3, r4, r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)) {
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	4829      	ldr	r0, [pc, #164]	; (8001b5c <counterclockcheckRight+0xac>)
 8001ab8:	f002 fb48 	bl	800414c <HAL_GPIO_ReadPin>
 8001abc:	4603      	mov	r3, r0
 8001abe:	461c      	mov	r4, r3
 8001ac0:	2110      	movs	r1, #16
 8001ac2:	4826      	ldr	r0, [pc, #152]	; (8001b5c <counterclockcheckRight+0xac>)
 8001ac4:	f002 fb42 	bl	800414c <HAL_GPIO_ReadPin>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	429c      	cmp	r4, r3
 8001acc:	d120      	bne.n	8001b10 <counterclockcheckRight+0x60>
		controllerR.motor->direction = 1;
 8001ace:	4b24      	ldr	r3, [pc, #144]	; (8001b60 <counterclockcheckRight+0xb0>)
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	705a      	strb	r2, [r3, #1]
		controllerR.Encoder->fineAdjustment = abs((controllerR.Encoder->fineAdjustment + controllerR.motor->direction) % (TOTAL_WHEEL_TICKS + 1));
 8001ad6:	4b22      	ldr	r3, [pc, #136]	; (8001b60 <counterclockcheckRight+0xb0>)
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	4b1f      	ldr	r3, [pc, #124]	; (8001b60 <counterclockcheckRight+0xb0>)
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	785b      	ldrb	r3, [r3, #1]
 8001ae6:	18d1      	adds	r1, r2, r3
 8001ae8:	4b1e      	ldr	r3, [pc, #120]	; (8001b64 <counterclockcheckRight+0xb4>)
 8001aea:	fb83 2301 	smull	r2, r3, r3, r1
 8001aee:	115a      	asrs	r2, r3, #5
 8001af0:	17cb      	asrs	r3, r1, #31
 8001af2:	1ad2      	subs	r2, r2, r3
 8001af4:	4613      	mov	r3, r2
 8001af6:	011b      	lsls	r3, r3, #4
 8001af8:	1a9b      	subs	r3, r3, r2
 8001afa:	01db      	lsls	r3, r3, #7
 8001afc:	4413      	add	r3, r2
 8001afe:	1aca      	subs	r2, r1, r3
 8001b00:	2a00      	cmp	r2, #0
 8001b02:	bfb8      	it	lt
 8001b04:	4252      	neglt	r2, r2
 8001b06:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <counterclockcheckRight+0xb0>)
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	b212      	sxth	r2, r2
 8001b0c:	811a      	strh	r2, [r3, #8]
 8001b0e:	e020      	b.n	8001b52 <counterclockcheckRight+0xa2>
	} else {
		controllerR.motor->direction = -1;
 8001b10:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <counterclockcheckRight+0xb0>)
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	22ff      	movs	r2, #255	; 0xff
 8001b16:	705a      	strb	r2, [r3, #1]
		controllerR.Encoder->fineAdjustment = abs((controllerR.Encoder->fineAdjustment + controllerR.motor->direction) % TOTAL_WHEEL_TICKS);
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <counterclockcheckRight+0xb0>)
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <counterclockcheckRight+0xb0>)
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	785b      	ldrb	r3, [r3, #1]
 8001b28:	441a      	add	r2, r3
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <counterclockcheckRight+0xb8>)
 8001b2c:	fb83 1302 	smull	r1, r3, r3, r2
 8001b30:	4413      	add	r3, r2
 8001b32:	1299      	asrs	r1, r3, #10
 8001b34:	17d3      	asrs	r3, r2, #31
 8001b36:	1ac9      	subs	r1, r1, r3
 8001b38:	460b      	mov	r3, r1
 8001b3a:	011b      	lsls	r3, r3, #4
 8001b3c:	1a5b      	subs	r3, r3, r1
 8001b3e:	01db      	lsls	r3, r3, #7
 8001b40:	1ad1      	subs	r1, r2, r3
 8001b42:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 8001b46:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 8001b4a:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <counterclockcheckRight+0xb0>)
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	b212      	sxth	r2, r2
 8001b50:	811a      	strh	r2, [r3, #8]
	}

	checkRevolutions(&controllerR);
 8001b52:	4803      	ldr	r0, [pc, #12]	; (8001b60 <counterclockcheckRight+0xb0>)
 8001b54:	f000 f8ce 	bl	8001cf4 <checkRevolutions>
}
 8001b58:	bf00      	nop
 8001b5a:	bd98      	pop	{r3, r4, r7, pc}
 8001b5c:	48000400 	.word	0x48000400
 8001b60:	20000188 	.word	0x20000188
 8001b64:	0443b2b5 	.word	0x0443b2b5
 8001b68:	88888889 	.word	0x88888889

08001b6c <clockcheckLeft>:

void clockcheckLeft() {
 8001b6c:	b598      	push	{r3, r4, r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)) {
 8001b70:	2120      	movs	r1, #32
 8001b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b76:	f002 fae9 	bl	800414c <HAL_GPIO_ReadPin>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	461c      	mov	r4, r3
 8001b7e:	2101      	movs	r1, #1
 8001b80:	4826      	ldr	r0, [pc, #152]	; (8001c1c <clockcheckLeft+0xb0>)
 8001b82:	f002 fae3 	bl	800414c <HAL_GPIO_ReadPin>
 8001b86:	4603      	mov	r3, r0
 8001b88:	429c      	cmp	r4, r3
 8001b8a:	d121      	bne.n	8001bd0 <clockcheckLeft+0x64>
		controllerL.motor->direction = -1;
 8001b8c:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <clockcheckLeft+0xb4>)
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	22ff      	movs	r2, #255	; 0xff
 8001b92:	705a      	strb	r2, [r3, #1]
		controllerL.Encoder->fineAdjustment = abs((controllerR.Encoder->fineAdjustment + controllerL.motor->direction) % TOTAL_WHEEL_TICKS);
 8001b94:	4b23      	ldr	r3, [pc, #140]	; (8001c24 <clockcheckLeft+0xb8>)
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <clockcheckLeft+0xb4>)
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	785b      	ldrb	r3, [r3, #1]
 8001ba4:	441a      	add	r2, r3
 8001ba6:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <clockcheckLeft+0xbc>)
 8001ba8:	fb83 1302 	smull	r1, r3, r3, r2
 8001bac:	4413      	add	r3, r2
 8001bae:	1299      	asrs	r1, r3, #10
 8001bb0:	17d3      	asrs	r3, r2, #31
 8001bb2:	1ac9      	subs	r1, r1, r3
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	011b      	lsls	r3, r3, #4
 8001bb8:	1a5b      	subs	r3, r3, r1
 8001bba:	01db      	lsls	r3, r3, #7
 8001bbc:	1ad1      	subs	r1, r2, r3
 8001bbe:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 8001bc2:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 8001bc6:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <clockcheckLeft+0xb4>)
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	b212      	sxth	r2, r2
 8001bcc:	811a      	strh	r2, [r3, #8]
 8001bce:	e01f      	b.n	8001c10 <clockcheckLeft+0xa4>
	} else {
		controllerL.motor->direction = 1;
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <clockcheckLeft+0xb4>)
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	705a      	strb	r2, [r3, #1]
		controllerR.Encoder->fineAdjustment = abs((controllerR.Encoder->fineAdjustment + controllerL.motor->direction) % (TOTAL_WHEEL_TICKS + 1));
 8001bd8:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <clockcheckLeft+0xb8>)
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <clockcheckLeft+0xb4>)
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	785b      	ldrb	r3, [r3, #1]
 8001be8:	18d1      	adds	r1, r2, r3
 8001bea:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <clockcheckLeft+0xc0>)
 8001bec:	fb83 2301 	smull	r2, r3, r3, r1
 8001bf0:	115a      	asrs	r2, r3, #5
 8001bf2:	17cb      	asrs	r3, r1, #31
 8001bf4:	1ad2      	subs	r2, r2, r3
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	1a9b      	subs	r3, r3, r2
 8001bfc:	01db      	lsls	r3, r3, #7
 8001bfe:	4413      	add	r3, r2
 8001c00:	1aca      	subs	r2, r1, r3
 8001c02:	2a00      	cmp	r2, #0
 8001c04:	bfb8      	it	lt
 8001c06:	4252      	neglt	r2, r2
 8001c08:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <clockcheckLeft+0xb8>)
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	b212      	sxth	r2, r2
 8001c0e:	811a      	strh	r2, [r3, #8]
	}

	checkRevolutions(&controllerL);
 8001c10:	4803      	ldr	r0, [pc, #12]	; (8001c20 <clockcheckLeft+0xb4>)
 8001c12:	f000 f86f 	bl	8001cf4 <checkRevolutions>
}
 8001c16:	bf00      	nop
 8001c18:	bd98      	pop	{r3, r4, r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	48000400 	.word	0x48000400
 8001c20:	200000c0 	.word	0x200000c0
 8001c24:	20000188 	.word	0x20000188
 8001c28:	88888889 	.word	0x88888889
 8001c2c:	0443b2b5 	.word	0x0443b2b5

08001c30 <counterclockcheckLeft>:

void counterclockcheckLeft() {
 8001c30:	b598      	push	{r3, r4, r7, lr}
 8001c32:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)) {
 8001c34:	2120      	movs	r1, #32
 8001c36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c3a:	f002 fa87 	bl	800414c <HAL_GPIO_ReadPin>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	461c      	mov	r4, r3
 8001c42:	2101      	movs	r1, #1
 8001c44:	4826      	ldr	r0, [pc, #152]	; (8001ce0 <counterclockcheckLeft+0xb0>)
 8001c46:	f002 fa81 	bl	800414c <HAL_GPIO_ReadPin>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	429c      	cmp	r4, r3
 8001c4e:	d120      	bne.n	8001c92 <counterclockcheckLeft+0x62>
		controllerL.motor->direction = 1;
 8001c50:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <counterclockcheckLeft+0xb4>)
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	2201      	movs	r2, #1
 8001c56:	705a      	strb	r2, [r3, #1]
		controllerR.Encoder->fineAdjustment = abs((controllerR.Encoder->fineAdjustment + controllerL.motor->direction) % (TOTAL_WHEEL_TICKS + 1));
 8001c58:	4b23      	ldr	r3, [pc, #140]	; (8001ce8 <counterclockcheckLeft+0xb8>)
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001c60:	461a      	mov	r2, r3
 8001c62:	4b20      	ldr	r3, [pc, #128]	; (8001ce4 <counterclockcheckLeft+0xb4>)
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	785b      	ldrb	r3, [r3, #1]
 8001c68:	18d1      	adds	r1, r2, r3
 8001c6a:	4b20      	ldr	r3, [pc, #128]	; (8001cec <counterclockcheckLeft+0xbc>)
 8001c6c:	fb83 2301 	smull	r2, r3, r3, r1
 8001c70:	115a      	asrs	r2, r3, #5
 8001c72:	17cb      	asrs	r3, r1, #31
 8001c74:	1ad2      	subs	r2, r2, r3
 8001c76:	4613      	mov	r3, r2
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	1a9b      	subs	r3, r3, r2
 8001c7c:	01db      	lsls	r3, r3, #7
 8001c7e:	4413      	add	r3, r2
 8001c80:	1aca      	subs	r2, r1, r3
 8001c82:	2a00      	cmp	r2, #0
 8001c84:	bfb8      	it	lt
 8001c86:	4252      	neglt	r2, r2
 8001c88:	4b17      	ldr	r3, [pc, #92]	; (8001ce8 <counterclockcheckLeft+0xb8>)
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	b212      	sxth	r2, r2
 8001c8e:	811a      	strh	r2, [r3, #8]
 8001c90:	e020      	b.n	8001cd4 <counterclockcheckLeft+0xa4>
	} else {
		controllerL.motor->direction = -1;
 8001c92:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <counterclockcheckLeft+0xb4>)
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	22ff      	movs	r2, #255	; 0xff
 8001c98:	705a      	strb	r2, [r3, #1]
		controllerR.Encoder->fineAdjustment = abs((controllerR.Encoder->fineAdjustment + controllerL.motor->direction) % TOTAL_WHEEL_TICKS);
 8001c9a:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <counterclockcheckLeft+0xb8>)
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <counterclockcheckLeft+0xb4>)
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	785b      	ldrb	r3, [r3, #1]
 8001caa:	441a      	add	r2, r3
 8001cac:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <counterclockcheckLeft+0xc0>)
 8001cae:	fb83 1302 	smull	r1, r3, r3, r2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	1299      	asrs	r1, r3, #10
 8001cb6:	17d3      	asrs	r3, r2, #31
 8001cb8:	1ac9      	subs	r1, r1, r3
 8001cba:	460b      	mov	r3, r1
 8001cbc:	011b      	lsls	r3, r3, #4
 8001cbe:	1a5b      	subs	r3, r3, r1
 8001cc0:	01db      	lsls	r3, r3, #7
 8001cc2:	1ad1      	subs	r1, r2, r3
 8001cc4:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 8001cc8:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <counterclockcheckLeft+0xb8>)
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	b212      	sxth	r2, r2
 8001cd2:	811a      	strh	r2, [r3, #8]
	}

	checkRevolutions(&controllerL);
 8001cd4:	4803      	ldr	r0, [pc, #12]	; (8001ce4 <counterclockcheckLeft+0xb4>)
 8001cd6:	f000 f80d 	bl	8001cf4 <checkRevolutions>
}
 8001cda:	bf00      	nop
 8001cdc:	bd98      	pop	{r3, r4, r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	48000400 	.word	0x48000400
 8001ce4:	200000c0 	.word	0x200000c0
 8001ce8:	20000188 	.word	0x20000188
 8001cec:	0443b2b5 	.word	0x0443b2b5
 8001cf0:	88888889 	.word	0x88888889

08001cf4 <checkRevolutions>:

void checkRevolutions(MotorController *c) {
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	if (c->Encoder->fineAdjustment == 0 && c->motor->direction == 1) {
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d113      	bne.n	8001d30 <checkRevolutions+0x3c>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	785b      	ldrb	r3, [r3, #1]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d10e      	bne.n	8001d30 <checkRevolutions+0x3c>
		c->Encoder->revolutions = c->Encoder->revolutions + c->motor->direction;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	785b      	ldrb	r3, [r3, #1]
 8001d1e:	4619      	mov	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	440a      	add	r2, r1
 8001d26:	60da      	str	r2, [r3, #12]
		c->Encoder->fineAdjustment = 1;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	811a      	strh	r2, [r3, #8]
	 fineadjustmentRight = 1;
	 } else if (fineadjustmentRight == 0 && directionRight == -1) {
	 revolutionRight = revolutionRight + directionRight;
	 fineadjustmentRight = TOTAL_WHEEL_TICKS;
	 }*/
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <calcOutput>:

void calcOutput(MotorEncoder *e) {
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
	e->output = e->revolutions + (e->fineAdjustment / TOTAL_WHEEL_TICKS);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68da      	ldr	r2, [r3, #12]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001d4e:	490b      	ldr	r1, [pc, #44]	; (8001d7c <calcOutput+0x40>)
 8001d50:	fb81 0103 	smull	r0, r1, r1, r3
 8001d54:	4419      	add	r1, r3
 8001d56:	1289      	asrs	r1, r1, #10
 8001d58:	17db      	asrs	r3, r3, #31
 8001d5a:	1acb      	subs	r3, r1, r3
 8001d5c:	b21b      	sxth	r3, r3
 8001d5e:	4413      	add	r3, r2
 8001d60:	ee07 3a90 	vmov	s15, r3
 8001d64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	88888889 	.word	0x88888889

08001d80 <calculateError>:

void calculateError(MotorController *c) {
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	c->lastError = c->reference - c->measurement;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	ed93 7a00 	vldr	s14, [r3]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	0000      	movs	r0, r0
 8001dac:	0000      	movs	r0, r0
	...

08001db0 <nextVoltage>:

void nextVoltage(MotorController *c) {
 8001db0:	b5b0      	push	{r4, r5, r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	c->voltage = c->lastError * 2.82 * T + c->voltage;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe fb6b 	bl	8000498 <__aeabi_f2d>
 8001dc2:	a31a      	add	r3, pc, #104	; (adr r3, 8001e2c <nextVoltage+0x7c>)
 8001dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc8:	f7fe fbbe 	bl	8000548 <__aeabi_dmul>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4614      	mov	r4, r2
 8001dd2:	461d      	mov	r5, r3
 8001dd4:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <nextVoltage+0x78>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe fb5d 	bl	8000498 <__aeabi_f2d>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4620      	mov	r0, r4
 8001de4:	4629      	mov	r1, r5
 8001de6:	f7fe fbaf 	bl	8000548 <__aeabi_dmul>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	4614      	mov	r4, r2
 8001df0:	461d      	mov	r5, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe fb4e 	bl	8000498 <__aeabi_f2d>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4620      	mov	r0, r4
 8001e02:	4629      	mov	r1, r5
 8001e04:	f7fe f9ea 	bl	80001dc <__adddf3>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f7fe fe5c 	bl	8000acc <__aeabi_d2f>
 8001e14:	4602      	mov	r2, r0
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	60da      	str	r2, [r3, #12]
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bdb0      	pop	{r4, r5, r7, pc}
 8001e22:	bf00      	nop
 8001e24:	f3af 8000 	nop.w
 8001e28:	20000000 	.word	0x20000000
 8001e2c:	28f5c28f 	.word	0x28f5c28f
 8001e30:	40068f5c 	.word	0x40068f5c
 8001e34:	00000000 	.word	0x00000000

08001e38 <updateAngularVelocity>:

void updateAngularVelocity(MotorController *c) {
 8001e38:	b5b0      	push	{r4, r5, r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
	float deltaAngle = c->Encoder->output * 2 * M_PI - c->Encoder->lastAngle;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e48:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e4c:	ee17 0a90 	vmov	r0, s15
 8001e50:	f7fe fb22 	bl	8000498 <__aeabi_f2d>
 8001e54:	a323      	add	r3, pc, #140	; (adr r3, 8001ee4 <updateAngularVelocity+0xac>)
 8001e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5a:	f7fe fb75 	bl	8000548 <__aeabi_dmul>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4614      	mov	r4, r2
 8001e64:	461d      	mov	r5, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe fb13 	bl	8000498 <__aeabi_f2d>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4620      	mov	r0, r4
 8001e78:	4629      	mov	r1, r5
 8001e7a:	f7fe f9ad 	bl	80001d8 <__aeabi_dsub>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4610      	mov	r0, r2
 8001e84:	4619      	mov	r1, r3
 8001e86:	f7fe fe21 	bl	8000acc <__aeabi_d2f>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	60fb      	str	r3, [r7, #12]
	c->Encoder->lastAngle = c->Encoder->output * 2 * M_PI;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e96:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e9a:	ee17 0a90 	vmov	r0, s15
 8001e9e:	f7fe fafb 	bl	8000498 <__aeabi_f2d>
 8001ea2:	a310      	add	r3, pc, #64	; (adr r3, 8001ee4 <updateAngularVelocity+0xac>)
 8001ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea8:	f7fe fb4e 	bl	8000548 <__aeabi_dmul>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	695c      	ldr	r4, [r3, #20]
 8001eb8:	f7fe fe08 	bl	8000acc <__aeabi_d2f>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	6063      	str	r3, [r4, #4]
	c->measurement = deltaAngle / T;
 8001ec0:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <updateAngularVelocity+0xa8>)
 8001ec2:	ed93 7a00 	vldr	s14, [r3]
 8001ec6:	edd7 6a03 	vldr	s13, [r7, #12]
 8001eca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001ed4:	bf00      	nop
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bdb0      	pop	{r4, r5, r7, pc}
 8001edc:	f3af 8000 	nop.w
 8001ee0:	20000000 	.word	0x20000000
 8001ee4:	54442d18 	.word	0x54442d18
 8001ee8:	400921fb 	.word	0x400921fb

08001eec <updateDutyCycle>:

void updateDutyCycle(MotorController *c) {
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
	float pwm = c->voltage / batteryVoltage;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	edd3 6a03 	vldr	s13, [r3, #12]
 8001efa:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <updateDutyCycle+0x48>)
 8001efc:	ed93 7a00 	vldr	s14, [r3]
 8001f00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f04:	edc7 7a03 	vstr	s15, [r7, #12]
	if (pwm > 1.0)
 8001f08:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f18:	dd02      	ble.n	8001f20 <updateDutyCycle+0x34>
		pwm = 1.0;
 8001f1a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001f1e:	60fb      	str	r3, [r7, #12]
	c->motor->dutyCycle = pwm;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	605a      	str	r2, [r3, #4]
}
 8001f28:	bf00      	nop
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	2000003c 	.word	0x2000003c

08001f38 <setDutyCycle>:

void setDutyCycle(MotorController *c) {
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
	if (c->motor->name == 'R') {
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b52      	cmp	r3, #82	; 0x52
 8001f48:	d114      	bne.n	8001f74 <setDutyCycle+0x3c>
		htim1.Instance->CCR1 = (uint32_t) ((htim1.Instance->ARR) * c->motor->dutyCycle);
 8001f4a:	4b1a      	ldr	r3, [pc, #104]	; (8001fb4 <setDutyCycle+0x7c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f50:	ee07 3a90 	vmov	s15, r3
 8001f54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f64:	4b13      	ldr	r3, [pc, #76]	; (8001fb4 <setDutyCycle+0x7c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f6c:	ee17 2a90 	vmov	r2, s15
 8001f70:	635a      	str	r2, [r3, #52]	; 0x34
 8001f72:	e01a      	b.n	8001faa <setDutyCycle+0x72>
	} else if (c->motor->name == 'L') {
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b4c      	cmp	r3, #76	; 0x4c
 8001f7c:	d114      	bne.n	8001fa8 <setDutyCycle+0x70>
		htim1.Instance->CCR2 = (uint32_t) ((htim1.Instance->ARR) * c->motor->dutyCycle);
 8001f7e:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <setDutyCycle+0x7c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f84:	ee07 3a90 	vmov	s15, r3
 8001f88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <setDutyCycle+0x7c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fa0:	ee17 2a90 	vmov	r2, s15
 8001fa4:	639a      	str	r2, [r3, #56]	; 0x38
 8001fa6:	e000      	b.n	8001faa <setDutyCycle+0x72>
	} else {
		return;
 8001fa8:	bf00      	nop
	}
}
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	200001a0 	.word	0x200001a0

08001fb8 <controller>:

void controller(MotorController *c) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
	calcOutput(c->Encoder);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff feb9 	bl	8001d3c <calcOutput>

	// Measure the angular velocity (feedback)
	updateAngularVelocity(c);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff ff34 	bl	8001e38 <updateAngularVelocity>

	// Calculate next voltage according to the controller design
	nextVoltage(c);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff feed 	bl	8001db0 <nextVoltage>

	// Calculate current error to use for next iteration
	calculateError(c);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff fed2 	bl	8001d80 <calculateError>

	// Update the duty cycle
	updateDutyCycle(c);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff ff85 	bl	8001eec <updateDutyCycle>

	setDutyCycle(c);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff ffa8 	bl	8001f38 <setDutyCycle>
}
 8001fe8:	bf00      	nop
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <controlBothMotors>:

void controlBothMotors() {
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
	controller(&controllerR);
 8001ff4:	4803      	ldr	r0, [pc, #12]	; (8002004 <controlBothMotors+0x14>)
 8001ff6:	f7ff ffdf 	bl	8001fb8 <controller>
	controller(&controllerL);
 8001ffa:	4803      	ldr	r0, [pc, #12]	; (8002008 <controlBothMotors+0x18>)
 8001ffc:	f7ff ffdc 	bl	8001fb8 <controller>
}
 8002000:	bf00      	nop
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000188 	.word	0x20000188
 8002008:	200000c0 	.word	0x200000c0

0800200c <UpdateBatteryVoltage>:

void UpdateBatteryVoltage() {
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1); // Start ADC conversion
 8002012:	480e      	ldr	r0, [pc, #56]	; (800204c <UpdateBatteryVoltage+0x40>)
 8002014:	f000 ff72 	bl	8002efc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY); // Wait for conversion to complete
 8002018:	f04f 31ff 	mov.w	r1, #4294967295
 800201c:	480b      	ldr	r0, [pc, #44]	; (800204c <UpdateBatteryVoltage+0x40>)
 800201e:	f000 ffd0 	bl	8002fc2 <HAL_ADC_PollForConversion>
	uint32_t adc_val = HAL_ADC_GetValue(&hadc1); // Get the ADC value
 8002022:	480a      	ldr	r0, [pc, #40]	; (800204c <UpdateBatteryVoltage+0x40>)
 8002024:	f001 f85c 	bl	80030e0 <HAL_ADC_GetValue>
 8002028:	6078      	str	r0, [r7, #4]
	batteryVoltage = adc_val * voltageMeasScaling;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	ee07 3a90 	vmov	s15, r3
 8002030:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <UpdateBatteryVoltage+0x44>)
 8002036:	edd3 7a00 	vldr	s15, [r3]
 800203a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800203e:	4b05      	ldr	r3, [pc, #20]	; (8002054 <UpdateBatteryVoltage+0x48>)
 8002040:	edc3 7a00 	vstr	s15, [r3]
}
 8002044:	bf00      	nop
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	200000d8 	.word	0x200000d8
 8002050:	20000004 	.word	0x20000004
 8002054:	2000003c 	.word	0x2000003c

08002058 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800205c:	b672      	cpsid	i
}
 800205e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002060:	e7fe      	b.n	8002060 <Error_Handler+0x8>
	...

08002064 <calcOrientOutput>:
char packedOrientData[50] = { 0 };
uint8_t angularPosition[5] = { 0 };
float angularResolution = 360.0/TOOTHRESOLUTION;


void calcOrientOutput() {
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
	 orientAngle = (float) orientIncrement * angularResolution; // Antallet af målte inkrementer ganges med hvor stor en grad hver inkrement er
 8002068:	4b09      	ldr	r3, [pc, #36]	; (8002090 <calcOrientOutput+0x2c>)
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	ee07 3a90 	vmov	s15, r3
 8002070:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002074:	4b07      	ldr	r3, [pc, #28]	; (8002094 <calcOrientOutput+0x30>)
 8002076:	edd3 7a00 	vldr	s15, [r3]
 800207a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <calcOrientOutput+0x34>)
 8002080:	edc3 7a00 	vstr	s15, [r3]
 }
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	2000000a 	.word	0x2000000a
 8002094:	2000000c 	.word	0x2000000c
 8002098:	20000064 	.word	0x20000064

0800209c <packOrient>:

void packOrient() {
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
	uint8_t *angularPointer = &directionOrient;
 80020a2:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <packOrient+0x4c>)
 80020a4:	603b      	str	r3, [r7, #0]
	angularPosition[0] = *(angularPointer);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	781a      	ldrb	r2, [r3, #0]
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <packOrient+0x50>)
 80020ac:	701a      	strb	r2, [r3, #0]

	angularPointer = &orientAngle;
 80020ae:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <packOrient+0x54>)
 80020b0:	603b      	str	r3, [r7, #0]
		for (int x = 1; x < 5 ; x++) {
 80020b2:	2301      	movs	r3, #1
 80020b4:	607b      	str	r3, [r7, #4]
 80020b6:	e00c      	b.n	80020d2 <packOrient+0x36>
		angularPosition[x] = *(angularPointer + (x-1));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	4413      	add	r3, r2
 80020c0:	7819      	ldrb	r1, [r3, #0]
 80020c2:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <packOrient+0x50>)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4413      	add	r3, r2
 80020c8:	460a      	mov	r2, r1
 80020ca:	701a      	strb	r2, [r3, #0]
		for (int x = 1; x < 5 ; x++) {
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3301      	adds	r3, #1
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	ddef      	ble.n	80020b8 <packOrient+0x1c>
	}
}
 80020d8:	bf00      	nop
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000008 	.word	0x20000008
 80020ec:	200000a4 	.word	0x200000a4
 80020f0:	20000064 	.word	0x20000064

080020f4 <checkOrientClock>:

void checkOrientClock() {
 80020f4:	b598      	push	{r3, r4, r7, lr}
 80020f6:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3)
 80020f8:	2108      	movs	r1, #8
 80020fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020fe:	f002 f825 	bl	800414c <HAL_GPIO_ReadPin>
 8002102:	4603      	mov	r3, r0
 8002104:	461c      	mov	r4, r3
				== HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)) {
 8002106:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800210a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800210e:	f002 f81d 	bl	800414c <HAL_GPIO_ReadPin>
 8002112:	4603      	mov	r3, r0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3)
 8002114:	429c      	cmp	r4, r3
 8002116:	d117      	bne.n	8002148 <checkOrientClock+0x54>
			directionOrient = -1;
 8002118:	4b19      	ldr	r3, [pc, #100]	; (8002180 <checkOrientClock+0x8c>)
 800211a:	22ff      	movs	r2, #255	; 0xff
 800211c:	701a      	strb	r2, [r3, #0]
			orientIncrement = abs((orientIncrement + directionOrient) % TOOTHRESOLUTION);
 800211e:	4b19      	ldr	r3, [pc, #100]	; (8002184 <checkOrientClock+0x90>)
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	4b16      	ldr	r3, [pc, #88]	; (8002180 <checkOrientClock+0x8c>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	441a      	add	r2, r3
 800212a:	4b17      	ldr	r3, [pc, #92]	; (8002188 <checkOrientClock+0x94>)
 800212c:	fb83 1302 	smull	r1, r3, r3, r2
 8002130:	1199      	asrs	r1, r3, #6
 8002132:	17d3      	asrs	r3, r2, #31
 8002134:	1ac9      	subs	r1, r1, r3
 8002136:	460b      	mov	r3, r1
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	440b      	add	r3, r1
 800213c:	01db      	lsls	r3, r3, #7
 800213e:	1ad1      	subs	r1, r2, r3
 8002140:	b28a      	uxth	r2, r1
 8002142:	4b10      	ldr	r3, [pc, #64]	; (8002184 <checkOrientClock+0x90>)
 8002144:	801a      	strh	r2, [r3, #0]
 8002146:	e017      	b.n	8002178 <checkOrientClock+0x84>
		} else {

			directionOrient = 1;
 8002148:	4b0d      	ldr	r3, [pc, #52]	; (8002180 <checkOrientClock+0x8c>)
 800214a:	2201      	movs	r2, #1
 800214c:	701a      	strb	r2, [r3, #0]
			orientIncrement = abs((orientIncrement + directionOrient) % (TOOTHRESOLUTION + 1));
 800214e:	4b0d      	ldr	r3, [pc, #52]	; (8002184 <checkOrientClock+0x90>)
 8002150:	881b      	ldrh	r3, [r3, #0]
 8002152:	461a      	mov	r2, r3
 8002154:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <checkOrientClock+0x8c>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	18d1      	adds	r1, r2, r3
 800215a:	4b0c      	ldr	r3, [pc, #48]	; (800218c <checkOrientClock+0x98>)
 800215c:	fb83 2301 	smull	r2, r3, r3, r1
 8002160:	11da      	asrs	r2, r3, #7
 8002162:	17cb      	asrs	r3, r1, #31
 8002164:	1ad2      	subs	r2, r2, r3
 8002166:	4613      	mov	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4413      	add	r3, r2
 800216c:	01db      	lsls	r3, r3, #7
 800216e:	4413      	add	r3, r2
 8002170:	1aca      	subs	r2, r1, r3
 8002172:	b292      	uxth	r2, r2
 8002174:	4b03      	ldr	r3, [pc, #12]	; (8002184 <checkOrientClock+0x90>)
 8002176:	801a      	strh	r2, [r3, #0]
		}

		checkRevolutionsOrient();
 8002178:	f000 f858 	bl	800222c <checkRevolutionsOrient>
}
 800217c:	bf00      	nop
 800217e:	bd98      	pop	{r3, r4, r7, pc}
 8002180:	20000008 	.word	0x20000008
 8002184:	2000000a 	.word	0x2000000a
 8002188:	2aaaaaab 	.word	0x2aaaaaab
 800218c:	551c979b 	.word	0x551c979b

08002190 <checkOrientCounterClock>:

void checkOrientCounterClock() {
 8002190:	b598      	push	{r3, r4, r7, lr}
 8002192:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3)
 8002194:	2108      	movs	r1, #8
 8002196:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800219a:	f001 ffd7 	bl	800414c <HAL_GPIO_ReadPin>
 800219e:	4603      	mov	r3, r0
 80021a0:	461c      	mov	r4, r3
				== HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)) {
 80021a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021aa:	f001 ffcf 	bl	800414c <HAL_GPIO_ReadPin>
 80021ae:	4603      	mov	r3, r0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3)
 80021b0:	429c      	cmp	r4, r3
 80021b2:	d117      	bne.n	80021e4 <checkOrientCounterClock+0x54>
			directionOrient = 1;
 80021b4:	4b19      	ldr	r3, [pc, #100]	; (800221c <checkOrientCounterClock+0x8c>)
 80021b6:	2201      	movs	r2, #1
 80021b8:	701a      	strb	r2, [r3, #0]
			orientIncrement = abs((orientIncrement + directionOrient) % TOOTHRESOLUTION);
 80021ba:	4b19      	ldr	r3, [pc, #100]	; (8002220 <checkOrientCounterClock+0x90>)
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	4b16      	ldr	r3, [pc, #88]	; (800221c <checkOrientCounterClock+0x8c>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	441a      	add	r2, r3
 80021c6:	4b17      	ldr	r3, [pc, #92]	; (8002224 <checkOrientCounterClock+0x94>)
 80021c8:	fb83 1302 	smull	r1, r3, r3, r2
 80021cc:	1199      	asrs	r1, r3, #6
 80021ce:	17d3      	asrs	r3, r2, #31
 80021d0:	1ac9      	subs	r1, r1, r3
 80021d2:	460b      	mov	r3, r1
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	440b      	add	r3, r1
 80021d8:	01db      	lsls	r3, r3, #7
 80021da:	1ad1      	subs	r1, r2, r3
 80021dc:	b28a      	uxth	r2, r1
 80021de:	4b10      	ldr	r3, [pc, #64]	; (8002220 <checkOrientCounterClock+0x90>)
 80021e0:	801a      	strh	r2, [r3, #0]
 80021e2:	e017      	b.n	8002214 <checkOrientCounterClock+0x84>
		} else {
			directionOrient = -1;
 80021e4:	4b0d      	ldr	r3, [pc, #52]	; (800221c <checkOrientCounterClock+0x8c>)
 80021e6:	22ff      	movs	r2, #255	; 0xff
 80021e8:	701a      	strb	r2, [r3, #0]
			orientIncrement = abs((orientIncrement + directionOrient) % (TOOTHRESOLUTION + 1));
 80021ea:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <checkOrientCounterClock+0x90>)
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	461a      	mov	r2, r3
 80021f0:	4b0a      	ldr	r3, [pc, #40]	; (800221c <checkOrientCounterClock+0x8c>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	18d1      	adds	r1, r2, r3
 80021f6:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <checkOrientCounterClock+0x98>)
 80021f8:	fb83 2301 	smull	r2, r3, r3, r1
 80021fc:	11da      	asrs	r2, r3, #7
 80021fe:	17cb      	asrs	r3, r1, #31
 8002200:	1ad2      	subs	r2, r2, r3
 8002202:	4613      	mov	r3, r2
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	4413      	add	r3, r2
 8002208:	01db      	lsls	r3, r3, #7
 800220a:	4413      	add	r3, r2
 800220c:	1aca      	subs	r2, r1, r3
 800220e:	b292      	uxth	r2, r2
 8002210:	4b03      	ldr	r3, [pc, #12]	; (8002220 <checkOrientCounterClock+0x90>)
 8002212:	801a      	strh	r2, [r3, #0]
		}

		checkRevolutionsOrient();
 8002214:	f000 f80a 	bl	800222c <checkRevolutionsOrient>
}
 8002218:	bf00      	nop
 800221a:	bd98      	pop	{r3, r4, r7, pc}
 800221c:	20000008 	.word	0x20000008
 8002220:	2000000a 	.word	0x2000000a
 8002224:	2aaaaaab 	.word	0x2aaaaaab
 8002228:	551c979b 	.word	0x551c979b

0800222c <checkRevolutionsOrient>:

void checkRevolutionsOrient() {
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
	if (orientIncrement == 0 && directionOrient == 1) {
 8002230:	4b07      	ldr	r3, [pc, #28]	; (8002250 <checkRevolutionsOrient+0x24>)
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d106      	bne.n	8002246 <checkRevolutionsOrient+0x1a>
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <checkRevolutionsOrient+0x28>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d102      	bne.n	8002246 <checkRevolutionsOrient+0x1a>
		orientIncrement = 1;
 8002240:	4b03      	ldr	r3, [pc, #12]	; (8002250 <checkRevolutionsOrient+0x24>)
 8002242:	2201      	movs	r2, #1
 8002244:	801a      	strh	r2, [r3, #0]
	}
	else if (orientIncrement == 0 && directionOrient == -1){
		orientIncrement = TOOTHRESOLUTION;
	}
}
 8002246:	bf00      	nop
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	2000000a 	.word	0x2000000a
 8002254:	20000008 	.word	0x20000008

08002258 <sendOrientData>:

void sendOrientData() {
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
	if (spamCheckDirOrient != directionOrient || spamCheckOrientAngle != orientAngle) {
 800225c:	4b16      	ldr	r3, [pc, #88]	; (80022b8 <sendOrientData+0x60>)
 800225e:	781a      	ldrb	r2, [r3, #0]
 8002260:	4b16      	ldr	r3, [pc, #88]	; (80022bc <sendOrientData+0x64>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	429a      	cmp	r2, r3
 8002266:	d10a      	bne.n	800227e <sendOrientData+0x26>
 8002268:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <sendOrientData+0x68>)
 800226a:	ed93 7a00 	vldr	s14, [r3]
 800226e:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <sendOrientData+0x6c>)
 8002270:	edd3 7a00 	vldr	s15, [r3]
 8002274:	eeb4 7a67 	vcmp.f32	s14, s15
 8002278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227c:	d01a      	beq.n	80022b4 <sendOrientData+0x5c>
		spamCheckDirOrient = directionOrient;
 800227e:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <sendOrientData+0x64>)
 8002280:	781a      	ldrb	r2, [r3, #0]
 8002282:	4b0d      	ldr	r3, [pc, #52]	; (80022b8 <sendOrientData+0x60>)
 8002284:	701a      	strb	r2, [r3, #0]
		spamCheckOrientAngle = orientAngle;
 8002286:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <sendOrientData+0x6c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a0d      	ldr	r2, [pc, #52]	; (80022c0 <sendOrientData+0x68>)
 800228c:	6013      	str	r3, [r2, #0]
		packOrient();
 800228e:	f7ff ff05 	bl	800209c <packOrient>
		memset(packedOrientData, 0, sizeof(packedOrientData));
 8002292:	2232      	movs	r2, #50	; 0x32
 8002294:	2100      	movs	r1, #0
 8002296:	480c      	ldr	r0, [pc, #48]	; (80022c8 <sendOrientData+0x70>)
 8002298:	f005 f9de 	bl	8007658 <memset>

		to_frame(packedOrientData, angularPosition, ORIENTID);
 800229c:	2203      	movs	r2, #3
 800229e:	490b      	ldr	r1, [pc, #44]	; (80022cc <sendOrientData+0x74>)
 80022a0:	4809      	ldr	r0, [pc, #36]	; (80022c8 <sendOrientData+0x70>)
 80022a2:	f7fe fddf 	bl	8000e64 <to_frame>
		HAL_UART_Transmit(&huart2, packedOrientData, sizeof(packedOrientData), HAL_MAX_DELAY);
 80022a6:	f04f 33ff 	mov.w	r3, #4294967295
 80022aa:	2232      	movs	r2, #50	; 0x32
 80022ac:	4906      	ldr	r1, [pc, #24]	; (80022c8 <sendOrientData+0x70>)
 80022ae:	4808      	ldr	r0, [pc, #32]	; (80022d0 <sendOrientData+0x78>)
 80022b0:	f004 f96e 	bl	8006590 <HAL_UART_Transmit>
	}
}
 80022b4:	bf00      	nop
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	20000068 	.word	0x20000068
 80022bc:	20000008 	.word	0x20000008
 80022c0:	2000006c 	.word	0x2000006c
 80022c4:	20000064 	.word	0x20000064
 80022c8:	20000070 	.word	0x20000070
 80022cc:	200000a4 	.word	0x200000a4
 80022d0:	20000238 	.word	0x20000238

080022d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022da:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <HAL_MspInit+0x44>)
 80022dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022de:	4a0e      	ldr	r2, [pc, #56]	; (8002318 <HAL_MspInit+0x44>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	6613      	str	r3, [r2, #96]	; 0x60
 80022e6:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <HAL_MspInit+0x44>)
 80022e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	607b      	str	r3, [r7, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022f2:	4b09      	ldr	r3, [pc, #36]	; (8002318 <HAL_MspInit+0x44>)
 80022f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f6:	4a08      	ldr	r2, [pc, #32]	; (8002318 <HAL_MspInit+0x44>)
 80022f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022fc:	6593      	str	r3, [r2, #88]	; 0x58
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_MspInit+0x44>)
 8002300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002306:	603b      	str	r3, [r7, #0]
 8002308:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40021000 	.word	0x40021000

0800231c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08a      	sub	sp, #40	; 0x28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a15      	ldr	r2, [pc, #84]	; (8002390 <HAL_ADC_MspInit+0x74>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d124      	bne.n	8002388 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800233e:	4b15      	ldr	r3, [pc, #84]	; (8002394 <HAL_ADC_MspInit+0x78>)
 8002340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002342:	4a14      	ldr	r2, [pc, #80]	; (8002394 <HAL_ADC_MspInit+0x78>)
 8002344:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800234a:	4b12      	ldr	r3, [pc, #72]	; (8002394 <HAL_ADC_MspInit+0x78>)
 800234c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002356:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <HAL_ADC_MspInit+0x78>)
 8002358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235a:	4a0e      	ldr	r2, [pc, #56]	; (8002394 <HAL_ADC_MspInit+0x78>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002362:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <HAL_ADC_MspInit+0x78>)
 8002364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = BatteryVoltage_Pin;
 800236e:	2308      	movs	r3, #8
 8002370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002372:	230b      	movs	r3, #11
 8002374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BatteryVoltage_GPIO_Port, &GPIO_InitStruct);
 800237a:	f107 0314 	add.w	r3, r7, #20
 800237e:	4619      	mov	r1, r3
 8002380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002384:	f001 fd78 	bl	8003e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002388:	bf00      	nop
 800238a:	3728      	adds	r7, #40	; 0x28
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	50040000 	.word	0x50040000
 8002394:	40021000 	.word	0x40021000

08002398 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <HAL_TIM_PWM_MspInit+0x38>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d10b      	bne.n	80023c2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023aa:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80023ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ae:	4a09      	ldr	r2, [pc, #36]	; (80023d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80023b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023b4:	6613      	str	r3, [r2, #96]	; 0x60
 80023b6:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80023b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80023c2:	bf00      	nop
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	40012c00 	.word	0x40012c00
 80023d4:	40021000 	.word	0x40021000

080023d8 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e8:	d113      	bne.n	8002412 <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023ea:	4b0c      	ldr	r3, [pc, #48]	; (800241c <HAL_TIM_OC_MspInit+0x44>)
 80023ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ee:	4a0b      	ldr	r2, [pc, #44]	; (800241c <HAL_TIM_OC_MspInit+0x44>)
 80023f0:	f043 0301 	orr.w	r3, r3, #1
 80023f4:	6593      	str	r3, [r2, #88]	; 0x58
 80023f6:	4b09      	ldr	r3, [pc, #36]	; (800241c <HAL_TIM_OC_MspInit+0x44>)
 80023f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002402:	2200      	movs	r2, #0
 8002404:	2100      	movs	r1, #0
 8002406:	201c      	movs	r0, #28
 8002408:	f001 fc81 	bl	8003d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800240c:	201c      	movs	r0, #28
 800240e:	f001 fc9a 	bl	8003d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002412:	bf00      	nop
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40021000 	.word	0x40021000

08002420 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a1a      	ldr	r2, [pc, #104]	; (8002498 <HAL_TIM_Base_MspInit+0x78>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d114      	bne.n	800245c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002432:	4b1a      	ldr	r3, [pc, #104]	; (800249c <HAL_TIM_Base_MspInit+0x7c>)
 8002434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002436:	4a19      	ldr	r2, [pc, #100]	; (800249c <HAL_TIM_Base_MspInit+0x7c>)
 8002438:	f043 0310 	orr.w	r3, r3, #16
 800243c:	6593      	str	r3, [r2, #88]	; 0x58
 800243e:	4b17      	ldr	r3, [pc, #92]	; (800249c <HAL_TIM_Base_MspInit+0x7c>)
 8002440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002442:	f003 0310 	and.w	r3, r3, #16
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800244a:	2200      	movs	r2, #0
 800244c:	2100      	movs	r1, #0
 800244e:	2036      	movs	r0, #54	; 0x36
 8002450:	f001 fc5d 	bl	8003d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002454:	2036      	movs	r0, #54	; 0x36
 8002456:	f001 fc76 	bl	8003d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800245a:	e018      	b.n	800248e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a0f      	ldr	r2, [pc, #60]	; (80024a0 <HAL_TIM_Base_MspInit+0x80>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d113      	bne.n	800248e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002466:	4b0d      	ldr	r3, [pc, #52]	; (800249c <HAL_TIM_Base_MspInit+0x7c>)
 8002468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246a:	4a0c      	ldr	r2, [pc, #48]	; (800249c <HAL_TIM_Base_MspInit+0x7c>)
 800246c:	f043 0320 	orr.w	r3, r3, #32
 8002470:	6593      	str	r3, [r2, #88]	; 0x58
 8002472:	4b0a      	ldr	r3, [pc, #40]	; (800249c <HAL_TIM_Base_MspInit+0x7c>)
 8002474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002476:	f003 0320 	and.w	r3, r3, #32
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800247e:	2200      	movs	r2, #0
 8002480:	2100      	movs	r1, #0
 8002482:	2037      	movs	r0, #55	; 0x37
 8002484:	f001 fc43 	bl	8003d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002488:	2037      	movs	r0, #55	; 0x37
 800248a:	f001 fc5c 	bl	8003d46 <HAL_NVIC_EnableIRQ>
}
 800248e:	bf00      	nop
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40001000 	.word	0x40001000
 800249c:	40021000 	.word	0x40021000
 80024a0:	40001400 	.word	0x40001400

080024a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b088      	sub	sp, #32
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	f107 030c 	add.w	r3, r7, #12
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a12      	ldr	r2, [pc, #72]	; (800250c <HAL_TIM_MspPostInit+0x68>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d11d      	bne.n	8002502 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c6:	4b12      	ldr	r3, [pc, #72]	; (8002510 <HAL_TIM_MspPostInit+0x6c>)
 80024c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ca:	4a11      	ldr	r2, [pc, #68]	; (8002510 <HAL_TIM_MspPostInit+0x6c>)
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024d2:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <HAL_TIM_MspPostInit+0x6c>)
 80024d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	60bb      	str	r3, [r7, #8]
 80024dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_R_Pin|PWM_L_Pin;
 80024de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e4:	2302      	movs	r3, #2
 80024e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024f0:	2301      	movs	r3, #1
 80024f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f4:	f107 030c 	add.w	r3, r7, #12
 80024f8:	4619      	mov	r1, r3
 80024fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024fe:	f001 fcbb 	bl	8003e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002502:	bf00      	nop
 8002504:	3720      	adds	r7, #32
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40012c00 	.word	0x40012c00
 8002510:	40021000 	.word	0x40021000

08002514 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08a      	sub	sp, #40	; 0x28
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251c:	f107 0314 	add.w	r3, r7, #20
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a24      	ldr	r2, [pc, #144]	; (80025c4 <HAL_UART_MspInit+0xb0>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d142      	bne.n	80025bc <HAL_UART_MspInit+0xa8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002536:	4b24      	ldr	r3, [pc, #144]	; (80025c8 <HAL_UART_MspInit+0xb4>)
 8002538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253a:	4a23      	ldr	r2, [pc, #140]	; (80025c8 <HAL_UART_MspInit+0xb4>)
 800253c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002540:	6593      	str	r3, [r2, #88]	; 0x58
 8002542:	4b21      	ldr	r3, [pc, #132]	; (80025c8 <HAL_UART_MspInit+0xb4>)
 8002544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	613b      	str	r3, [r7, #16]
 800254c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254e:	4b1e      	ldr	r3, [pc, #120]	; (80025c8 <HAL_UART_MspInit+0xb4>)
 8002550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002552:	4a1d      	ldr	r2, [pc, #116]	; (80025c8 <HAL_UART_MspInit+0xb4>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800255a:	4b1b      	ldr	r3, [pc, #108]	; (80025c8 <HAL_UART_MspInit+0xb4>)
 800255c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002566:	2304      	movs	r3, #4
 8002568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256a:	2302      	movs	r3, #2
 800256c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	2300      	movs	r3, #0
 8002570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002572:	2303      	movs	r3, #3
 8002574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002576:	2307      	movs	r3, #7
 8002578:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257a:	f107 0314 	add.w	r3, r7, #20
 800257e:	4619      	mov	r1, r3
 8002580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002584:	f001 fc78 	bl	8003e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002588:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800258c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258e:	2302      	movs	r3, #2
 8002590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002596:	2303      	movs	r3, #3
 8002598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800259a:	2303      	movs	r3, #3
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259e:	f107 0314 	add.w	r3, r7, #20
 80025a2:	4619      	mov	r1, r3
 80025a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025a8:	f001 fc66 	bl	8003e78 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80025ac:	2200      	movs	r2, #0
 80025ae:	2100      	movs	r1, #0
 80025b0:	2026      	movs	r0, #38	; 0x26
 80025b2:	f001 fbac 	bl	8003d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025b6:	2026      	movs	r0, #38	; 0x26
 80025b8:	f001 fbc5 	bl	8003d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025bc:	bf00      	nop
 80025be:	3728      	adds	r7, #40	; 0x28
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40004400 	.word	0x40004400
 80025c8:	40021000 	.word	0x40021000

080025cc <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80025d0:	e7fe      	b.n	80025d0 <NMI_Handler+0x4>

080025d2 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80025d2:	b480      	push	{r7}
 80025d4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80025d6:	e7fe      	b.n	80025d6 <HardFault_Handler+0x4>

080025d8 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80025dc:	e7fe      	b.n	80025dc <MemManage_Handler+0x4>

080025de <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80025de:	b480      	push	{r7}
 80025e0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80025e2:	e7fe      	b.n	80025e2 <BusFault_Handler+0x4>

080025e4 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80025e8:	e7fe      	b.n	80025e8 <UsageFault_Handler+0x4>

080025ea <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80025fc:	bf00      	nop
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8002606:	b480      	push	{r7}
 8002608:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8002618:	f000 f91a 	bl	8002850 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 800261c:	bf00      	nop
 800261e:	bd80      	pop	{r7, pc}

08002620 <EXTI0_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line0 interrupt.
 */
void EXTI0_IRQHandler(void) {
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI0_IRQn 0 */

	/* USER CODE END EXTI0_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002624:	2001      	movs	r0, #1
 8002626:	f001 fdc1 	bl	80041ac <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI0_IRQn 1 */
	clockcheckRight();
 800262a:	f7ff f9e3 	bl	80019f4 <clockcheckRight>
	/* USER CODE END EXTI0_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}

08002632 <EXTI1_IRQHandler>:

/**
 * @brief This function handles EXTI line1 interrupt.
 */
void EXTI1_IRQHandler(void) {
 8002632:	b580      	push	{r7, lr}
 8002634:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI1_IRQn 0 */

	/* USER CODE END EXTI1_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002636:	2002      	movs	r0, #2
 8002638:	f001 fdb8 	bl	80041ac <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI1_IRQn 1 */
	clockcheckLeft();
 800263c:	f7ff fa96 	bl	8001b6c <clockcheckLeft>
	/* USER CODE END EXTI1_IRQn 1 */
}
 8002640:	bf00      	nop
 8002642:	bd80      	pop	{r7, pc}

08002644 <EXTI3_IRQHandler>:

/**
 * @brief This function handles EXTI line3 interrupt.
 */
void EXTI3_IRQHandler(void) {
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI3_IRQn 0 */

	/* USER CODE END EXTI3_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002648:	2008      	movs	r0, #8
 800264a:	f001 fdaf 	bl	80041ac <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI3_IRQn 1 */
	checkOrientClock();
 800264e:	f7ff fd51 	bl	80020f4 <checkOrientClock>
	/* USER CODE END EXTI3_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}

08002656 <EXTI4_IRQHandler>:

/**
 * @brief This function handles EXTI line4 interrupt.
 */
void EXTI4_IRQHandler(void) {
 8002656:	b580      	push	{r7, lr}
 8002658:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI4_IRQn 0 */

	/* USER CODE END EXTI4_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800265a:	2010      	movs	r0, #16
 800265c:	f001 fda6 	bl	80041ac <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI4_IRQn 1 */
	counterclockcheckRight();
 8002660:	f7ff fa26 	bl	8001ab0 <counterclockcheckRight>
	/* USER CODE END EXTI4_IRQn 1 */
}
 8002664:	bf00      	nop
 8002666:	bd80      	pop	{r7, pc}

08002668 <EXTI9_5_IRQHandler>:

/**
 * @brief This function handles EXTI line[9:5] interrupts.
 */
void EXTI9_5_IRQHandler(void) {
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI9_5_IRQn 0 */

	/* USER CODE END EXTI9_5_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800266c:	2020      	movs	r0, #32
 800266e:	f001 fd9d 	bl	80041ac <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI9_5_IRQn 1 */
	counterclockcheckLeft();
 8002672:	f7ff fadd 	bl	8001c30 <counterclockcheckLeft>
	/* USER CODE END EXTI9_5_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 8002680:	4803      	ldr	r0, [pc, #12]	; (8002690 <TIM2_IRQHandler+0x14>)
 8002682:	f003 f881 	bl	8005788 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */
	controlBothMotors();
 8002686:	f7ff fcb3 	bl	8001ff0 <controlBothMotors>
	/* USER CODE END TIM2_IRQn 1 */
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	200001ec 	.word	0x200001ec

08002694 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void) {
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8002698:	4803      	ldr	r0, [pc, #12]	; (80026a8 <USART2_IRQHandler+0x14>)
 800269a:	f004 f851 	bl	8006740 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */
	resetEncoder();
 800269e:	f7ff f991 	bl	80019c4 <resetEncoder>
	/* USER CODE END USART2_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20000238 	.word	0x20000238

080026ac <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void) {
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80026b0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80026b4:	f001 fd7a 	bl	80041ac <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */
	checkOrientCounterClock();
 80026b8:	f7ff fd6a 	bl	8002190 <checkOrientCounterClock>
	/* USER CODE END EXTI15_10_IRQn 1 */
}
 80026bc:	bf00      	nop
 80026be:	bd80      	pop	{r7, pc}

080026c0 <TIM6_DAC_IRQHandler>:

/**
 * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	/* USER CODE END TIM6_DAC_IRQn 0 */
	HAL_TIM_IRQHandler(&htim6);
 80026c4:	4803      	ldr	r0, [pc, #12]	; (80026d4 <TIM6_DAC_IRQHandler+0x14>)
 80026c6:	f003 f85f 	bl	8005788 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */
	calcPositionAndVelocity();
 80026ca:	f7ff f861 	bl	8001790 <calcPositionAndVelocity>
	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	2000013c 	.word	0x2000013c

080026d8 <TIM7_IRQHandler>:

/**
 * @brief This function handles TIM7 global interrupt.
 */
void TIM7_IRQHandler(void) {
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM7_IRQn 0 */

	/* USER CODE END TIM7_IRQn 0 */
	HAL_TIM_IRQHandler(&htim7);
 80026dc:	4803      	ldr	r0, [pc, #12]	; (80026ec <TIM7_IRQHandler+0x14>)
 80026de:	f003 f853 	bl	8005788 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM7_IRQn 1 */
	UpdateBatteryVoltage();
 80026e2:	f7ff fc93 	bl	800200c <UpdateBatteryVoltage>

	/* USER CODE END TIM7_IRQn 1 */
}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	200002d0 	.word	0x200002d0

080026f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80026f4:	4b15      	ldr	r3, [pc, #84]	; (800274c <SystemInit+0x5c>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	4a14      	ldr	r2, [pc, #80]	; (800274c <SystemInit+0x5c>)
 80026fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002700:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002704:	4b12      	ldr	r3, [pc, #72]	; (8002750 <SystemInit+0x60>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a11      	ldr	r2, [pc, #68]	; (8002750 <SystemInit+0x60>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002710:	4b0f      	ldr	r3, [pc, #60]	; (8002750 <SystemInit+0x60>)
 8002712:	2200      	movs	r2, #0
 8002714:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002716:	4b0e      	ldr	r3, [pc, #56]	; (8002750 <SystemInit+0x60>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a0d      	ldr	r2, [pc, #52]	; (8002750 <SystemInit+0x60>)
 800271c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002720:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002724:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002726:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <SystemInit+0x60>)
 8002728:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800272c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800272e:	4b08      	ldr	r3, [pc, #32]	; (8002750 <SystemInit+0x60>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a07      	ldr	r2, [pc, #28]	; (8002750 <SystemInit+0x60>)
 8002734:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002738:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800273a:	4b05      	ldr	r3, [pc, #20]	; (8002750 <SystemInit+0x60>)
 800273c:	2200      	movs	r2, #0
 800273e:	619a      	str	r2, [r3, #24]
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	e000ed00 	.word	0xe000ed00
 8002750:	40021000 	.word	0x40021000

08002754 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002754:	f8df d034 	ldr.w	sp, [pc, #52]	; 800278c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002758:	f7ff ffca 	bl	80026f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800275c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800275e:	e003      	b.n	8002768 <LoopCopyDataInit>

08002760 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002760:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002762:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002764:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002766:	3104      	adds	r1, #4

08002768 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002768:	480a      	ldr	r0, [pc, #40]	; (8002794 <LoopForever+0xa>)
	ldr	r3, =_edata
 800276a:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <LoopForever+0xe>)
	adds	r2, r0, r1
 800276c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800276e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002770:	d3f6      	bcc.n	8002760 <CopyDataInit>
	ldr	r2, =_sbss
 8002772:	4a0a      	ldr	r2, [pc, #40]	; (800279c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002774:	e002      	b.n	800277c <LoopFillZerobss>

08002776 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002776:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002778:	f842 3b04 	str.w	r3, [r2], #4

0800277c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800277c:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <LoopForever+0x16>)
	cmp	r2, r3
 800277e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002780:	d3f9      	bcc.n	8002776 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002782:	f004 ff45 	bl	8007610 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002786:	f7fe fbe1 	bl	8000f4c <main>

0800278a <LoopForever>:

LoopForever:
    b LoopForever
 800278a:	e7fe      	b.n	800278a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800278c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002790:	080089c0 	.word	0x080089c0
	ldr	r0, =_sdata
 8002794:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002798:	2000001c 	.word	0x2000001c
	ldr	r2, =_sbss
 800279c:	2000001c 	.word	0x2000001c
	ldr	r3, = _ebss
 80027a0:	20000334 	.word	0x20000334

080027a4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027a4:	e7fe      	b.n	80027a4 <ADC1_IRQHandler>

080027a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b082      	sub	sp, #8
 80027aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027b0:	2003      	movs	r0, #3
 80027b2:	f001 faa1 	bl	8003cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027b6:	2000      	movs	r0, #0
 80027b8:	f000 f80e 	bl	80027d8 <HAL_InitTick>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d002      	beq.n	80027c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	71fb      	strb	r3, [r7, #7]
 80027c6:	e001      	b.n	80027cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027c8:	f7ff fd84 	bl	80022d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027cc:	79fb      	ldrb	r3, [r7, #7]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027e0:	2300      	movs	r3, #0
 80027e2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80027e4:	4b17      	ldr	r3, [pc, #92]	; (8002844 <HAL_InitTick+0x6c>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d023      	beq.n	8002834 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80027ec:	4b16      	ldr	r3, [pc, #88]	; (8002848 <HAL_InitTick+0x70>)
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	4b14      	ldr	r3, [pc, #80]	; (8002844 <HAL_InitTick+0x6c>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	4619      	mov	r1, r3
 80027f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80027fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002802:	4618      	mov	r0, r3
 8002804:	f001 faad 	bl	8003d62 <HAL_SYSTICK_Config>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10f      	bne.n	800282e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b0f      	cmp	r3, #15
 8002812:	d809      	bhi.n	8002828 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002814:	2200      	movs	r2, #0
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	f04f 30ff 	mov.w	r0, #4294967295
 800281c:	f001 fa77 	bl	8003d0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002820:	4a0a      	ldr	r2, [pc, #40]	; (800284c <HAL_InitTick+0x74>)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	e007      	b.n	8002838 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	73fb      	strb	r3, [r7, #15]
 800282c:	e004      	b.n	8002838 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	73fb      	strb	r3, [r7, #15]
 8002832:	e001      	b.n	8002838 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002838:	7bfb      	ldrb	r3, [r7, #15]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20000018 	.word	0x20000018
 8002848:	20000010 	.word	0x20000010
 800284c:	20000014 	.word	0x20000014

08002850 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_IncTick+0x20>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	4b06      	ldr	r3, [pc, #24]	; (8002874 <HAL_IncTick+0x24>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4413      	add	r3, r2
 8002860:	4a04      	ldr	r2, [pc, #16]	; (8002874 <HAL_IncTick+0x24>)
 8002862:	6013      	str	r3, [r2, #0]
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	20000018 	.word	0x20000018
 8002874:	20000330 	.word	0x20000330

08002878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return uwTick;
 800287c:	4b03      	ldr	r3, [pc, #12]	; (800288c <HAL_GetTick+0x14>)
 800287e:	681b      	ldr	r3, [r3, #0]
}
 8002880:	4618      	mov	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	20000330 	.word	0x20000330

08002890 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	431a      	orrs	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	609a      	str	r2, [r3, #8]
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	609a      	str	r2, [r3, #8]
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b087      	sub	sp, #28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	3360      	adds	r3, #96	; 0x60
 800290a:	461a      	mov	r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	4b08      	ldr	r3, [pc, #32]	; (800293c <LL_ADC_SetOffset+0x44>)
 800291a:	4013      	ands	r3, r2
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	4313      	orrs	r3, r2
 8002928:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002930:	bf00      	nop
 8002932:	371c      	adds	r7, #28
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	03fff000 	.word	0x03fff000

08002940 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3360      	adds	r3, #96	; 0x60
 800294e:	461a      	mov	r2, r3
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002960:	4618      	mov	r0, r3
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800296c:	b480      	push	{r7}
 800296e:	b087      	sub	sp, #28
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	3360      	adds	r3, #96	; 0x60
 800297c:	461a      	mov	r2, r3
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	431a      	orrs	r2, r3
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002996:	bf00      	nop
 8002998:	371c      	adds	r7, #28
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b087      	sub	sp, #28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	3330      	adds	r3, #48	; 0x30
 80029d8:	461a      	mov	r2, r3
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	0a1b      	lsrs	r3, r3, #8
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	f003 030c 	and.w	r3, r3, #12
 80029e4:	4413      	add	r3, r2
 80029e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f003 031f 	and.w	r3, r3, #31
 80029f2:	211f      	movs	r1, #31
 80029f4:	fa01 f303 	lsl.w	r3, r1, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	401a      	ands	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	0e9b      	lsrs	r3, r3, #26
 8002a00:	f003 011f 	and.w	r1, r3, #31
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f003 031f 	and.w	r3, r3, #31
 8002a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a14:	bf00      	nop
 8002a16:	371c      	adds	r7, #28
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b087      	sub	sp, #28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	3314      	adds	r3, #20
 8002a30:	461a      	mov	r2, r3
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	0e5b      	lsrs	r3, r3, #25
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	4413      	add	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	0d1b      	lsrs	r3, r3, #20
 8002a48:	f003 031f 	and.w	r3, r3, #31
 8002a4c:	2107      	movs	r1, #7
 8002a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a52:	43db      	mvns	r3, r3
 8002a54:	401a      	ands	r2, r3
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	0d1b      	lsrs	r3, r3, #20
 8002a5a:	f003 031f 	and.w	r3, r3, #31
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	fa01 f303 	lsl.w	r3, r1, r3
 8002a64:	431a      	orrs	r2, r3
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a6a:	bf00      	nop
 8002a6c:	371c      	adds	r7, #28
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
	...

08002a78 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a90:	43db      	mvns	r3, r3
 8002a92:	401a      	ands	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f003 0318 	and.w	r3, r3, #24
 8002a9a:	4908      	ldr	r1, [pc, #32]	; (8002abc <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a9c:	40d9      	lsrs	r1, r3
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	400b      	ands	r3, r1
 8002aa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002aae:	bf00      	nop
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	0007ffff 	.word	0x0007ffff

08002ac0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002ad0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6093      	str	r3, [r2, #8]
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002af4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002af8:	d101      	bne.n	8002afe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002b1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b20:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b48:	d101      	bne.n	8002b4e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b70:	f043 0201 	orr.w	r2, r3, #1
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b98:	f043 0202 	orr.w	r2, r3, #2
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d101      	bne.n	8002bc4 <LL_ADC_IsEnabled+0x18>
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e000      	b.n	8002bc6 <LL_ADC_IsEnabled+0x1a>
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d101      	bne.n	8002bea <LL_ADC_IsDisableOngoing+0x18>
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <LL_ADC_IsDisableOngoing+0x1a>
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c0c:	f043 0204 	orr.w	r2, r3, #4
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b04      	cmp	r3, #4
 8002c32:	d101      	bne.n	8002c38 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	d101      	bne.n	8002c5e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b088      	sub	sp, #32
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c74:	2300      	movs	r3, #0
 8002c76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e12c      	b.n	8002ee0 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d109      	bne.n	8002ca8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7ff fb41 	bl	800231c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff ff19 	bl	8002ae4 <LL_ADC_IsDeepPowerDownEnabled>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d004      	beq.n	8002cc2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff feff 	bl	8002ac0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff ff34 	bl	8002b34 <LL_ADC_IsInternalRegulatorEnabled>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d115      	bne.n	8002cfe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff ff18 	bl	8002b0c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cdc:	4b82      	ldr	r3, [pc, #520]	; (8002ee8 <HAL_ADC_Init+0x27c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	099b      	lsrs	r3, r3, #6
 8002ce2:	4a82      	ldr	r2, [pc, #520]	; (8002eec <HAL_ADC_Init+0x280>)
 8002ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce8:	099b      	lsrs	r3, r3, #6
 8002cea:	3301      	adds	r3, #1
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002cf0:	e002      	b.n	8002cf8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f9      	bne.n	8002cf2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff ff16 	bl	8002b34 <LL_ADC_IsInternalRegulatorEnabled>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10d      	bne.n	8002d2a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d12:	f043 0210 	orr.w	r2, r3, #16
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1e:	f043 0201 	orr.w	r2, r3, #1
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff ff76 	bl	8002c20 <LL_ADC_REG_IsConversionOngoing>
 8002d34:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3a:	f003 0310 	and.w	r3, r3, #16
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f040 80c5 	bne.w	8002ece <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f040 80c1 	bne.w	8002ece <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d50:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d54:	f043 0202 	orr.w	r2, r3, #2
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff ff23 	bl	8002bac <LL_ADC_IsEnabled>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10b      	bne.n	8002d84 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d6c:	4860      	ldr	r0, [pc, #384]	; (8002ef0 <HAL_ADC_Init+0x284>)
 8002d6e:	f7ff ff1d 	bl	8002bac <LL_ADC_IsEnabled>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d105      	bne.n	8002d84 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	485d      	ldr	r0, [pc, #372]	; (8002ef4 <HAL_ADC_Init+0x288>)
 8002d80:	f7ff fd86 	bl	8002890 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	7e5b      	ldrb	r3, [r3, #25]
 8002d88:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d8e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002d94:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002d9a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002da2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002da4:	4313      	orrs	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d106      	bne.n	8002dc0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	3b01      	subs	r3, #1
 8002db8:	045b      	lsls	r3, r3, #17
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d009      	beq.n	8002ddc <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dcc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	4b45      	ldr	r3, [pc, #276]	; (8002ef8 <HAL_ADC_Init+0x28c>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6812      	ldr	r2, [r2, #0]
 8002dea:	69b9      	ldr	r1, [r7, #24]
 8002dec:	430b      	orrs	r3, r1
 8002dee:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff ff13 	bl	8002c20 <LL_ADC_REG_IsConversionOngoing>
 8002dfa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff ff20 	bl	8002c46 <LL_ADC_INJ_IsConversionOngoing>
 8002e06:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d13d      	bne.n	8002e8a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d13a      	bne.n	8002e8a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e18:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e20:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e22:	4313      	orrs	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e30:	f023 0302 	bic.w	r3, r3, #2
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6812      	ldr	r2, [r2, #0]
 8002e38:	69b9      	ldr	r1, [r7, #24]
 8002e3a:	430b      	orrs	r3, r1
 8002e3c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d118      	bne.n	8002e7a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e52:	f023 0304 	bic.w	r3, r3, #4
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e5e:	4311      	orrs	r1, r2
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002e64:	4311      	orrs	r1, r2
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0201 	orr.w	r2, r2, #1
 8002e76:	611a      	str	r2, [r3, #16]
 8002e78:	e007      	b.n	8002e8a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	691a      	ldr	r2, [r3, #16]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0201 	bic.w	r2, r2, #1
 8002e88:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d10c      	bne.n	8002eac <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e98:	f023 010f 	bic.w	r1, r3, #15
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	1e5a      	subs	r2, r3, #1
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	631a      	str	r2, [r3, #48]	; 0x30
 8002eaa:	e007      	b.n	8002ebc <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 020f 	bic.w	r2, r2, #15
 8002eba:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec0:	f023 0303 	bic.w	r3, r3, #3
 8002ec4:	f043 0201 	orr.w	r2, r3, #1
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	655a      	str	r2, [r3, #84]	; 0x54
 8002ecc:	e007      	b.n	8002ede <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed2:	f043 0210 	orr.w	r2, r3, #16
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ede:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3720      	adds	r7, #32
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20000010 	.word	0x20000010
 8002eec:	053e2d63 	.word	0x053e2d63
 8002ef0:	50040000 	.word	0x50040000
 8002ef4:	50040300 	.word	0x50040300
 8002ef8:	fff0c007 	.word	0xfff0c007

08002efc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff fe89 	bl	8002c20 <LL_ADC_REG_IsConversionOngoing>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d14f      	bne.n	8002fb4 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d101      	bne.n	8002f22 <HAL_ADC_Start+0x26>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e04b      	b.n	8002fba <HAL_ADC_Start+0xbe>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 fcc6 	bl	80038bc <ADC_Enable>
 8002f30:	4603      	mov	r3, r0
 8002f32:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d137      	bne.n	8002faa <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f42:	f023 0301 	bic.w	r3, r3, #1
 8002f46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f5a:	d106      	bne.n	8002f6a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f60:	f023 0206 	bic.w	r2, r3, #6
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	659a      	str	r2, [r3, #88]	; 0x58
 8002f68:	e002      	b.n	8002f70 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	221c      	movs	r2, #28
 8002f76:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d007      	beq.n	8002f9e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f96:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff fe28 	bl	8002bf8 <LL_ADC_REG_StartConversion>
 8002fa8:	e006      	b.n	8002fb8 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002fb2:	e001      	b.n	8002fb8 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b086      	sub	sp, #24
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
 8002fca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d102      	bne.n	8002fda <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002fd4:	2308      	movs	r3, #8
 8002fd6:	617b      	str	r3, [r7, #20]
 8002fd8:	e010      	b.n	8002ffc <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d007      	beq.n	8002ff8 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fec:	f043 0220 	orr.w	r2, r3, #32
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e06f      	b.n	80030d8 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002ff8:	2304      	movs	r3, #4
 8002ffa:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002ffc:	f7ff fc3c 	bl	8002878 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003002:	e021      	b.n	8003048 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300a:	d01d      	beq.n	8003048 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800300c:	f7ff fc34 	bl	8002878 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	429a      	cmp	r2, r3
 800301a:	d302      	bcc.n	8003022 <HAL_ADC_PollForConversion+0x60>
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d112      	bne.n	8003048 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	4013      	ands	r3, r2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10b      	bne.n	8003048 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003034:	f043 0204 	orr.w	r2, r3, #4
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e047      	b.n	80030d8 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	4013      	ands	r3, r2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0d6      	beq.n	8003004 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff fc9b 	bl	80029a2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d01c      	beq.n	80030ac <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	7e5b      	ldrb	r3, [r3, #25]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d118      	bne.n	80030ac <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	2b08      	cmp	r3, #8
 8003086:	d111      	bne.n	80030ac <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003098:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d105      	bne.n	80030ac <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a4:	f043 0201 	orr.w	r2, r3, #1
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d104      	bne.n	80030c4 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2208      	movs	r2, #8
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	e008      	b.n	80030d6 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d103      	bne.n	80030d6 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	220c      	movs	r2, #12
 80030d4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
	...

080030fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b0b6      	sub	sp, #216	; 0xd8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003106:	2300      	movs	r3, #0
 8003108:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800310c:	2300      	movs	r3, #0
 800310e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_ADC_ConfigChannel+0x22>
 800311a:	2302      	movs	r3, #2
 800311c:	e3b9      	b.n	8003892 <HAL_ADC_ConfigChannel+0x796>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff fd78 	bl	8002c20 <LL_ADC_REG_IsConversionOngoing>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	f040 839e 	bne.w	8003874 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b05      	cmp	r3, #5
 800313e:	d824      	bhi.n	800318a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	3b02      	subs	r3, #2
 8003146:	2b03      	cmp	r3, #3
 8003148:	d81b      	bhi.n	8003182 <HAL_ADC_ConfigChannel+0x86>
 800314a:	a201      	add	r2, pc, #4	; (adr r2, 8003150 <HAL_ADC_ConfigChannel+0x54>)
 800314c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003150:	08003161 	.word	0x08003161
 8003154:	08003169 	.word	0x08003169
 8003158:	08003171 	.word	0x08003171
 800315c:	08003179 	.word	0x08003179
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	220c      	movs	r2, #12
 8003164:	605a      	str	r2, [r3, #4]
          break;
 8003166:	e011      	b.n	800318c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	2212      	movs	r2, #18
 800316c:	605a      	str	r2, [r3, #4]
          break;
 800316e:	e00d      	b.n	800318c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	2218      	movs	r2, #24
 8003174:	605a      	str	r2, [r3, #4]
          break;
 8003176:	e009      	b.n	800318c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800317e:	605a      	str	r2, [r3, #4]
          break;
 8003180:	e004      	b.n	800318c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2206      	movs	r2, #6
 8003186:	605a      	str	r2, [r3, #4]
          break;
 8003188:	e000      	b.n	800318c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800318a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6818      	ldr	r0, [r3, #0]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	6859      	ldr	r1, [r3, #4]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	461a      	mov	r2, r3
 800319a:	f7ff fc15 	bl	80029c8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff fd3c 	bl	8002c20 <LL_ADC_REG_IsConversionOngoing>
 80031a8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff fd48 	bl	8002c46 <LL_ADC_INJ_IsConversionOngoing>
 80031b6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f040 81a6 	bne.w	8003510 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f040 81a1 	bne.w	8003510 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6818      	ldr	r0, [r3, #0]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	6819      	ldr	r1, [r3, #0]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	461a      	mov	r2, r3
 80031dc:	f7ff fc20 	bl	8002a20 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	695a      	ldr	r2, [r3, #20]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	08db      	lsrs	r3, r3, #3
 80031ec:	f003 0303 	and.w	r3, r3, #3
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d00a      	beq.n	8003218 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6818      	ldr	r0, [r3, #0]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	6919      	ldr	r1, [r3, #16]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003212:	f7ff fb71 	bl	80028f8 <LL_ADC_SetOffset>
 8003216:	e17b      	b.n	8003510 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2100      	movs	r1, #0
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff fb8e 	bl	8002940 <LL_ADC_GetOffsetChannel>
 8003224:	4603      	mov	r3, r0
 8003226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10a      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x148>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2100      	movs	r1, #0
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff fb83 	bl	8002940 <LL_ADC_GetOffsetChannel>
 800323a:	4603      	mov	r3, r0
 800323c:	0e9b      	lsrs	r3, r3, #26
 800323e:	f003 021f 	and.w	r2, r3, #31
 8003242:	e01e      	b.n	8003282 <HAL_ADC_ConfigChannel+0x186>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2100      	movs	r1, #0
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff fb78 	bl	8002940 <LL_ADC_GetOffsetChannel>
 8003250:	4603      	mov	r3, r0
 8003252:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003256:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800325a:	fa93 f3a3 	rbit	r3, r3
 800325e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003262:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003266:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800326a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003272:	2320      	movs	r3, #32
 8003274:	e004      	b.n	8003280 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003276:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800327a:	fab3 f383 	clz	r3, r3
 800327e:	b2db      	uxtb	r3, r3
 8003280:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800328a:	2b00      	cmp	r3, #0
 800328c:	d105      	bne.n	800329a <HAL_ADC_ConfigChannel+0x19e>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	0e9b      	lsrs	r3, r3, #26
 8003294:	f003 031f 	and.w	r3, r3, #31
 8003298:	e018      	b.n	80032cc <HAL_ADC_ConfigChannel+0x1d0>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80032a6:	fa93 f3a3 	rbit	r3, r3
 80032aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80032ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80032b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80032be:	2320      	movs	r3, #32
 80032c0:	e004      	b.n	80032cc <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80032c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032c6:	fab3 f383 	clz	r3, r3
 80032ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d106      	bne.n	80032de <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2200      	movs	r2, #0
 80032d6:	2100      	movs	r1, #0
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff fb47 	bl	800296c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2101      	movs	r1, #1
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff fb2b 	bl	8002940 <LL_ADC_GetOffsetChannel>
 80032ea:	4603      	mov	r3, r0
 80032ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10a      	bne.n	800330a <HAL_ADC_ConfigChannel+0x20e>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2101      	movs	r1, #1
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fb20 	bl	8002940 <LL_ADC_GetOffsetChannel>
 8003300:	4603      	mov	r3, r0
 8003302:	0e9b      	lsrs	r3, r3, #26
 8003304:	f003 021f 	and.w	r2, r3, #31
 8003308:	e01e      	b.n	8003348 <HAL_ADC_ConfigChannel+0x24c>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2101      	movs	r1, #1
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff fb15 	bl	8002940 <LL_ADC_GetOffsetChannel>
 8003316:	4603      	mov	r3, r0
 8003318:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003320:	fa93 f3a3 	rbit	r3, r3
 8003324:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003328:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800332c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003330:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003338:	2320      	movs	r3, #32
 800333a:	e004      	b.n	8003346 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800333c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003340:	fab3 f383 	clz	r3, r3
 8003344:	b2db      	uxtb	r3, r3
 8003346:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003350:	2b00      	cmp	r3, #0
 8003352:	d105      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x264>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	0e9b      	lsrs	r3, r3, #26
 800335a:	f003 031f 	and.w	r3, r3, #31
 800335e:	e018      	b.n	8003392 <HAL_ADC_ConfigChannel+0x296>
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003368:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800336c:	fa93 f3a3 	rbit	r3, r3
 8003370:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003374:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003378:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800337c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003384:	2320      	movs	r3, #32
 8003386:	e004      	b.n	8003392 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003388:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800338c:	fab3 f383 	clz	r3, r3
 8003390:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003392:	429a      	cmp	r2, r3
 8003394:	d106      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2200      	movs	r2, #0
 800339c:	2101      	movs	r1, #1
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff fae4 	bl	800296c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2102      	movs	r1, #2
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff fac8 	bl	8002940 <LL_ADC_GetOffsetChannel>
 80033b0:	4603      	mov	r3, r0
 80033b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10a      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x2d4>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2102      	movs	r1, #2
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff fabd 	bl	8002940 <LL_ADC_GetOffsetChannel>
 80033c6:	4603      	mov	r3, r0
 80033c8:	0e9b      	lsrs	r3, r3, #26
 80033ca:	f003 021f 	and.w	r2, r3, #31
 80033ce:	e01e      	b.n	800340e <HAL_ADC_ConfigChannel+0x312>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2102      	movs	r1, #2
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff fab2 	bl	8002940 <LL_ADC_GetOffsetChannel>
 80033dc:	4603      	mov	r3, r0
 80033de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033e6:	fa93 f3a3 	rbit	r3, r3
 80033ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80033ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80033f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80033fe:	2320      	movs	r3, #32
 8003400:	e004      	b.n	800340c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003402:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003406:	fab3 f383 	clz	r3, r3
 800340a:	b2db      	uxtb	r3, r3
 800340c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003416:	2b00      	cmp	r3, #0
 8003418:	d105      	bne.n	8003426 <HAL_ADC_ConfigChannel+0x32a>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	0e9b      	lsrs	r3, r3, #26
 8003420:	f003 031f 	and.w	r3, r3, #31
 8003424:	e016      	b.n	8003454 <HAL_ADC_ConfigChannel+0x358>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003432:	fa93 f3a3 	rbit	r3, r3
 8003436:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003438:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800343a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800343e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003446:	2320      	movs	r3, #32
 8003448:	e004      	b.n	8003454 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800344a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800344e:	fab3 f383 	clz	r3, r3
 8003452:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003454:	429a      	cmp	r2, r3
 8003456:	d106      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2200      	movs	r2, #0
 800345e:	2102      	movs	r1, #2
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff fa83 	bl	800296c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2103      	movs	r1, #3
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff fa67 	bl	8002940 <LL_ADC_GetOffsetChannel>
 8003472:	4603      	mov	r3, r0
 8003474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10a      	bne.n	8003492 <HAL_ADC_ConfigChannel+0x396>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2103      	movs	r1, #3
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff fa5c 	bl	8002940 <LL_ADC_GetOffsetChannel>
 8003488:	4603      	mov	r3, r0
 800348a:	0e9b      	lsrs	r3, r3, #26
 800348c:	f003 021f 	and.w	r2, r3, #31
 8003490:	e017      	b.n	80034c2 <HAL_ADC_ConfigChannel+0x3c6>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2103      	movs	r1, #3
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff fa51 	bl	8002940 <LL_ADC_GetOffsetChannel>
 800349e:	4603      	mov	r3, r0
 80034a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034a4:	fa93 f3a3 	rbit	r3, r3
 80034a8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80034aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034ac:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80034ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80034b4:	2320      	movs	r3, #32
 80034b6:	e003      	b.n	80034c0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80034b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034ba:	fab3 f383 	clz	r3, r3
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d105      	bne.n	80034da <HAL_ADC_ConfigChannel+0x3de>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	0e9b      	lsrs	r3, r3, #26
 80034d4:	f003 031f 	and.w	r3, r3, #31
 80034d8:	e011      	b.n	80034fe <HAL_ADC_ConfigChannel+0x402>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034e2:	fa93 f3a3 	rbit	r3, r3
 80034e6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80034e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80034ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80034f2:	2320      	movs	r3, #32
 80034f4:	e003      	b.n	80034fe <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80034f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f8:	fab3 f383 	clz	r3, r3
 80034fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034fe:	429a      	cmp	r2, r3
 8003500:	d106      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2200      	movs	r2, #0
 8003508:	2103      	movs	r1, #3
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff fa2e 	bl	800296c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff fb49 	bl	8002bac <LL_ADC_IsEnabled>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	f040 813f 	bne.w	80037a0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6818      	ldr	r0, [r3, #0]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	6819      	ldr	r1, [r3, #0]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	461a      	mov	r2, r3
 8003530:	f7ff faa2 	bl	8002a78 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	4a8e      	ldr	r2, [pc, #568]	; (8003774 <HAL_ADC_ConfigChannel+0x678>)
 800353a:	4293      	cmp	r3, r2
 800353c:	f040 8130 	bne.w	80037a0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10b      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x46c>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	0e9b      	lsrs	r3, r3, #26
 8003556:	3301      	adds	r3, #1
 8003558:	f003 031f 	and.w	r3, r3, #31
 800355c:	2b09      	cmp	r3, #9
 800355e:	bf94      	ite	ls
 8003560:	2301      	movls	r3, #1
 8003562:	2300      	movhi	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	e019      	b.n	800359c <HAL_ADC_ConfigChannel+0x4a0>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003570:	fa93 f3a3 	rbit	r3, r3
 8003574:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003576:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003578:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800357a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003580:	2320      	movs	r3, #32
 8003582:	e003      	b.n	800358c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003584:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003586:	fab3 f383 	clz	r3, r3
 800358a:	b2db      	uxtb	r3, r3
 800358c:	3301      	adds	r3, #1
 800358e:	f003 031f 	and.w	r3, r3, #31
 8003592:	2b09      	cmp	r3, #9
 8003594:	bf94      	ite	ls
 8003596:	2301      	movls	r3, #1
 8003598:	2300      	movhi	r3, #0
 800359a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800359c:	2b00      	cmp	r3, #0
 800359e:	d079      	beq.n	8003694 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d107      	bne.n	80035bc <HAL_ADC_ConfigChannel+0x4c0>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	0e9b      	lsrs	r3, r3, #26
 80035b2:	3301      	adds	r3, #1
 80035b4:	069b      	lsls	r3, r3, #26
 80035b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035ba:	e015      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x4ec>
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035c4:	fa93 f3a3 	rbit	r3, r3
 80035c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80035ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035cc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80035ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80035d4:	2320      	movs	r3, #32
 80035d6:	e003      	b.n	80035e0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80035d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035da:	fab3 f383 	clz	r3, r3
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	3301      	adds	r3, #1
 80035e2:	069b      	lsls	r3, r3, #26
 80035e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d109      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x50c>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	0e9b      	lsrs	r3, r3, #26
 80035fa:	3301      	adds	r3, #1
 80035fc:	f003 031f 	and.w	r3, r3, #31
 8003600:	2101      	movs	r1, #1
 8003602:	fa01 f303 	lsl.w	r3, r1, r3
 8003606:	e017      	b.n	8003638 <HAL_ADC_ConfigChannel+0x53c>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003610:	fa93 f3a3 	rbit	r3, r3
 8003614:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003618:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800361a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003620:	2320      	movs	r3, #32
 8003622:	e003      	b.n	800362c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003626:	fab3 f383 	clz	r3, r3
 800362a:	b2db      	uxtb	r3, r3
 800362c:	3301      	adds	r3, #1
 800362e:	f003 031f 	and.w	r3, r3, #31
 8003632:	2101      	movs	r1, #1
 8003634:	fa01 f303 	lsl.w	r3, r1, r3
 8003638:	ea42 0103 	orr.w	r1, r2, r3
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10a      	bne.n	800365e <HAL_ADC_ConfigChannel+0x562>
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	0e9b      	lsrs	r3, r3, #26
 800364e:	3301      	adds	r3, #1
 8003650:	f003 021f 	and.w	r2, r3, #31
 8003654:	4613      	mov	r3, r2
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	4413      	add	r3, r2
 800365a:	051b      	lsls	r3, r3, #20
 800365c:	e018      	b.n	8003690 <HAL_ADC_ConfigChannel+0x594>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003666:	fa93 f3a3 	rbit	r3, r3
 800366a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800366c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800366e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003676:	2320      	movs	r3, #32
 8003678:	e003      	b.n	8003682 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800367a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800367c:	fab3 f383 	clz	r3, r3
 8003680:	b2db      	uxtb	r3, r3
 8003682:	3301      	adds	r3, #1
 8003684:	f003 021f 	and.w	r2, r3, #31
 8003688:	4613      	mov	r3, r2
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	4413      	add	r3, r2
 800368e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003690:	430b      	orrs	r3, r1
 8003692:	e080      	b.n	8003796 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800369c:	2b00      	cmp	r3, #0
 800369e:	d107      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x5b4>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	0e9b      	lsrs	r3, r3, #26
 80036a6:	3301      	adds	r3, #1
 80036a8:	069b      	lsls	r3, r3, #26
 80036aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036ae:	e015      	b.n	80036dc <HAL_ADC_ConfigChannel+0x5e0>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b8:	fa93 f3a3 	rbit	r3, r3
 80036bc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80036be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80036c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80036c8:	2320      	movs	r3, #32
 80036ca:	e003      	b.n	80036d4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80036cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ce:	fab3 f383 	clz	r3, r3
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	3301      	adds	r3, #1
 80036d6:	069b      	lsls	r3, r3, #26
 80036d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d109      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x600>
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	0e9b      	lsrs	r3, r3, #26
 80036ee:	3301      	adds	r3, #1
 80036f0:	f003 031f 	and.w	r3, r3, #31
 80036f4:	2101      	movs	r1, #1
 80036f6:	fa01 f303 	lsl.w	r3, r1, r3
 80036fa:	e017      	b.n	800372c <HAL_ADC_ConfigChannel+0x630>
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003702:	6a3b      	ldr	r3, [r7, #32]
 8003704:	fa93 f3a3 	rbit	r3, r3
 8003708:	61fb      	str	r3, [r7, #28]
  return result;
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003714:	2320      	movs	r3, #32
 8003716:	e003      	b.n	8003720 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	fab3 f383 	clz	r3, r3
 800371e:	b2db      	uxtb	r3, r3
 8003720:	3301      	adds	r3, #1
 8003722:	f003 031f 	and.w	r3, r3, #31
 8003726:	2101      	movs	r1, #1
 8003728:	fa01 f303 	lsl.w	r3, r1, r3
 800372c:	ea42 0103 	orr.w	r1, r2, r3
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10d      	bne.n	8003758 <HAL_ADC_ConfigChannel+0x65c>
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	0e9b      	lsrs	r3, r3, #26
 8003742:	3301      	adds	r3, #1
 8003744:	f003 021f 	and.w	r2, r3, #31
 8003748:	4613      	mov	r3, r2
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	4413      	add	r3, r2
 800374e:	3b1e      	subs	r3, #30
 8003750:	051b      	lsls	r3, r3, #20
 8003752:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003756:	e01d      	b.n	8003794 <HAL_ADC_ConfigChannel+0x698>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	fa93 f3a3 	rbit	r3, r3
 8003764:	613b      	str	r3, [r7, #16]
  return result;
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d103      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003770:	2320      	movs	r3, #32
 8003772:	e005      	b.n	8003780 <HAL_ADC_ConfigChannel+0x684>
 8003774:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	fab3 f383 	clz	r3, r3
 800377e:	b2db      	uxtb	r3, r3
 8003780:	3301      	adds	r3, #1
 8003782:	f003 021f 	and.w	r2, r3, #31
 8003786:	4613      	mov	r3, r2
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	4413      	add	r3, r2
 800378c:	3b1e      	subs	r3, #30
 800378e:	051b      	lsls	r3, r3, #20
 8003790:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003794:	430b      	orrs	r3, r1
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	6892      	ldr	r2, [r2, #8]
 800379a:	4619      	mov	r1, r3
 800379c:	f7ff f940 	bl	8002a20 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	4b3d      	ldr	r3, [pc, #244]	; (800389c <HAL_ADC_ConfigChannel+0x7a0>)
 80037a6:	4013      	ands	r3, r2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d06c      	beq.n	8003886 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037ac:	483c      	ldr	r0, [pc, #240]	; (80038a0 <HAL_ADC_ConfigChannel+0x7a4>)
 80037ae:	f7ff f895 	bl	80028dc <LL_ADC_GetCommonPathInternalCh>
 80037b2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a3a      	ldr	r2, [pc, #232]	; (80038a4 <HAL_ADC_ConfigChannel+0x7a8>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d127      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80037c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d121      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a35      	ldr	r2, [pc, #212]	; (80038a8 <HAL_ADC_ConfigChannel+0x7ac>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d157      	bne.n	8003886 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037de:	4619      	mov	r1, r3
 80037e0:	482f      	ldr	r0, [pc, #188]	; (80038a0 <HAL_ADC_ConfigChannel+0x7a4>)
 80037e2:	f7ff f868 	bl	80028b6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037e6:	4b31      	ldr	r3, [pc, #196]	; (80038ac <HAL_ADC_ConfigChannel+0x7b0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	099b      	lsrs	r3, r3, #6
 80037ec:	4a30      	ldr	r2, [pc, #192]	; (80038b0 <HAL_ADC_ConfigChannel+0x7b4>)
 80037ee:	fba2 2303 	umull	r2, r3, r2, r3
 80037f2:	099b      	lsrs	r3, r3, #6
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	4613      	mov	r3, r2
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	4413      	add	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003800:	e002      	b.n	8003808 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	3b01      	subs	r3, #1
 8003806:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1f9      	bne.n	8003802 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800380e:	e03a      	b.n	8003886 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a27      	ldr	r2, [pc, #156]	; (80038b4 <HAL_ADC_ConfigChannel+0x7b8>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d113      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x746>
 800381a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800381e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10d      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a1f      	ldr	r2, [pc, #124]	; (80038a8 <HAL_ADC_ConfigChannel+0x7ac>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d12a      	bne.n	8003886 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003830:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003834:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003838:	4619      	mov	r1, r3
 800383a:	4819      	ldr	r0, [pc, #100]	; (80038a0 <HAL_ADC_ConfigChannel+0x7a4>)
 800383c:	f7ff f83b 	bl	80028b6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003840:	e021      	b.n	8003886 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a1c      	ldr	r2, [pc, #112]	; (80038b8 <HAL_ADC_ConfigChannel+0x7bc>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d11c      	bne.n	8003886 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800384c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003850:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d116      	bne.n	8003886 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a12      	ldr	r2, [pc, #72]	; (80038a8 <HAL_ADC_ConfigChannel+0x7ac>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d111      	bne.n	8003886 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003862:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003866:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800386a:	4619      	mov	r1, r3
 800386c:	480c      	ldr	r0, [pc, #48]	; (80038a0 <HAL_ADC_ConfigChannel+0x7a4>)
 800386e:	f7ff f822 	bl	80028b6 <LL_ADC_SetCommonPathInternalCh>
 8003872:	e008      	b.n	8003886 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003878:	f043 0220 	orr.w	r2, r3, #32
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800388e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003892:	4618      	mov	r0, r3
 8003894:	37d8      	adds	r7, #216	; 0xd8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	80080000 	.word	0x80080000
 80038a0:	50040300 	.word	0x50040300
 80038a4:	c7520000 	.word	0xc7520000
 80038a8:	50040000 	.word	0x50040000
 80038ac:	20000010 	.word	0x20000010
 80038b0:	053e2d63 	.word	0x053e2d63
 80038b4:	cb840000 	.word	0xcb840000
 80038b8:	80000001 	.word	0x80000001

080038bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff f96f 	bl	8002bac <LL_ADC_IsEnabled>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d14d      	bne.n	8003970 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689a      	ldr	r2, [r3, #8]
 80038da:	4b28      	ldr	r3, [pc, #160]	; (800397c <ADC_Enable+0xc0>)
 80038dc:	4013      	ands	r3, r2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00d      	beq.n	80038fe <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e6:	f043 0210 	orr.w	r2, r3, #16
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f2:	f043 0201 	orr.w	r2, r3, #1
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e039      	b.n	8003972 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff f92a 	bl	8002b5c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003908:	f7fe ffb6 	bl	8002878 <HAL_GetTick>
 800390c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800390e:	e028      	b.n	8003962 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f7ff f949 	bl	8002bac <LL_ADC_IsEnabled>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d104      	bne.n	800392a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4618      	mov	r0, r3
 8003926:	f7ff f919 	bl	8002b5c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800392a:	f7fe ffa5 	bl	8002878 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d914      	bls.n	8003962 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b01      	cmp	r3, #1
 8003944:	d00d      	beq.n	8003962 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394a:	f043 0210 	orr.w	r2, r3, #16
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003956:	f043 0201 	orr.w	r2, r3, #1
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e007      	b.n	8003972 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b01      	cmp	r3, #1
 800396e:	d1cf      	bne.n	8003910 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	8000003f 	.word	0x8000003f

08003980 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff f920 	bl	8002bd2 <LL_ADC_IsDisableOngoing>
 8003992:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff f907 	bl	8002bac <LL_ADC_IsEnabled>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d047      	beq.n	8003a34 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d144      	bne.n	8003a34 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 030d 	and.w	r3, r3, #13
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d10c      	bne.n	80039d2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4618      	mov	r0, r3
 80039be:	f7ff f8e1 	bl	8002b84 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2203      	movs	r2, #3
 80039c8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039ca:	f7fe ff55 	bl	8002878 <HAL_GetTick>
 80039ce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039d0:	e029      	b.n	8003a26 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d6:	f043 0210 	orr.w	r2, r3, #16
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e2:	f043 0201 	orr.w	r2, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e023      	b.n	8003a36 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80039ee:	f7fe ff43 	bl	8002878 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d914      	bls.n	8003a26 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00d      	beq.n	8003a26 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0e:	f043 0210 	orr.w	r2, r3, #16
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1a:	f043 0201 	orr.w	r2, r3, #1
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e007      	b.n	8003a36 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1dc      	bne.n	80039ee <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <LL_ADC_StartCalibration>:
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
 8003a46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003a50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	609a      	str	r2, [r3, #8]
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <LL_ADC_IsCalibrationOnGoing>:
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a84:	d101      	bne.n	8003a8a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003a86:	2301      	movs	r3, #1
 8003a88:	e000      	b.n	8003a8c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_ADCEx_Calibration_Start+0x1c>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e04d      	b.n	8003b50 <HAL_ADCEx_Calibration_Start+0xb8>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f7ff ff5f 	bl	8003980 <ADC_Disable>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003ac6:	7bfb      	ldrb	r3, [r7, #15]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d136      	bne.n	8003b3a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ad4:	f023 0302 	bic.w	r3, r3, #2
 8003ad8:	f043 0202 	orr.w	r2, r3, #2
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6839      	ldr	r1, [r7, #0]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff ffa9 	bl	8003a3e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003aec:	e014      	b.n	8003b18 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	3301      	adds	r3, #1
 8003af2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8003afa:	d30d      	bcc.n	8003b18 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b00:	f023 0312 	bic.w	r3, r3, #18
 8003b04:	f043 0210 	orr.w	r2, r3, #16
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e01b      	b.n	8003b50 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff ffa7 	bl	8003a70 <LL_ADC_IsCalibrationOnGoing>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1e2      	bne.n	8003aee <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2c:	f023 0303 	bic.w	r3, r3, #3
 8003b30:	f043 0201 	orr.w	r2, r3, #1
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	655a      	str	r2, [r3, #84]	; 0x54
 8003b38:	e005      	b.n	8003b46 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3e:	f043 0210 	orr.w	r2, r3, #16
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b68:	4b0c      	ldr	r3, [pc, #48]	; (8003b9c <__NVIC_SetPriorityGrouping+0x44>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b74:	4013      	ands	r3, r2
 8003b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b8a:	4a04      	ldr	r2, [pc, #16]	; (8003b9c <__NVIC_SetPriorityGrouping+0x44>)
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	60d3      	str	r3, [r2, #12]
}
 8003b90:	bf00      	nop
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	e000ed00 	.word	0xe000ed00

08003ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ba4:	4b04      	ldr	r3, [pc, #16]	; (8003bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	0a1b      	lsrs	r3, r3, #8
 8003baa:	f003 0307 	and.w	r3, r3, #7
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	e000ed00 	.word	0xe000ed00

08003bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	db0b      	blt.n	8003be6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bce:	79fb      	ldrb	r3, [r7, #7]
 8003bd0:	f003 021f 	and.w	r2, r3, #31
 8003bd4:	4907      	ldr	r1, [pc, #28]	; (8003bf4 <__NVIC_EnableIRQ+0x38>)
 8003bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bda:	095b      	lsrs	r3, r3, #5
 8003bdc:	2001      	movs	r0, #1
 8003bde:	fa00 f202 	lsl.w	r2, r0, r2
 8003be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	e000e100 	.word	0xe000e100

08003bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	4603      	mov	r3, r0
 8003c00:	6039      	str	r1, [r7, #0]
 8003c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	db0a      	blt.n	8003c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	490c      	ldr	r1, [pc, #48]	; (8003c44 <__NVIC_SetPriority+0x4c>)
 8003c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c16:	0112      	lsls	r2, r2, #4
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	440b      	add	r3, r1
 8003c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c20:	e00a      	b.n	8003c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	4908      	ldr	r1, [pc, #32]	; (8003c48 <__NVIC_SetPriority+0x50>)
 8003c28:	79fb      	ldrb	r3, [r7, #7]
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	3b04      	subs	r3, #4
 8003c30:	0112      	lsls	r2, r2, #4
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	440b      	add	r3, r1
 8003c36:	761a      	strb	r2, [r3, #24]
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	e000e100 	.word	0xe000e100
 8003c48:	e000ed00 	.word	0xe000ed00

08003c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b089      	sub	sp, #36	; 0x24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f1c3 0307 	rsb	r3, r3, #7
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	bf28      	it	cs
 8003c6a:	2304      	movcs	r3, #4
 8003c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	3304      	adds	r3, #4
 8003c72:	2b06      	cmp	r3, #6
 8003c74:	d902      	bls.n	8003c7c <NVIC_EncodePriority+0x30>
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	3b03      	subs	r3, #3
 8003c7a:	e000      	b.n	8003c7e <NVIC_EncodePriority+0x32>
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c80:	f04f 32ff 	mov.w	r2, #4294967295
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	43da      	mvns	r2, r3
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	401a      	ands	r2, r3
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c94:	f04f 31ff 	mov.w	r1, #4294967295
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c9e:	43d9      	mvns	r1, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ca4:	4313      	orrs	r3, r2
         );
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3724      	adds	r7, #36	; 0x24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
	...

08003cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cc4:	d301      	bcc.n	8003cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e00f      	b.n	8003cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cca:	4a0a      	ldr	r2, [pc, #40]	; (8003cf4 <SysTick_Config+0x40>)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cd2:	210f      	movs	r1, #15
 8003cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd8:	f7ff ff8e 	bl	8003bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cdc:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <SysTick_Config+0x40>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ce2:	4b04      	ldr	r3, [pc, #16]	; (8003cf4 <SysTick_Config+0x40>)
 8003ce4:	2207      	movs	r2, #7
 8003ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	e000e010 	.word	0xe000e010

08003cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7ff ff29 	bl	8003b58 <__NVIC_SetPriorityGrouping>
}
 8003d06:	bf00      	nop
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b086      	sub	sp, #24
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	4603      	mov	r3, r0
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	607a      	str	r2, [r7, #4]
 8003d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d20:	f7ff ff3e 	bl	8003ba0 <__NVIC_GetPriorityGrouping>
 8003d24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	68b9      	ldr	r1, [r7, #8]
 8003d2a:	6978      	ldr	r0, [r7, #20]
 8003d2c:	f7ff ff8e 	bl	8003c4c <NVIC_EncodePriority>
 8003d30:	4602      	mov	r2, r0
 8003d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d36:	4611      	mov	r1, r2
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff ff5d 	bl	8003bf8 <__NVIC_SetPriority>
}
 8003d3e:	bf00      	nop
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b082      	sub	sp, #8
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff ff31 	bl	8003bbc <__NVIC_EnableIRQ>
}
 8003d5a:	bf00      	nop
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7ff ffa2 	bl	8003cb4 <SysTick_Config>
 8003d70:	4603      	mov	r3, r0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b085      	sub	sp, #20
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d008      	beq.n	8003da4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2204      	movs	r2, #4
 8003d96:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e022      	b.n	8003dea <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 020e 	bic.w	r2, r2, #14
 8003db2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 0201 	bic.w	r2, r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc8:	f003 021c 	and.w	r2, r3, #28
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8003dd6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b084      	sub	sp, #16
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d005      	beq.n	8003e1a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2204      	movs	r2, #4
 8003e12:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	73fb      	strb	r3, [r7, #15]
 8003e18:	e029      	b.n	8003e6e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 020e 	bic.w	r2, r2, #14
 8003e28:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0201 	bic.w	r2, r2, #1
 8003e38:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3e:	f003 021c 	and.w	r2, r3, #28
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	2101      	movs	r1, #1
 8003e48:	fa01 f202 	lsl.w	r2, r1, r2
 8003e4c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	4798      	blx	r3
    }
  }
  return status;
 8003e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e82:	2300      	movs	r3, #0
 8003e84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e86:	e148      	b.n	800411a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	fa01 f303 	lsl.w	r3, r1, r3
 8003e94:	4013      	ands	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f000 813a 	beq.w	8004114 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d00b      	beq.n	8003ec0 <HAL_GPIO_Init+0x48>
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d007      	beq.n	8003ec0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003eb4:	2b11      	cmp	r3, #17
 8003eb6:	d003      	beq.n	8003ec0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2b12      	cmp	r3, #18
 8003ebe:	d130      	bne.n	8003f22 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	2203      	movs	r2, #3
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	68da      	ldr	r2, [r3, #12]
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	fa02 f303 	lsl.w	r3, r2, r3
 8003efe:	43db      	mvns	r3, r3
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	4013      	ands	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	091b      	lsrs	r3, r3, #4
 8003f0c:	f003 0201 	and.w	r2, r3, #1
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	fa02 f303 	lsl.w	r3, r2, r3
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	2203      	movs	r2, #3
 8003f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f32:	43db      	mvns	r3, r3
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4013      	ands	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	fa02 f303 	lsl.w	r3, r2, r3
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d003      	beq.n	8003f62 <HAL_GPIO_Init+0xea>
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2b12      	cmp	r3, #18
 8003f60:	d123      	bne.n	8003faa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	08da      	lsrs	r2, r3, #3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3208      	adds	r2, #8
 8003f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	220f      	movs	r2, #15
 8003f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	4013      	ands	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	691a      	ldr	r2, [r3, #16]
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	fa02 f303 	lsl.w	r3, r2, r3
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	08da      	lsrs	r2, r3, #3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3208      	adds	r2, #8
 8003fa4:	6939      	ldr	r1, [r7, #16]
 8003fa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	2203      	movs	r2, #3
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f003 0203 	and.w	r2, r3, #3
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 8094 	beq.w	8004114 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fec:	4b52      	ldr	r3, [pc, #328]	; (8004138 <HAL_GPIO_Init+0x2c0>)
 8003fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ff0:	4a51      	ldr	r2, [pc, #324]	; (8004138 <HAL_GPIO_Init+0x2c0>)
 8003ff2:	f043 0301 	orr.w	r3, r3, #1
 8003ff6:	6613      	str	r3, [r2, #96]	; 0x60
 8003ff8:	4b4f      	ldr	r3, [pc, #316]	; (8004138 <HAL_GPIO_Init+0x2c0>)
 8003ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	60bb      	str	r3, [r7, #8]
 8004002:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004004:	4a4d      	ldr	r2, [pc, #308]	; (800413c <HAL_GPIO_Init+0x2c4>)
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	089b      	lsrs	r3, r3, #2
 800400a:	3302      	adds	r3, #2
 800400c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004010:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f003 0303 	and.w	r3, r3, #3
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	220f      	movs	r2, #15
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	43db      	mvns	r3, r3
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4013      	ands	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800402e:	d00d      	beq.n	800404c <HAL_GPIO_Init+0x1d4>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a43      	ldr	r2, [pc, #268]	; (8004140 <HAL_GPIO_Init+0x2c8>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d007      	beq.n	8004048 <HAL_GPIO_Init+0x1d0>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a42      	ldr	r2, [pc, #264]	; (8004144 <HAL_GPIO_Init+0x2cc>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d101      	bne.n	8004044 <HAL_GPIO_Init+0x1cc>
 8004040:	2302      	movs	r3, #2
 8004042:	e004      	b.n	800404e <HAL_GPIO_Init+0x1d6>
 8004044:	2307      	movs	r3, #7
 8004046:	e002      	b.n	800404e <HAL_GPIO_Init+0x1d6>
 8004048:	2301      	movs	r3, #1
 800404a:	e000      	b.n	800404e <HAL_GPIO_Init+0x1d6>
 800404c:	2300      	movs	r3, #0
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	f002 0203 	and.w	r2, r2, #3
 8004054:	0092      	lsls	r2, r2, #2
 8004056:	4093      	lsls	r3, r2
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	4313      	orrs	r3, r2
 800405c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800405e:	4937      	ldr	r1, [pc, #220]	; (800413c <HAL_GPIO_Init+0x2c4>)
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	089b      	lsrs	r3, r3, #2
 8004064:	3302      	adds	r3, #2
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800406c:	4b36      	ldr	r3, [pc, #216]	; (8004148 <HAL_GPIO_Init+0x2d0>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	43db      	mvns	r3, r3
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	4013      	ands	r3, r2
 800407a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	4313      	orrs	r3, r2
 800408e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004090:	4a2d      	ldr	r2, [pc, #180]	; (8004148 <HAL_GPIO_Init+0x2d0>)
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004096:	4b2c      	ldr	r3, [pc, #176]	; (8004148 <HAL_GPIO_Init+0x2d0>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	43db      	mvns	r3, r3
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4013      	ands	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040ba:	4a23      	ldr	r2, [pc, #140]	; (8004148 <HAL_GPIO_Init+0x2d0>)
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040c0:	4b21      	ldr	r3, [pc, #132]	; (8004148 <HAL_GPIO_Init+0x2d0>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	43db      	mvns	r3, r3
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	4013      	ands	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040e4:	4a18      	ldr	r2, [pc, #96]	; (8004148 <HAL_GPIO_Init+0x2d0>)
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040ea:	4b17      	ldr	r3, [pc, #92]	; (8004148 <HAL_GPIO_Init+0x2d0>)
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	43db      	mvns	r3, r3
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	4013      	ands	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4313      	orrs	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800410e:	4a0e      	ldr	r2, [pc, #56]	; (8004148 <HAL_GPIO_Init+0x2d0>)
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	3301      	adds	r3, #1
 8004118:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	fa22 f303 	lsr.w	r3, r2, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	f47f aeaf 	bne.w	8003e88 <HAL_GPIO_Init+0x10>
  }
}
 800412a:	bf00      	nop
 800412c:	bf00      	nop
 800412e:	371c      	adds	r7, #28
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	40021000 	.word	0x40021000
 800413c:	40010000 	.word	0x40010000
 8004140:	48000400 	.word	0x48000400
 8004144:	48000800 	.word	0x48000800
 8004148:	40010400 	.word	0x40010400

0800414c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691a      	ldr	r2, [r3, #16]
 800415c:	887b      	ldrh	r3, [r7, #2]
 800415e:	4013      	ands	r3, r2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d002      	beq.n	800416a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004164:	2301      	movs	r3, #1
 8004166:	73fb      	strb	r3, [r7, #15]
 8004168:	e001      	b.n	800416e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800416a:	2300      	movs	r3, #0
 800416c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800416e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	460b      	mov	r3, r1
 8004186:	807b      	strh	r3, [r7, #2]
 8004188:	4613      	mov	r3, r2
 800418a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800418c:	787b      	ldrb	r3, [r7, #1]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004192:	887a      	ldrh	r2, [r7, #2]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004198:	e002      	b.n	80041a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800419a:	887a      	ldrh	r2, [r7, #2]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	4603      	mov	r3, r0
 80041b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80041b6:	4b08      	ldr	r3, [pc, #32]	; (80041d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041b8:	695a      	ldr	r2, [r3, #20]
 80041ba:	88fb      	ldrh	r3, [r7, #6]
 80041bc:	4013      	ands	r3, r2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d006      	beq.n	80041d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041c2:	4a05      	ldr	r2, [pc, #20]	; (80041d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041c4:	88fb      	ldrh	r3, [r7, #6]
 80041c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041c8:	88fb      	ldrh	r3, [r7, #6]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 f806 	bl	80041dc <HAL_GPIO_EXTI_Callback>
  }
}
 80041d0:	bf00      	nop
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	40010400 	.word	0x40010400

080041dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	4603      	mov	r3, r0
 80041e4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
	...

080041f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80041f8:	4b04      	ldr	r3, [pc, #16]	; (800420c <HAL_PWREx_GetVoltageRange+0x18>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004200:	4618      	mov	r0, r3
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	40007000 	.word	0x40007000

08004210 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800421e:	d130      	bne.n	8004282 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004220:	4b23      	ldr	r3, [pc, #140]	; (80042b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800422c:	d038      	beq.n	80042a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800422e:	4b20      	ldr	r3, [pc, #128]	; (80042b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004236:	4a1e      	ldr	r2, [pc, #120]	; (80042b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004238:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800423c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800423e:	4b1d      	ldr	r3, [pc, #116]	; (80042b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2232      	movs	r2, #50	; 0x32
 8004244:	fb02 f303 	mul.w	r3, r2, r3
 8004248:	4a1b      	ldr	r2, [pc, #108]	; (80042b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800424a:	fba2 2303 	umull	r2, r3, r2, r3
 800424e:	0c9b      	lsrs	r3, r3, #18
 8004250:	3301      	adds	r3, #1
 8004252:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004254:	e002      	b.n	800425c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	3b01      	subs	r3, #1
 800425a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800425c:	4b14      	ldr	r3, [pc, #80]	; (80042b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004268:	d102      	bne.n	8004270 <HAL_PWREx_ControlVoltageScaling+0x60>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1f2      	bne.n	8004256 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004270:	4b0f      	ldr	r3, [pc, #60]	; (80042b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800427c:	d110      	bne.n	80042a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e00f      	b.n	80042a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004282:	4b0b      	ldr	r3, [pc, #44]	; (80042b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800428a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800428e:	d007      	beq.n	80042a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004290:	4b07      	ldr	r3, [pc, #28]	; (80042b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004298:	4a05      	ldr	r2, [pc, #20]	; (80042b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800429a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800429e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	40007000 	.word	0x40007000
 80042b4:	20000010 	.word	0x20000010
 80042b8:	431bde83 	.word	0x431bde83

080042bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d102      	bne.n	80042d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	f000 bc11 	b.w	8004af2 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042d0:	4ba0      	ldr	r3, [pc, #640]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f003 030c 	and.w	r3, r3, #12
 80042d8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042da:	4b9e      	ldr	r3, [pc, #632]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0310 	and.w	r3, r3, #16
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 80e4 	beq.w	80044ba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d007      	beq.n	8004308 <HAL_RCC_OscConfig+0x4c>
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	2b0c      	cmp	r3, #12
 80042fc:	f040 808b 	bne.w	8004416 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	2b01      	cmp	r3, #1
 8004304:	f040 8087 	bne.w	8004416 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004308:	4b92      	ldr	r3, [pc, #584]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d005      	beq.n	8004320 <HAL_RCC_OscConfig+0x64>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e3e8      	b.n	8004af2 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a1a      	ldr	r2, [r3, #32]
 8004324:	4b8b      	ldr	r3, [pc, #556]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0308 	and.w	r3, r3, #8
 800432c:	2b00      	cmp	r3, #0
 800432e:	d004      	beq.n	800433a <HAL_RCC_OscConfig+0x7e>
 8004330:	4b88      	ldr	r3, [pc, #544]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004338:	e005      	b.n	8004346 <HAL_RCC_OscConfig+0x8a>
 800433a:	4b86      	ldr	r3, [pc, #536]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 800433c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004340:	091b      	lsrs	r3, r3, #4
 8004342:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004346:	4293      	cmp	r3, r2
 8004348:	d223      	bcs.n	8004392 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	4618      	mov	r0, r3
 8004350:	f000 fd7a 	bl	8004e48 <RCC_SetFlashLatencyFromMSIRange>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e3c9      	b.n	8004af2 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800435e:	4b7d      	ldr	r3, [pc, #500]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a7c      	ldr	r2, [pc, #496]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004364:	f043 0308 	orr.w	r3, r3, #8
 8004368:	6013      	str	r3, [r2, #0]
 800436a:	4b7a      	ldr	r3, [pc, #488]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	4977      	ldr	r1, [pc, #476]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004378:	4313      	orrs	r3, r2
 800437a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800437c:	4b75      	ldr	r3, [pc, #468]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	021b      	lsls	r3, r3, #8
 800438a:	4972      	ldr	r1, [pc, #456]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 800438c:	4313      	orrs	r3, r2
 800438e:	604b      	str	r3, [r1, #4]
 8004390:	e025      	b.n	80043de <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004392:	4b70      	ldr	r3, [pc, #448]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a6f      	ldr	r2, [pc, #444]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004398:	f043 0308 	orr.w	r3, r3, #8
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	4b6d      	ldr	r3, [pc, #436]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	496a      	ldr	r1, [pc, #424]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043b0:	4b68      	ldr	r3, [pc, #416]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	021b      	lsls	r3, r3, #8
 80043be:	4965      	ldr	r1, [pc, #404]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d109      	bne.n	80043de <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 fd3a 	bl	8004e48 <RCC_SetFlashLatencyFromMSIRange>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e389      	b.n	8004af2 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043de:	f000 fc6f 	bl	8004cc0 <HAL_RCC_GetSysClockFreq>
 80043e2:	4602      	mov	r2, r0
 80043e4:	4b5b      	ldr	r3, [pc, #364]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	091b      	lsrs	r3, r3, #4
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	495a      	ldr	r1, [pc, #360]	; (8004558 <HAL_RCC_OscConfig+0x29c>)
 80043f0:	5ccb      	ldrb	r3, [r1, r3]
 80043f2:	f003 031f 	and.w	r3, r3, #31
 80043f6:	fa22 f303 	lsr.w	r3, r2, r3
 80043fa:	4a58      	ldr	r2, [pc, #352]	; (800455c <HAL_RCC_OscConfig+0x2a0>)
 80043fc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80043fe:	4b58      	ldr	r3, [pc, #352]	; (8004560 <HAL_RCC_OscConfig+0x2a4>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4618      	mov	r0, r3
 8004404:	f7fe f9e8 	bl	80027d8 <HAL_InitTick>
 8004408:	4603      	mov	r3, r0
 800440a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d052      	beq.n	80044b8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004412:	7bfb      	ldrb	r3, [r7, #15]
 8004414:	e36d      	b.n	8004af2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d032      	beq.n	8004484 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800441e:	4b4d      	ldr	r3, [pc, #308]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a4c      	ldr	r2, [pc, #304]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004424:	f043 0301 	orr.w	r3, r3, #1
 8004428:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800442a:	f7fe fa25 	bl	8002878 <HAL_GetTick>
 800442e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004430:	e008      	b.n	8004444 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004432:	f7fe fa21 	bl	8002878 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e356      	b.n	8004af2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004444:	4b43      	ldr	r3, [pc, #268]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d0f0      	beq.n	8004432 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004450:	4b40      	ldr	r3, [pc, #256]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a3f      	ldr	r2, [pc, #252]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004456:	f043 0308 	orr.w	r3, r3, #8
 800445a:	6013      	str	r3, [r2, #0]
 800445c:	4b3d      	ldr	r3, [pc, #244]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	493a      	ldr	r1, [pc, #232]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 800446a:	4313      	orrs	r3, r2
 800446c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800446e:	4b39      	ldr	r3, [pc, #228]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	021b      	lsls	r3, r3, #8
 800447c:	4935      	ldr	r1, [pc, #212]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 800447e:	4313      	orrs	r3, r2
 8004480:	604b      	str	r3, [r1, #4]
 8004482:	e01a      	b.n	80044ba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004484:	4b33      	ldr	r3, [pc, #204]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a32      	ldr	r2, [pc, #200]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 800448a:	f023 0301 	bic.w	r3, r3, #1
 800448e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004490:	f7fe f9f2 	bl	8002878 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004498:	f7fe f9ee 	bl	8002878 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e323      	b.n	8004af2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044aa:	4b2a      	ldr	r3, [pc, #168]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1f0      	bne.n	8004498 <HAL_RCC_OscConfig+0x1dc>
 80044b6:	e000      	b.n	80044ba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d073      	beq.n	80045ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d005      	beq.n	80044d8 <HAL_RCC_OscConfig+0x21c>
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	2b0c      	cmp	r3, #12
 80044d0:	d10e      	bne.n	80044f0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	2b03      	cmp	r3, #3
 80044d6:	d10b      	bne.n	80044f0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d8:	4b1e      	ldr	r3, [pc, #120]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d063      	beq.n	80045ac <HAL_RCC_OscConfig+0x2f0>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d15f      	bne.n	80045ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e300      	b.n	8004af2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f8:	d106      	bne.n	8004508 <HAL_RCC_OscConfig+0x24c>
 80044fa:	4b16      	ldr	r3, [pc, #88]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a15      	ldr	r2, [pc, #84]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004504:	6013      	str	r3, [r2, #0]
 8004506:	e01d      	b.n	8004544 <HAL_RCC_OscConfig+0x288>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004510:	d10c      	bne.n	800452c <HAL_RCC_OscConfig+0x270>
 8004512:	4b10      	ldr	r3, [pc, #64]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a0f      	ldr	r2, [pc, #60]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004518:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800451c:	6013      	str	r3, [r2, #0]
 800451e:	4b0d      	ldr	r3, [pc, #52]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a0c      	ldr	r2, [pc, #48]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	e00b      	b.n	8004544 <HAL_RCC_OscConfig+0x288>
 800452c:	4b09      	ldr	r3, [pc, #36]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a08      	ldr	r2, [pc, #32]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 8004532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004536:	6013      	str	r3, [r2, #0]
 8004538:	4b06      	ldr	r3, [pc, #24]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a05      	ldr	r2, [pc, #20]	; (8004554 <HAL_RCC_OscConfig+0x298>)
 800453e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004542:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d01b      	beq.n	8004584 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454c:	f7fe f994 	bl	8002878 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004552:	e010      	b.n	8004576 <HAL_RCC_OscConfig+0x2ba>
 8004554:	40021000 	.word	0x40021000
 8004558:	08008790 	.word	0x08008790
 800455c:	20000010 	.word	0x20000010
 8004560:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004564:	f7fe f988 	bl	8002878 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b64      	cmp	r3, #100	; 0x64
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e2bd      	b.n	8004af2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004576:	4baf      	ldr	r3, [pc, #700]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0f0      	beq.n	8004564 <HAL_RCC_OscConfig+0x2a8>
 8004582:	e014      	b.n	80045ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004584:	f7fe f978 	bl	8002878 <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800458c:	f7fe f974 	bl	8002878 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b64      	cmp	r3, #100	; 0x64
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e2a9      	b.n	8004af2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800459e:	4ba5      	ldr	r3, [pc, #660]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f0      	bne.n	800458c <HAL_RCC_OscConfig+0x2d0>
 80045aa:	e000      	b.n	80045ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d060      	beq.n	800467c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d005      	beq.n	80045cc <HAL_RCC_OscConfig+0x310>
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	2b0c      	cmp	r3, #12
 80045c4:	d119      	bne.n	80045fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d116      	bne.n	80045fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045cc:	4b99      	ldr	r3, [pc, #612]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d005      	beq.n	80045e4 <HAL_RCC_OscConfig+0x328>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d101      	bne.n	80045e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e286      	b.n	8004af2 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e4:	4b93      	ldr	r3, [pc, #588]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	061b      	lsls	r3, r3, #24
 80045f2:	4990      	ldr	r1, [pc, #576]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045f8:	e040      	b.n	800467c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d023      	beq.n	800464a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004602:	4b8c      	ldr	r3, [pc, #560]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a8b      	ldr	r2, [pc, #556]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 8004608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800460c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460e:	f7fe f933 	bl	8002878 <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004614:	e008      	b.n	8004628 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004616:	f7fe f92f 	bl	8002878 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e264      	b.n	8004af2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004628:	4b82      	ldr	r3, [pc, #520]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0f0      	beq.n	8004616 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004634:	4b7f      	ldr	r3, [pc, #508]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	061b      	lsls	r3, r3, #24
 8004642:	497c      	ldr	r1, [pc, #496]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 8004644:	4313      	orrs	r3, r2
 8004646:	604b      	str	r3, [r1, #4]
 8004648:	e018      	b.n	800467c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800464a:	4b7a      	ldr	r3, [pc, #488]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a79      	ldr	r2, [pc, #484]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 8004650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004654:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004656:	f7fe f90f 	bl	8002878 <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800465c:	e008      	b.n	8004670 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800465e:	f7fe f90b 	bl	8002878 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e240      	b.n	8004af2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004670:	4b70      	ldr	r3, [pc, #448]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1f0      	bne.n	800465e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0308 	and.w	r3, r3, #8
 8004684:	2b00      	cmp	r3, #0
 8004686:	d03c      	beq.n	8004702 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d01c      	beq.n	80046ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004690:	4b68      	ldr	r3, [pc, #416]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 8004692:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004696:	4a67      	ldr	r2, [pc, #412]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 8004698:	f043 0301 	orr.w	r3, r3, #1
 800469c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a0:	f7fe f8ea 	bl	8002878 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046a8:	f7fe f8e6 	bl	8002878 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e21b      	b.n	8004af2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046ba:	4b5e      	ldr	r3, [pc, #376]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 80046bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0ef      	beq.n	80046a8 <HAL_RCC_OscConfig+0x3ec>
 80046c8:	e01b      	b.n	8004702 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ca:	4b5a      	ldr	r3, [pc, #360]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 80046cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046d0:	4a58      	ldr	r2, [pc, #352]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 80046d2:	f023 0301 	bic.w	r3, r3, #1
 80046d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046da:	f7fe f8cd 	bl	8002878 <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046e2:	f7fe f8c9 	bl	8002878 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e1fe      	b.n	8004af2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046f4:	4b4f      	ldr	r3, [pc, #316]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 80046f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1ef      	bne.n	80046e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0304 	and.w	r3, r3, #4
 800470a:	2b00      	cmp	r3, #0
 800470c:	f000 80a6 	beq.w	800485c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004710:	2300      	movs	r3, #0
 8004712:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004714:	4b47      	ldr	r3, [pc, #284]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 8004716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10d      	bne.n	800473c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004720:	4b44      	ldr	r3, [pc, #272]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 8004722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004724:	4a43      	ldr	r2, [pc, #268]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 8004726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800472a:	6593      	str	r3, [r2, #88]	; 0x58
 800472c:	4b41      	ldr	r3, [pc, #260]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 800472e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004734:	60bb      	str	r3, [r7, #8]
 8004736:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004738:	2301      	movs	r3, #1
 800473a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800473c:	4b3e      	ldr	r3, [pc, #248]	; (8004838 <HAL_RCC_OscConfig+0x57c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004744:	2b00      	cmp	r3, #0
 8004746:	d118      	bne.n	800477a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004748:	4b3b      	ldr	r3, [pc, #236]	; (8004838 <HAL_RCC_OscConfig+0x57c>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a3a      	ldr	r2, [pc, #232]	; (8004838 <HAL_RCC_OscConfig+0x57c>)
 800474e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004752:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004754:	f7fe f890 	bl	8002878 <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800475c:	f7fe f88c 	bl	8002878 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e1c1      	b.n	8004af2 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800476e:	4b32      	ldr	r3, [pc, #200]	; (8004838 <HAL_RCC_OscConfig+0x57c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0f0      	beq.n	800475c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d108      	bne.n	8004794 <HAL_RCC_OscConfig+0x4d8>
 8004782:	4b2c      	ldr	r3, [pc, #176]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 8004784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004788:	4a2a      	ldr	r2, [pc, #168]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 800478a:	f043 0301 	orr.w	r3, r3, #1
 800478e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004792:	e024      	b.n	80047de <HAL_RCC_OscConfig+0x522>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	2b05      	cmp	r3, #5
 800479a:	d110      	bne.n	80047be <HAL_RCC_OscConfig+0x502>
 800479c:	4b25      	ldr	r3, [pc, #148]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 800479e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a2:	4a24      	ldr	r2, [pc, #144]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 80047a4:	f043 0304 	orr.w	r3, r3, #4
 80047a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047ac:	4b21      	ldr	r3, [pc, #132]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 80047ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b2:	4a20      	ldr	r2, [pc, #128]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 80047b4:	f043 0301 	orr.w	r3, r3, #1
 80047b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047bc:	e00f      	b.n	80047de <HAL_RCC_OscConfig+0x522>
 80047be:	4b1d      	ldr	r3, [pc, #116]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 80047c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c4:	4a1b      	ldr	r2, [pc, #108]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 80047c6:	f023 0301 	bic.w	r3, r3, #1
 80047ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047ce:	4b19      	ldr	r3, [pc, #100]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 80047d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d4:	4a17      	ldr	r2, [pc, #92]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 80047d6:	f023 0304 	bic.w	r3, r3, #4
 80047da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d016      	beq.n	8004814 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e6:	f7fe f847 	bl	8002878 <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ec:	e00a      	b.n	8004804 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ee:	f7fe f843 	bl	8002878 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d901      	bls.n	8004804 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e176      	b.n	8004af2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004804:	4b0b      	ldr	r3, [pc, #44]	; (8004834 <HAL_RCC_OscConfig+0x578>)
 8004806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d0ed      	beq.n	80047ee <HAL_RCC_OscConfig+0x532>
 8004812:	e01a      	b.n	800484a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004814:	f7fe f830 	bl	8002878 <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800481a:	e00f      	b.n	800483c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800481c:	f7fe f82c 	bl	8002878 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	f241 3288 	movw	r2, #5000	; 0x1388
 800482a:	4293      	cmp	r3, r2
 800482c:	d906      	bls.n	800483c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e15f      	b.n	8004af2 <HAL_RCC_OscConfig+0x836>
 8004832:	bf00      	nop
 8004834:	40021000 	.word	0x40021000
 8004838:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800483c:	4baa      	ldr	r3, [pc, #680]	; (8004ae8 <HAL_RCC_OscConfig+0x82c>)
 800483e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1e8      	bne.n	800481c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800484a:	7ffb      	ldrb	r3, [r7, #31]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d105      	bne.n	800485c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004850:	4ba5      	ldr	r3, [pc, #660]	; (8004ae8 <HAL_RCC_OscConfig+0x82c>)
 8004852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004854:	4aa4      	ldr	r2, [pc, #656]	; (8004ae8 <HAL_RCC_OscConfig+0x82c>)
 8004856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800485a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0320 	and.w	r3, r3, #32
 8004864:	2b00      	cmp	r3, #0
 8004866:	d03c      	beq.n	80048e2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	2b00      	cmp	r3, #0
 800486e:	d01c      	beq.n	80048aa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004870:	4b9d      	ldr	r3, [pc, #628]	; (8004ae8 <HAL_RCC_OscConfig+0x82c>)
 8004872:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004876:	4a9c      	ldr	r2, [pc, #624]	; (8004ae8 <HAL_RCC_OscConfig+0x82c>)
 8004878:	f043 0301 	orr.w	r3, r3, #1
 800487c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004880:	f7fd fffa 	bl	8002878 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004888:	f7fd fff6 	bl	8002878 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e12b      	b.n	8004af2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800489a:	4b93      	ldr	r3, [pc, #588]	; (8004ae8 <HAL_RCC_OscConfig+0x82c>)
 800489c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0ef      	beq.n	8004888 <HAL_RCC_OscConfig+0x5cc>
 80048a8:	e01b      	b.n	80048e2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048aa:	4b8f      	ldr	r3, [pc, #572]	; (8004ae8 <HAL_RCC_OscConfig+0x82c>)
 80048ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048b0:	4a8d      	ldr	r2, [pc, #564]	; (8004ae8 <HAL_RCC_OscConfig+0x82c>)
 80048b2:	f023 0301 	bic.w	r3, r3, #1
 80048b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ba:	f7fd ffdd 	bl	8002878 <HAL_GetTick>
 80048be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048c0:	e008      	b.n	80048d4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048c2:	f7fd ffd9 	bl	8002878 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d901      	bls.n	80048d4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e10e      	b.n	8004af2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048d4:	4b84      	ldr	r3, [pc, #528]	; (8004ae8 <HAL_RCC_OscConfig+0x82c>)
 80048d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1ef      	bne.n	80048c2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 8102 	beq.w	8004af0 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	f040 80c5 	bne.w	8004a80 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80048f6:	4b7c      	ldr	r3, [pc, #496]	; (8004ae8 <HAL_RCC_OscConfig+0x82c>)
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f003 0203 	and.w	r2, r3, #3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004906:	429a      	cmp	r2, r3
 8004908:	d12c      	bne.n	8004964 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004914:	3b01      	subs	r3, #1
 8004916:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004918:	429a      	cmp	r2, r3
 800491a:	d123      	bne.n	8004964 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004926:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004928:	429a      	cmp	r2, r3
 800492a:	d11b      	bne.n	8004964 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004936:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004938:	429a      	cmp	r2, r3
 800493a:	d113      	bne.n	8004964 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004946:	085b      	lsrs	r3, r3, #1
 8004948:	3b01      	subs	r3, #1
 800494a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800494c:	429a      	cmp	r2, r3
 800494e:	d109      	bne.n	8004964 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	085b      	lsrs	r3, r3, #1
 800495c:	3b01      	subs	r3, #1
 800495e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004960:	429a      	cmp	r2, r3
 8004962:	d067      	beq.n	8004a34 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	2b0c      	cmp	r3, #12
 8004968:	d062      	beq.n	8004a30 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800496a:	4b5f      	ldr	r3, [pc, #380]	; (8004ae8 <HAL_RCC_OscConfig+0x82c>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e0bb      	b.n	8004af2 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800497a:	4b5b      	ldr	r3, [pc, #364]	; (8004ae8 <HAL_RCC_OscConfig+0x82c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a5a      	ldr	r2, [pc, #360]	; (8004ae8 <HAL_RCC_OscConfig+0x82c>)
 8004980:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004984:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004986:	f7fd ff77 	bl	8002878 <HAL_GetTick>
 800498a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800498c:	e008      	b.n	80049a0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800498e:	f7fd ff73 	bl	8002878 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b02      	cmp	r3, #2
 800499a:	d901      	bls.n	80049a0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e0a8      	b.n	8004af2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049a0:	4b51      	ldr	r3, [pc, #324]	; (8004ae8 <HAL_RCC_OscConfig+0x82c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1f0      	bne.n	800498e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049ac:	4b4e      	ldr	r3, [pc, #312]	; (8004ae8 <HAL_RCC_OscConfig+0x82c>)
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	4b4e      	ldr	r3, [pc, #312]	; (8004aec <HAL_RCC_OscConfig+0x830>)
 80049b2:	4013      	ands	r3, r2
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80049bc:	3a01      	subs	r2, #1
 80049be:	0112      	lsls	r2, r2, #4
 80049c0:	4311      	orrs	r1, r2
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049c6:	0212      	lsls	r2, r2, #8
 80049c8:	4311      	orrs	r1, r2
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80049ce:	0852      	lsrs	r2, r2, #1
 80049d0:	3a01      	subs	r2, #1
 80049d2:	0552      	lsls	r2, r2, #21
 80049d4:	4311      	orrs	r1, r2
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80049da:	0852      	lsrs	r2, r2, #1
 80049dc:	3a01      	subs	r2, #1
 80049de:	0652      	lsls	r2, r2, #25
 80049e0:	4311      	orrs	r1, r2
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049e6:	06d2      	lsls	r2, r2, #27
 80049e8:	430a      	orrs	r2, r1
 80049ea:	493f      	ldr	r1, [pc, #252]	; (8004ae8 <HAL_RCC_OscConfig+0x82c>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80049f0:	4b3d      	ldr	r3, [pc, #244]	; (8004ae8 <HAL_RCC_OscConfig+0x82c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a3c      	ldr	r2, [pc, #240]	; (8004ae8 <HAL_RCC_OscConfig+0x82c>)
 80049f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049fc:	4b3a      	ldr	r3, [pc, #232]	; (8004ae8 <HAL_RCC_OscConfig+0x82c>)
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	4a39      	ldr	r2, [pc, #228]	; (8004ae8 <HAL_RCC_OscConfig+0x82c>)
 8004a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a08:	f7fd ff36 	bl	8002878 <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a10:	f7fd ff32 	bl	8002878 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e067      	b.n	8004af2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a22:	4b31      	ldr	r3, [pc, #196]	; (8004ae8 <HAL_RCC_OscConfig+0x82c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d0f0      	beq.n	8004a10 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a2e:	e05f      	b.n	8004af0 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e05e      	b.n	8004af2 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a34:	4b2c      	ldr	r3, [pc, #176]	; (8004ae8 <HAL_RCC_OscConfig+0x82c>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d157      	bne.n	8004af0 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a40:	4b29      	ldr	r3, [pc, #164]	; (8004ae8 <HAL_RCC_OscConfig+0x82c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a28      	ldr	r2, [pc, #160]	; (8004ae8 <HAL_RCC_OscConfig+0x82c>)
 8004a46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a4a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a4c:	4b26      	ldr	r3, [pc, #152]	; (8004ae8 <HAL_RCC_OscConfig+0x82c>)
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	4a25      	ldr	r2, [pc, #148]	; (8004ae8 <HAL_RCC_OscConfig+0x82c>)
 8004a52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a58:	f7fd ff0e 	bl	8002878 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a60:	f7fd ff0a 	bl	8002878 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e03f      	b.n	8004af2 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a72:	4b1d      	ldr	r3, [pc, #116]	; (8004ae8 <HAL_RCC_OscConfig+0x82c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0f0      	beq.n	8004a60 <HAL_RCC_OscConfig+0x7a4>
 8004a7e:	e037      	b.n	8004af0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	2b0c      	cmp	r3, #12
 8004a84:	d02d      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a86:	4b18      	ldr	r3, [pc, #96]	; (8004ae8 <HAL_RCC_OscConfig+0x82c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a17      	ldr	r2, [pc, #92]	; (8004ae8 <HAL_RCC_OscConfig+0x82c>)
 8004a8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a90:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a92:	4b15      	ldr	r3, [pc, #84]	; (8004ae8 <HAL_RCC_OscConfig+0x82c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d105      	bne.n	8004aaa <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004a9e:	4b12      	ldr	r3, [pc, #72]	; (8004ae8 <HAL_RCC_OscConfig+0x82c>)
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	4a11      	ldr	r2, [pc, #68]	; (8004ae8 <HAL_RCC_OscConfig+0x82c>)
 8004aa4:	f023 0303 	bic.w	r3, r3, #3
 8004aa8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004aaa:	4b0f      	ldr	r3, [pc, #60]	; (8004ae8 <HAL_RCC_OscConfig+0x82c>)
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	4a0e      	ldr	r2, [pc, #56]	; (8004ae8 <HAL_RCC_OscConfig+0x82c>)
 8004ab0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004ab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ab8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aba:	f7fd fedd 	bl	8002878 <HAL_GetTick>
 8004abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ac0:	e008      	b.n	8004ad4 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ac2:	f7fd fed9 	bl	8002878 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d901      	bls.n	8004ad4 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e00e      	b.n	8004af2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ad4:	4b04      	ldr	r3, [pc, #16]	; (8004ae8 <HAL_RCC_OscConfig+0x82c>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1f0      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x806>
 8004ae0:	e006      	b.n	8004af0 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e005      	b.n	8004af2 <HAL_RCC_OscConfig+0x836>
 8004ae6:	bf00      	nop
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3720      	adds	r7, #32
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop

08004afc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e0c8      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b10:	4b66      	ldr	r3, [pc, #408]	; (8004cac <HAL_RCC_ClockConfig+0x1b0>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0307 	and.w	r3, r3, #7
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d910      	bls.n	8004b40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b1e:	4b63      	ldr	r3, [pc, #396]	; (8004cac <HAL_RCC_ClockConfig+0x1b0>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f023 0207 	bic.w	r2, r3, #7
 8004b26:	4961      	ldr	r1, [pc, #388]	; (8004cac <HAL_RCC_ClockConfig+0x1b0>)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b2e:	4b5f      	ldr	r3, [pc, #380]	; (8004cac <HAL_RCC_ClockConfig+0x1b0>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d001      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e0b0      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d04c      	beq.n	8004be6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	2b03      	cmp	r3, #3
 8004b52:	d107      	bne.n	8004b64 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b54:	4b56      	ldr	r3, [pc, #344]	; (8004cb0 <HAL_RCC_ClockConfig+0x1b4>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d121      	bne.n	8004ba4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e09e      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d107      	bne.n	8004b7c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b6c:	4b50      	ldr	r3, [pc, #320]	; (8004cb0 <HAL_RCC_ClockConfig+0x1b4>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d115      	bne.n	8004ba4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e092      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d107      	bne.n	8004b94 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b84:	4b4a      	ldr	r3, [pc, #296]	; (8004cb0 <HAL_RCC_ClockConfig+0x1b4>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d109      	bne.n	8004ba4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e086      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b94:	4b46      	ldr	r3, [pc, #280]	; (8004cb0 <HAL_RCC_ClockConfig+0x1b4>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e07e      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ba4:	4b42      	ldr	r3, [pc, #264]	; (8004cb0 <HAL_RCC_ClockConfig+0x1b4>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f023 0203 	bic.w	r2, r3, #3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	493f      	ldr	r1, [pc, #252]	; (8004cb0 <HAL_RCC_ClockConfig+0x1b4>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bb6:	f7fd fe5f 	bl	8002878 <HAL_GetTick>
 8004bba:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bbc:	e00a      	b.n	8004bd4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bbe:	f7fd fe5b 	bl	8002878 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e066      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bd4:	4b36      	ldr	r3, [pc, #216]	; (8004cb0 <HAL_RCC_ClockConfig+0x1b4>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f003 020c 	and.w	r2, r3, #12
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d1eb      	bne.n	8004bbe <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d008      	beq.n	8004c04 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bf2:	4b2f      	ldr	r3, [pc, #188]	; (8004cb0 <HAL_RCC_ClockConfig+0x1b4>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	492c      	ldr	r1, [pc, #176]	; (8004cb0 <HAL_RCC_ClockConfig+0x1b4>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c04:	4b29      	ldr	r3, [pc, #164]	; (8004cac <HAL_RCC_ClockConfig+0x1b0>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d210      	bcs.n	8004c34 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c12:	4b26      	ldr	r3, [pc, #152]	; (8004cac <HAL_RCC_ClockConfig+0x1b0>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f023 0207 	bic.w	r2, r3, #7
 8004c1a:	4924      	ldr	r1, [pc, #144]	; (8004cac <HAL_RCC_ClockConfig+0x1b0>)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c22:	4b22      	ldr	r3, [pc, #136]	; (8004cac <HAL_RCC_ClockConfig+0x1b0>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0307 	and.w	r3, r3, #7
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d001      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e036      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0304 	and.w	r3, r3, #4
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d008      	beq.n	8004c52 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c40:	4b1b      	ldr	r3, [pc, #108]	; (8004cb0 <HAL_RCC_ClockConfig+0x1b4>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	4918      	ldr	r1, [pc, #96]	; (8004cb0 <HAL_RCC_ClockConfig+0x1b4>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0308 	and.w	r3, r3, #8
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d009      	beq.n	8004c72 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c5e:	4b14      	ldr	r3, [pc, #80]	; (8004cb0 <HAL_RCC_ClockConfig+0x1b4>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	4910      	ldr	r1, [pc, #64]	; (8004cb0 <HAL_RCC_ClockConfig+0x1b4>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c72:	f000 f825 	bl	8004cc0 <HAL_RCC_GetSysClockFreq>
 8004c76:	4602      	mov	r2, r0
 8004c78:	4b0d      	ldr	r3, [pc, #52]	; (8004cb0 <HAL_RCC_ClockConfig+0x1b4>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	091b      	lsrs	r3, r3, #4
 8004c7e:	f003 030f 	and.w	r3, r3, #15
 8004c82:	490c      	ldr	r1, [pc, #48]	; (8004cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c84:	5ccb      	ldrb	r3, [r1, r3]
 8004c86:	f003 031f 	and.w	r3, r3, #31
 8004c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c8e:	4a0a      	ldr	r2, [pc, #40]	; (8004cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c92:	4b0a      	ldr	r3, [pc, #40]	; (8004cbc <HAL_RCC_ClockConfig+0x1c0>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fd fd9e 	bl	80027d8 <HAL_InitTick>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004ca0:	7afb      	ldrb	r3, [r7, #11]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	40022000 	.word	0x40022000
 8004cb0:	40021000 	.word	0x40021000
 8004cb4:	08008790 	.word	0x08008790
 8004cb8:	20000010 	.word	0x20000010
 8004cbc:	20000014 	.word	0x20000014

08004cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b089      	sub	sp, #36	; 0x24
 8004cc4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	61fb      	str	r3, [r7, #28]
 8004cca:	2300      	movs	r3, #0
 8004ccc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cce:	4b3e      	ldr	r3, [pc, #248]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f003 030c 	and.w	r3, r3, #12
 8004cd6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cd8:	4b3b      	ldr	r3, [pc, #236]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f003 0303 	and.w	r3, r3, #3
 8004ce0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d005      	beq.n	8004cf4 <HAL_RCC_GetSysClockFreq+0x34>
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	2b0c      	cmp	r3, #12
 8004cec:	d121      	bne.n	8004d32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d11e      	bne.n	8004d32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004cf4:	4b34      	ldr	r3, [pc, #208]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0308 	and.w	r3, r3, #8
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d107      	bne.n	8004d10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d00:	4b31      	ldr	r3, [pc, #196]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d06:	0a1b      	lsrs	r3, r3, #8
 8004d08:	f003 030f 	and.w	r3, r3, #15
 8004d0c:	61fb      	str	r3, [r7, #28]
 8004d0e:	e005      	b.n	8004d1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d10:	4b2d      	ldr	r3, [pc, #180]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	091b      	lsrs	r3, r3, #4
 8004d16:	f003 030f 	and.w	r3, r3, #15
 8004d1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d1c:	4a2b      	ldr	r2, [pc, #172]	; (8004dcc <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10d      	bne.n	8004d48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d30:	e00a      	b.n	8004d48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	2b04      	cmp	r3, #4
 8004d36:	d102      	bne.n	8004d3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d38:	4b25      	ldr	r3, [pc, #148]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d3a:	61bb      	str	r3, [r7, #24]
 8004d3c:	e004      	b.n	8004d48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	2b08      	cmp	r3, #8
 8004d42:	d101      	bne.n	8004d48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d44:	4b23      	ldr	r3, [pc, #140]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	2b0c      	cmp	r3, #12
 8004d4c:	d134      	bne.n	8004db8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d4e:	4b1e      	ldr	r3, [pc, #120]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d003      	beq.n	8004d66 <HAL_RCC_GetSysClockFreq+0xa6>
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	2b03      	cmp	r3, #3
 8004d62:	d003      	beq.n	8004d6c <HAL_RCC_GetSysClockFreq+0xac>
 8004d64:	e005      	b.n	8004d72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d66:	4b1a      	ldr	r3, [pc, #104]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d68:	617b      	str	r3, [r7, #20]
      break;
 8004d6a:	e005      	b.n	8004d78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d6c:	4b19      	ldr	r3, [pc, #100]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d6e:	617b      	str	r3, [r7, #20]
      break;
 8004d70:	e002      	b.n	8004d78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	617b      	str	r3, [r7, #20]
      break;
 8004d76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d78:	4b13      	ldr	r3, [pc, #76]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	091b      	lsrs	r3, r3, #4
 8004d7e:	f003 0307 	and.w	r3, r3, #7
 8004d82:	3301      	adds	r3, #1
 8004d84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d86:	4b10      	ldr	r3, [pc, #64]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	0a1b      	lsrs	r3, r3, #8
 8004d8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	fb02 f203 	mul.w	r2, r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d9e:	4b0a      	ldr	r3, [pc, #40]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	0e5b      	lsrs	r3, r3, #25
 8004da4:	f003 0303 	and.w	r3, r3, #3
 8004da8:	3301      	adds	r3, #1
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004db8:	69bb      	ldr	r3, [r7, #24]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3724      	adds	r7, #36	; 0x24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	40021000 	.word	0x40021000
 8004dcc:	080087a8 	.word	0x080087a8
 8004dd0:	00f42400 	.word	0x00f42400
 8004dd4:	007a1200 	.word	0x007a1200

08004dd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ddc:	4b03      	ldr	r3, [pc, #12]	; (8004dec <HAL_RCC_GetHCLKFreq+0x14>)
 8004dde:	681b      	ldr	r3, [r3, #0]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	20000010 	.word	0x20000010

08004df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004df4:	f7ff fff0 	bl	8004dd8 <HAL_RCC_GetHCLKFreq>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	4b06      	ldr	r3, [pc, #24]	; (8004e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	0a1b      	lsrs	r3, r3, #8
 8004e00:	f003 0307 	and.w	r3, r3, #7
 8004e04:	4904      	ldr	r1, [pc, #16]	; (8004e18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e06:	5ccb      	ldrb	r3, [r1, r3]
 8004e08:	f003 031f 	and.w	r3, r3, #31
 8004e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	40021000 	.word	0x40021000
 8004e18:	080087a0 	.word	0x080087a0

08004e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e20:	f7ff ffda 	bl	8004dd8 <HAL_RCC_GetHCLKFreq>
 8004e24:	4602      	mov	r2, r0
 8004e26:	4b06      	ldr	r3, [pc, #24]	; (8004e40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	0adb      	lsrs	r3, r3, #11
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	4904      	ldr	r1, [pc, #16]	; (8004e44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e32:	5ccb      	ldrb	r3, [r1, r3]
 8004e34:	f003 031f 	and.w	r3, r3, #31
 8004e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	40021000 	.word	0x40021000
 8004e44:	080087a0 	.word	0x080087a0

08004e48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e50:	2300      	movs	r3, #0
 8004e52:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e54:	4b2a      	ldr	r3, [pc, #168]	; (8004f00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e60:	f7ff f9c8 	bl	80041f4 <HAL_PWREx_GetVoltageRange>
 8004e64:	6178      	str	r0, [r7, #20]
 8004e66:	e014      	b.n	8004e92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e68:	4b25      	ldr	r3, [pc, #148]	; (8004f00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6c:	4a24      	ldr	r2, [pc, #144]	; (8004f00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e72:	6593      	str	r3, [r2, #88]	; 0x58
 8004e74:	4b22      	ldr	r3, [pc, #136]	; (8004f00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e7c:	60fb      	str	r3, [r7, #12]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004e80:	f7ff f9b8 	bl	80041f4 <HAL_PWREx_GetVoltageRange>
 8004e84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e86:	4b1e      	ldr	r3, [pc, #120]	; (8004f00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8a:	4a1d      	ldr	r2, [pc, #116]	; (8004f00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e90:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e98:	d10b      	bne.n	8004eb2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b80      	cmp	r3, #128	; 0x80
 8004e9e:	d919      	bls.n	8004ed4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2ba0      	cmp	r3, #160	; 0xa0
 8004ea4:	d902      	bls.n	8004eac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	613b      	str	r3, [r7, #16]
 8004eaa:	e013      	b.n	8004ed4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004eac:	2301      	movs	r3, #1
 8004eae:	613b      	str	r3, [r7, #16]
 8004eb0:	e010      	b.n	8004ed4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b80      	cmp	r3, #128	; 0x80
 8004eb6:	d902      	bls.n	8004ebe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004eb8:	2303      	movs	r3, #3
 8004eba:	613b      	str	r3, [r7, #16]
 8004ebc:	e00a      	b.n	8004ed4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2b80      	cmp	r3, #128	; 0x80
 8004ec2:	d102      	bne.n	8004eca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	613b      	str	r3, [r7, #16]
 8004ec8:	e004      	b.n	8004ed4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b70      	cmp	r3, #112	; 0x70
 8004ece:	d101      	bne.n	8004ed4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ed4:	4b0b      	ldr	r3, [pc, #44]	; (8004f04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f023 0207 	bic.w	r2, r3, #7
 8004edc:	4909      	ldr	r1, [pc, #36]	; (8004f04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ee4:	4b07      	ldr	r3, [pc, #28]	; (8004f04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d001      	beq.n	8004ef6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e000      	b.n	8004ef8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	40021000 	.word	0x40021000
 8004f04:	40022000 	.word	0x40022000

08004f08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f10:	2300      	movs	r3, #0
 8004f12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f14:	2300      	movs	r3, #0
 8004f16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d031      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f2c:	d01a      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004f2e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f32:	d814      	bhi.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d009      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f3c:	d10f      	bne.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004f3e:	4bac      	ldr	r3, [pc, #688]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	4aab      	ldr	r2, [pc, #684]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f48:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f4a:	e00c      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	3304      	adds	r3, #4
 8004f50:	2100      	movs	r1, #0
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 f9cc 	bl	80052f0 <RCCEx_PLLSAI1_Config>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f5c:	e003      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	74fb      	strb	r3, [r7, #19]
      break;
 8004f62:	e000      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004f64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f66:	7cfb      	ldrb	r3, [r7, #19]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10b      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f6c:	4ba0      	ldr	r3, [pc, #640]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7a:	499d      	ldr	r1, [pc, #628]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004f82:	e001      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f84:	7cfb      	ldrb	r3, [r7, #19]
 8004f86:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 8099 	beq.w	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f96:	2300      	movs	r3, #0
 8004f98:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f9a:	4b95      	ldr	r3, [pc, #596]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e000      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004faa:	2300      	movs	r3, #0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00d      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fb0:	4b8f      	ldr	r3, [pc, #572]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb4:	4a8e      	ldr	r2, [pc, #568]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fba:	6593      	str	r3, [r2, #88]	; 0x58
 8004fbc:	4b8c      	ldr	r3, [pc, #560]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc4:	60bb      	str	r3, [r7, #8]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fcc:	4b89      	ldr	r3, [pc, #548]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a88      	ldr	r2, [pc, #544]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fd8:	f7fd fc4e 	bl	8002878 <HAL_GetTick>
 8004fdc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fde:	e009      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fe0:	f7fd fc4a 	bl	8002878 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d902      	bls.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	74fb      	strb	r3, [r7, #19]
        break;
 8004ff2:	e005      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ff4:	4b7f      	ldr	r3, [pc, #508]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d0ef      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005000:	7cfb      	ldrb	r3, [r7, #19]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d155      	bne.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005006:	4b7a      	ldr	r3, [pc, #488]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005010:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d01e      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	429a      	cmp	r2, r3
 8005020:	d019      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005022:	4b73      	ldr	r3, [pc, #460]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800502c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800502e:	4b70      	ldr	r3, [pc, #448]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005034:	4a6e      	ldr	r2, [pc, #440]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800503a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800503e:	4b6c      	ldr	r3, [pc, #432]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005044:	4a6a      	ldr	r2, [pc, #424]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800504a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800504e:	4a68      	ldr	r2, [pc, #416]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	2b00      	cmp	r3, #0
 800505e:	d016      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005060:	f7fd fc0a 	bl	8002878 <HAL_GetTick>
 8005064:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005066:	e00b      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005068:	f7fd fc06 	bl	8002878 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	f241 3288 	movw	r2, #5000	; 0x1388
 8005076:	4293      	cmp	r3, r2
 8005078:	d902      	bls.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	74fb      	strb	r3, [r7, #19]
            break;
 800507e:	e006      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005080:	4b5b      	ldr	r3, [pc, #364]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0ec      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800508e:	7cfb      	ldrb	r3, [r7, #19]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10b      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005094:	4b56      	ldr	r3, [pc, #344]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800509a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050a2:	4953      	ldr	r1, [pc, #332]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80050aa:	e004      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050ac:	7cfb      	ldrb	r3, [r7, #19]
 80050ae:	74bb      	strb	r3, [r7, #18]
 80050b0:	e001      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b2:	7cfb      	ldrb	r3, [r7, #19]
 80050b4:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050b6:	7c7b      	ldrb	r3, [r7, #17]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d105      	bne.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050bc:	4b4c      	ldr	r3, [pc, #304]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80050be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c0:	4a4b      	ldr	r2, [pc, #300]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80050c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050c6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00a      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050d4:	4b46      	ldr	r3, [pc, #280]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80050d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050da:	f023 0203 	bic.w	r2, r3, #3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	4943      	ldr	r1, [pc, #268]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00a      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050f6:	4b3e      	ldr	r3, [pc, #248]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80050f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fc:	f023 020c 	bic.w	r2, r3, #12
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	493a      	ldr	r1, [pc, #232]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005106:	4313      	orrs	r3, r2
 8005108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0320 	and.w	r3, r3, #32
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00a      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005118:	4b35      	ldr	r3, [pc, #212]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800511a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005126:	4932      	ldr	r1, [pc, #200]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005128:	4313      	orrs	r3, r2
 800512a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800513a:	4b2d      	ldr	r3, [pc, #180]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800513c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005140:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005148:	4929      	ldr	r1, [pc, #164]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800514a:	4313      	orrs	r3, r2
 800514c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00a      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800515c:	4b24      	ldr	r3, [pc, #144]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800515e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005162:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516a:	4921      	ldr	r1, [pc, #132]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800516c:	4313      	orrs	r3, r2
 800516e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00a      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800517e:	4b1c      	ldr	r3, [pc, #112]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005184:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518c:	4918      	ldr	r1, [pc, #96]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800518e:	4313      	orrs	r3, r2
 8005190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00a      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051a0:	4b13      	ldr	r3, [pc, #76]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ae:	4910      	ldr	r1, [pc, #64]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d02c      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051c2:	4b0b      	ldr	r3, [pc, #44]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d0:	4907      	ldr	r1, [pc, #28]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051e0:	d10a      	bne.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051e2:	4b03      	ldr	r3, [pc, #12]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	4a02      	ldr	r2, [pc, #8]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051ec:	60d3      	str	r3, [r2, #12]
 80051ee:	e015      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x314>
 80051f0:	40021000 	.word	0x40021000
 80051f4:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005200:	d10c      	bne.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	3304      	adds	r3, #4
 8005206:	2101      	movs	r1, #1
 8005208:	4618      	mov	r0, r3
 800520a:	f000 f871 	bl	80052f0 <RCCEx_PLLSAI1_Config>
 800520e:	4603      	mov	r3, r0
 8005210:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005212:	7cfb      	ldrb	r3, [r7, #19]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d001      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8005218:	7cfb      	ldrb	r3, [r7, #19]
 800521a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d028      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005228:	4b30      	ldr	r3, [pc, #192]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800522a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800522e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005236:	492d      	ldr	r1, [pc, #180]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005238:	4313      	orrs	r3, r2
 800523a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005242:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005246:	d106      	bne.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005248:	4b28      	ldr	r3, [pc, #160]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	4a27      	ldr	r2, [pc, #156]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800524e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005252:	60d3      	str	r3, [r2, #12]
 8005254:	e011      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800525a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800525e:	d10c      	bne.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	3304      	adds	r3, #4
 8005264:	2101      	movs	r1, #1
 8005266:	4618      	mov	r0, r3
 8005268:	f000 f842 	bl	80052f0 <RCCEx_PLLSAI1_Config>
 800526c:	4603      	mov	r3, r0
 800526e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005270:	7cfb      	ldrb	r3, [r7, #19]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8005276:	7cfb      	ldrb	r3, [r7, #19]
 8005278:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d01c      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005286:	4b19      	ldr	r3, [pc, #100]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800528c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005294:	4915      	ldr	r1, [pc, #84]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005296:	4313      	orrs	r3, r2
 8005298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052a4:	d10c      	bne.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	3304      	adds	r3, #4
 80052aa:	2102      	movs	r1, #2
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 f81f 	bl	80052f0 <RCCEx_PLLSAI1_Config>
 80052b2:	4603      	mov	r3, r0
 80052b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052b6:	7cfb      	ldrb	r3, [r7, #19]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80052bc:	7cfb      	ldrb	r3, [r7, #19]
 80052be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00a      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80052cc:	4b07      	ldr	r3, [pc, #28]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052da:	4904      	ldr	r1, [pc, #16]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80052e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3718      	adds	r7, #24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	40021000 	.word	0x40021000

080052f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052fa:	2300      	movs	r3, #0
 80052fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052fe:	4b74      	ldr	r3, [pc, #464]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	f003 0303 	and.w	r3, r3, #3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d018      	beq.n	800533c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800530a:	4b71      	ldr	r3, [pc, #452]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f003 0203 	and.w	r2, r3, #3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	429a      	cmp	r2, r3
 8005318:	d10d      	bne.n	8005336 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
       ||
 800531e:	2b00      	cmp	r3, #0
 8005320:	d009      	beq.n	8005336 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005322:	4b6b      	ldr	r3, [pc, #428]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	091b      	lsrs	r3, r3, #4
 8005328:	f003 0307 	and.w	r3, r3, #7
 800532c:	1c5a      	adds	r2, r3, #1
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
       ||
 8005332:	429a      	cmp	r2, r3
 8005334:	d047      	beq.n	80053c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	73fb      	strb	r3, [r7, #15]
 800533a:	e044      	b.n	80053c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b03      	cmp	r3, #3
 8005342:	d018      	beq.n	8005376 <RCCEx_PLLSAI1_Config+0x86>
 8005344:	2b03      	cmp	r3, #3
 8005346:	d825      	bhi.n	8005394 <RCCEx_PLLSAI1_Config+0xa4>
 8005348:	2b01      	cmp	r3, #1
 800534a:	d002      	beq.n	8005352 <RCCEx_PLLSAI1_Config+0x62>
 800534c:	2b02      	cmp	r3, #2
 800534e:	d009      	beq.n	8005364 <RCCEx_PLLSAI1_Config+0x74>
 8005350:	e020      	b.n	8005394 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005352:	4b5f      	ldr	r3, [pc, #380]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d11d      	bne.n	800539a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005362:	e01a      	b.n	800539a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005364:	4b5a      	ldr	r3, [pc, #360]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800536c:	2b00      	cmp	r3, #0
 800536e:	d116      	bne.n	800539e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005374:	e013      	b.n	800539e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005376:	4b56      	ldr	r3, [pc, #344]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10f      	bne.n	80053a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005382:	4b53      	ldr	r3, [pc, #332]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d109      	bne.n	80053a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005392:	e006      	b.n	80053a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	73fb      	strb	r3, [r7, #15]
      break;
 8005398:	e004      	b.n	80053a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800539a:	bf00      	nop
 800539c:	e002      	b.n	80053a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800539e:	bf00      	nop
 80053a0:	e000      	b.n	80053a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80053a4:	7bfb      	ldrb	r3, [r7, #15]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10d      	bne.n	80053c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80053aa:	4b49      	ldr	r3, [pc, #292]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6819      	ldr	r1, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	3b01      	subs	r3, #1
 80053bc:	011b      	lsls	r3, r3, #4
 80053be:	430b      	orrs	r3, r1
 80053c0:	4943      	ldr	r1, [pc, #268]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d17c      	bne.n	80054c6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80053cc:	4b40      	ldr	r3, [pc, #256]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a3f      	ldr	r2, [pc, #252]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053d8:	f7fd fa4e 	bl	8002878 <HAL_GetTick>
 80053dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053de:	e009      	b.n	80053f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053e0:	f7fd fa4a 	bl	8002878 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d902      	bls.n	80053f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	73fb      	strb	r3, [r7, #15]
        break;
 80053f2:	e005      	b.n	8005400 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053f4:	4b36      	ldr	r3, [pc, #216]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1ef      	bne.n	80053e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005400:	7bfb      	ldrb	r3, [r7, #15]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d15f      	bne.n	80054c6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d110      	bne.n	800542e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800540c:	4b30      	ldr	r3, [pc, #192]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005414:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	6892      	ldr	r2, [r2, #8]
 800541c:	0211      	lsls	r1, r2, #8
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	68d2      	ldr	r2, [r2, #12]
 8005422:	06d2      	lsls	r2, r2, #27
 8005424:	430a      	orrs	r2, r1
 8005426:	492a      	ldr	r1, [pc, #168]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005428:	4313      	orrs	r3, r2
 800542a:	610b      	str	r3, [r1, #16]
 800542c:	e027      	b.n	800547e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d112      	bne.n	800545a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005434:	4b26      	ldr	r3, [pc, #152]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800543c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	6892      	ldr	r2, [r2, #8]
 8005444:	0211      	lsls	r1, r2, #8
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	6912      	ldr	r2, [r2, #16]
 800544a:	0852      	lsrs	r2, r2, #1
 800544c:	3a01      	subs	r2, #1
 800544e:	0552      	lsls	r2, r2, #21
 8005450:	430a      	orrs	r2, r1
 8005452:	491f      	ldr	r1, [pc, #124]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005454:	4313      	orrs	r3, r2
 8005456:	610b      	str	r3, [r1, #16]
 8005458:	e011      	b.n	800547e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800545a:	4b1d      	ldr	r3, [pc, #116]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005462:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	6892      	ldr	r2, [r2, #8]
 800546a:	0211      	lsls	r1, r2, #8
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	6952      	ldr	r2, [r2, #20]
 8005470:	0852      	lsrs	r2, r2, #1
 8005472:	3a01      	subs	r2, #1
 8005474:	0652      	lsls	r2, r2, #25
 8005476:	430a      	orrs	r2, r1
 8005478:	4915      	ldr	r1, [pc, #84]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800547a:	4313      	orrs	r3, r2
 800547c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800547e:	4b14      	ldr	r3, [pc, #80]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a13      	ldr	r2, [pc, #76]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005484:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005488:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800548a:	f7fd f9f5 	bl	8002878 <HAL_GetTick>
 800548e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005490:	e009      	b.n	80054a6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005492:	f7fd f9f1 	bl	8002878 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d902      	bls.n	80054a6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	73fb      	strb	r3, [r7, #15]
          break;
 80054a4:	e005      	b.n	80054b2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054a6:	4b0a      	ldr	r3, [pc, #40]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d0ef      	beq.n	8005492 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80054b2:	7bfb      	ldrb	r3, [r7, #15]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d106      	bne.n	80054c6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80054b8:	4b05      	ldr	r3, [pc, #20]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054ba:	691a      	ldr	r2, [r3, #16]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	4903      	ldr	r1, [pc, #12]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80054c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	40021000 	.word	0x40021000

080054d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e049      	b.n	800557a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d106      	bne.n	8005500 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7fc ff90 	bl	8002420 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2202      	movs	r2, #2
 8005504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	3304      	adds	r3, #4
 8005510:	4619      	mov	r1, r3
 8005512:	4610      	mov	r0, r2
 8005514:	f000 fc10 	bl	8005d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
	...

08005584 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b01      	cmp	r3, #1
 8005596:	d001      	beq.n	800559c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e03b      	b.n	8005614 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2202      	movs	r2, #2
 80055a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68da      	ldr	r2, [r3, #12]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f042 0201 	orr.w	r2, r2, #1
 80055b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a19      	ldr	r2, [pc, #100]	; (8005620 <HAL_TIM_Base_Start_IT+0x9c>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d009      	beq.n	80055d2 <HAL_TIM_Base_Start_IT+0x4e>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c6:	d004      	beq.n	80055d2 <HAL_TIM_Base_Start_IT+0x4e>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a15      	ldr	r2, [pc, #84]	; (8005624 <HAL_TIM_Base_Start_IT+0xa0>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d115      	bne.n	80055fe <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	689a      	ldr	r2, [r3, #8]
 80055d8:	4b13      	ldr	r3, [pc, #76]	; (8005628 <HAL_TIM_Base_Start_IT+0xa4>)
 80055da:	4013      	ands	r3, r2
 80055dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b06      	cmp	r3, #6
 80055e2:	d015      	beq.n	8005610 <HAL_TIM_Base_Start_IT+0x8c>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ea:	d011      	beq.n	8005610 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0201 	orr.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055fc:	e008      	b.n	8005610 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f042 0201 	orr.w	r2, r2, #1
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	e000      	b.n	8005612 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005610:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	40012c00 	.word	0x40012c00
 8005624:	40014000 	.word	0x40014000
 8005628:	00010007 	.word	0x00010007

0800562c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e049      	b.n	80056d2 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d106      	bne.n	8005658 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7fc fec0 	bl	80023d8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2202      	movs	r2, #2
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	3304      	adds	r3, #4
 8005668:	4619      	mov	r1, r3
 800566a:	4610      	mov	r0, r2
 800566c:	f000 fb64 	bl	8005d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b082      	sub	sp, #8
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d101      	bne.n	80056ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e049      	b.n	8005780 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d106      	bne.n	8005706 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7fc fe49 	bl	8002398 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2202      	movs	r2, #2
 800570a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	3304      	adds	r3, #4
 8005716:	4619      	mov	r1, r3
 8005718:	4610      	mov	r0, r2
 800571a:	f000 fb0d 	bl	8005d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3708      	adds	r7, #8
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	f003 0302 	and.w	r3, r3, #2
 800579a:	2b02      	cmp	r3, #2
 800579c:	d122      	bne.n	80057e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f003 0302 	and.w	r3, r3, #2
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d11b      	bne.n	80057e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f06f 0202 	mvn.w	r2, #2
 80057b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	f003 0303 	and.w	r3, r3, #3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d003      	beq.n	80057d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 fa96 	bl	8005cfc <HAL_TIM_IC_CaptureCallback>
 80057d0:	e005      	b.n	80057de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fa88 	bl	8005ce8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 fa99 	bl	8005d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	f003 0304 	and.w	r3, r3, #4
 80057ee:	2b04      	cmp	r3, #4
 80057f0:	d122      	bne.n	8005838 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b04      	cmp	r3, #4
 80057fe:	d11b      	bne.n	8005838 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f06f 0204 	mvn.w	r2, #4
 8005808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2202      	movs	r2, #2
 800580e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 fa6c 	bl	8005cfc <HAL_TIM_IC_CaptureCallback>
 8005824:	e005      	b.n	8005832 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 fa5e 	bl	8005ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 fa6f 	bl	8005d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	f003 0308 	and.w	r3, r3, #8
 8005842:	2b08      	cmp	r3, #8
 8005844:	d122      	bne.n	800588c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	f003 0308 	and.w	r3, r3, #8
 8005850:	2b08      	cmp	r3, #8
 8005852:	d11b      	bne.n	800588c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f06f 0208 	mvn.w	r2, #8
 800585c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2204      	movs	r2, #4
 8005862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	f003 0303 	and.w	r3, r3, #3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 fa42 	bl	8005cfc <HAL_TIM_IC_CaptureCallback>
 8005878:	e005      	b.n	8005886 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fa34 	bl	8005ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 fa45 	bl	8005d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	f003 0310 	and.w	r3, r3, #16
 8005896:	2b10      	cmp	r3, #16
 8005898:	d122      	bne.n	80058e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f003 0310 	and.w	r3, r3, #16
 80058a4:	2b10      	cmp	r3, #16
 80058a6:	d11b      	bne.n	80058e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f06f 0210 	mvn.w	r2, #16
 80058b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2208      	movs	r2, #8
 80058b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 fa18 	bl	8005cfc <HAL_TIM_IC_CaptureCallback>
 80058cc:	e005      	b.n	80058da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 fa0a 	bl	8005ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 fa1b 	bl	8005d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d10e      	bne.n	800590c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d107      	bne.n	800590c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f06f 0201 	mvn.w	r2, #1
 8005904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f9e4 	bl	8005cd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005916:	2b80      	cmp	r3, #128	; 0x80
 8005918:	d10e      	bne.n	8005938 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005924:	2b80      	cmp	r3, #128	; 0x80
 8005926:	d107      	bne.n	8005938 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 fdca 	bl	80064cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005946:	d10e      	bne.n	8005966 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005952:	2b80      	cmp	r3, #128	; 0x80
 8005954:	d107      	bne.n	8005966 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800595e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 fdbd 	bl	80064e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005970:	2b40      	cmp	r3, #64	; 0x40
 8005972:	d10e      	bne.n	8005992 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597e:	2b40      	cmp	r3, #64	; 0x40
 8005980:	d107      	bne.n	8005992 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800598a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f9c9 	bl	8005d24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	f003 0320 	and.w	r3, r3, #32
 800599c:	2b20      	cmp	r3, #32
 800599e:	d10e      	bne.n	80059be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	f003 0320 	and.w	r3, r3, #32
 80059aa:	2b20      	cmp	r3, #32
 80059ac:	d107      	bne.n	80059be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f06f 0220 	mvn.w	r2, #32
 80059b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 fd7d 	bl	80064b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059be:	bf00      	nop
 80059c0:	3708      	adds	r7, #8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
	...

080059c8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d101      	bne.n	80059e2 <HAL_TIM_OC_ConfigChannel+0x1a>
 80059de:	2302      	movs	r3, #2
 80059e0:	e064      	b.n	8005aac <HAL_TIM_OC_ConfigChannel+0xe4>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b14      	cmp	r3, #20
 80059ee:	d857      	bhi.n	8005aa0 <HAL_TIM_OC_ConfigChannel+0xd8>
 80059f0:	a201      	add	r2, pc, #4	; (adr r2, 80059f8 <HAL_TIM_OC_ConfigChannel+0x30>)
 80059f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f6:	bf00      	nop
 80059f8:	08005a4d 	.word	0x08005a4d
 80059fc:	08005aa1 	.word	0x08005aa1
 8005a00:	08005aa1 	.word	0x08005aa1
 8005a04:	08005aa1 	.word	0x08005aa1
 8005a08:	08005a5b 	.word	0x08005a5b
 8005a0c:	08005aa1 	.word	0x08005aa1
 8005a10:	08005aa1 	.word	0x08005aa1
 8005a14:	08005aa1 	.word	0x08005aa1
 8005a18:	08005a69 	.word	0x08005a69
 8005a1c:	08005aa1 	.word	0x08005aa1
 8005a20:	08005aa1 	.word	0x08005aa1
 8005a24:	08005aa1 	.word	0x08005aa1
 8005a28:	08005a77 	.word	0x08005a77
 8005a2c:	08005aa1 	.word	0x08005aa1
 8005a30:	08005aa1 	.word	0x08005aa1
 8005a34:	08005aa1 	.word	0x08005aa1
 8005a38:	08005a85 	.word	0x08005a85
 8005a3c:	08005aa1 	.word	0x08005aa1
 8005a40:	08005aa1 	.word	0x08005aa1
 8005a44:	08005aa1 	.word	0x08005aa1
 8005a48:	08005a93 	.word	0x08005a93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68b9      	ldr	r1, [r7, #8]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 f9d4 	bl	8005e00 <TIM_OC1_SetConfig>
      break;
 8005a58:	e023      	b.n	8005aa2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68b9      	ldr	r1, [r7, #8]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f000 fa49 	bl	8005ef8 <TIM_OC2_SetConfig>
      break;
 8005a66:	e01c      	b.n	8005aa2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68b9      	ldr	r1, [r7, #8]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 fabc 	bl	8005fec <TIM_OC3_SetConfig>
      break;
 8005a74:	e015      	b.n	8005aa2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68b9      	ldr	r1, [r7, #8]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f000 fb2d 	bl	80060dc <TIM_OC4_SetConfig>
      break;
 8005a82:	e00e      	b.n	8005aa2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68b9      	ldr	r1, [r7, #8]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 fb84 	bl	8006198 <TIM_OC5_SetConfig>
      break;
 8005a90:	e007      	b.n	8005aa2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68b9      	ldr	r1, [r7, #8]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f000 fbd5 	bl	8006248 <TIM_OC6_SetConfig>
      break;
 8005a9e:	e000      	b.n	8005aa2 <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8005aa0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d101      	bne.n	8005ace <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005aca:	2302      	movs	r3, #2
 8005acc:	e0fd      	b.n	8005cca <HAL_TIM_PWM_ConfigChannel+0x216>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2b14      	cmp	r3, #20
 8005ada:	f200 80f0 	bhi.w	8005cbe <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005ade:	a201      	add	r2, pc, #4	; (adr r2, 8005ae4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae4:	08005b39 	.word	0x08005b39
 8005ae8:	08005cbf 	.word	0x08005cbf
 8005aec:	08005cbf 	.word	0x08005cbf
 8005af0:	08005cbf 	.word	0x08005cbf
 8005af4:	08005b79 	.word	0x08005b79
 8005af8:	08005cbf 	.word	0x08005cbf
 8005afc:	08005cbf 	.word	0x08005cbf
 8005b00:	08005cbf 	.word	0x08005cbf
 8005b04:	08005bbb 	.word	0x08005bbb
 8005b08:	08005cbf 	.word	0x08005cbf
 8005b0c:	08005cbf 	.word	0x08005cbf
 8005b10:	08005cbf 	.word	0x08005cbf
 8005b14:	08005bfb 	.word	0x08005bfb
 8005b18:	08005cbf 	.word	0x08005cbf
 8005b1c:	08005cbf 	.word	0x08005cbf
 8005b20:	08005cbf 	.word	0x08005cbf
 8005b24:	08005c3d 	.word	0x08005c3d
 8005b28:	08005cbf 	.word	0x08005cbf
 8005b2c:	08005cbf 	.word	0x08005cbf
 8005b30:	08005cbf 	.word	0x08005cbf
 8005b34:	08005c7d 	.word	0x08005c7d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68b9      	ldr	r1, [r7, #8]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 f95e 	bl	8005e00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	699a      	ldr	r2, [r3, #24]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f042 0208 	orr.w	r2, r2, #8
 8005b52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	699a      	ldr	r2, [r3, #24]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f022 0204 	bic.w	r2, r2, #4
 8005b62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6999      	ldr	r1, [r3, #24]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	691a      	ldr	r2, [r3, #16]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	619a      	str	r2, [r3, #24]
      break;
 8005b76:	e0a3      	b.n	8005cc0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68b9      	ldr	r1, [r7, #8]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 f9ba 	bl	8005ef8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	699a      	ldr	r2, [r3, #24]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	699a      	ldr	r2, [r3, #24]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6999      	ldr	r1, [r3, #24]
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	021a      	lsls	r2, r3, #8
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	619a      	str	r2, [r3, #24]
      break;
 8005bb8:	e082      	b.n	8005cc0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68b9      	ldr	r1, [r7, #8]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f000 fa13 	bl	8005fec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69da      	ldr	r2, [r3, #28]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f042 0208 	orr.w	r2, r2, #8
 8005bd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	69da      	ldr	r2, [r3, #28]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 0204 	bic.w	r2, r2, #4
 8005be4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	69d9      	ldr	r1, [r3, #28]
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	691a      	ldr	r2, [r3, #16]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	61da      	str	r2, [r3, #28]
      break;
 8005bf8:	e062      	b.n	8005cc0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68b9      	ldr	r1, [r7, #8]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f000 fa6b 	bl	80060dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	69da      	ldr	r2, [r3, #28]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	69da      	ldr	r2, [r3, #28]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	69d9      	ldr	r1, [r3, #28]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	021a      	lsls	r2, r3, #8
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	61da      	str	r2, [r3, #28]
      break;
 8005c3a:	e041      	b.n	8005cc0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68b9      	ldr	r1, [r7, #8]
 8005c42:	4618      	mov	r0, r3
 8005c44:	f000 faa8 	bl	8006198 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f042 0208 	orr.w	r2, r2, #8
 8005c56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 0204 	bic.w	r2, r2, #4
 8005c66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	691a      	ldr	r2, [r3, #16]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c7a:	e021      	b.n	8005cc0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68b9      	ldr	r1, [r7, #8]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 fae0 	bl	8006248 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ca6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	021a      	lsls	r2, r3, #8
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005cbc:	e000      	b.n	8005cc0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005cbe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop

08005cd4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a2a      	ldr	r2, [pc, #168]	; (8005df4 <TIM_Base_SetConfig+0xbc>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d003      	beq.n	8005d58 <TIM_Base_SetConfig+0x20>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d56:	d108      	bne.n	8005d6a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a21      	ldr	r2, [pc, #132]	; (8005df4 <TIM_Base_SetConfig+0xbc>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d00b      	beq.n	8005d8a <TIM_Base_SetConfig+0x52>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d78:	d007      	beq.n	8005d8a <TIM_Base_SetConfig+0x52>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a1e      	ldr	r2, [pc, #120]	; (8005df8 <TIM_Base_SetConfig+0xc0>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d003      	beq.n	8005d8a <TIM_Base_SetConfig+0x52>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a1d      	ldr	r2, [pc, #116]	; (8005dfc <TIM_Base_SetConfig+0xc4>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d108      	bne.n	8005d9c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	689a      	ldr	r2, [r3, #8]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a0c      	ldr	r2, [pc, #48]	; (8005df4 <TIM_Base_SetConfig+0xbc>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d007      	beq.n	8005dd8 <TIM_Base_SetConfig+0xa0>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a0b      	ldr	r2, [pc, #44]	; (8005df8 <TIM_Base_SetConfig+0xc0>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d003      	beq.n	8005dd8 <TIM_Base_SetConfig+0xa0>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a0a      	ldr	r2, [pc, #40]	; (8005dfc <TIM_Base_SetConfig+0xc4>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d103      	bne.n	8005de0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	691a      	ldr	r2, [r3, #16]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	615a      	str	r2, [r3, #20]
}
 8005de6:	bf00      	nop
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	40012c00 	.word	0x40012c00
 8005df8:	40014000 	.word	0x40014000
 8005dfc:	40014400 	.word	0x40014400

08005e00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b087      	sub	sp, #28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	f023 0201 	bic.w	r2, r3, #1
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f023 0303 	bic.w	r3, r3, #3
 8005e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f023 0302 	bic.w	r3, r3, #2
 8005e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a24      	ldr	r2, [pc, #144]	; (8005eec <TIM_OC1_SetConfig+0xec>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d007      	beq.n	8005e70 <TIM_OC1_SetConfig+0x70>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a23      	ldr	r2, [pc, #140]	; (8005ef0 <TIM_OC1_SetConfig+0xf0>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d003      	beq.n	8005e70 <TIM_OC1_SetConfig+0x70>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a22      	ldr	r2, [pc, #136]	; (8005ef4 <TIM_OC1_SetConfig+0xf4>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d10c      	bne.n	8005e8a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f023 0308 	bic.w	r3, r3, #8
 8005e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	f023 0304 	bic.w	r3, r3, #4
 8005e88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a17      	ldr	r2, [pc, #92]	; (8005eec <TIM_OC1_SetConfig+0xec>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d007      	beq.n	8005ea2 <TIM_OC1_SetConfig+0xa2>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a16      	ldr	r2, [pc, #88]	; (8005ef0 <TIM_OC1_SetConfig+0xf0>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d003      	beq.n	8005ea2 <TIM_OC1_SetConfig+0xa2>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a15      	ldr	r2, [pc, #84]	; (8005ef4 <TIM_OC1_SetConfig+0xf4>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d111      	bne.n	8005ec6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ea8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	621a      	str	r2, [r3, #32]
}
 8005ee0:	bf00      	nop
 8005ee2:	371c      	adds	r7, #28
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	40012c00 	.word	0x40012c00
 8005ef0:	40014000 	.word	0x40014000
 8005ef4:	40014400 	.word	0x40014400

08005ef8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b087      	sub	sp, #28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	f023 0210 	bic.w	r2, r3, #16
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	021b      	lsls	r3, r3, #8
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f023 0320 	bic.w	r3, r3, #32
 8005f46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	011b      	lsls	r3, r3, #4
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a22      	ldr	r2, [pc, #136]	; (8005fe0 <TIM_OC2_SetConfig+0xe8>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d10d      	bne.n	8005f78 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	011b      	lsls	r3, r3, #4
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a19      	ldr	r2, [pc, #100]	; (8005fe0 <TIM_OC2_SetConfig+0xe8>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d007      	beq.n	8005f90 <TIM_OC2_SetConfig+0x98>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a18      	ldr	r2, [pc, #96]	; (8005fe4 <TIM_OC2_SetConfig+0xec>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d003      	beq.n	8005f90 <TIM_OC2_SetConfig+0x98>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a17      	ldr	r2, [pc, #92]	; (8005fe8 <TIM_OC2_SetConfig+0xf0>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d113      	bne.n	8005fb8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	695b      	ldr	r3, [r3, #20]
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	621a      	str	r2, [r3, #32]
}
 8005fd2:	bf00      	nop
 8005fd4:	371c      	adds	r7, #28
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	40012c00 	.word	0x40012c00
 8005fe4:	40014000 	.word	0x40014000
 8005fe8:	40014400 	.word	0x40014400

08005fec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800601a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800601e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f023 0303 	bic.w	r3, r3, #3
 8006026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	4313      	orrs	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006038:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	021b      	lsls	r3, r3, #8
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	4313      	orrs	r3, r2
 8006044:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a21      	ldr	r2, [pc, #132]	; (80060d0 <TIM_OC3_SetConfig+0xe4>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d10d      	bne.n	800606a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006054:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	021b      	lsls	r3, r3, #8
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	4313      	orrs	r3, r2
 8006060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a18      	ldr	r2, [pc, #96]	; (80060d0 <TIM_OC3_SetConfig+0xe4>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d007      	beq.n	8006082 <TIM_OC3_SetConfig+0x96>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a17      	ldr	r2, [pc, #92]	; (80060d4 <TIM_OC3_SetConfig+0xe8>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d003      	beq.n	8006082 <TIM_OC3_SetConfig+0x96>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a16      	ldr	r2, [pc, #88]	; (80060d8 <TIM_OC3_SetConfig+0xec>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d113      	bne.n	80060aa <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	011b      	lsls	r3, r3, #4
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	4313      	orrs	r3, r2
 800609c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	011b      	lsls	r3, r3, #4
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	621a      	str	r2, [r3, #32]
}
 80060c4:	bf00      	nop
 80060c6:	371c      	adds	r7, #28
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr
 80060d0:	40012c00 	.word	0x40012c00
 80060d4:	40014000 	.word	0x40014000
 80060d8:	40014400 	.word	0x40014400

080060dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060dc:	b480      	push	{r7}
 80060de:	b087      	sub	sp, #28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800610a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800610e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006116:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	021b      	lsls	r3, r3, #8
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	4313      	orrs	r3, r2
 8006122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800612a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	031b      	lsls	r3, r3, #12
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	4313      	orrs	r3, r2
 8006136:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a14      	ldr	r2, [pc, #80]	; (800618c <TIM_OC4_SetConfig+0xb0>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d007      	beq.n	8006150 <TIM_OC4_SetConfig+0x74>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a13      	ldr	r2, [pc, #76]	; (8006190 <TIM_OC4_SetConfig+0xb4>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d003      	beq.n	8006150 <TIM_OC4_SetConfig+0x74>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a12      	ldr	r2, [pc, #72]	; (8006194 <TIM_OC4_SetConfig+0xb8>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d109      	bne.n	8006164 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006156:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	019b      	lsls	r3, r3, #6
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	4313      	orrs	r3, r2
 8006162:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	621a      	str	r2, [r3, #32]
}
 800617e:	bf00      	nop
 8006180:	371c      	adds	r7, #28
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	40012c00 	.word	0x40012c00
 8006190:	40014000 	.word	0x40014000
 8006194:	40014400 	.word	0x40014400

08006198 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006198:	b480      	push	{r7}
 800619a:	b087      	sub	sp, #28
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80061dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	041b      	lsls	r3, r3, #16
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a13      	ldr	r2, [pc, #76]	; (800623c <TIM_OC5_SetConfig+0xa4>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d007      	beq.n	8006202 <TIM_OC5_SetConfig+0x6a>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a12      	ldr	r2, [pc, #72]	; (8006240 <TIM_OC5_SetConfig+0xa8>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d003      	beq.n	8006202 <TIM_OC5_SetConfig+0x6a>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a11      	ldr	r2, [pc, #68]	; (8006244 <TIM_OC5_SetConfig+0xac>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d109      	bne.n	8006216 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006208:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	021b      	lsls	r3, r3, #8
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	4313      	orrs	r3, r2
 8006214:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	621a      	str	r2, [r3, #32]
}
 8006230:	bf00      	nop
 8006232:	371c      	adds	r7, #28
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	40012c00 	.word	0x40012c00
 8006240:	40014000 	.word	0x40014000
 8006244:	40014400 	.word	0x40014400

08006248 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006248:	b480      	push	{r7}
 800624a:	b087      	sub	sp, #28
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800626e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800627a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	021b      	lsls	r3, r3, #8
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	4313      	orrs	r3, r2
 8006286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800628e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	051b      	lsls	r3, r3, #20
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	4313      	orrs	r3, r2
 800629a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a14      	ldr	r2, [pc, #80]	; (80062f0 <TIM_OC6_SetConfig+0xa8>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d007      	beq.n	80062b4 <TIM_OC6_SetConfig+0x6c>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a13      	ldr	r2, [pc, #76]	; (80062f4 <TIM_OC6_SetConfig+0xac>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d003      	beq.n	80062b4 <TIM_OC6_SetConfig+0x6c>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a12      	ldr	r2, [pc, #72]	; (80062f8 <TIM_OC6_SetConfig+0xb0>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d109      	bne.n	80062c8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	029b      	lsls	r3, r3, #10
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	685a      	ldr	r2, [r3, #4]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	621a      	str	r2, [r3, #32]
}
 80062e2:	bf00      	nop
 80062e4:	371c      	adds	r7, #28
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	40012c00 	.word	0x40012c00
 80062f4:	40014000 	.word	0x40014000
 80062f8:	40014400 	.word	0x40014400

080062fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800630c:	2b01      	cmp	r3, #1
 800630e:	d101      	bne.n	8006314 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006310:	2302      	movs	r3, #2
 8006312:	e04f      	b.n	80063b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2202      	movs	r2, #2
 8006320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a21      	ldr	r2, [pc, #132]	; (80063c0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d108      	bne.n	8006350 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006344:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	4313      	orrs	r3, r2
 800634e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006356:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	4313      	orrs	r3, r2
 8006360:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a14      	ldr	r2, [pc, #80]	; (80063c0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d009      	beq.n	8006388 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800637c:	d004      	beq.n	8006388 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a10      	ldr	r2, [pc, #64]	; (80063c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d10c      	bne.n	80063a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800638e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	4313      	orrs	r3, r2
 8006398:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr
 80063c0:	40012c00 	.word	0x40012c00
 80063c4:	40014000 	.word	0x40014000

080063c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80063d2:	2300      	movs	r3, #0
 80063d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d101      	bne.n	80063e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80063e0:	2302      	movs	r3, #2
 80063e2:	e060      	b.n	80064a6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	4313      	orrs	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	4313      	orrs	r3, r2
 8006414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4313      	orrs	r3, r2
 8006422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	4313      	orrs	r3, r2
 8006430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	695b      	ldr	r3, [r3, #20]
 800643c:	4313      	orrs	r3, r2
 800643e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644a:	4313      	orrs	r3, r2
 800644c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	041b      	lsls	r3, r3, #16
 800645a:	4313      	orrs	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a14      	ldr	r2, [pc, #80]	; (80064b4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d115      	bne.n	8006494 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	051b      	lsls	r3, r3, #20
 8006474:	4313      	orrs	r3, r2
 8006476:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	4313      	orrs	r3, r2
 8006484:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	4313      	orrs	r3, r2
 8006492:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	40012c00 	.word	0x40012c00

080064b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e040      	b.n	8006588 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800650a:	2b00      	cmp	r3, #0
 800650c:	d106      	bne.n	800651c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7fb fffc 	bl	8002514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2224      	movs	r2, #36	; 0x24
 8006520:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f022 0201 	bic.w	r2, r2, #1
 8006530:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fb30 	bl	8006b98 <UART_SetConfig>
 8006538:	4603      	mov	r3, r0
 800653a:	2b01      	cmp	r3, #1
 800653c:	d101      	bne.n	8006542 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e022      	b.n	8006588 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006546:	2b00      	cmp	r3, #0
 8006548:	d002      	beq.n	8006550 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fd30 	bl	8006fb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800655e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689a      	ldr	r2, [r3, #8]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800656e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f042 0201 	orr.w	r2, r2, #1
 800657e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fdb7 	bl	80070f4 <UART_CheckIdleState>
 8006586:	4603      	mov	r3, r0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3708      	adds	r7, #8
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b08a      	sub	sp, #40	; 0x28
 8006594:	af02      	add	r7, sp, #8
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	603b      	str	r3, [r7, #0]
 800659c:	4613      	mov	r3, r2
 800659e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065a4:	2b20      	cmp	r3, #32
 80065a6:	f040 8082 	bne.w	80066ae <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d002      	beq.n	80065b6 <HAL_UART_Transmit+0x26>
 80065b0:	88fb      	ldrh	r3, [r7, #6]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e07a      	b.n	80066b0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d101      	bne.n	80065c8 <HAL_UART_Transmit+0x38>
 80065c4:	2302      	movs	r3, #2
 80065c6:	e073      	b.n	80066b0 <HAL_UART_Transmit+0x120>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2221      	movs	r2, #33	; 0x21
 80065dc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065de:	f7fc f94b 	bl	8002878 <HAL_GetTick>
 80065e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	88fa      	ldrh	r2, [r7, #6]
 80065e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	88fa      	ldrh	r2, [r7, #6]
 80065f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065fc:	d108      	bne.n	8006610 <HAL_UART_Transmit+0x80>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d104      	bne.n	8006610 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006606:	2300      	movs	r3, #0
 8006608:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	61bb      	str	r3, [r7, #24]
 800660e:	e003      	b.n	8006618 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006614:	2300      	movs	r3, #0
 8006616:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006620:	e02d      	b.n	800667e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	2200      	movs	r2, #0
 800662a:	2180      	movs	r1, #128	; 0x80
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f000 fdaa 	bl	8007186 <UART_WaitOnFlagUntilTimeout>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d001      	beq.n	800663c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e039      	b.n	80066b0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10b      	bne.n	800665a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	881a      	ldrh	r2, [r3, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800664e:	b292      	uxth	r2, r2
 8006650:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	3302      	adds	r3, #2
 8006656:	61bb      	str	r3, [r7, #24]
 8006658:	e008      	b.n	800666c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	781a      	ldrb	r2, [r3, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	b292      	uxth	r2, r2
 8006664:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	3301      	adds	r3, #1
 800666a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006672:	b29b      	uxth	r3, r3
 8006674:	3b01      	subs	r3, #1
 8006676:	b29a      	uxth	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006684:	b29b      	uxth	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1cb      	bne.n	8006622 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	2200      	movs	r2, #0
 8006692:	2140      	movs	r1, #64	; 0x40
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f000 fd76 	bl	8007186 <UART_WaitOnFlagUntilTimeout>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d001      	beq.n	80066a4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e005      	b.n	80066b0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2220      	movs	r2, #32
 80066a8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	e000      	b.n	80066b0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80066ae:	2302      	movs	r3, #2
  }
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3720      	adds	r7, #32
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	4613      	mov	r3, r2
 80066c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066ca:	2b20      	cmp	r3, #32
 80066cc:	d131      	bne.n	8006732 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d002      	beq.n	80066da <HAL_UART_Receive_IT+0x22>
 80066d4:	88fb      	ldrh	r3, [r7, #6]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d101      	bne.n	80066de <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e02a      	b.n	8006734 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d101      	bne.n	80066ec <HAL_UART_Receive_IT+0x34>
 80066e8:	2302      	movs	r3, #2
 80066ea:	e023      	b.n	8006734 <HAL_UART_Receive_IT+0x7c>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a0f      	ldr	r2, [pc, #60]	; (800673c <HAL_UART_Receive_IT+0x84>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d00e      	beq.n	8006722 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d007      	beq.n	8006722 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006720:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006722:	88fb      	ldrh	r3, [r7, #6]
 8006724:	461a      	mov	r2, r3
 8006726:	68b9      	ldr	r1, [r7, #8]
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f000 fda9 	bl	8007280 <UART_Start_Receive_IT>
 800672e:	4603      	mov	r3, r0
 8006730:	e000      	b.n	8006734 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8006732:	2302      	movs	r3, #2
  }
}
 8006734:	4618      	mov	r0, r3
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	40008000 	.word	0x40008000

08006740 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b088      	sub	sp, #32
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006760:	69fa      	ldr	r2, [r7, #28]
 8006762:	f640 030f 	movw	r3, #2063	; 0x80f
 8006766:	4013      	ands	r3, r2
 8006768:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d113      	bne.n	8006798 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	f003 0320 	and.w	r3, r3, #32
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00e      	beq.n	8006798 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	f003 0320 	and.w	r3, r3, #32
 8006780:	2b00      	cmp	r3, #0
 8006782:	d009      	beq.n	8006798 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006788:	2b00      	cmp	r3, #0
 800678a:	f000 81ce 	beq.w	8006b2a <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	4798      	blx	r3
      }
      return;
 8006796:	e1c8      	b.n	8006b2a <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	2b00      	cmp	r3, #0
 800679c:	f000 80e3 	beq.w	8006966 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d105      	bne.n	80067b6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80067aa:	69ba      	ldr	r2, [r7, #24]
 80067ac:	4ba6      	ldr	r3, [pc, #664]	; (8006a48 <HAL_UART_IRQHandler+0x308>)
 80067ae:	4013      	ands	r3, r2
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 80d8 	beq.w	8006966 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	f003 0301 	and.w	r3, r3, #1
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d010      	beq.n	80067e2 <HAL_UART_IRQHandler+0xa2>
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00b      	beq.n	80067e2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2201      	movs	r2, #1
 80067d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067d8:	f043 0201 	orr.w	r2, r3, #1
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	f003 0302 	and.w	r3, r3, #2
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d010      	beq.n	800680e <HAL_UART_IRQHandler+0xce>
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00b      	beq.n	800680e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2202      	movs	r2, #2
 80067fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006804:	f043 0204 	orr.w	r2, r3, #4
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	f003 0304 	and.w	r3, r3, #4
 8006814:	2b00      	cmp	r3, #0
 8006816:	d010      	beq.n	800683a <HAL_UART_IRQHandler+0xfa>
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00b      	beq.n	800683a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2204      	movs	r2, #4
 8006828:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006830:	f043 0202 	orr.w	r2, r3, #2
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	f003 0308 	and.w	r3, r3, #8
 8006840:	2b00      	cmp	r3, #0
 8006842:	d015      	beq.n	8006870 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	f003 0320 	and.w	r3, r3, #32
 800684a:	2b00      	cmp	r3, #0
 800684c:	d104      	bne.n	8006858 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00b      	beq.n	8006870 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2208      	movs	r2, #8
 800685e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006866:	f043 0208 	orr.w	r2, r3, #8
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006876:	2b00      	cmp	r3, #0
 8006878:	d011      	beq.n	800689e <HAL_UART_IRQHandler+0x15e>
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00c      	beq.n	800689e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800688c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006894:	f043 0220 	orr.w	r2, r3, #32
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 8142 	beq.w	8006b2e <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	f003 0320 	and.w	r3, r3, #32
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00c      	beq.n	80068ce <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	f003 0320 	and.w	r3, r3, #32
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d007      	beq.n	80068ce <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d003      	beq.n	80068ce <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068d4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e0:	2b40      	cmp	r3, #64	; 0x40
 80068e2:	d004      	beq.n	80068ee <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d031      	beq.n	8006952 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fd4e 	bl	8007390 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068fe:	2b40      	cmp	r3, #64	; 0x40
 8006900:	d123      	bne.n	800694a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	689a      	ldr	r2, [r3, #8]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006910:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006916:	2b00      	cmp	r3, #0
 8006918:	d013      	beq.n	8006942 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800691e:	4a4b      	ldr	r2, [pc, #300]	; (8006a4c <HAL_UART_IRQHandler+0x30c>)
 8006920:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006926:	4618      	mov	r0, r3
 8006928:	f7fd fa65 	bl	8003df6 <HAL_DMA_Abort_IT>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d017      	beq.n	8006962 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800693c:	4610      	mov	r0, r2
 800693e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006940:	e00f      	b.n	8006962 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f912 	bl	8006b6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006948:	e00b      	b.n	8006962 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f90e 	bl	8006b6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006950:	e007      	b.n	8006962 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f90a 	bl	8006b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006960:	e0e5      	b.n	8006b2e <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006962:	bf00      	nop
    return;
 8006964:	e0e3      	b.n	8006b2e <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800696a:	2b01      	cmp	r3, #1
 800696c:	f040 80a9 	bne.w	8006ac2 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	f003 0310 	and.w	r3, r3, #16
 8006976:	2b00      	cmp	r3, #0
 8006978:	f000 80a3 	beq.w	8006ac2 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	f003 0310 	and.w	r3, r3, #16
 8006982:	2b00      	cmp	r3, #0
 8006984:	f000 809d 	beq.w	8006ac2 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2210      	movs	r2, #16
 800698e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699a:	2b40      	cmp	r3, #64	; 0x40
 800699c:	d158      	bne.n	8006a50 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80069a8:	893b      	ldrh	r3, [r7, #8]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f000 80c1 	beq.w	8006b32 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80069b6:	893a      	ldrh	r2, [r7, #8]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	f080 80ba 	bcs.w	8006b32 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	893a      	ldrh	r2, [r7, #8]
 80069c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0320 	and.w	r3, r3, #32
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d12a      	bne.n	8006a2c <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069e4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	689a      	ldr	r2, [r3, #8]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f022 0201 	bic.w	r2, r2, #1
 80069f4:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	689a      	ldr	r2, [r3, #8]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a04:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2220      	movs	r2, #32
 8006a0a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f022 0210 	bic.w	r2, r2, #16
 8006a20:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fd f9a7 	bl	8003d7a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	4619      	mov	r1, r3
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 f89d 	bl	8006b80 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006a46:	e074      	b.n	8006b32 <HAL_UART_IRQHandler+0x3f2>
 8006a48:	04000120 	.word	0x04000120
 8006a4c:	080073ef 	.word	0x080073ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d063      	beq.n	8006b36 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8006a6e:	897b      	ldrh	r3, [r7, #10]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d060      	beq.n	8006b36 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006a82:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	689a      	ldr	r2, [r3, #8]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f022 0201 	bic.w	r2, r2, #1
 8006a92:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2220      	movs	r2, #32
 8006a98:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f022 0210 	bic.w	r2, r2, #16
 8006ab4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ab6:	897b      	ldrh	r3, [r7, #10]
 8006ab8:	4619      	mov	r1, r3
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f860 	bl	8006b80 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006ac0:	e039      	b.n	8006b36 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00d      	beq.n	8006ae8 <HAL_UART_IRQHandler+0x3a8>
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d008      	beq.n	8006ae8 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006ade:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 fd8b 	bl	80075fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ae6:	e029      	b.n	8006b3c <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00d      	beq.n	8006b0e <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d008      	beq.n	8006b0e <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d01a      	beq.n	8006b3a <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	4798      	blx	r3
    }
    return;
 8006b0c:	e015      	b.n	8006b3a <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d011      	beq.n	8006b3c <HAL_UART_IRQHandler+0x3fc>
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00c      	beq.n	8006b3c <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fc79 	bl	800741a <UART_EndTransmit_IT>
    return;
 8006b28:	e008      	b.n	8006b3c <HAL_UART_IRQHandler+0x3fc>
      return;
 8006b2a:	bf00      	nop
 8006b2c:	e006      	b.n	8006b3c <HAL_UART_IRQHandler+0x3fc>
    return;
 8006b2e:	bf00      	nop
 8006b30:	e004      	b.n	8006b3c <HAL_UART_IRQHandler+0x3fc>
      return;
 8006b32:	bf00      	nop
 8006b34:	e002      	b.n	8006b3c <HAL_UART_IRQHandler+0x3fc>
      return;
 8006b36:	bf00      	nop
 8006b38:	e000      	b.n	8006b3c <HAL_UART_IRQHandler+0x3fc>
    return;
 8006b3a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006b3c:	3720      	adds	r7, #32
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop

08006b44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	460b      	mov	r3, r1
 8006b8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b98:	b5b0      	push	{r4, r5, r7, lr}
 8006b9a:	b088      	sub	sp, #32
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	689a      	ldr	r2, [r3, #8]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	431a      	orrs	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	431a      	orrs	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	69db      	ldr	r3, [r3, #28]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	4baf      	ldr	r3, [pc, #700]	; (8006e80 <UART_SetConfig+0x2e8>)
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	6812      	ldr	r2, [r2, #0]
 8006bca:	69f9      	ldr	r1, [r7, #28]
 8006bcc:	430b      	orrs	r3, r1
 8006bce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68da      	ldr	r2, [r3, #12]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	430a      	orrs	r2, r1
 8006be4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4aa4      	ldr	r2, [pc, #656]	; (8006e84 <UART_SetConfig+0x2ec>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d004      	beq.n	8006c00 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	69fa      	ldr	r2, [r7, #28]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	69fa      	ldr	r2, [r7, #28]
 8006c10:	430a      	orrs	r2, r1
 8006c12:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a9b      	ldr	r2, [pc, #620]	; (8006e88 <UART_SetConfig+0x2f0>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d121      	bne.n	8006c62 <UART_SetConfig+0xca>
 8006c1e:	4b9b      	ldr	r3, [pc, #620]	; (8006e8c <UART_SetConfig+0x2f4>)
 8006c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c24:	f003 0303 	and.w	r3, r3, #3
 8006c28:	2b03      	cmp	r3, #3
 8006c2a:	d817      	bhi.n	8006c5c <UART_SetConfig+0xc4>
 8006c2c:	a201      	add	r2, pc, #4	; (adr r2, 8006c34 <UART_SetConfig+0x9c>)
 8006c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c32:	bf00      	nop
 8006c34:	08006c45 	.word	0x08006c45
 8006c38:	08006c51 	.word	0x08006c51
 8006c3c:	08006c4b 	.word	0x08006c4b
 8006c40:	08006c57 	.word	0x08006c57
 8006c44:	2301      	movs	r3, #1
 8006c46:	76fb      	strb	r3, [r7, #27]
 8006c48:	e070      	b.n	8006d2c <UART_SetConfig+0x194>
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	76fb      	strb	r3, [r7, #27]
 8006c4e:	e06d      	b.n	8006d2c <UART_SetConfig+0x194>
 8006c50:	2304      	movs	r3, #4
 8006c52:	76fb      	strb	r3, [r7, #27]
 8006c54:	e06a      	b.n	8006d2c <UART_SetConfig+0x194>
 8006c56:	2308      	movs	r3, #8
 8006c58:	76fb      	strb	r3, [r7, #27]
 8006c5a:	e067      	b.n	8006d2c <UART_SetConfig+0x194>
 8006c5c:	2310      	movs	r3, #16
 8006c5e:	76fb      	strb	r3, [r7, #27]
 8006c60:	e064      	b.n	8006d2c <UART_SetConfig+0x194>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a8a      	ldr	r2, [pc, #552]	; (8006e90 <UART_SetConfig+0x2f8>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d132      	bne.n	8006cd2 <UART_SetConfig+0x13a>
 8006c6c:	4b87      	ldr	r3, [pc, #540]	; (8006e8c <UART_SetConfig+0x2f4>)
 8006c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c72:	f003 030c 	and.w	r3, r3, #12
 8006c76:	2b0c      	cmp	r3, #12
 8006c78:	d828      	bhi.n	8006ccc <UART_SetConfig+0x134>
 8006c7a:	a201      	add	r2, pc, #4	; (adr r2, 8006c80 <UART_SetConfig+0xe8>)
 8006c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c80:	08006cb5 	.word	0x08006cb5
 8006c84:	08006ccd 	.word	0x08006ccd
 8006c88:	08006ccd 	.word	0x08006ccd
 8006c8c:	08006ccd 	.word	0x08006ccd
 8006c90:	08006cc1 	.word	0x08006cc1
 8006c94:	08006ccd 	.word	0x08006ccd
 8006c98:	08006ccd 	.word	0x08006ccd
 8006c9c:	08006ccd 	.word	0x08006ccd
 8006ca0:	08006cbb 	.word	0x08006cbb
 8006ca4:	08006ccd 	.word	0x08006ccd
 8006ca8:	08006ccd 	.word	0x08006ccd
 8006cac:	08006ccd 	.word	0x08006ccd
 8006cb0:	08006cc7 	.word	0x08006cc7
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	76fb      	strb	r3, [r7, #27]
 8006cb8:	e038      	b.n	8006d2c <UART_SetConfig+0x194>
 8006cba:	2302      	movs	r3, #2
 8006cbc:	76fb      	strb	r3, [r7, #27]
 8006cbe:	e035      	b.n	8006d2c <UART_SetConfig+0x194>
 8006cc0:	2304      	movs	r3, #4
 8006cc2:	76fb      	strb	r3, [r7, #27]
 8006cc4:	e032      	b.n	8006d2c <UART_SetConfig+0x194>
 8006cc6:	2308      	movs	r3, #8
 8006cc8:	76fb      	strb	r3, [r7, #27]
 8006cca:	e02f      	b.n	8006d2c <UART_SetConfig+0x194>
 8006ccc:	2310      	movs	r3, #16
 8006cce:	76fb      	strb	r3, [r7, #27]
 8006cd0:	e02c      	b.n	8006d2c <UART_SetConfig+0x194>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a6b      	ldr	r2, [pc, #428]	; (8006e84 <UART_SetConfig+0x2ec>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d125      	bne.n	8006d28 <UART_SetConfig+0x190>
 8006cdc:	4b6b      	ldr	r3, [pc, #428]	; (8006e8c <UART_SetConfig+0x2f4>)
 8006cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ce2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ce6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cea:	d017      	beq.n	8006d1c <UART_SetConfig+0x184>
 8006cec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cf0:	d817      	bhi.n	8006d22 <UART_SetConfig+0x18a>
 8006cf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cf6:	d00b      	beq.n	8006d10 <UART_SetConfig+0x178>
 8006cf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cfc:	d811      	bhi.n	8006d22 <UART_SetConfig+0x18a>
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d003      	beq.n	8006d0a <UART_SetConfig+0x172>
 8006d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d06:	d006      	beq.n	8006d16 <UART_SetConfig+0x17e>
 8006d08:	e00b      	b.n	8006d22 <UART_SetConfig+0x18a>
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	76fb      	strb	r3, [r7, #27]
 8006d0e:	e00d      	b.n	8006d2c <UART_SetConfig+0x194>
 8006d10:	2302      	movs	r3, #2
 8006d12:	76fb      	strb	r3, [r7, #27]
 8006d14:	e00a      	b.n	8006d2c <UART_SetConfig+0x194>
 8006d16:	2304      	movs	r3, #4
 8006d18:	76fb      	strb	r3, [r7, #27]
 8006d1a:	e007      	b.n	8006d2c <UART_SetConfig+0x194>
 8006d1c:	2308      	movs	r3, #8
 8006d1e:	76fb      	strb	r3, [r7, #27]
 8006d20:	e004      	b.n	8006d2c <UART_SetConfig+0x194>
 8006d22:	2310      	movs	r3, #16
 8006d24:	76fb      	strb	r3, [r7, #27]
 8006d26:	e001      	b.n	8006d2c <UART_SetConfig+0x194>
 8006d28:	2310      	movs	r3, #16
 8006d2a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a54      	ldr	r2, [pc, #336]	; (8006e84 <UART_SetConfig+0x2ec>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d173      	bne.n	8006e1e <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d36:	7efb      	ldrb	r3, [r7, #27]
 8006d38:	2b08      	cmp	r3, #8
 8006d3a:	d824      	bhi.n	8006d86 <UART_SetConfig+0x1ee>
 8006d3c:	a201      	add	r2, pc, #4	; (adr r2, 8006d44 <UART_SetConfig+0x1ac>)
 8006d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d42:	bf00      	nop
 8006d44:	08006d69 	.word	0x08006d69
 8006d48:	08006d87 	.word	0x08006d87
 8006d4c:	08006d71 	.word	0x08006d71
 8006d50:	08006d87 	.word	0x08006d87
 8006d54:	08006d77 	.word	0x08006d77
 8006d58:	08006d87 	.word	0x08006d87
 8006d5c:	08006d87 	.word	0x08006d87
 8006d60:	08006d87 	.word	0x08006d87
 8006d64:	08006d7f 	.word	0x08006d7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d68:	f7fe f842 	bl	8004df0 <HAL_RCC_GetPCLK1Freq>
 8006d6c:	6178      	str	r0, [r7, #20]
        break;
 8006d6e:	e00f      	b.n	8006d90 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d70:	4b48      	ldr	r3, [pc, #288]	; (8006e94 <UART_SetConfig+0x2fc>)
 8006d72:	617b      	str	r3, [r7, #20]
        break;
 8006d74:	e00c      	b.n	8006d90 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d76:	f7fd ffa3 	bl	8004cc0 <HAL_RCC_GetSysClockFreq>
 8006d7a:	6178      	str	r0, [r7, #20]
        break;
 8006d7c:	e008      	b.n	8006d90 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d82:	617b      	str	r3, [r7, #20]
        break;
 8006d84:	e004      	b.n	8006d90 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8006d86:	2300      	movs	r3, #0
 8006d88:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	76bb      	strb	r3, [r7, #26]
        break;
 8006d8e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f000 80fe 	beq.w	8006f94 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	005b      	lsls	r3, r3, #1
 8006da0:	4413      	add	r3, r2
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d305      	bcc.n	8006db4 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d902      	bls.n	8006dba <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	76bb      	strb	r3, [r7, #26]
 8006db8:	e0ec      	b.n	8006f94 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f04f 0100 	mov.w	r1, #0
 8006dc2:	f04f 0200 	mov.w	r2, #0
 8006dc6:	f04f 0300 	mov.w	r3, #0
 8006dca:	020b      	lsls	r3, r1, #8
 8006dcc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006dd0:	0202      	lsls	r2, r0, #8
 8006dd2:	6879      	ldr	r1, [r7, #4]
 8006dd4:	6849      	ldr	r1, [r1, #4]
 8006dd6:	0849      	lsrs	r1, r1, #1
 8006dd8:	4608      	mov	r0, r1
 8006dda:	f04f 0100 	mov.w	r1, #0
 8006dde:	1814      	adds	r4, r2, r0
 8006de0:	eb43 0501 	adc.w	r5, r3, r1
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	461a      	mov	r2, r3
 8006dea:	f04f 0300 	mov.w	r3, #0
 8006dee:	4620      	mov	r0, r4
 8006df0:	4629      	mov	r1, r5
 8006df2:	f7f9 febb 	bl	8000b6c <__aeabi_uldivmod>
 8006df6:	4602      	mov	r2, r0
 8006df8:	460b      	mov	r3, r1
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e04:	d308      	bcc.n	8006e18 <UART_SetConfig+0x280>
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e0c:	d204      	bcs.n	8006e18 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	60da      	str	r2, [r3, #12]
 8006e16:	e0bd      	b.n	8006f94 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	76bb      	strb	r3, [r7, #26]
 8006e1c:	e0ba      	b.n	8006f94 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	69db      	ldr	r3, [r3, #28]
 8006e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e26:	d168      	bne.n	8006efa <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8006e28:	7efb      	ldrb	r3, [r7, #27]
 8006e2a:	2b08      	cmp	r3, #8
 8006e2c:	d834      	bhi.n	8006e98 <UART_SetConfig+0x300>
 8006e2e:	a201      	add	r2, pc, #4	; (adr r2, 8006e34 <UART_SetConfig+0x29c>)
 8006e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e34:	08006e59 	.word	0x08006e59
 8006e38:	08006e61 	.word	0x08006e61
 8006e3c:	08006e69 	.word	0x08006e69
 8006e40:	08006e99 	.word	0x08006e99
 8006e44:	08006e6f 	.word	0x08006e6f
 8006e48:	08006e99 	.word	0x08006e99
 8006e4c:	08006e99 	.word	0x08006e99
 8006e50:	08006e99 	.word	0x08006e99
 8006e54:	08006e77 	.word	0x08006e77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e58:	f7fd ffca 	bl	8004df0 <HAL_RCC_GetPCLK1Freq>
 8006e5c:	6178      	str	r0, [r7, #20]
        break;
 8006e5e:	e020      	b.n	8006ea2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e60:	f7fd ffdc 	bl	8004e1c <HAL_RCC_GetPCLK2Freq>
 8006e64:	6178      	str	r0, [r7, #20]
        break;
 8006e66:	e01c      	b.n	8006ea2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e68:	4b0a      	ldr	r3, [pc, #40]	; (8006e94 <UART_SetConfig+0x2fc>)
 8006e6a:	617b      	str	r3, [r7, #20]
        break;
 8006e6c:	e019      	b.n	8006ea2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e6e:	f7fd ff27 	bl	8004cc0 <HAL_RCC_GetSysClockFreq>
 8006e72:	6178      	str	r0, [r7, #20]
        break;
 8006e74:	e015      	b.n	8006ea2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e7a:	617b      	str	r3, [r7, #20]
        break;
 8006e7c:	e011      	b.n	8006ea2 <UART_SetConfig+0x30a>
 8006e7e:	bf00      	nop
 8006e80:	efff69f3 	.word	0xefff69f3
 8006e84:	40008000 	.word	0x40008000
 8006e88:	40013800 	.word	0x40013800
 8006e8c:	40021000 	.word	0x40021000
 8006e90:	40004400 	.word	0x40004400
 8006e94:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	76bb      	strb	r3, [r7, #26]
        break;
 8006ea0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d075      	beq.n	8006f94 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	005a      	lsls	r2, r3, #1
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	085b      	lsrs	r3, r3, #1
 8006eb2:	441a      	add	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	2b0f      	cmp	r3, #15
 8006ec4:	d916      	bls.n	8006ef4 <UART_SetConfig+0x35c>
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ecc:	d212      	bcs.n	8006ef4 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	f023 030f 	bic.w	r3, r3, #15
 8006ed6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	085b      	lsrs	r3, r3, #1
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	f003 0307 	and.w	r3, r3, #7
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	89fb      	ldrh	r3, [r7, #14]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	89fa      	ldrh	r2, [r7, #14]
 8006ef0:	60da      	str	r2, [r3, #12]
 8006ef2:	e04f      	b.n	8006f94 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	76bb      	strb	r3, [r7, #26]
 8006ef8:	e04c      	b.n	8006f94 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006efa:	7efb      	ldrb	r3, [r7, #27]
 8006efc:	2b08      	cmp	r3, #8
 8006efe:	d828      	bhi.n	8006f52 <UART_SetConfig+0x3ba>
 8006f00:	a201      	add	r2, pc, #4	; (adr r2, 8006f08 <UART_SetConfig+0x370>)
 8006f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f06:	bf00      	nop
 8006f08:	08006f2d 	.word	0x08006f2d
 8006f0c:	08006f35 	.word	0x08006f35
 8006f10:	08006f3d 	.word	0x08006f3d
 8006f14:	08006f53 	.word	0x08006f53
 8006f18:	08006f43 	.word	0x08006f43
 8006f1c:	08006f53 	.word	0x08006f53
 8006f20:	08006f53 	.word	0x08006f53
 8006f24:	08006f53 	.word	0x08006f53
 8006f28:	08006f4b 	.word	0x08006f4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f2c:	f7fd ff60 	bl	8004df0 <HAL_RCC_GetPCLK1Freq>
 8006f30:	6178      	str	r0, [r7, #20]
        break;
 8006f32:	e013      	b.n	8006f5c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f34:	f7fd ff72 	bl	8004e1c <HAL_RCC_GetPCLK2Freq>
 8006f38:	6178      	str	r0, [r7, #20]
        break;
 8006f3a:	e00f      	b.n	8006f5c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f3c:	4b1b      	ldr	r3, [pc, #108]	; (8006fac <UART_SetConfig+0x414>)
 8006f3e:	617b      	str	r3, [r7, #20]
        break;
 8006f40:	e00c      	b.n	8006f5c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f42:	f7fd febd 	bl	8004cc0 <HAL_RCC_GetSysClockFreq>
 8006f46:	6178      	str	r0, [r7, #20]
        break;
 8006f48:	e008      	b.n	8006f5c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f4e:	617b      	str	r3, [r7, #20]
        break;
 8006f50:	e004      	b.n	8006f5c <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8006f52:	2300      	movs	r3, #0
 8006f54:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	76bb      	strb	r3, [r7, #26]
        break;
 8006f5a:	bf00      	nop
    }

    if (pclk != 0U)
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d018      	beq.n	8006f94 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	085a      	lsrs	r2, r3, #1
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	441a      	add	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	2b0f      	cmp	r3, #15
 8006f7c:	d908      	bls.n	8006f90 <UART_SetConfig+0x3f8>
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f84:	d204      	bcs.n	8006f90 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	60da      	str	r2, [r3, #12]
 8006f8e:	e001      	b.n	8006f94 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006fa0:	7ebb      	ldrb	r3, [r7, #26]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3720      	adds	r7, #32
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8006faa:	bf00      	nop
 8006fac:	00f42400 	.word	0x00f42400

08006fb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbc:	f003 0301 	and.w	r3, r3, #1
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00a      	beq.n	8006fda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fde:	f003 0302 	and.w	r3, r3, #2
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00a      	beq.n	8006ffc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007000:	f003 0304 	and.w	r3, r3, #4
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00a      	beq.n	800701e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	430a      	orrs	r2, r1
 800701c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007022:	f003 0308 	and.w	r3, r3, #8
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00a      	beq.n	8007040 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	430a      	orrs	r2, r1
 800703e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007044:	f003 0310 	and.w	r3, r3, #16
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00a      	beq.n	8007062 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	430a      	orrs	r2, r1
 8007060:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007066:	f003 0320 	and.w	r3, r3, #32
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00a      	beq.n	8007084 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	430a      	orrs	r2, r1
 8007082:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800708c:	2b00      	cmp	r3, #0
 800708e:	d01a      	beq.n	80070c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070ae:	d10a      	bne.n	80070c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	430a      	orrs	r2, r1
 80070c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00a      	beq.n	80070e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	430a      	orrs	r2, r1
 80070e6:	605a      	str	r2, [r3, #4]
  }
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af02      	add	r7, sp, #8
 80070fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007104:	f7fb fbb8 	bl	8002878 <HAL_GetTick>
 8007108:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0308 	and.w	r3, r3, #8
 8007114:	2b08      	cmp	r3, #8
 8007116:	d10e      	bne.n	8007136 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007118:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f82d 	bl	8007186 <UART_WaitOnFlagUntilTimeout>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d001      	beq.n	8007136 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e023      	b.n	800717e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 0304 	and.w	r3, r3, #4
 8007140:	2b04      	cmp	r3, #4
 8007142:	d10e      	bne.n	8007162 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007144:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007148:	9300      	str	r3, [sp, #0]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2200      	movs	r2, #0
 800714e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f817 	bl	8007186 <UART_WaitOnFlagUntilTimeout>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d001      	beq.n	8007162 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e00d      	b.n	800717e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2220      	movs	r2, #32
 8007166:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2220      	movs	r2, #32
 800716c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b084      	sub	sp, #16
 800718a:	af00      	add	r7, sp, #0
 800718c:	60f8      	str	r0, [r7, #12]
 800718e:	60b9      	str	r1, [r7, #8]
 8007190:	603b      	str	r3, [r7, #0]
 8007192:	4613      	mov	r3, r2
 8007194:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007196:	e05e      	b.n	8007256 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800719e:	d05a      	beq.n	8007256 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071a0:	f7fb fb6a 	bl	8002878 <HAL_GetTick>
 80071a4:	4602      	mov	r2, r0
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	69ba      	ldr	r2, [r7, #24]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d302      	bcc.n	80071b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d11b      	bne.n	80071ee <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80071c4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	689a      	ldr	r2, [r3, #8]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f022 0201 	bic.w	r2, r2, #1
 80071d4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2220      	movs	r2, #32
 80071da:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2220      	movs	r2, #32
 80071e0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e043      	b.n	8007276 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 0304 	and.w	r3, r3, #4
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d02c      	beq.n	8007256 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	69db      	ldr	r3, [r3, #28]
 8007202:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800720a:	d124      	bne.n	8007256 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007214:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007224:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	689a      	ldr	r2, [r3, #8]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f022 0201 	bic.w	r2, r2, #1
 8007234:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2220      	movs	r2, #32
 800723a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2220      	movs	r2, #32
 8007240:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2220      	movs	r2, #32
 8007246:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	e00f      	b.n	8007276 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	69da      	ldr	r2, [r3, #28]
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	4013      	ands	r3, r2
 8007260:	68ba      	ldr	r2, [r7, #8]
 8007262:	429a      	cmp	r2, r3
 8007264:	bf0c      	ite	eq
 8007266:	2301      	moveq	r3, #1
 8007268:	2300      	movne	r3, #0
 800726a:	b2db      	uxtb	r3, r3
 800726c:	461a      	mov	r2, r3
 800726e:	79fb      	ldrb	r3, [r7, #7]
 8007270:	429a      	cmp	r2, r3
 8007272:	d091      	beq.n	8007198 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
	...

08007280 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	4613      	mov	r3, r2
 800728c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	88fa      	ldrh	r2, [r7, #6]
 8007298:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	88fa      	ldrh	r2, [r7, #6]
 80072a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072b2:	d10e      	bne.n	80072d2 <UART_Start_Receive_IT+0x52>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d105      	bne.n	80072c8 <UART_Start_Receive_IT+0x48>
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f240 12ff 	movw	r2, #511	; 0x1ff
 80072c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072c6:	e02d      	b.n	8007324 <UART_Start_Receive_IT+0xa4>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	22ff      	movs	r2, #255	; 0xff
 80072cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072d0:	e028      	b.n	8007324 <UART_Start_Receive_IT+0xa4>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d10d      	bne.n	80072f6 <UART_Start_Receive_IT+0x76>
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d104      	bne.n	80072ec <UART_Start_Receive_IT+0x6c>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	22ff      	movs	r2, #255	; 0xff
 80072e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072ea:	e01b      	b.n	8007324 <UART_Start_Receive_IT+0xa4>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	227f      	movs	r2, #127	; 0x7f
 80072f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072f4:	e016      	b.n	8007324 <UART_Start_Receive_IT+0xa4>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072fe:	d10d      	bne.n	800731c <UART_Start_Receive_IT+0x9c>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d104      	bne.n	8007312 <UART_Start_Receive_IT+0x92>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	227f      	movs	r2, #127	; 0x7f
 800730c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007310:	e008      	b.n	8007324 <UART_Start_Receive_IT+0xa4>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	223f      	movs	r2, #63	; 0x3f
 8007316:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800731a:	e003      	b.n	8007324 <UART_Start_Receive_IT+0xa4>
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2222      	movs	r2, #34	; 0x22
 8007330:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	689a      	ldr	r2, [r3, #8]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f042 0201 	orr.w	r2, r2, #1
 8007340:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800734a:	d107      	bne.n	800735c <UART_Start_Receive_IT+0xdc>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d103      	bne.n	800735c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	4a0c      	ldr	r2, [pc, #48]	; (8007388 <UART_Start_Receive_IT+0x108>)
 8007358:	665a      	str	r2, [r3, #100]	; 0x64
 800735a:	e002      	b.n	8007362 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	4a0b      	ldr	r2, [pc, #44]	; (800738c <UART_Start_Receive_IT+0x10c>)
 8007360:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007378:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3714      	adds	r7, #20
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr
 8007388:	08007525 	.word	0x08007525
 800738c:	0800744d 	.word	0x0800744d

08007390 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80073a6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	689a      	ldr	r2, [r3, #8]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f022 0201 	bic.w	r2, r2, #1
 80073b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d107      	bne.n	80073d0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f022 0210 	bic.w	r2, r2, #16
 80073ce:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2220      	movs	r2, #32
 80073d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80073e2:	bf00      	nop
 80073e4:	370c      	adds	r7, #12
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b084      	sub	sp, #16
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f7ff fbad 	bl	8006b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007412:	bf00      	nop
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b082      	sub	sp, #8
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007430:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2220      	movs	r2, #32
 8007436:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f7ff fb80 	bl	8006b44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007444:	bf00      	nop
 8007446:	3708      	adds	r7, #8
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800745a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007460:	2b22      	cmp	r3, #34	; 0x22
 8007462:	d151      	bne.n	8007508 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800746a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800746c:	89bb      	ldrh	r3, [r7, #12]
 800746e:	b2d9      	uxtb	r1, r3
 8007470:	89fb      	ldrh	r3, [r7, #14]
 8007472:	b2da      	uxtb	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007478:	400a      	ands	r2, r1
 800747a:	b2d2      	uxtb	r2, r2
 800747c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007482:	1c5a      	adds	r2, r3, #1
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800748e:	b29b      	uxth	r3, r3
 8007490:	3b01      	subs	r3, #1
 8007492:	b29a      	uxth	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d13a      	bne.n	800751c <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80074b4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	689a      	ldr	r2, [r3, #8]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f022 0201 	bic.w	r2, r2, #1
 80074c4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2220      	movs	r2, #32
 80074ca:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d10f      	bne.n	80074fa <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f022 0210 	bic.w	r2, r2, #16
 80074e8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80074f0:	4619      	mov	r1, r3
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7ff fb44 	bl	8006b80 <HAL_UARTEx_RxEventCallback>
 80074f8:	e002      	b.n	8007500 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f7ff fb2c 	bl	8006b58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007506:	e009      	b.n	800751c <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	8b1b      	ldrh	r3, [r3, #24]
 800750e:	b29a      	uxth	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f042 0208 	orr.w	r2, r2, #8
 8007518:	b292      	uxth	r2, r2
 800751a:	831a      	strh	r2, [r3, #24]
}
 800751c:	bf00      	nop
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007532:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007538:	2b22      	cmp	r3, #34	; 0x22
 800753a:	d151      	bne.n	80075e0 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007542:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007548:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800754a:	89ba      	ldrh	r2, [r7, #12]
 800754c:	89fb      	ldrh	r3, [r7, #14]
 800754e:	4013      	ands	r3, r2
 8007550:	b29a      	uxth	r2, r3
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800755a:	1c9a      	adds	r2, r3, #2
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007566:	b29b      	uxth	r3, r3
 8007568:	3b01      	subs	r3, #1
 800756a:	b29a      	uxth	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007578:	b29b      	uxth	r3, r3
 800757a:	2b00      	cmp	r3, #0
 800757c:	d13a      	bne.n	80075f4 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800758c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	689a      	ldr	r2, [r3, #8]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f022 0201 	bic.w	r2, r2, #1
 800759c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2220      	movs	r2, #32
 80075a2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d10f      	bne.n	80075d2 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f022 0210 	bic.w	r2, r2, #16
 80075c0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80075c8:	4619      	mov	r1, r3
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7ff fad8 	bl	8006b80 <HAL_UARTEx_RxEventCallback>
 80075d0:	e002      	b.n	80075d8 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f7ff fac0 	bl	8006b58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80075de:	e009      	b.n	80075f4 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	8b1b      	ldrh	r3, [r3, #24]
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f042 0208 	orr.w	r2, r2, #8
 80075f0:	b292      	uxth	r2, r2
 80075f2:	831a      	strh	r2, [r3, #24]
}
 80075f4:	bf00      	nop
 80075f6:	3710      	adds	r7, #16
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007604:	bf00      	nop
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <__libc_init_array>:
 8007610:	b570      	push	{r4, r5, r6, lr}
 8007612:	4d0d      	ldr	r5, [pc, #52]	; (8007648 <__libc_init_array+0x38>)
 8007614:	4c0d      	ldr	r4, [pc, #52]	; (800764c <__libc_init_array+0x3c>)
 8007616:	1b64      	subs	r4, r4, r5
 8007618:	10a4      	asrs	r4, r4, #2
 800761a:	2600      	movs	r6, #0
 800761c:	42a6      	cmp	r6, r4
 800761e:	d109      	bne.n	8007634 <__libc_init_array+0x24>
 8007620:	4d0b      	ldr	r5, [pc, #44]	; (8007650 <__libc_init_array+0x40>)
 8007622:	4c0c      	ldr	r4, [pc, #48]	; (8007654 <__libc_init_array+0x44>)
 8007624:	f001 f8a6 	bl	8008774 <_init>
 8007628:	1b64      	subs	r4, r4, r5
 800762a:	10a4      	asrs	r4, r4, #2
 800762c:	2600      	movs	r6, #0
 800762e:	42a6      	cmp	r6, r4
 8007630:	d105      	bne.n	800763e <__libc_init_array+0x2e>
 8007632:	bd70      	pop	{r4, r5, r6, pc}
 8007634:	f855 3b04 	ldr.w	r3, [r5], #4
 8007638:	4798      	blx	r3
 800763a:	3601      	adds	r6, #1
 800763c:	e7ee      	b.n	800761c <__libc_init_array+0xc>
 800763e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007642:	4798      	blx	r3
 8007644:	3601      	adds	r6, #1
 8007646:	e7f2      	b.n	800762e <__libc_init_array+0x1e>
 8007648:	080089b8 	.word	0x080089b8
 800764c:	080089b8 	.word	0x080089b8
 8007650:	080089b8 	.word	0x080089b8
 8007654:	080089bc 	.word	0x080089bc

08007658 <memset>:
 8007658:	4402      	add	r2, r0
 800765a:	4603      	mov	r3, r0
 800765c:	4293      	cmp	r3, r2
 800765e:	d100      	bne.n	8007662 <memset+0xa>
 8007660:	4770      	bx	lr
 8007662:	f803 1b01 	strb.w	r1, [r3], #1
 8007666:	e7f9      	b.n	800765c <memset+0x4>

08007668 <cos>:
 8007668:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800766a:	ec53 2b10 	vmov	r2, r3, d0
 800766e:	4824      	ldr	r0, [pc, #144]	; (8007700 <cos+0x98>)
 8007670:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007674:	4281      	cmp	r1, r0
 8007676:	dc06      	bgt.n	8007686 <cos+0x1e>
 8007678:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 80076f8 <cos+0x90>
 800767c:	f000 faa4 	bl	8007bc8 <__kernel_cos>
 8007680:	ec51 0b10 	vmov	r0, r1, d0
 8007684:	e007      	b.n	8007696 <cos+0x2e>
 8007686:	481f      	ldr	r0, [pc, #124]	; (8007704 <cos+0x9c>)
 8007688:	4281      	cmp	r1, r0
 800768a:	dd09      	ble.n	80076a0 <cos+0x38>
 800768c:	ee10 0a10 	vmov	r0, s0
 8007690:	4619      	mov	r1, r3
 8007692:	f7f8 fda1 	bl	80001d8 <__aeabi_dsub>
 8007696:	ec41 0b10 	vmov	d0, r0, r1
 800769a:	b005      	add	sp, #20
 800769c:	f85d fb04 	ldr.w	pc, [sp], #4
 80076a0:	4668      	mov	r0, sp
 80076a2:	f000 f885 	bl	80077b0 <__ieee754_rem_pio2>
 80076a6:	f000 0003 	and.w	r0, r0, #3
 80076aa:	2801      	cmp	r0, #1
 80076ac:	d007      	beq.n	80076be <cos+0x56>
 80076ae:	2802      	cmp	r0, #2
 80076b0:	d012      	beq.n	80076d8 <cos+0x70>
 80076b2:	b9c0      	cbnz	r0, 80076e6 <cos+0x7e>
 80076b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80076b8:	ed9d 0b00 	vldr	d0, [sp]
 80076bc:	e7de      	b.n	800767c <cos+0x14>
 80076be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80076c2:	ed9d 0b00 	vldr	d0, [sp]
 80076c6:	f000 fe87 	bl	80083d8 <__kernel_sin>
 80076ca:	ec53 2b10 	vmov	r2, r3, d0
 80076ce:	ee10 0a10 	vmov	r0, s0
 80076d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80076d6:	e7de      	b.n	8007696 <cos+0x2e>
 80076d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80076dc:	ed9d 0b00 	vldr	d0, [sp]
 80076e0:	f000 fa72 	bl	8007bc8 <__kernel_cos>
 80076e4:	e7f1      	b.n	80076ca <cos+0x62>
 80076e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80076ea:	ed9d 0b00 	vldr	d0, [sp]
 80076ee:	2001      	movs	r0, #1
 80076f0:	f000 fe72 	bl	80083d8 <__kernel_sin>
 80076f4:	e7c4      	b.n	8007680 <cos+0x18>
 80076f6:	bf00      	nop
	...
 8007700:	3fe921fb 	.word	0x3fe921fb
 8007704:	7fefffff 	.word	0x7fefffff

08007708 <sin>:
 8007708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800770a:	ec53 2b10 	vmov	r2, r3, d0
 800770e:	4826      	ldr	r0, [pc, #152]	; (80077a8 <sin+0xa0>)
 8007710:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007714:	4281      	cmp	r1, r0
 8007716:	dc07      	bgt.n	8007728 <sin+0x20>
 8007718:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80077a0 <sin+0x98>
 800771c:	2000      	movs	r0, #0
 800771e:	f000 fe5b 	bl	80083d8 <__kernel_sin>
 8007722:	ec51 0b10 	vmov	r0, r1, d0
 8007726:	e007      	b.n	8007738 <sin+0x30>
 8007728:	4820      	ldr	r0, [pc, #128]	; (80077ac <sin+0xa4>)
 800772a:	4281      	cmp	r1, r0
 800772c:	dd09      	ble.n	8007742 <sin+0x3a>
 800772e:	ee10 0a10 	vmov	r0, s0
 8007732:	4619      	mov	r1, r3
 8007734:	f7f8 fd50 	bl	80001d8 <__aeabi_dsub>
 8007738:	ec41 0b10 	vmov	d0, r0, r1
 800773c:	b005      	add	sp, #20
 800773e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007742:	4668      	mov	r0, sp
 8007744:	f000 f834 	bl	80077b0 <__ieee754_rem_pio2>
 8007748:	f000 0003 	and.w	r0, r0, #3
 800774c:	2801      	cmp	r0, #1
 800774e:	d008      	beq.n	8007762 <sin+0x5a>
 8007750:	2802      	cmp	r0, #2
 8007752:	d00d      	beq.n	8007770 <sin+0x68>
 8007754:	b9d0      	cbnz	r0, 800778c <sin+0x84>
 8007756:	ed9d 1b02 	vldr	d1, [sp, #8]
 800775a:	ed9d 0b00 	vldr	d0, [sp]
 800775e:	2001      	movs	r0, #1
 8007760:	e7dd      	b.n	800771e <sin+0x16>
 8007762:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007766:	ed9d 0b00 	vldr	d0, [sp]
 800776a:	f000 fa2d 	bl	8007bc8 <__kernel_cos>
 800776e:	e7d8      	b.n	8007722 <sin+0x1a>
 8007770:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007774:	ed9d 0b00 	vldr	d0, [sp]
 8007778:	2001      	movs	r0, #1
 800777a:	f000 fe2d 	bl	80083d8 <__kernel_sin>
 800777e:	ec53 2b10 	vmov	r2, r3, d0
 8007782:	ee10 0a10 	vmov	r0, s0
 8007786:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800778a:	e7d5      	b.n	8007738 <sin+0x30>
 800778c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007790:	ed9d 0b00 	vldr	d0, [sp]
 8007794:	f000 fa18 	bl	8007bc8 <__kernel_cos>
 8007798:	e7f1      	b.n	800777e <sin+0x76>
 800779a:	bf00      	nop
 800779c:	f3af 8000 	nop.w
	...
 80077a8:	3fe921fb 	.word	0x3fe921fb
 80077ac:	7fefffff 	.word	0x7fefffff

080077b0 <__ieee754_rem_pio2>:
 80077b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b4:	ed2d 8b02 	vpush	{d8}
 80077b8:	ec55 4b10 	vmov	r4, r5, d0
 80077bc:	4bca      	ldr	r3, [pc, #808]	; (8007ae8 <__ieee754_rem_pio2+0x338>)
 80077be:	b08b      	sub	sp, #44	; 0x2c
 80077c0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80077c4:	4598      	cmp	r8, r3
 80077c6:	4682      	mov	sl, r0
 80077c8:	9502      	str	r5, [sp, #8]
 80077ca:	dc08      	bgt.n	80077de <__ieee754_rem_pio2+0x2e>
 80077cc:	2200      	movs	r2, #0
 80077ce:	2300      	movs	r3, #0
 80077d0:	ed80 0b00 	vstr	d0, [r0]
 80077d4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80077d8:	f04f 0b00 	mov.w	fp, #0
 80077dc:	e028      	b.n	8007830 <__ieee754_rem_pio2+0x80>
 80077de:	4bc3      	ldr	r3, [pc, #780]	; (8007aec <__ieee754_rem_pio2+0x33c>)
 80077e0:	4598      	cmp	r8, r3
 80077e2:	dc78      	bgt.n	80078d6 <__ieee754_rem_pio2+0x126>
 80077e4:	9b02      	ldr	r3, [sp, #8]
 80077e6:	4ec2      	ldr	r6, [pc, #776]	; (8007af0 <__ieee754_rem_pio2+0x340>)
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	ee10 0a10 	vmov	r0, s0
 80077ee:	a3b0      	add	r3, pc, #704	; (adr r3, 8007ab0 <__ieee754_rem_pio2+0x300>)
 80077f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f4:	4629      	mov	r1, r5
 80077f6:	dd39      	ble.n	800786c <__ieee754_rem_pio2+0xbc>
 80077f8:	f7f8 fcee 	bl	80001d8 <__aeabi_dsub>
 80077fc:	45b0      	cmp	r8, r6
 80077fe:	4604      	mov	r4, r0
 8007800:	460d      	mov	r5, r1
 8007802:	d01b      	beq.n	800783c <__ieee754_rem_pio2+0x8c>
 8007804:	a3ac      	add	r3, pc, #688	; (adr r3, 8007ab8 <__ieee754_rem_pio2+0x308>)
 8007806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780a:	f7f8 fce5 	bl	80001d8 <__aeabi_dsub>
 800780e:	4602      	mov	r2, r0
 8007810:	460b      	mov	r3, r1
 8007812:	e9ca 2300 	strd	r2, r3, [sl]
 8007816:	4620      	mov	r0, r4
 8007818:	4629      	mov	r1, r5
 800781a:	f7f8 fcdd 	bl	80001d8 <__aeabi_dsub>
 800781e:	a3a6      	add	r3, pc, #664	; (adr r3, 8007ab8 <__ieee754_rem_pio2+0x308>)
 8007820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007824:	f7f8 fcd8 	bl	80001d8 <__aeabi_dsub>
 8007828:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800782c:	f04f 0b01 	mov.w	fp, #1
 8007830:	4658      	mov	r0, fp
 8007832:	b00b      	add	sp, #44	; 0x2c
 8007834:	ecbd 8b02 	vpop	{d8}
 8007838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800783c:	a3a0      	add	r3, pc, #640	; (adr r3, 8007ac0 <__ieee754_rem_pio2+0x310>)
 800783e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007842:	f7f8 fcc9 	bl	80001d8 <__aeabi_dsub>
 8007846:	a3a0      	add	r3, pc, #640	; (adr r3, 8007ac8 <__ieee754_rem_pio2+0x318>)
 8007848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784c:	4604      	mov	r4, r0
 800784e:	460d      	mov	r5, r1
 8007850:	f7f8 fcc2 	bl	80001d8 <__aeabi_dsub>
 8007854:	4602      	mov	r2, r0
 8007856:	460b      	mov	r3, r1
 8007858:	e9ca 2300 	strd	r2, r3, [sl]
 800785c:	4620      	mov	r0, r4
 800785e:	4629      	mov	r1, r5
 8007860:	f7f8 fcba 	bl	80001d8 <__aeabi_dsub>
 8007864:	a398      	add	r3, pc, #608	; (adr r3, 8007ac8 <__ieee754_rem_pio2+0x318>)
 8007866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786a:	e7db      	b.n	8007824 <__ieee754_rem_pio2+0x74>
 800786c:	f7f8 fcb6 	bl	80001dc <__adddf3>
 8007870:	45b0      	cmp	r8, r6
 8007872:	4604      	mov	r4, r0
 8007874:	460d      	mov	r5, r1
 8007876:	d016      	beq.n	80078a6 <__ieee754_rem_pio2+0xf6>
 8007878:	a38f      	add	r3, pc, #572	; (adr r3, 8007ab8 <__ieee754_rem_pio2+0x308>)
 800787a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787e:	f7f8 fcad 	bl	80001dc <__adddf3>
 8007882:	4602      	mov	r2, r0
 8007884:	460b      	mov	r3, r1
 8007886:	e9ca 2300 	strd	r2, r3, [sl]
 800788a:	4620      	mov	r0, r4
 800788c:	4629      	mov	r1, r5
 800788e:	f7f8 fca3 	bl	80001d8 <__aeabi_dsub>
 8007892:	a389      	add	r3, pc, #548	; (adr r3, 8007ab8 <__ieee754_rem_pio2+0x308>)
 8007894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007898:	f7f8 fca0 	bl	80001dc <__adddf3>
 800789c:	f04f 3bff 	mov.w	fp, #4294967295
 80078a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80078a4:	e7c4      	b.n	8007830 <__ieee754_rem_pio2+0x80>
 80078a6:	a386      	add	r3, pc, #536	; (adr r3, 8007ac0 <__ieee754_rem_pio2+0x310>)
 80078a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ac:	f7f8 fc96 	bl	80001dc <__adddf3>
 80078b0:	a385      	add	r3, pc, #532	; (adr r3, 8007ac8 <__ieee754_rem_pio2+0x318>)
 80078b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b6:	4604      	mov	r4, r0
 80078b8:	460d      	mov	r5, r1
 80078ba:	f7f8 fc8f 	bl	80001dc <__adddf3>
 80078be:	4602      	mov	r2, r0
 80078c0:	460b      	mov	r3, r1
 80078c2:	e9ca 2300 	strd	r2, r3, [sl]
 80078c6:	4620      	mov	r0, r4
 80078c8:	4629      	mov	r1, r5
 80078ca:	f7f8 fc85 	bl	80001d8 <__aeabi_dsub>
 80078ce:	a37e      	add	r3, pc, #504	; (adr r3, 8007ac8 <__ieee754_rem_pio2+0x318>)
 80078d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d4:	e7e0      	b.n	8007898 <__ieee754_rem_pio2+0xe8>
 80078d6:	4b87      	ldr	r3, [pc, #540]	; (8007af4 <__ieee754_rem_pio2+0x344>)
 80078d8:	4598      	cmp	r8, r3
 80078da:	f300 80d9 	bgt.w	8007a90 <__ieee754_rem_pio2+0x2e0>
 80078de:	f000 fe39 	bl	8008554 <fabs>
 80078e2:	ec55 4b10 	vmov	r4, r5, d0
 80078e6:	ee10 0a10 	vmov	r0, s0
 80078ea:	a379      	add	r3, pc, #484	; (adr r3, 8007ad0 <__ieee754_rem_pio2+0x320>)
 80078ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f0:	4629      	mov	r1, r5
 80078f2:	f7f8 fe29 	bl	8000548 <__aeabi_dmul>
 80078f6:	4b80      	ldr	r3, [pc, #512]	; (8007af8 <__ieee754_rem_pio2+0x348>)
 80078f8:	2200      	movs	r2, #0
 80078fa:	f7f8 fc6f 	bl	80001dc <__adddf3>
 80078fe:	f7f9 f8bd 	bl	8000a7c <__aeabi_d2iz>
 8007902:	4683      	mov	fp, r0
 8007904:	f7f8 fdb6 	bl	8000474 <__aeabi_i2d>
 8007908:	4602      	mov	r2, r0
 800790a:	460b      	mov	r3, r1
 800790c:	ec43 2b18 	vmov	d8, r2, r3
 8007910:	a367      	add	r3, pc, #412	; (adr r3, 8007ab0 <__ieee754_rem_pio2+0x300>)
 8007912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007916:	f7f8 fe17 	bl	8000548 <__aeabi_dmul>
 800791a:	4602      	mov	r2, r0
 800791c:	460b      	mov	r3, r1
 800791e:	4620      	mov	r0, r4
 8007920:	4629      	mov	r1, r5
 8007922:	f7f8 fc59 	bl	80001d8 <__aeabi_dsub>
 8007926:	a364      	add	r3, pc, #400	; (adr r3, 8007ab8 <__ieee754_rem_pio2+0x308>)
 8007928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792c:	4606      	mov	r6, r0
 800792e:	460f      	mov	r7, r1
 8007930:	ec51 0b18 	vmov	r0, r1, d8
 8007934:	f7f8 fe08 	bl	8000548 <__aeabi_dmul>
 8007938:	f1bb 0f1f 	cmp.w	fp, #31
 800793c:	4604      	mov	r4, r0
 800793e:	460d      	mov	r5, r1
 8007940:	dc0d      	bgt.n	800795e <__ieee754_rem_pio2+0x1ae>
 8007942:	4b6e      	ldr	r3, [pc, #440]	; (8007afc <__ieee754_rem_pio2+0x34c>)
 8007944:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800794c:	4543      	cmp	r3, r8
 800794e:	d006      	beq.n	800795e <__ieee754_rem_pio2+0x1ae>
 8007950:	4622      	mov	r2, r4
 8007952:	462b      	mov	r3, r5
 8007954:	4630      	mov	r0, r6
 8007956:	4639      	mov	r1, r7
 8007958:	f7f8 fc3e 	bl	80001d8 <__aeabi_dsub>
 800795c:	e00f      	b.n	800797e <__ieee754_rem_pio2+0x1ce>
 800795e:	462b      	mov	r3, r5
 8007960:	4622      	mov	r2, r4
 8007962:	4630      	mov	r0, r6
 8007964:	4639      	mov	r1, r7
 8007966:	f7f8 fc37 	bl	80001d8 <__aeabi_dsub>
 800796a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800796e:	9303      	str	r3, [sp, #12]
 8007970:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007974:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007978:	f1b8 0f10 	cmp.w	r8, #16
 800797c:	dc02      	bgt.n	8007984 <__ieee754_rem_pio2+0x1d4>
 800797e:	e9ca 0100 	strd	r0, r1, [sl]
 8007982:	e039      	b.n	80079f8 <__ieee754_rem_pio2+0x248>
 8007984:	a34e      	add	r3, pc, #312	; (adr r3, 8007ac0 <__ieee754_rem_pio2+0x310>)
 8007986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798a:	ec51 0b18 	vmov	r0, r1, d8
 800798e:	f7f8 fddb 	bl	8000548 <__aeabi_dmul>
 8007992:	4604      	mov	r4, r0
 8007994:	460d      	mov	r5, r1
 8007996:	4602      	mov	r2, r0
 8007998:	460b      	mov	r3, r1
 800799a:	4630      	mov	r0, r6
 800799c:	4639      	mov	r1, r7
 800799e:	f7f8 fc1b 	bl	80001d8 <__aeabi_dsub>
 80079a2:	4602      	mov	r2, r0
 80079a4:	460b      	mov	r3, r1
 80079a6:	4680      	mov	r8, r0
 80079a8:	4689      	mov	r9, r1
 80079aa:	4630      	mov	r0, r6
 80079ac:	4639      	mov	r1, r7
 80079ae:	f7f8 fc13 	bl	80001d8 <__aeabi_dsub>
 80079b2:	4622      	mov	r2, r4
 80079b4:	462b      	mov	r3, r5
 80079b6:	f7f8 fc0f 	bl	80001d8 <__aeabi_dsub>
 80079ba:	a343      	add	r3, pc, #268	; (adr r3, 8007ac8 <__ieee754_rem_pio2+0x318>)
 80079bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c0:	4604      	mov	r4, r0
 80079c2:	460d      	mov	r5, r1
 80079c4:	ec51 0b18 	vmov	r0, r1, d8
 80079c8:	f7f8 fdbe 	bl	8000548 <__aeabi_dmul>
 80079cc:	4622      	mov	r2, r4
 80079ce:	462b      	mov	r3, r5
 80079d0:	f7f8 fc02 	bl	80001d8 <__aeabi_dsub>
 80079d4:	4602      	mov	r2, r0
 80079d6:	460b      	mov	r3, r1
 80079d8:	4604      	mov	r4, r0
 80079da:	460d      	mov	r5, r1
 80079dc:	4640      	mov	r0, r8
 80079de:	4649      	mov	r1, r9
 80079e0:	f7f8 fbfa 	bl	80001d8 <__aeabi_dsub>
 80079e4:	9a03      	ldr	r2, [sp, #12]
 80079e6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	2b31      	cmp	r3, #49	; 0x31
 80079ee:	dc24      	bgt.n	8007a3a <__ieee754_rem_pio2+0x28a>
 80079f0:	e9ca 0100 	strd	r0, r1, [sl]
 80079f4:	4646      	mov	r6, r8
 80079f6:	464f      	mov	r7, r9
 80079f8:	e9da 8900 	ldrd	r8, r9, [sl]
 80079fc:	4630      	mov	r0, r6
 80079fe:	4642      	mov	r2, r8
 8007a00:	464b      	mov	r3, r9
 8007a02:	4639      	mov	r1, r7
 8007a04:	f7f8 fbe8 	bl	80001d8 <__aeabi_dsub>
 8007a08:	462b      	mov	r3, r5
 8007a0a:	4622      	mov	r2, r4
 8007a0c:	f7f8 fbe4 	bl	80001d8 <__aeabi_dsub>
 8007a10:	9b02      	ldr	r3, [sp, #8]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007a18:	f6bf af0a 	bge.w	8007830 <__ieee754_rem_pio2+0x80>
 8007a1c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007a20:	f8ca 3004 	str.w	r3, [sl, #4]
 8007a24:	f8ca 8000 	str.w	r8, [sl]
 8007a28:	f8ca 0008 	str.w	r0, [sl, #8]
 8007a2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a30:	f8ca 300c 	str.w	r3, [sl, #12]
 8007a34:	f1cb 0b00 	rsb	fp, fp, #0
 8007a38:	e6fa      	b.n	8007830 <__ieee754_rem_pio2+0x80>
 8007a3a:	a327      	add	r3, pc, #156	; (adr r3, 8007ad8 <__ieee754_rem_pio2+0x328>)
 8007a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a40:	ec51 0b18 	vmov	r0, r1, d8
 8007a44:	f7f8 fd80 	bl	8000548 <__aeabi_dmul>
 8007a48:	4604      	mov	r4, r0
 8007a4a:	460d      	mov	r5, r1
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	460b      	mov	r3, r1
 8007a50:	4640      	mov	r0, r8
 8007a52:	4649      	mov	r1, r9
 8007a54:	f7f8 fbc0 	bl	80001d8 <__aeabi_dsub>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	4606      	mov	r6, r0
 8007a5e:	460f      	mov	r7, r1
 8007a60:	4640      	mov	r0, r8
 8007a62:	4649      	mov	r1, r9
 8007a64:	f7f8 fbb8 	bl	80001d8 <__aeabi_dsub>
 8007a68:	4622      	mov	r2, r4
 8007a6a:	462b      	mov	r3, r5
 8007a6c:	f7f8 fbb4 	bl	80001d8 <__aeabi_dsub>
 8007a70:	a31b      	add	r3, pc, #108	; (adr r3, 8007ae0 <__ieee754_rem_pio2+0x330>)
 8007a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a76:	4604      	mov	r4, r0
 8007a78:	460d      	mov	r5, r1
 8007a7a:	ec51 0b18 	vmov	r0, r1, d8
 8007a7e:	f7f8 fd63 	bl	8000548 <__aeabi_dmul>
 8007a82:	4622      	mov	r2, r4
 8007a84:	462b      	mov	r3, r5
 8007a86:	f7f8 fba7 	bl	80001d8 <__aeabi_dsub>
 8007a8a:	4604      	mov	r4, r0
 8007a8c:	460d      	mov	r5, r1
 8007a8e:	e75f      	b.n	8007950 <__ieee754_rem_pio2+0x1a0>
 8007a90:	4b1b      	ldr	r3, [pc, #108]	; (8007b00 <__ieee754_rem_pio2+0x350>)
 8007a92:	4598      	cmp	r8, r3
 8007a94:	dd36      	ble.n	8007b04 <__ieee754_rem_pio2+0x354>
 8007a96:	ee10 2a10 	vmov	r2, s0
 8007a9a:	462b      	mov	r3, r5
 8007a9c:	4620      	mov	r0, r4
 8007a9e:	4629      	mov	r1, r5
 8007aa0:	f7f8 fb9a 	bl	80001d8 <__aeabi_dsub>
 8007aa4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007aa8:	e9ca 0100 	strd	r0, r1, [sl]
 8007aac:	e694      	b.n	80077d8 <__ieee754_rem_pio2+0x28>
 8007aae:	bf00      	nop
 8007ab0:	54400000 	.word	0x54400000
 8007ab4:	3ff921fb 	.word	0x3ff921fb
 8007ab8:	1a626331 	.word	0x1a626331
 8007abc:	3dd0b461 	.word	0x3dd0b461
 8007ac0:	1a600000 	.word	0x1a600000
 8007ac4:	3dd0b461 	.word	0x3dd0b461
 8007ac8:	2e037073 	.word	0x2e037073
 8007acc:	3ba3198a 	.word	0x3ba3198a
 8007ad0:	6dc9c883 	.word	0x6dc9c883
 8007ad4:	3fe45f30 	.word	0x3fe45f30
 8007ad8:	2e000000 	.word	0x2e000000
 8007adc:	3ba3198a 	.word	0x3ba3198a
 8007ae0:	252049c1 	.word	0x252049c1
 8007ae4:	397b839a 	.word	0x397b839a
 8007ae8:	3fe921fb 	.word	0x3fe921fb
 8007aec:	4002d97b 	.word	0x4002d97b
 8007af0:	3ff921fb 	.word	0x3ff921fb
 8007af4:	413921fb 	.word	0x413921fb
 8007af8:	3fe00000 	.word	0x3fe00000
 8007afc:	080087d8 	.word	0x080087d8
 8007b00:	7fefffff 	.word	0x7fefffff
 8007b04:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007b08:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8007b0c:	ee10 0a10 	vmov	r0, s0
 8007b10:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8007b14:	ee10 6a10 	vmov	r6, s0
 8007b18:	460f      	mov	r7, r1
 8007b1a:	f7f8 ffaf 	bl	8000a7c <__aeabi_d2iz>
 8007b1e:	f7f8 fca9 	bl	8000474 <__aeabi_i2d>
 8007b22:	4602      	mov	r2, r0
 8007b24:	460b      	mov	r3, r1
 8007b26:	4630      	mov	r0, r6
 8007b28:	4639      	mov	r1, r7
 8007b2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007b2e:	f7f8 fb53 	bl	80001d8 <__aeabi_dsub>
 8007b32:	4b22      	ldr	r3, [pc, #136]	; (8007bbc <__ieee754_rem_pio2+0x40c>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	f7f8 fd07 	bl	8000548 <__aeabi_dmul>
 8007b3a:	460f      	mov	r7, r1
 8007b3c:	4606      	mov	r6, r0
 8007b3e:	f7f8 ff9d 	bl	8000a7c <__aeabi_d2iz>
 8007b42:	f7f8 fc97 	bl	8000474 <__aeabi_i2d>
 8007b46:	4602      	mov	r2, r0
 8007b48:	460b      	mov	r3, r1
 8007b4a:	4630      	mov	r0, r6
 8007b4c:	4639      	mov	r1, r7
 8007b4e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007b52:	f7f8 fb41 	bl	80001d8 <__aeabi_dsub>
 8007b56:	4b19      	ldr	r3, [pc, #100]	; (8007bbc <__ieee754_rem_pio2+0x40c>)
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f7f8 fcf5 	bl	8000548 <__aeabi_dmul>
 8007b5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007b62:	ad04      	add	r5, sp, #16
 8007b64:	f04f 0803 	mov.w	r8, #3
 8007b68:	46a9      	mov	r9, r5
 8007b6a:	2600      	movs	r6, #0
 8007b6c:	2700      	movs	r7, #0
 8007b6e:	4632      	mov	r2, r6
 8007b70:	463b      	mov	r3, r7
 8007b72:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8007b76:	46c3      	mov	fp, r8
 8007b78:	3d08      	subs	r5, #8
 8007b7a:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b7e:	f7f8 ff4b 	bl	8000a18 <__aeabi_dcmpeq>
 8007b82:	2800      	cmp	r0, #0
 8007b84:	d1f3      	bne.n	8007b6e <__ieee754_rem_pio2+0x3be>
 8007b86:	4b0e      	ldr	r3, [pc, #56]	; (8007bc0 <__ieee754_rem_pio2+0x410>)
 8007b88:	9301      	str	r3, [sp, #4]
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	4622      	mov	r2, r4
 8007b90:	465b      	mov	r3, fp
 8007b92:	4651      	mov	r1, sl
 8007b94:	4648      	mov	r0, r9
 8007b96:	f000 f8df 	bl	8007d58 <__kernel_rem_pio2>
 8007b9a:	9b02      	ldr	r3, [sp, #8]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	4683      	mov	fp, r0
 8007ba0:	f6bf ae46 	bge.w	8007830 <__ieee754_rem_pio2+0x80>
 8007ba4:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007ba8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007bac:	f8ca 3004 	str.w	r3, [sl, #4]
 8007bb0:	f8da 300c 	ldr.w	r3, [sl, #12]
 8007bb4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007bb8:	e73a      	b.n	8007a30 <__ieee754_rem_pio2+0x280>
 8007bba:	bf00      	nop
 8007bbc:	41700000 	.word	0x41700000
 8007bc0:	08008858 	.word	0x08008858
 8007bc4:	00000000 	.word	0x00000000

08007bc8 <__kernel_cos>:
 8007bc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bcc:	ec57 6b10 	vmov	r6, r7, d0
 8007bd0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007bd4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007bd8:	ed8d 1b00 	vstr	d1, [sp]
 8007bdc:	da07      	bge.n	8007bee <__kernel_cos+0x26>
 8007bde:	ee10 0a10 	vmov	r0, s0
 8007be2:	4639      	mov	r1, r7
 8007be4:	f7f8 ff4a 	bl	8000a7c <__aeabi_d2iz>
 8007be8:	2800      	cmp	r0, #0
 8007bea:	f000 8088 	beq.w	8007cfe <__kernel_cos+0x136>
 8007bee:	4632      	mov	r2, r6
 8007bf0:	463b      	mov	r3, r7
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	4639      	mov	r1, r7
 8007bf6:	f7f8 fca7 	bl	8000548 <__aeabi_dmul>
 8007bfa:	4b51      	ldr	r3, [pc, #324]	; (8007d40 <__kernel_cos+0x178>)
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	4604      	mov	r4, r0
 8007c00:	460d      	mov	r5, r1
 8007c02:	f7f8 fca1 	bl	8000548 <__aeabi_dmul>
 8007c06:	a340      	add	r3, pc, #256	; (adr r3, 8007d08 <__kernel_cos+0x140>)
 8007c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0c:	4682      	mov	sl, r0
 8007c0e:	468b      	mov	fp, r1
 8007c10:	4620      	mov	r0, r4
 8007c12:	4629      	mov	r1, r5
 8007c14:	f7f8 fc98 	bl	8000548 <__aeabi_dmul>
 8007c18:	a33d      	add	r3, pc, #244	; (adr r3, 8007d10 <__kernel_cos+0x148>)
 8007c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1e:	f7f8 fadd 	bl	80001dc <__adddf3>
 8007c22:	4622      	mov	r2, r4
 8007c24:	462b      	mov	r3, r5
 8007c26:	f7f8 fc8f 	bl	8000548 <__aeabi_dmul>
 8007c2a:	a33b      	add	r3, pc, #236	; (adr r3, 8007d18 <__kernel_cos+0x150>)
 8007c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c30:	f7f8 fad2 	bl	80001d8 <__aeabi_dsub>
 8007c34:	4622      	mov	r2, r4
 8007c36:	462b      	mov	r3, r5
 8007c38:	f7f8 fc86 	bl	8000548 <__aeabi_dmul>
 8007c3c:	a338      	add	r3, pc, #224	; (adr r3, 8007d20 <__kernel_cos+0x158>)
 8007c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c42:	f7f8 facb 	bl	80001dc <__adddf3>
 8007c46:	4622      	mov	r2, r4
 8007c48:	462b      	mov	r3, r5
 8007c4a:	f7f8 fc7d 	bl	8000548 <__aeabi_dmul>
 8007c4e:	a336      	add	r3, pc, #216	; (adr r3, 8007d28 <__kernel_cos+0x160>)
 8007c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c54:	f7f8 fac0 	bl	80001d8 <__aeabi_dsub>
 8007c58:	4622      	mov	r2, r4
 8007c5a:	462b      	mov	r3, r5
 8007c5c:	f7f8 fc74 	bl	8000548 <__aeabi_dmul>
 8007c60:	a333      	add	r3, pc, #204	; (adr r3, 8007d30 <__kernel_cos+0x168>)
 8007c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c66:	f7f8 fab9 	bl	80001dc <__adddf3>
 8007c6a:	4622      	mov	r2, r4
 8007c6c:	462b      	mov	r3, r5
 8007c6e:	f7f8 fc6b 	bl	8000548 <__aeabi_dmul>
 8007c72:	4622      	mov	r2, r4
 8007c74:	462b      	mov	r3, r5
 8007c76:	f7f8 fc67 	bl	8000548 <__aeabi_dmul>
 8007c7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c7e:	4604      	mov	r4, r0
 8007c80:	460d      	mov	r5, r1
 8007c82:	4630      	mov	r0, r6
 8007c84:	4639      	mov	r1, r7
 8007c86:	f7f8 fc5f 	bl	8000548 <__aeabi_dmul>
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	4629      	mov	r1, r5
 8007c90:	4620      	mov	r0, r4
 8007c92:	f7f8 faa1 	bl	80001d8 <__aeabi_dsub>
 8007c96:	4b2b      	ldr	r3, [pc, #172]	; (8007d44 <__kernel_cos+0x17c>)
 8007c98:	4598      	cmp	r8, r3
 8007c9a:	4606      	mov	r6, r0
 8007c9c:	460f      	mov	r7, r1
 8007c9e:	dc10      	bgt.n	8007cc2 <__kernel_cos+0xfa>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	4650      	mov	r0, sl
 8007ca6:	4659      	mov	r1, fp
 8007ca8:	f7f8 fa96 	bl	80001d8 <__aeabi_dsub>
 8007cac:	460b      	mov	r3, r1
 8007cae:	4926      	ldr	r1, [pc, #152]	; (8007d48 <__kernel_cos+0x180>)
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	2000      	movs	r0, #0
 8007cb4:	f7f8 fa90 	bl	80001d8 <__aeabi_dsub>
 8007cb8:	ec41 0b10 	vmov	d0, r0, r1
 8007cbc:	b003      	add	sp, #12
 8007cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cc2:	4b22      	ldr	r3, [pc, #136]	; (8007d4c <__kernel_cos+0x184>)
 8007cc4:	4920      	ldr	r1, [pc, #128]	; (8007d48 <__kernel_cos+0x180>)
 8007cc6:	4598      	cmp	r8, r3
 8007cc8:	bfcc      	ite	gt
 8007cca:	4d21      	ldrgt	r5, [pc, #132]	; (8007d50 <__kernel_cos+0x188>)
 8007ccc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007cd0:	2400      	movs	r4, #0
 8007cd2:	4622      	mov	r2, r4
 8007cd4:	462b      	mov	r3, r5
 8007cd6:	2000      	movs	r0, #0
 8007cd8:	f7f8 fa7e 	bl	80001d8 <__aeabi_dsub>
 8007cdc:	4622      	mov	r2, r4
 8007cde:	4680      	mov	r8, r0
 8007ce0:	4689      	mov	r9, r1
 8007ce2:	462b      	mov	r3, r5
 8007ce4:	4650      	mov	r0, sl
 8007ce6:	4659      	mov	r1, fp
 8007ce8:	f7f8 fa76 	bl	80001d8 <__aeabi_dsub>
 8007cec:	4632      	mov	r2, r6
 8007cee:	463b      	mov	r3, r7
 8007cf0:	f7f8 fa72 	bl	80001d8 <__aeabi_dsub>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	4640      	mov	r0, r8
 8007cfa:	4649      	mov	r1, r9
 8007cfc:	e7da      	b.n	8007cb4 <__kernel_cos+0xec>
 8007cfe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007d38 <__kernel_cos+0x170>
 8007d02:	e7db      	b.n	8007cbc <__kernel_cos+0xf4>
 8007d04:	f3af 8000 	nop.w
 8007d08:	be8838d4 	.word	0xbe8838d4
 8007d0c:	bda8fae9 	.word	0xbda8fae9
 8007d10:	bdb4b1c4 	.word	0xbdb4b1c4
 8007d14:	3e21ee9e 	.word	0x3e21ee9e
 8007d18:	809c52ad 	.word	0x809c52ad
 8007d1c:	3e927e4f 	.word	0x3e927e4f
 8007d20:	19cb1590 	.word	0x19cb1590
 8007d24:	3efa01a0 	.word	0x3efa01a0
 8007d28:	16c15177 	.word	0x16c15177
 8007d2c:	3f56c16c 	.word	0x3f56c16c
 8007d30:	5555554c 	.word	0x5555554c
 8007d34:	3fa55555 	.word	0x3fa55555
 8007d38:	00000000 	.word	0x00000000
 8007d3c:	3ff00000 	.word	0x3ff00000
 8007d40:	3fe00000 	.word	0x3fe00000
 8007d44:	3fd33332 	.word	0x3fd33332
 8007d48:	3ff00000 	.word	0x3ff00000
 8007d4c:	3fe90000 	.word	0x3fe90000
 8007d50:	3fd20000 	.word	0x3fd20000
 8007d54:	00000000 	.word	0x00000000

08007d58 <__kernel_rem_pio2>:
 8007d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d5c:	ed2d 8b02 	vpush	{d8}
 8007d60:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8007d64:	f112 0f14 	cmn.w	r2, #20
 8007d68:	9308      	str	r3, [sp, #32]
 8007d6a:	9101      	str	r1, [sp, #4]
 8007d6c:	4bc6      	ldr	r3, [pc, #792]	; (8008088 <__kernel_rem_pio2+0x330>)
 8007d6e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8007d70:	9009      	str	r0, [sp, #36]	; 0x24
 8007d72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007d76:	9304      	str	r3, [sp, #16]
 8007d78:	9b08      	ldr	r3, [sp, #32]
 8007d7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007d7e:	bfa8      	it	ge
 8007d80:	1ed4      	subge	r4, r2, #3
 8007d82:	9306      	str	r3, [sp, #24]
 8007d84:	bfb2      	itee	lt
 8007d86:	2400      	movlt	r4, #0
 8007d88:	2318      	movge	r3, #24
 8007d8a:	fb94 f4f3 	sdivge	r4, r4, r3
 8007d8e:	f06f 0317 	mvn.w	r3, #23
 8007d92:	fb04 3303 	mla	r3, r4, r3, r3
 8007d96:	eb03 0a02 	add.w	sl, r3, r2
 8007d9a:	9b04      	ldr	r3, [sp, #16]
 8007d9c:	9a06      	ldr	r2, [sp, #24]
 8007d9e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8008078 <__kernel_rem_pio2+0x320>
 8007da2:	eb03 0802 	add.w	r8, r3, r2
 8007da6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007da8:	1aa7      	subs	r7, r4, r2
 8007daa:	ae20      	add	r6, sp, #128	; 0x80
 8007dac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007db0:	2500      	movs	r5, #0
 8007db2:	4545      	cmp	r5, r8
 8007db4:	dd18      	ble.n	8007de8 <__kernel_rem_pio2+0x90>
 8007db6:	9b08      	ldr	r3, [sp, #32]
 8007db8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007dbc:	aa20      	add	r2, sp, #128	; 0x80
 8007dbe:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8008078 <__kernel_rem_pio2+0x320>
 8007dc2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007dc6:	f1c3 0301 	rsb	r3, r3, #1
 8007dca:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8007dce:	9307      	str	r3, [sp, #28]
 8007dd0:	9b07      	ldr	r3, [sp, #28]
 8007dd2:	9a04      	ldr	r2, [sp, #16]
 8007dd4:	4443      	add	r3, r8
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	db2f      	blt.n	8007e3a <__kernel_rem_pio2+0xe2>
 8007dda:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007dde:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007de2:	462f      	mov	r7, r5
 8007de4:	2600      	movs	r6, #0
 8007de6:	e01b      	b.n	8007e20 <__kernel_rem_pio2+0xc8>
 8007de8:	42ef      	cmn	r7, r5
 8007dea:	d407      	bmi.n	8007dfc <__kernel_rem_pio2+0xa4>
 8007dec:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007df0:	f7f8 fb40 	bl	8000474 <__aeabi_i2d>
 8007df4:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007df8:	3501      	adds	r5, #1
 8007dfa:	e7da      	b.n	8007db2 <__kernel_rem_pio2+0x5a>
 8007dfc:	ec51 0b18 	vmov	r0, r1, d8
 8007e00:	e7f8      	b.n	8007df4 <__kernel_rem_pio2+0x9c>
 8007e02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e06:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007e0a:	f7f8 fb9d 	bl	8000548 <__aeabi_dmul>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	460b      	mov	r3, r1
 8007e12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e16:	f7f8 f9e1 	bl	80001dc <__adddf3>
 8007e1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e1e:	3601      	adds	r6, #1
 8007e20:	9b06      	ldr	r3, [sp, #24]
 8007e22:	429e      	cmp	r6, r3
 8007e24:	f1a7 0708 	sub.w	r7, r7, #8
 8007e28:	ddeb      	ble.n	8007e02 <__kernel_rem_pio2+0xaa>
 8007e2a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e2e:	3508      	adds	r5, #8
 8007e30:	ecab 7b02 	vstmia	fp!, {d7}
 8007e34:	f108 0801 	add.w	r8, r8, #1
 8007e38:	e7ca      	b.n	8007dd0 <__kernel_rem_pio2+0x78>
 8007e3a:	9b04      	ldr	r3, [sp, #16]
 8007e3c:	aa0c      	add	r2, sp, #48	; 0x30
 8007e3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007e42:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e44:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007e46:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007e4a:	9c04      	ldr	r4, [sp, #16]
 8007e4c:	930a      	str	r3, [sp, #40]	; 0x28
 8007e4e:	ab98      	add	r3, sp, #608	; 0x260
 8007e50:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007e54:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007e58:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8007e5c:	f8cd b008 	str.w	fp, [sp, #8]
 8007e60:	4625      	mov	r5, r4
 8007e62:	2d00      	cmp	r5, #0
 8007e64:	dc78      	bgt.n	8007f58 <__kernel_rem_pio2+0x200>
 8007e66:	ec47 6b10 	vmov	d0, r6, r7
 8007e6a:	4650      	mov	r0, sl
 8007e6c:	f000 fbfc 	bl	8008668 <scalbn>
 8007e70:	ec57 6b10 	vmov	r6, r7, d0
 8007e74:	2200      	movs	r2, #0
 8007e76:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007e7a:	ee10 0a10 	vmov	r0, s0
 8007e7e:	4639      	mov	r1, r7
 8007e80:	f7f8 fb62 	bl	8000548 <__aeabi_dmul>
 8007e84:	ec41 0b10 	vmov	d0, r0, r1
 8007e88:	f000 fb6e 	bl	8008568 <floor>
 8007e8c:	4b7f      	ldr	r3, [pc, #508]	; (800808c <__kernel_rem_pio2+0x334>)
 8007e8e:	ec51 0b10 	vmov	r0, r1, d0
 8007e92:	2200      	movs	r2, #0
 8007e94:	f7f8 fb58 	bl	8000548 <__aeabi_dmul>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	4639      	mov	r1, r7
 8007ea0:	f7f8 f99a 	bl	80001d8 <__aeabi_dsub>
 8007ea4:	460f      	mov	r7, r1
 8007ea6:	4606      	mov	r6, r0
 8007ea8:	f7f8 fde8 	bl	8000a7c <__aeabi_d2iz>
 8007eac:	9007      	str	r0, [sp, #28]
 8007eae:	f7f8 fae1 	bl	8000474 <__aeabi_i2d>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	4630      	mov	r0, r6
 8007eb8:	4639      	mov	r1, r7
 8007eba:	f7f8 f98d 	bl	80001d8 <__aeabi_dsub>
 8007ebe:	f1ba 0f00 	cmp.w	sl, #0
 8007ec2:	4606      	mov	r6, r0
 8007ec4:	460f      	mov	r7, r1
 8007ec6:	dd70      	ble.n	8007faa <__kernel_rem_pio2+0x252>
 8007ec8:	1e62      	subs	r2, r4, #1
 8007eca:	ab0c      	add	r3, sp, #48	; 0x30
 8007ecc:	9d07      	ldr	r5, [sp, #28]
 8007ece:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007ed2:	f1ca 0118 	rsb	r1, sl, #24
 8007ed6:	fa40 f301 	asr.w	r3, r0, r1
 8007eda:	441d      	add	r5, r3
 8007edc:	408b      	lsls	r3, r1
 8007ede:	1ac0      	subs	r0, r0, r3
 8007ee0:	ab0c      	add	r3, sp, #48	; 0x30
 8007ee2:	9507      	str	r5, [sp, #28]
 8007ee4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007ee8:	f1ca 0317 	rsb	r3, sl, #23
 8007eec:	fa40 f303 	asr.w	r3, r0, r3
 8007ef0:	9302      	str	r3, [sp, #8]
 8007ef2:	9b02      	ldr	r3, [sp, #8]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	dd66      	ble.n	8007fc6 <__kernel_rem_pio2+0x26e>
 8007ef8:	9b07      	ldr	r3, [sp, #28]
 8007efa:	2200      	movs	r2, #0
 8007efc:	3301      	adds	r3, #1
 8007efe:	9307      	str	r3, [sp, #28]
 8007f00:	4615      	mov	r5, r2
 8007f02:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007f06:	4294      	cmp	r4, r2
 8007f08:	f300 8099 	bgt.w	800803e <__kernel_rem_pio2+0x2e6>
 8007f0c:	f1ba 0f00 	cmp.w	sl, #0
 8007f10:	dd07      	ble.n	8007f22 <__kernel_rem_pio2+0x1ca>
 8007f12:	f1ba 0f01 	cmp.w	sl, #1
 8007f16:	f000 80a5 	beq.w	8008064 <__kernel_rem_pio2+0x30c>
 8007f1a:	f1ba 0f02 	cmp.w	sl, #2
 8007f1e:	f000 80c1 	beq.w	80080a4 <__kernel_rem_pio2+0x34c>
 8007f22:	9b02      	ldr	r3, [sp, #8]
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d14e      	bne.n	8007fc6 <__kernel_rem_pio2+0x26e>
 8007f28:	4632      	mov	r2, r6
 8007f2a:	463b      	mov	r3, r7
 8007f2c:	4958      	ldr	r1, [pc, #352]	; (8008090 <__kernel_rem_pio2+0x338>)
 8007f2e:	2000      	movs	r0, #0
 8007f30:	f7f8 f952 	bl	80001d8 <__aeabi_dsub>
 8007f34:	4606      	mov	r6, r0
 8007f36:	460f      	mov	r7, r1
 8007f38:	2d00      	cmp	r5, #0
 8007f3a:	d044      	beq.n	8007fc6 <__kernel_rem_pio2+0x26e>
 8007f3c:	4650      	mov	r0, sl
 8007f3e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8008080 <__kernel_rem_pio2+0x328>
 8007f42:	f000 fb91 	bl	8008668 <scalbn>
 8007f46:	4630      	mov	r0, r6
 8007f48:	4639      	mov	r1, r7
 8007f4a:	ec53 2b10 	vmov	r2, r3, d0
 8007f4e:	f7f8 f943 	bl	80001d8 <__aeabi_dsub>
 8007f52:	4606      	mov	r6, r0
 8007f54:	460f      	mov	r7, r1
 8007f56:	e036      	b.n	8007fc6 <__kernel_rem_pio2+0x26e>
 8007f58:	4b4e      	ldr	r3, [pc, #312]	; (8008094 <__kernel_rem_pio2+0x33c>)
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	4639      	mov	r1, r7
 8007f60:	f7f8 faf2 	bl	8000548 <__aeabi_dmul>
 8007f64:	f7f8 fd8a 	bl	8000a7c <__aeabi_d2iz>
 8007f68:	f7f8 fa84 	bl	8000474 <__aeabi_i2d>
 8007f6c:	4b4a      	ldr	r3, [pc, #296]	; (8008098 <__kernel_rem_pio2+0x340>)
 8007f6e:	2200      	movs	r2, #0
 8007f70:	4680      	mov	r8, r0
 8007f72:	4689      	mov	r9, r1
 8007f74:	f7f8 fae8 	bl	8000548 <__aeabi_dmul>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	4630      	mov	r0, r6
 8007f7e:	4639      	mov	r1, r7
 8007f80:	f7f8 f92a 	bl	80001d8 <__aeabi_dsub>
 8007f84:	f7f8 fd7a 	bl	8000a7c <__aeabi_d2iz>
 8007f88:	9b02      	ldr	r3, [sp, #8]
 8007f8a:	f843 0b04 	str.w	r0, [r3], #4
 8007f8e:	3d01      	subs	r5, #1
 8007f90:	9302      	str	r3, [sp, #8]
 8007f92:	ab70      	add	r3, sp, #448	; 0x1c0
 8007f94:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9c:	4640      	mov	r0, r8
 8007f9e:	4649      	mov	r1, r9
 8007fa0:	f7f8 f91c 	bl	80001dc <__adddf3>
 8007fa4:	4606      	mov	r6, r0
 8007fa6:	460f      	mov	r7, r1
 8007fa8:	e75b      	b.n	8007e62 <__kernel_rem_pio2+0x10a>
 8007faa:	d105      	bne.n	8007fb8 <__kernel_rem_pio2+0x260>
 8007fac:	1e63      	subs	r3, r4, #1
 8007fae:	aa0c      	add	r2, sp, #48	; 0x30
 8007fb0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007fb4:	15c3      	asrs	r3, r0, #23
 8007fb6:	e79b      	b.n	8007ef0 <__kernel_rem_pio2+0x198>
 8007fb8:	4b38      	ldr	r3, [pc, #224]	; (800809c <__kernel_rem_pio2+0x344>)
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f7f8 fd4a 	bl	8000a54 <__aeabi_dcmpge>
 8007fc0:	2800      	cmp	r0, #0
 8007fc2:	d139      	bne.n	8008038 <__kernel_rem_pio2+0x2e0>
 8007fc4:	9002      	str	r0, [sp, #8]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	2300      	movs	r3, #0
 8007fca:	4630      	mov	r0, r6
 8007fcc:	4639      	mov	r1, r7
 8007fce:	f7f8 fd23 	bl	8000a18 <__aeabi_dcmpeq>
 8007fd2:	2800      	cmp	r0, #0
 8007fd4:	f000 80b4 	beq.w	8008140 <__kernel_rem_pio2+0x3e8>
 8007fd8:	f104 3bff 	add.w	fp, r4, #4294967295
 8007fdc:	465b      	mov	r3, fp
 8007fde:	2200      	movs	r2, #0
 8007fe0:	9904      	ldr	r1, [sp, #16]
 8007fe2:	428b      	cmp	r3, r1
 8007fe4:	da65      	bge.n	80080b2 <__kernel_rem_pio2+0x35a>
 8007fe6:	2a00      	cmp	r2, #0
 8007fe8:	d07b      	beq.n	80080e2 <__kernel_rem_pio2+0x38a>
 8007fea:	ab0c      	add	r3, sp, #48	; 0x30
 8007fec:	f1aa 0a18 	sub.w	sl, sl, #24
 8007ff0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	f000 80a0 	beq.w	800813a <__kernel_rem_pio2+0x3e2>
 8007ffa:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8008080 <__kernel_rem_pio2+0x328>
 8007ffe:	4650      	mov	r0, sl
 8008000:	f000 fb32 	bl	8008668 <scalbn>
 8008004:	4f23      	ldr	r7, [pc, #140]	; (8008094 <__kernel_rem_pio2+0x33c>)
 8008006:	ec55 4b10 	vmov	r4, r5, d0
 800800a:	46d8      	mov	r8, fp
 800800c:	2600      	movs	r6, #0
 800800e:	f1b8 0f00 	cmp.w	r8, #0
 8008012:	f280 80cf 	bge.w	80081b4 <__kernel_rem_pio2+0x45c>
 8008016:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8008078 <__kernel_rem_pio2+0x320>
 800801a:	465f      	mov	r7, fp
 800801c:	f04f 0800 	mov.w	r8, #0
 8008020:	2f00      	cmp	r7, #0
 8008022:	f2c0 80fd 	blt.w	8008220 <__kernel_rem_pio2+0x4c8>
 8008026:	ab70      	add	r3, sp, #448	; 0x1c0
 8008028:	f8df a074 	ldr.w	sl, [pc, #116]	; 80080a0 <__kernel_rem_pio2+0x348>
 800802c:	ec55 4b18 	vmov	r4, r5, d8
 8008030:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8008034:	2600      	movs	r6, #0
 8008036:	e0e5      	b.n	8008204 <__kernel_rem_pio2+0x4ac>
 8008038:	2302      	movs	r3, #2
 800803a:	9302      	str	r3, [sp, #8]
 800803c:	e75c      	b.n	8007ef8 <__kernel_rem_pio2+0x1a0>
 800803e:	f8db 3000 	ldr.w	r3, [fp]
 8008042:	b955      	cbnz	r5, 800805a <__kernel_rem_pio2+0x302>
 8008044:	b123      	cbz	r3, 8008050 <__kernel_rem_pio2+0x2f8>
 8008046:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800804a:	f8cb 3000 	str.w	r3, [fp]
 800804e:	2301      	movs	r3, #1
 8008050:	3201      	adds	r2, #1
 8008052:	f10b 0b04 	add.w	fp, fp, #4
 8008056:	461d      	mov	r5, r3
 8008058:	e755      	b.n	8007f06 <__kernel_rem_pio2+0x1ae>
 800805a:	1acb      	subs	r3, r1, r3
 800805c:	f8cb 3000 	str.w	r3, [fp]
 8008060:	462b      	mov	r3, r5
 8008062:	e7f5      	b.n	8008050 <__kernel_rem_pio2+0x2f8>
 8008064:	1e62      	subs	r2, r4, #1
 8008066:	ab0c      	add	r3, sp, #48	; 0x30
 8008068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800806c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008070:	a90c      	add	r1, sp, #48	; 0x30
 8008072:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008076:	e754      	b.n	8007f22 <__kernel_rem_pio2+0x1ca>
	...
 8008084:	3ff00000 	.word	0x3ff00000
 8008088:	080089a0 	.word	0x080089a0
 800808c:	40200000 	.word	0x40200000
 8008090:	3ff00000 	.word	0x3ff00000
 8008094:	3e700000 	.word	0x3e700000
 8008098:	41700000 	.word	0x41700000
 800809c:	3fe00000 	.word	0x3fe00000
 80080a0:	08008960 	.word	0x08008960
 80080a4:	1e62      	subs	r2, r4, #1
 80080a6:	ab0c      	add	r3, sp, #48	; 0x30
 80080a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ac:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80080b0:	e7de      	b.n	8008070 <__kernel_rem_pio2+0x318>
 80080b2:	a90c      	add	r1, sp, #48	; 0x30
 80080b4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80080b8:	3b01      	subs	r3, #1
 80080ba:	430a      	orrs	r2, r1
 80080bc:	e790      	b.n	8007fe0 <__kernel_rem_pio2+0x288>
 80080be:	3301      	adds	r3, #1
 80080c0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80080c4:	2900      	cmp	r1, #0
 80080c6:	d0fa      	beq.n	80080be <__kernel_rem_pio2+0x366>
 80080c8:	9a08      	ldr	r2, [sp, #32]
 80080ca:	18e3      	adds	r3, r4, r3
 80080cc:	18a6      	adds	r6, r4, r2
 80080ce:	aa20      	add	r2, sp, #128	; 0x80
 80080d0:	1c65      	adds	r5, r4, #1
 80080d2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80080d6:	9302      	str	r3, [sp, #8]
 80080d8:	9b02      	ldr	r3, [sp, #8]
 80080da:	42ab      	cmp	r3, r5
 80080dc:	da04      	bge.n	80080e8 <__kernel_rem_pio2+0x390>
 80080de:	461c      	mov	r4, r3
 80080e0:	e6b5      	b.n	8007e4e <__kernel_rem_pio2+0xf6>
 80080e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80080e4:	2301      	movs	r3, #1
 80080e6:	e7eb      	b.n	80080c0 <__kernel_rem_pio2+0x368>
 80080e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080ee:	f7f8 f9c1 	bl	8000474 <__aeabi_i2d>
 80080f2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80080f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080f8:	46b3      	mov	fp, r6
 80080fa:	461c      	mov	r4, r3
 80080fc:	2700      	movs	r7, #0
 80080fe:	f04f 0800 	mov.w	r8, #0
 8008102:	f04f 0900 	mov.w	r9, #0
 8008106:	9b06      	ldr	r3, [sp, #24]
 8008108:	429f      	cmp	r7, r3
 800810a:	dd06      	ble.n	800811a <__kernel_rem_pio2+0x3c2>
 800810c:	ab70      	add	r3, sp, #448	; 0x1c0
 800810e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008112:	e9c3 8900 	strd	r8, r9, [r3]
 8008116:	3501      	adds	r5, #1
 8008118:	e7de      	b.n	80080d8 <__kernel_rem_pio2+0x380>
 800811a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800811e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008122:	f7f8 fa11 	bl	8000548 <__aeabi_dmul>
 8008126:	4602      	mov	r2, r0
 8008128:	460b      	mov	r3, r1
 800812a:	4640      	mov	r0, r8
 800812c:	4649      	mov	r1, r9
 800812e:	f7f8 f855 	bl	80001dc <__adddf3>
 8008132:	3701      	adds	r7, #1
 8008134:	4680      	mov	r8, r0
 8008136:	4689      	mov	r9, r1
 8008138:	e7e5      	b.n	8008106 <__kernel_rem_pio2+0x3ae>
 800813a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800813e:	e754      	b.n	8007fea <__kernel_rem_pio2+0x292>
 8008140:	ec47 6b10 	vmov	d0, r6, r7
 8008144:	f1ca 0000 	rsb	r0, sl, #0
 8008148:	f000 fa8e 	bl	8008668 <scalbn>
 800814c:	ec57 6b10 	vmov	r6, r7, d0
 8008150:	4b9f      	ldr	r3, [pc, #636]	; (80083d0 <__kernel_rem_pio2+0x678>)
 8008152:	ee10 0a10 	vmov	r0, s0
 8008156:	2200      	movs	r2, #0
 8008158:	4639      	mov	r1, r7
 800815a:	f7f8 fc7b 	bl	8000a54 <__aeabi_dcmpge>
 800815e:	b300      	cbz	r0, 80081a2 <__kernel_rem_pio2+0x44a>
 8008160:	4b9c      	ldr	r3, [pc, #624]	; (80083d4 <__kernel_rem_pio2+0x67c>)
 8008162:	2200      	movs	r2, #0
 8008164:	4630      	mov	r0, r6
 8008166:	4639      	mov	r1, r7
 8008168:	f7f8 f9ee 	bl	8000548 <__aeabi_dmul>
 800816c:	f7f8 fc86 	bl	8000a7c <__aeabi_d2iz>
 8008170:	4605      	mov	r5, r0
 8008172:	f7f8 f97f 	bl	8000474 <__aeabi_i2d>
 8008176:	4b96      	ldr	r3, [pc, #600]	; (80083d0 <__kernel_rem_pio2+0x678>)
 8008178:	2200      	movs	r2, #0
 800817a:	f7f8 f9e5 	bl	8000548 <__aeabi_dmul>
 800817e:	460b      	mov	r3, r1
 8008180:	4602      	mov	r2, r0
 8008182:	4639      	mov	r1, r7
 8008184:	4630      	mov	r0, r6
 8008186:	f7f8 f827 	bl	80001d8 <__aeabi_dsub>
 800818a:	f7f8 fc77 	bl	8000a7c <__aeabi_d2iz>
 800818e:	f104 0b01 	add.w	fp, r4, #1
 8008192:	ab0c      	add	r3, sp, #48	; 0x30
 8008194:	f10a 0a18 	add.w	sl, sl, #24
 8008198:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800819c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 80081a0:	e72b      	b.n	8007ffa <__kernel_rem_pio2+0x2a2>
 80081a2:	4630      	mov	r0, r6
 80081a4:	4639      	mov	r1, r7
 80081a6:	f7f8 fc69 	bl	8000a7c <__aeabi_d2iz>
 80081aa:	ab0c      	add	r3, sp, #48	; 0x30
 80081ac:	46a3      	mov	fp, r4
 80081ae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80081b2:	e722      	b.n	8007ffa <__kernel_rem_pio2+0x2a2>
 80081b4:	ab70      	add	r3, sp, #448	; 0x1c0
 80081b6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 80081ba:	ab0c      	add	r3, sp, #48	; 0x30
 80081bc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80081c0:	f7f8 f958 	bl	8000474 <__aeabi_i2d>
 80081c4:	4622      	mov	r2, r4
 80081c6:	462b      	mov	r3, r5
 80081c8:	f7f8 f9be 	bl	8000548 <__aeabi_dmul>
 80081cc:	4632      	mov	r2, r6
 80081ce:	e9c9 0100 	strd	r0, r1, [r9]
 80081d2:	463b      	mov	r3, r7
 80081d4:	4620      	mov	r0, r4
 80081d6:	4629      	mov	r1, r5
 80081d8:	f7f8 f9b6 	bl	8000548 <__aeabi_dmul>
 80081dc:	f108 38ff 	add.w	r8, r8, #4294967295
 80081e0:	4604      	mov	r4, r0
 80081e2:	460d      	mov	r5, r1
 80081e4:	e713      	b.n	800800e <__kernel_rem_pio2+0x2b6>
 80081e6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80081ea:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80081ee:	f7f8 f9ab 	bl	8000548 <__aeabi_dmul>
 80081f2:	4602      	mov	r2, r0
 80081f4:	460b      	mov	r3, r1
 80081f6:	4620      	mov	r0, r4
 80081f8:	4629      	mov	r1, r5
 80081fa:	f7f7 ffef 	bl	80001dc <__adddf3>
 80081fe:	3601      	adds	r6, #1
 8008200:	4604      	mov	r4, r0
 8008202:	460d      	mov	r5, r1
 8008204:	9b04      	ldr	r3, [sp, #16]
 8008206:	429e      	cmp	r6, r3
 8008208:	dc01      	bgt.n	800820e <__kernel_rem_pio2+0x4b6>
 800820a:	45b0      	cmp	r8, r6
 800820c:	daeb      	bge.n	80081e6 <__kernel_rem_pio2+0x48e>
 800820e:	ab48      	add	r3, sp, #288	; 0x120
 8008210:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008214:	e9c3 4500 	strd	r4, r5, [r3]
 8008218:	3f01      	subs	r7, #1
 800821a:	f108 0801 	add.w	r8, r8, #1
 800821e:	e6ff      	b.n	8008020 <__kernel_rem_pio2+0x2c8>
 8008220:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008222:	2b02      	cmp	r3, #2
 8008224:	dc0b      	bgt.n	800823e <__kernel_rem_pio2+0x4e6>
 8008226:	2b00      	cmp	r3, #0
 8008228:	dc6e      	bgt.n	8008308 <__kernel_rem_pio2+0x5b0>
 800822a:	d045      	beq.n	80082b8 <__kernel_rem_pio2+0x560>
 800822c:	9b07      	ldr	r3, [sp, #28]
 800822e:	f003 0007 	and.w	r0, r3, #7
 8008232:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008236:	ecbd 8b02 	vpop	{d8}
 800823a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800823e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008240:	2b03      	cmp	r3, #3
 8008242:	d1f3      	bne.n	800822c <__kernel_rem_pio2+0x4d4>
 8008244:	ab48      	add	r3, sp, #288	; 0x120
 8008246:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800824a:	46d0      	mov	r8, sl
 800824c:	46d9      	mov	r9, fp
 800824e:	f1b9 0f00 	cmp.w	r9, #0
 8008252:	f1a8 0808 	sub.w	r8, r8, #8
 8008256:	dc64      	bgt.n	8008322 <__kernel_rem_pio2+0x5ca>
 8008258:	465c      	mov	r4, fp
 800825a:	2c01      	cmp	r4, #1
 800825c:	f1aa 0a08 	sub.w	sl, sl, #8
 8008260:	dc7e      	bgt.n	8008360 <__kernel_rem_pio2+0x608>
 8008262:	2000      	movs	r0, #0
 8008264:	2100      	movs	r1, #0
 8008266:	f1bb 0f01 	cmp.w	fp, #1
 800826a:	f300 8097 	bgt.w	800839c <__kernel_rem_pio2+0x644>
 800826e:	9b02      	ldr	r3, [sp, #8]
 8008270:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8008274:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8008278:	2b00      	cmp	r3, #0
 800827a:	f040 8099 	bne.w	80083b0 <__kernel_rem_pio2+0x658>
 800827e:	9b01      	ldr	r3, [sp, #4]
 8008280:	e9c3 5600 	strd	r5, r6, [r3]
 8008284:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8008288:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800828c:	e7ce      	b.n	800822c <__kernel_rem_pio2+0x4d4>
 800828e:	ab48      	add	r3, sp, #288	; 0x120
 8008290:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008298:	f7f7 ffa0 	bl	80001dc <__adddf3>
 800829c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80082a0:	f1bb 0f00 	cmp.w	fp, #0
 80082a4:	daf3      	bge.n	800828e <__kernel_rem_pio2+0x536>
 80082a6:	9b02      	ldr	r3, [sp, #8]
 80082a8:	b113      	cbz	r3, 80082b0 <__kernel_rem_pio2+0x558>
 80082aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082ae:	4619      	mov	r1, r3
 80082b0:	9b01      	ldr	r3, [sp, #4]
 80082b2:	e9c3 0100 	strd	r0, r1, [r3]
 80082b6:	e7b9      	b.n	800822c <__kernel_rem_pio2+0x4d4>
 80082b8:	2000      	movs	r0, #0
 80082ba:	2100      	movs	r1, #0
 80082bc:	e7f0      	b.n	80082a0 <__kernel_rem_pio2+0x548>
 80082be:	ab48      	add	r3, sp, #288	; 0x120
 80082c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80082c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c8:	f7f7 ff88 	bl	80001dc <__adddf3>
 80082cc:	3c01      	subs	r4, #1
 80082ce:	2c00      	cmp	r4, #0
 80082d0:	daf5      	bge.n	80082be <__kernel_rem_pio2+0x566>
 80082d2:	9b02      	ldr	r3, [sp, #8]
 80082d4:	b1e3      	cbz	r3, 8008310 <__kernel_rem_pio2+0x5b8>
 80082d6:	4602      	mov	r2, r0
 80082d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082dc:	9c01      	ldr	r4, [sp, #4]
 80082de:	e9c4 2300 	strd	r2, r3, [r4]
 80082e2:	4602      	mov	r2, r0
 80082e4:	460b      	mov	r3, r1
 80082e6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80082ea:	f7f7 ff75 	bl	80001d8 <__aeabi_dsub>
 80082ee:	ad4a      	add	r5, sp, #296	; 0x128
 80082f0:	2401      	movs	r4, #1
 80082f2:	45a3      	cmp	fp, r4
 80082f4:	da0f      	bge.n	8008316 <__kernel_rem_pio2+0x5be>
 80082f6:	9b02      	ldr	r3, [sp, #8]
 80082f8:	b113      	cbz	r3, 8008300 <__kernel_rem_pio2+0x5a8>
 80082fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082fe:	4619      	mov	r1, r3
 8008300:	9b01      	ldr	r3, [sp, #4]
 8008302:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008306:	e791      	b.n	800822c <__kernel_rem_pio2+0x4d4>
 8008308:	465c      	mov	r4, fp
 800830a:	2000      	movs	r0, #0
 800830c:	2100      	movs	r1, #0
 800830e:	e7de      	b.n	80082ce <__kernel_rem_pio2+0x576>
 8008310:	4602      	mov	r2, r0
 8008312:	460b      	mov	r3, r1
 8008314:	e7e2      	b.n	80082dc <__kernel_rem_pio2+0x584>
 8008316:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800831a:	f7f7 ff5f 	bl	80001dc <__adddf3>
 800831e:	3401      	adds	r4, #1
 8008320:	e7e7      	b.n	80082f2 <__kernel_rem_pio2+0x59a>
 8008322:	e9d8 4500 	ldrd	r4, r5, [r8]
 8008326:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800832a:	4620      	mov	r0, r4
 800832c:	4632      	mov	r2, r6
 800832e:	463b      	mov	r3, r7
 8008330:	4629      	mov	r1, r5
 8008332:	f7f7 ff53 	bl	80001dc <__adddf3>
 8008336:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800833a:	4602      	mov	r2, r0
 800833c:	460b      	mov	r3, r1
 800833e:	4620      	mov	r0, r4
 8008340:	4629      	mov	r1, r5
 8008342:	f7f7 ff49 	bl	80001d8 <__aeabi_dsub>
 8008346:	4632      	mov	r2, r6
 8008348:	463b      	mov	r3, r7
 800834a:	f7f7 ff47 	bl	80001dc <__adddf3>
 800834e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008352:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8008356:	ed88 7b00 	vstr	d7, [r8]
 800835a:	f109 39ff 	add.w	r9, r9, #4294967295
 800835e:	e776      	b.n	800824e <__kernel_rem_pio2+0x4f6>
 8008360:	e9da 8900 	ldrd	r8, r9, [sl]
 8008364:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008368:	4640      	mov	r0, r8
 800836a:	4632      	mov	r2, r6
 800836c:	463b      	mov	r3, r7
 800836e:	4649      	mov	r1, r9
 8008370:	f7f7 ff34 	bl	80001dc <__adddf3>
 8008374:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008378:	4602      	mov	r2, r0
 800837a:	460b      	mov	r3, r1
 800837c:	4640      	mov	r0, r8
 800837e:	4649      	mov	r1, r9
 8008380:	f7f7 ff2a 	bl	80001d8 <__aeabi_dsub>
 8008384:	4632      	mov	r2, r6
 8008386:	463b      	mov	r3, r7
 8008388:	f7f7 ff28 	bl	80001dc <__adddf3>
 800838c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008390:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008394:	ed8a 7b00 	vstr	d7, [sl]
 8008398:	3c01      	subs	r4, #1
 800839a:	e75e      	b.n	800825a <__kernel_rem_pio2+0x502>
 800839c:	ab48      	add	r3, sp, #288	; 0x120
 800839e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80083a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a6:	f7f7 ff19 	bl	80001dc <__adddf3>
 80083aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80083ae:	e75a      	b.n	8008266 <__kernel_rem_pio2+0x50e>
 80083b0:	9b01      	ldr	r3, [sp, #4]
 80083b2:	9a01      	ldr	r2, [sp, #4]
 80083b4:	601d      	str	r5, [r3, #0]
 80083b6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80083ba:	605c      	str	r4, [r3, #4]
 80083bc:	609f      	str	r7, [r3, #8]
 80083be:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80083c2:	60d3      	str	r3, [r2, #12]
 80083c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083c8:	6110      	str	r0, [r2, #16]
 80083ca:	6153      	str	r3, [r2, #20]
 80083cc:	e72e      	b.n	800822c <__kernel_rem_pio2+0x4d4>
 80083ce:	bf00      	nop
 80083d0:	41700000 	.word	0x41700000
 80083d4:	3e700000 	.word	0x3e700000

080083d8 <__kernel_sin>:
 80083d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083dc:	ed2d 8b04 	vpush	{d8-d9}
 80083e0:	eeb0 8a41 	vmov.f32	s16, s2
 80083e4:	eef0 8a61 	vmov.f32	s17, s3
 80083e8:	ec55 4b10 	vmov	r4, r5, d0
 80083ec:	b083      	sub	sp, #12
 80083ee:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80083f2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80083f6:	9001      	str	r0, [sp, #4]
 80083f8:	da06      	bge.n	8008408 <__kernel_sin+0x30>
 80083fa:	ee10 0a10 	vmov	r0, s0
 80083fe:	4629      	mov	r1, r5
 8008400:	f7f8 fb3c 	bl	8000a7c <__aeabi_d2iz>
 8008404:	2800      	cmp	r0, #0
 8008406:	d051      	beq.n	80084ac <__kernel_sin+0xd4>
 8008408:	4622      	mov	r2, r4
 800840a:	462b      	mov	r3, r5
 800840c:	4620      	mov	r0, r4
 800840e:	4629      	mov	r1, r5
 8008410:	f7f8 f89a 	bl	8000548 <__aeabi_dmul>
 8008414:	4682      	mov	sl, r0
 8008416:	468b      	mov	fp, r1
 8008418:	4602      	mov	r2, r0
 800841a:	460b      	mov	r3, r1
 800841c:	4620      	mov	r0, r4
 800841e:	4629      	mov	r1, r5
 8008420:	f7f8 f892 	bl	8000548 <__aeabi_dmul>
 8008424:	a341      	add	r3, pc, #260	; (adr r3, 800852c <__kernel_sin+0x154>)
 8008426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842a:	4680      	mov	r8, r0
 800842c:	4689      	mov	r9, r1
 800842e:	4650      	mov	r0, sl
 8008430:	4659      	mov	r1, fp
 8008432:	f7f8 f889 	bl	8000548 <__aeabi_dmul>
 8008436:	a33f      	add	r3, pc, #252	; (adr r3, 8008534 <__kernel_sin+0x15c>)
 8008438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843c:	f7f7 fecc 	bl	80001d8 <__aeabi_dsub>
 8008440:	4652      	mov	r2, sl
 8008442:	465b      	mov	r3, fp
 8008444:	f7f8 f880 	bl	8000548 <__aeabi_dmul>
 8008448:	a33c      	add	r3, pc, #240	; (adr r3, 800853c <__kernel_sin+0x164>)
 800844a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844e:	f7f7 fec5 	bl	80001dc <__adddf3>
 8008452:	4652      	mov	r2, sl
 8008454:	465b      	mov	r3, fp
 8008456:	f7f8 f877 	bl	8000548 <__aeabi_dmul>
 800845a:	a33a      	add	r3, pc, #232	; (adr r3, 8008544 <__kernel_sin+0x16c>)
 800845c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008460:	f7f7 feba 	bl	80001d8 <__aeabi_dsub>
 8008464:	4652      	mov	r2, sl
 8008466:	465b      	mov	r3, fp
 8008468:	f7f8 f86e 	bl	8000548 <__aeabi_dmul>
 800846c:	a337      	add	r3, pc, #220	; (adr r3, 800854c <__kernel_sin+0x174>)
 800846e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008472:	f7f7 feb3 	bl	80001dc <__adddf3>
 8008476:	9b01      	ldr	r3, [sp, #4]
 8008478:	4606      	mov	r6, r0
 800847a:	460f      	mov	r7, r1
 800847c:	b9eb      	cbnz	r3, 80084ba <__kernel_sin+0xe2>
 800847e:	4602      	mov	r2, r0
 8008480:	460b      	mov	r3, r1
 8008482:	4650      	mov	r0, sl
 8008484:	4659      	mov	r1, fp
 8008486:	f7f8 f85f 	bl	8000548 <__aeabi_dmul>
 800848a:	a325      	add	r3, pc, #148	; (adr r3, 8008520 <__kernel_sin+0x148>)
 800848c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008490:	f7f7 fea2 	bl	80001d8 <__aeabi_dsub>
 8008494:	4642      	mov	r2, r8
 8008496:	464b      	mov	r3, r9
 8008498:	f7f8 f856 	bl	8000548 <__aeabi_dmul>
 800849c:	4602      	mov	r2, r0
 800849e:	460b      	mov	r3, r1
 80084a0:	4620      	mov	r0, r4
 80084a2:	4629      	mov	r1, r5
 80084a4:	f7f7 fe9a 	bl	80001dc <__adddf3>
 80084a8:	4604      	mov	r4, r0
 80084aa:	460d      	mov	r5, r1
 80084ac:	ec45 4b10 	vmov	d0, r4, r5
 80084b0:	b003      	add	sp, #12
 80084b2:	ecbd 8b04 	vpop	{d8-d9}
 80084b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ba:	4b1b      	ldr	r3, [pc, #108]	; (8008528 <__kernel_sin+0x150>)
 80084bc:	ec51 0b18 	vmov	r0, r1, d8
 80084c0:	2200      	movs	r2, #0
 80084c2:	f7f8 f841 	bl	8000548 <__aeabi_dmul>
 80084c6:	4632      	mov	r2, r6
 80084c8:	ec41 0b19 	vmov	d9, r0, r1
 80084cc:	463b      	mov	r3, r7
 80084ce:	4640      	mov	r0, r8
 80084d0:	4649      	mov	r1, r9
 80084d2:	f7f8 f839 	bl	8000548 <__aeabi_dmul>
 80084d6:	4602      	mov	r2, r0
 80084d8:	460b      	mov	r3, r1
 80084da:	ec51 0b19 	vmov	r0, r1, d9
 80084de:	f7f7 fe7b 	bl	80001d8 <__aeabi_dsub>
 80084e2:	4652      	mov	r2, sl
 80084e4:	465b      	mov	r3, fp
 80084e6:	f7f8 f82f 	bl	8000548 <__aeabi_dmul>
 80084ea:	ec53 2b18 	vmov	r2, r3, d8
 80084ee:	f7f7 fe73 	bl	80001d8 <__aeabi_dsub>
 80084f2:	a30b      	add	r3, pc, #44	; (adr r3, 8008520 <__kernel_sin+0x148>)
 80084f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f8:	4606      	mov	r6, r0
 80084fa:	460f      	mov	r7, r1
 80084fc:	4640      	mov	r0, r8
 80084fe:	4649      	mov	r1, r9
 8008500:	f7f8 f822 	bl	8000548 <__aeabi_dmul>
 8008504:	4602      	mov	r2, r0
 8008506:	460b      	mov	r3, r1
 8008508:	4630      	mov	r0, r6
 800850a:	4639      	mov	r1, r7
 800850c:	f7f7 fe66 	bl	80001dc <__adddf3>
 8008510:	4602      	mov	r2, r0
 8008512:	460b      	mov	r3, r1
 8008514:	4620      	mov	r0, r4
 8008516:	4629      	mov	r1, r5
 8008518:	f7f7 fe5e 	bl	80001d8 <__aeabi_dsub>
 800851c:	e7c4      	b.n	80084a8 <__kernel_sin+0xd0>
 800851e:	bf00      	nop
 8008520:	55555549 	.word	0x55555549
 8008524:	3fc55555 	.word	0x3fc55555
 8008528:	3fe00000 	.word	0x3fe00000
 800852c:	5acfd57c 	.word	0x5acfd57c
 8008530:	3de5d93a 	.word	0x3de5d93a
 8008534:	8a2b9ceb 	.word	0x8a2b9ceb
 8008538:	3e5ae5e6 	.word	0x3e5ae5e6
 800853c:	57b1fe7d 	.word	0x57b1fe7d
 8008540:	3ec71de3 	.word	0x3ec71de3
 8008544:	19c161d5 	.word	0x19c161d5
 8008548:	3f2a01a0 	.word	0x3f2a01a0
 800854c:	1110f8a6 	.word	0x1110f8a6
 8008550:	3f811111 	.word	0x3f811111

08008554 <fabs>:
 8008554:	ec51 0b10 	vmov	r0, r1, d0
 8008558:	ee10 2a10 	vmov	r2, s0
 800855c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008560:	ec43 2b10 	vmov	d0, r2, r3
 8008564:	4770      	bx	lr
	...

08008568 <floor>:
 8008568:	ec51 0b10 	vmov	r0, r1, d0
 800856c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008570:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008574:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008578:	2e13      	cmp	r6, #19
 800857a:	ee10 5a10 	vmov	r5, s0
 800857e:	ee10 8a10 	vmov	r8, s0
 8008582:	460c      	mov	r4, r1
 8008584:	dc32      	bgt.n	80085ec <floor+0x84>
 8008586:	2e00      	cmp	r6, #0
 8008588:	da14      	bge.n	80085b4 <floor+0x4c>
 800858a:	a333      	add	r3, pc, #204	; (adr r3, 8008658 <floor+0xf0>)
 800858c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008590:	f7f7 fe24 	bl	80001dc <__adddf3>
 8008594:	2200      	movs	r2, #0
 8008596:	2300      	movs	r3, #0
 8008598:	f7f8 fa66 	bl	8000a68 <__aeabi_dcmpgt>
 800859c:	b138      	cbz	r0, 80085ae <floor+0x46>
 800859e:	2c00      	cmp	r4, #0
 80085a0:	da57      	bge.n	8008652 <floor+0xea>
 80085a2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80085a6:	431d      	orrs	r5, r3
 80085a8:	d001      	beq.n	80085ae <floor+0x46>
 80085aa:	4c2d      	ldr	r4, [pc, #180]	; (8008660 <floor+0xf8>)
 80085ac:	2500      	movs	r5, #0
 80085ae:	4621      	mov	r1, r4
 80085b0:	4628      	mov	r0, r5
 80085b2:	e025      	b.n	8008600 <floor+0x98>
 80085b4:	4f2b      	ldr	r7, [pc, #172]	; (8008664 <floor+0xfc>)
 80085b6:	4137      	asrs	r7, r6
 80085b8:	ea01 0307 	and.w	r3, r1, r7
 80085bc:	4303      	orrs	r3, r0
 80085be:	d01f      	beq.n	8008600 <floor+0x98>
 80085c0:	a325      	add	r3, pc, #148	; (adr r3, 8008658 <floor+0xf0>)
 80085c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c6:	f7f7 fe09 	bl	80001dc <__adddf3>
 80085ca:	2200      	movs	r2, #0
 80085cc:	2300      	movs	r3, #0
 80085ce:	f7f8 fa4b 	bl	8000a68 <__aeabi_dcmpgt>
 80085d2:	2800      	cmp	r0, #0
 80085d4:	d0eb      	beq.n	80085ae <floor+0x46>
 80085d6:	2c00      	cmp	r4, #0
 80085d8:	bfbe      	ittt	lt
 80085da:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80085de:	fa43 f606 	asrlt.w	r6, r3, r6
 80085e2:	19a4      	addlt	r4, r4, r6
 80085e4:	ea24 0407 	bic.w	r4, r4, r7
 80085e8:	2500      	movs	r5, #0
 80085ea:	e7e0      	b.n	80085ae <floor+0x46>
 80085ec:	2e33      	cmp	r6, #51	; 0x33
 80085ee:	dd0b      	ble.n	8008608 <floor+0xa0>
 80085f0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80085f4:	d104      	bne.n	8008600 <floor+0x98>
 80085f6:	ee10 2a10 	vmov	r2, s0
 80085fa:	460b      	mov	r3, r1
 80085fc:	f7f7 fdee 	bl	80001dc <__adddf3>
 8008600:	ec41 0b10 	vmov	d0, r0, r1
 8008604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008608:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800860c:	f04f 33ff 	mov.w	r3, #4294967295
 8008610:	fa23 f707 	lsr.w	r7, r3, r7
 8008614:	4207      	tst	r7, r0
 8008616:	d0f3      	beq.n	8008600 <floor+0x98>
 8008618:	a30f      	add	r3, pc, #60	; (adr r3, 8008658 <floor+0xf0>)
 800861a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861e:	f7f7 fddd 	bl	80001dc <__adddf3>
 8008622:	2200      	movs	r2, #0
 8008624:	2300      	movs	r3, #0
 8008626:	f7f8 fa1f 	bl	8000a68 <__aeabi_dcmpgt>
 800862a:	2800      	cmp	r0, #0
 800862c:	d0bf      	beq.n	80085ae <floor+0x46>
 800862e:	2c00      	cmp	r4, #0
 8008630:	da02      	bge.n	8008638 <floor+0xd0>
 8008632:	2e14      	cmp	r6, #20
 8008634:	d103      	bne.n	800863e <floor+0xd6>
 8008636:	3401      	adds	r4, #1
 8008638:	ea25 0507 	bic.w	r5, r5, r7
 800863c:	e7b7      	b.n	80085ae <floor+0x46>
 800863e:	2301      	movs	r3, #1
 8008640:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008644:	fa03 f606 	lsl.w	r6, r3, r6
 8008648:	4435      	add	r5, r6
 800864a:	4545      	cmp	r5, r8
 800864c:	bf38      	it	cc
 800864e:	18e4      	addcc	r4, r4, r3
 8008650:	e7f2      	b.n	8008638 <floor+0xd0>
 8008652:	2500      	movs	r5, #0
 8008654:	462c      	mov	r4, r5
 8008656:	e7aa      	b.n	80085ae <floor+0x46>
 8008658:	8800759c 	.word	0x8800759c
 800865c:	7e37e43c 	.word	0x7e37e43c
 8008660:	bff00000 	.word	0xbff00000
 8008664:	000fffff 	.word	0x000fffff

08008668 <scalbn>:
 8008668:	b570      	push	{r4, r5, r6, lr}
 800866a:	ec55 4b10 	vmov	r4, r5, d0
 800866e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008672:	4606      	mov	r6, r0
 8008674:	462b      	mov	r3, r5
 8008676:	b99a      	cbnz	r2, 80086a0 <scalbn+0x38>
 8008678:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800867c:	4323      	orrs	r3, r4
 800867e:	d036      	beq.n	80086ee <scalbn+0x86>
 8008680:	4b39      	ldr	r3, [pc, #228]	; (8008768 <scalbn+0x100>)
 8008682:	4629      	mov	r1, r5
 8008684:	ee10 0a10 	vmov	r0, s0
 8008688:	2200      	movs	r2, #0
 800868a:	f7f7 ff5d 	bl	8000548 <__aeabi_dmul>
 800868e:	4b37      	ldr	r3, [pc, #220]	; (800876c <scalbn+0x104>)
 8008690:	429e      	cmp	r6, r3
 8008692:	4604      	mov	r4, r0
 8008694:	460d      	mov	r5, r1
 8008696:	da10      	bge.n	80086ba <scalbn+0x52>
 8008698:	a32b      	add	r3, pc, #172	; (adr r3, 8008748 <scalbn+0xe0>)
 800869a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869e:	e03a      	b.n	8008716 <scalbn+0xae>
 80086a0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80086a4:	428a      	cmp	r2, r1
 80086a6:	d10c      	bne.n	80086c2 <scalbn+0x5a>
 80086a8:	ee10 2a10 	vmov	r2, s0
 80086ac:	4620      	mov	r0, r4
 80086ae:	4629      	mov	r1, r5
 80086b0:	f7f7 fd94 	bl	80001dc <__adddf3>
 80086b4:	4604      	mov	r4, r0
 80086b6:	460d      	mov	r5, r1
 80086b8:	e019      	b.n	80086ee <scalbn+0x86>
 80086ba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80086be:	460b      	mov	r3, r1
 80086c0:	3a36      	subs	r2, #54	; 0x36
 80086c2:	4432      	add	r2, r6
 80086c4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80086c8:	428a      	cmp	r2, r1
 80086ca:	dd08      	ble.n	80086de <scalbn+0x76>
 80086cc:	2d00      	cmp	r5, #0
 80086ce:	a120      	add	r1, pc, #128	; (adr r1, 8008750 <scalbn+0xe8>)
 80086d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086d4:	da1c      	bge.n	8008710 <scalbn+0xa8>
 80086d6:	a120      	add	r1, pc, #128	; (adr r1, 8008758 <scalbn+0xf0>)
 80086d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086dc:	e018      	b.n	8008710 <scalbn+0xa8>
 80086de:	2a00      	cmp	r2, #0
 80086e0:	dd08      	ble.n	80086f4 <scalbn+0x8c>
 80086e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80086e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80086ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80086ee:	ec45 4b10 	vmov	d0, r4, r5
 80086f2:	bd70      	pop	{r4, r5, r6, pc}
 80086f4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80086f8:	da19      	bge.n	800872e <scalbn+0xc6>
 80086fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80086fe:	429e      	cmp	r6, r3
 8008700:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008704:	dd0a      	ble.n	800871c <scalbn+0xb4>
 8008706:	a112      	add	r1, pc, #72	; (adr r1, 8008750 <scalbn+0xe8>)
 8008708:	e9d1 0100 	ldrd	r0, r1, [r1]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d1e2      	bne.n	80086d6 <scalbn+0x6e>
 8008710:	a30f      	add	r3, pc, #60	; (adr r3, 8008750 <scalbn+0xe8>)
 8008712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008716:	f7f7 ff17 	bl	8000548 <__aeabi_dmul>
 800871a:	e7cb      	b.n	80086b4 <scalbn+0x4c>
 800871c:	a10a      	add	r1, pc, #40	; (adr r1, 8008748 <scalbn+0xe0>)
 800871e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d0b8      	beq.n	8008698 <scalbn+0x30>
 8008726:	a10e      	add	r1, pc, #56	; (adr r1, 8008760 <scalbn+0xf8>)
 8008728:	e9d1 0100 	ldrd	r0, r1, [r1]
 800872c:	e7b4      	b.n	8008698 <scalbn+0x30>
 800872e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008732:	3236      	adds	r2, #54	; 0x36
 8008734:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008738:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800873c:	4620      	mov	r0, r4
 800873e:	4b0c      	ldr	r3, [pc, #48]	; (8008770 <scalbn+0x108>)
 8008740:	2200      	movs	r2, #0
 8008742:	e7e8      	b.n	8008716 <scalbn+0xae>
 8008744:	f3af 8000 	nop.w
 8008748:	c2f8f359 	.word	0xc2f8f359
 800874c:	01a56e1f 	.word	0x01a56e1f
 8008750:	8800759c 	.word	0x8800759c
 8008754:	7e37e43c 	.word	0x7e37e43c
 8008758:	8800759c 	.word	0x8800759c
 800875c:	fe37e43c 	.word	0xfe37e43c
 8008760:	c2f8f359 	.word	0xc2f8f359
 8008764:	81a56e1f 	.word	0x81a56e1f
 8008768:	43500000 	.word	0x43500000
 800876c:	ffff3cb0 	.word	0xffff3cb0
 8008770:	3c900000 	.word	0x3c900000

08008774 <_init>:
 8008774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008776:	bf00      	nop
 8008778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800877a:	bc08      	pop	{r3}
 800877c:	469e      	mov	lr, r3
 800877e:	4770      	bx	lr

08008780 <_fini>:
 8008780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008782:	bf00      	nop
 8008784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008786:	bc08      	pop	{r3}
 8008788:	469e      	mov	lr, r3
 800878a:	4770      	bx	lr
